public void solveQuest(final long questId, final QuestGroup group, final Bundle
		{
			if (group == QuestGroup.OSM)
			{
				OsmQuest q = osmQuestDB.get(questId);
				Element e = osmElementDB.get(q.getElementType(), q.getElementId());
				StringMapChangesBuilder changesBuilder = new StringMapChangesBuilder(e.getTags());
				q.getOsmElementQuestType().applyAnswerTo(answer, changesBuilder);
				StringMapChanges changes = changesBuilder.create();
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import org.openobservatory.ooniprobe.R;

public class NetworkMeasurement {
    public final String testName;
    public boolean entry = false;
    public final long test_id;
    public int progress = 0;

    public final String json_file;
    public final String log_file;
    public Boolean running;
    public Boolean viewed;
    public int anomaly;

    public NetworkMeasurement(String name){
        this.testName = name;
        this.test_id = System.currentTimeMillis();
        this.log_file = "/test-"+ test_id +".log";
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void init() {
    }

    public void destroy() {
        notification.hide();
        session.release();

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (resultCode == RESULT_OK && data.getBooleanExtra(CLOSE_REQUEST, false)){
            finish();
        }
    }

import android.app.Activity;
import android.app.ProgressDialog;
import android.content.ContentValues;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Color;
import android.graphics.Typeface;
import android.graphics.drawable.BitmapDrawable;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
public class Open311ProblemFragment extends BaseReportFragment implements
        ServiceDescriptionTask.Callback, ServiceRequestTask.Callback {

    private ImageView mIssueImage;

    private Open311 mOpen311;


    private static final String ATTRIBUTES = ".attributes";

    private static final String IMAGE = ".image";

    private static final String IMAGE_URI = ".imageUri";

    private static final String TRIP_INFO = ".tripInfo";

    private static final String SHOW_PROGRESS_DIALOG = ".showProgressDialog";
public void onSaveInstanceState(Bundle outState) {
            outState.putParcelableArrayList(ATTRIBUTES, (ArrayList<? extends Parcelable>) attributeValues);
        }

        if (mCapturedImageURI != null) {
            Bitmap bitmap = ((BitmapDrawable) mIssueImage.getDrawable()).getBitmap();
            outState.putParcelable(IMAGE, bitmap);
            outState.putParcelable(IMAGE_URI, mCapturedImageURI);
        }

        if (mArrivalInfo != null) {
public void onViewStateRestored(@Nullable Bundle savedInstanceState) {
        super.onViewStateRestored(savedInstanceState);
        if (savedInstanceState != null) {
            mCapturedImageURI = savedInstanceState.getParcelable(IMAGE_URI);

            mArrivalInfo = (ObaArrivalInfo) savedInstanceState.getSerializable(TRIP_INFO);
            mAgencyName = savedInstanceState.getString(AGENCY_NAME);
public void onAttach(Context context) {
     * Initialize UI components
     */
    private void setupViews(Bundle bundle) {
        mIssueImage = (ImageView) findViewById(R.id.ri_imageView);
        if (bundle != null && bundle.getParcelable(IMAGE) != null) {
            mIssueImage.setImageBitmap((Bitmap) bundle.getParcelable(IMAGE));
        }

        mInfoLayout = (LinearLayout) findViewById(R.id.ri_info_layout);
public void onActivityResult(int requestCode, int resultCode, Intent data) {

        if (requestCode == ReportConstants.GALLERY_INTENT && resultCode == Activity.RESULT_OK &&
                data != null) {
            mCapturedImageURI = data.getData();
            String[] filePathColumn = {MediaStore.Images.Media.DATA};
            Cursor cursor = getActivity().getContentResolver().query(mCapturedImageURI,
                    filePathColumn, null, null, null);
            if (cursor == null) return;
            cursor.moveToFirst();
            int columnIndex = cursor.getColumnIndex(filePathColumn[0]);
            String picturePath = cursor.getString(columnIndex);
            cursor.close();
            mIssueImage.setImageBitmap(BitmapFactory.decodeFile(picturePath));
        } else if (requestCode == ReportConstants.CAPTURE_PICTURE_INTENT &&
                resultCode == Activity.RESULT_OK && data != null) {
            Bundle extras = data.getExtras();
            Bitmap imageBitmap = (Bitmap) extras.get("data");
            mIssueImage.setImageBitmap(imageBitmap);
        }
    }

private void submitReport() {
                setPhone(open311User.getPhone()).setAddress_string(getCurrentAddress()).
                setDevice_id(tm.getDeviceId());

        if (mCapturedImageURI != null) {
            try {
                builder.setMedia(createImageFile());
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        ServiceRequest serviceRequest = builder.createServiceRequest();
private void submitReport() {
                serviceRequest.setDescription(description);
            }

            //Start progress
            showProgressDialog(true);

            mRequestTask = new ServiceRequestTask(mOpen311, serviceRequest, this);
private void submitReport() {
    }

    /**
     * Generates stop and trip problem parameters for given open311 service
     *
     * @param service open311 service
private String getTransitIssueParameters(Service service) {
    }

    /**
     * Creates a byte array which contains the image data
     *
     * @return image in bytes
     */
    private File createImageFile() throws IOException {
        //Convert bitmap to file
        Bitmap bitmap = ((BitmapDrawable) mIssueImage.getDrawable()).getBitmap();
        File filesDir = getActivity().getFilesDir();
        File imageFile = new File(filesDir, "upload.jpg");

        OutputStream os;
        os = new FileOutputStream(imageFile);
        bitmap.compress(Bitmap.CompressFormat.JPEG, 100, os);
        os.flush();
        os.close();
        return imageFile;
    }

    private void openCamera() {
        String fileName = "temp.jpg";
        ContentValues values = new ContentValues();
        values.put(MediaStore.Images.Media.TITLE, fileName);
        mCapturedImageURI = getActivity().getContentResolver().insert(
                MediaStore.Images.Media.EXTERNAL_CONTENT_URI, values);
        Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
        startActivityForResult(intent, ReportConstants.CAPTURE_PICTURE_INTENT);
    }

    private void openGallery() {
import android.content.res.Resources;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.Color;
import android.graphics.Rect;
import android.location.Location;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.Parcelable;
import android.os.SystemClock;
import android.provider.Settings;
import android.widget.TextView;
import android.widget.Toast;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
public static Location getMapCenter(Bundle b) {
        }
        return center;
    }
}
    <string name="ri_button_gallery">Gallery</string>
    <string name="ri_address_not_found">Address not found. Please check your address.</string>
    <string name="ri_service_description_problem">Service description could not be found.</string>
    <string name="ri_service_default">Choose a Problem</string>
    <string name="ri_service_stop">Stop Problem</string>
    <string name="ri_service_trip">Arrival Time Problem</string>
    <string name="ri_user_phone_hint">Phone number</string>
    <string name="ri_no_trip">No arrival times, please check back later.</string>
    <string name="ri_anonymous_checkbox">Keep it anonymous</string>
    <string name="ri_submitting_message">Submitting your report</string>
    <string name="ri_unsuccessful_submit">An error occurred during submission, please try again later.</string>

    <!-- report issue types screen-->
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
private Bundle processIntent(Bundle savedInstanceState) {
            mLostFocus = savedInstanceState.getBoolean("lostFocus");

            Uri uri = savedInstanceState.getParcelable(Uri.class.getName());
            intent = new Intent(ACTION_VIEW_USERID, uri);
        }
        else {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void setStopped() {

        @RequiresApi(api = Build.VERSION_CODES.N)
        public void setGnssStatus(GnssStatus status) {
            int length = status.getSatelliteCount();

            if (mPrns == null) {
                mSnrs = new float[length];
                mElevs = new float[length];
                mAzims = new float[length];
                mPrns = new int[length];
                mConstellationType = new int[length];
            }

            mSvCount = 0;
            while (mSvCount < length) {
                mSnrs[mSvCount] = 0.0f;  // This is replaced later by GnssMeasurement.getSnrInDb()
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
package medic.gateway.alert;

import android.os.Bundle;
import android.util.SparseArray;
import android.view.View;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.ListView;

import android.support.v4.app.FragmentActivity;

import static medic.gateway.alert.GatewayLog.*;
import static medic.gateway.alert.Utils.*;
import static medic.gateway.alert.WoMessage.Status.*;

public class WoListActivity extends FragmentActivity {
	private SparseArray<String> checklist;

	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.message_list_wo);

		((Button) findViewById(R.id.btnRefreshWoMessageList))
				.setOnClickListener(new View.OnClickListener() {
			public void onClick(View v) { refreshList(); }
public void onCreate(Bundle savedInstanceState) {
			public void onClick(View v) { retrySelected(); }
		});

		((Button) findViewById(R.id.btnSelectNewer))
				.setOnClickListener(new View.OnClickListener() {
			public void onClick(View v) { selectNewer(); }
		});

		refreshList();
	}

	void updateChecked(String id, int position, boolean isChecked) {
		if(isChecked) checklist.put(position, id);
		else checklist.delete(position);

		findViewById(R.id.btnRetrySelected).setEnabled(checklist.size() > 0);
		findViewById(R.id.btnSelectNewer).setEnabled(checklist.size() > 0);
	}

	private void refreshList() {
		checklist = new SparseArray<String>();

		getSupportLoaderManager().restartLoader(WoListFragment.LOADER_ID, null, getFragment());

		findViewById(R.id.btnRetrySelected).setEnabled(false);
		findViewById(R.id.btnSelectNewer).setEnabled(false);
	}

	private void retrySelected() {
		for(int i=checklist.size()-1; i>=0; --i) {
			getFragment().retry(checklist.valueAt(i), checklist.keyAt(i));
		}
	}

	private void selectNewer() {
		int lastSelectedIndex = checklist.keyAt(checklist.size() - 1);
		for(int i=lastSelectedIndex-1; i>=0; --i) {
			((CheckBox) getList().getChildAt(i).findViewById(R.id.cbxMessage)).setChecked(true);
		}
	}

	private WoListFragment getFragment() {
		return (WoListFragment) getSupportFragmentManager()
				.findFragmentById(R.id.lstWoMessages);
	}

	private ListView getList() {
		return getFragment().getListView();
	}
}
package medic.gateway.alert;

import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.database.Cursor;
import android.os.AsyncTask;
import android.os.Bundle;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CheckBox;
import android.widget.CompoundButton;
import android.widget.ListView;
import android.support.v4.widget.CursorAdapter;
import android.support.v4.widget.ResourceCursorAdapter;

import java.util.Collections;
import java.util.List;
import java.util.LinkedList;

import static medic.gateway.alert.GatewayLog.logException;
import static medic.gateway.alert.GatewayLog.trace;
import static medic.gateway.alert.Utils.absoluteTimestamp;
import static medic.gateway.alert.Utils.relativeTimestamp;
import static medic.gateway.alert.Utils.setText;
import static medic.gateway.alert.Utils.showSpinner;
import static medic.gateway.alert.WoMessage.Status.FAILED;
import static medic.gateway.alert.WoMessage.Status.UNSENT;

public class WoListFragment extends ListFragment implements LoaderCallbacks<Cursor> {
	public static final int LOADER_ID = 3;

	private static final DialogInterface.OnClickListener NO_CLICK_LISTENER = null;

	private Db db;

	@Override public void onActivityCreated(Bundle savedInstanceState) {
		super.onActivityCreated(savedInstanceState);

		this.db = Db.getInstance(getActivity());

		WoCursorAdapter adapter = new WoCursorAdapter(getCastActivity());
		setListAdapter(adapter);
		getLoaderManager().initLoader(LOADER_ID, null, this);
public void onListItemClick(ListView list, View view, int position, long id) {
		// more recently than the list
		WoMessage m = Db.getInstance(getActivity()).getWoMessage(c.getString(0));

		showMessageDetailDialog(m, position);
	}

	private void showMessageDetailDialog(final WoMessage m, final int position) {
		final ProgressDialog spinner = showSpinner(getContext());
		AsyncTask.execute(new Runnable() {
			public void run() {
				try {
					LinkedList<String> content = new LinkedList<>();

					content.add(string(R.string.lblTo, m.to));
					content.add(string(R.string.lblContent, m.content));
					content.add(string(R.string.lblStatusUpdates));

					List<WoMessage.StatusUpdate> updates = db.getStatusUpdates(m);
					Collections.reverse(updates);
					for(WoMessage.StatusUpdate u : updates) {
						String status;
						if(u.newStatus == FAILED) {
							status = String.format("%!s(MISSING) (%!s(MISSING))", u.newStatus, u.failureReason);
						} else {
							status = u.newStatus.toString();
						}
						content.add(String.format("%!s(MISSING): %!s(MISSING)", absoluteTimestamp(u.timestamp), status));
					}

					final AlertDialog.Builder dialog = new AlertDialog.Builder(getActivity());

					if(m.status.canBeRetried()) {
						dialog.setPositiveButton(R.string.btnRetry, new DialogInterface.OnClickListener() {
							@Override
							public void onClick(DialogInterface dialog, int which) {
								retry(m.id, position);
							}
						});
					}

					dialog.setItems(content.toArray(new String[content.size()]), NO_CLICK_LISTENER);

					getActivity().runOnUiThread(new Runnable() {
						public void run() { dialog.create().show(); }
					});
				} catch(Exception ex) {
					logException(getContext(), ex, "Failed to load WO message details.");
				} finally {
					spinner.dismiss();
				}
			}
		});
	}

	void retry(String id, int position) {
		trace(this, "Retrying message at %!d(MISSING) with id %!s(MISSING)...", position, id);

		WoMessage m = db.getWoMessage(id);

		if(m.status.canBeRetried()) {
			db.updateStatus(m, UNSENT);

			WoMessage updated = db.getWoMessage(id);

			View v = getListView().getChildAt(position);
			setText(v, R.id.txtWoStatus, updated.status.toString());
			setText(v, R.id.txtWoLastAction, relativeTimestamp(updated.lastAction));
		}
	}

	private final String string(int stringId, Object...args) {
		return String.format(getActivity().getString(stringId), args);
	}
}

public void bindView(View v, final Context ctx, Cursor c) {
		CheckBox cbx = (CheckBox) v.findViewById(R.id.cbxMessage);
		// Old list items get re-used, so we need to make sure that the
		// checkbox is de-checked.
		cbx.setChecked(false);
		cbx.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
			@Override
			public void onCheckedChanged(CompoundButton btn, boolean isChecked) {
				View listItem = (View) btn.getParent();
				ViewGroup parent = (ViewGroup) listItem.getParent();

				if(parent == null) return;

				int listIndex = parent.indexOfChild(listItem);

				trace(this, "Changed checkbox at %!d(MISSING) to %!s(MISSING)", listIndex, isChecked);

				activity.updateChecked(m.id, listIndex, isChecked);
			}
		});
	}
package medic.gateway.alert;

import android.os.Bundle;
import android.util.SparseArray;
import android.view.View;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.ListView;

import android.support.v4.app.FragmentActivity;

import static medic.gateway.alert.GatewayLog.*;
import static medic.gateway.alert.Utils.*;
import static medic.gateway.alert.WtMessage.Status.*;

public class WtListActivity extends FragmentActivity {
	private SparseArray<String> checklist;

	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.message_list_wt);

		((Button) findViewById(R.id.btnRefreshWtMessageList))
				.setOnClickListener(new View.OnClickListener() {
			public void onClick(View v) { refreshList(); }
public void onCreate(Bundle savedInstanceState) {
			public void onClick(View v) { retrySelected(); }
		});

		((Button) findViewById(R.id.btnSelectNewer))
				.setOnClickListener(new View.OnClickListener() {
			public void onClick(View v) { selectNewer(); }
		});

		refreshList();
	}

	void updateChecked(String id, int position, boolean isChecked) {
		if(isChecked) checklist.put(position, id);
		else checklist.delete(position);

		findViewById(R.id.btnRetrySelected).setEnabled(checklist.size() > 0);
		findViewById(R.id.btnSelectNewer).setEnabled(checklist.size() > 0);
	}

	private void refreshList() {
		checklist = new SparseArray<String>();

		getSupportLoaderManager().restartLoader(WtListFragment.LOADER_ID, null, getFragment());

		findViewById(R.id.btnRetrySelected).setEnabled(false);
		findViewById(R.id.btnSelectNewer).setEnabled(false);
	}

	private void retrySelected() {
		for(int i=checklist.size()-1; i>=0; --i) {
			getFragment().retry(checklist.valueAt(i), checklist.keyAt(i));
		}
	}

	private void selectNewer() {
		int lastSelectedIndex = checklist.keyAt(checklist.size() - 1);
		for(int i=lastSelectedIndex-1; i>=0; --i) {
			((CheckBox) getList().getChildAt(i).findViewById(R.id.cbxMessage)).setChecked(true);
		}
	}

	private WtListFragment getFragment() {
		return (WtListFragment) getSupportFragmentManager()
				.findFragmentById(R.id.lstWtMessages);
	}

	private ListView getList() {
		return getFragment().getListView();
	}
}
package medic.gateway.alert;

import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.database.Cursor;
import android.os.AsyncTask;
import android.os.Bundle;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CheckBox;
import android.widget.CompoundButton;
import android.widget.ListView;
import android.support.v4.widget.CursorAdapter;
import android.support.v4.widget.ResourceCursorAdapter;

import java.util.Collections;
import java.util.LinkedList;
import java.util.List;

import medic.gateway.alert.WtMessage.Status;

import static medic.gateway.alert.GatewayLog.logException;
import static medic.gateway.alert.GatewayLog.trace;
import static medic.gateway.alert.Utils.absoluteTimestamp;
import static medic.gateway.alert.Utils.relativeTimestamp;
import static medic.gateway.alert.Utils.setText;
import static medic.gateway.alert.Utils.showSpinner;
import static medic.gateway.alert.WtMessage.Status.WAITING;

public class WtListFragment extends ListFragment implements LoaderCallbacks<Cursor> {
	public static final int LOADER_ID = 2;

	private static final DialogInterface.OnClickListener NO_CLICK_LISTENER = null;

	private Db db;

	@Override public void onActivityCreated(Bundle savedInstanceState) {
		super.onActivityCreated(savedInstanceState);

		this.db = Db.getInstance(getActivity());

		WtCursorAdapter adapter = new WtCursorAdapter(getCastActivity());
		setListAdapter(adapter);
		getLoaderManager().initLoader(LOADER_ID, null, this);
public void onListItemClick(ListView list, View view, int position, long id) {
		// more recently than the list
		WtMessage m = Db.getInstance(getActivity()).getWtMessage(c.getString(0));

		showMessageDetailDialog(m, position);
	}

	private void showMessageDetailDialog(final WtMessage m, final int position) {
		final ProgressDialog spinner = showSpinner(getContext());
		AsyncTask.execute(new Runnable() {
			public void run() {
				try {
					LinkedList<String> content = new LinkedList<>();

					content.add(string(R.string.lblFrom, m.from));
					content.add(string(R.string.lblContent, m.content));
					content.add(string(R.string.lblStatusUpdates));

					List<WtMessage.StatusUpdate> updates = db.getStatusUpdates(m);
					Collections.reverse(updates);
					for(WtMessage.StatusUpdate u : updates) {
						content.add(String.format("%!s(MISSING): %!s(MISSING)", absoluteTimestamp(u.timestamp), u.newStatus));
					}

					final AlertDialog.Builder dialog = new AlertDialog.Builder(getActivity());

					if(m.getStatus().canBeRetried()) {
						dialog.setPositiveButton(R.string.btnRetry, new DialogInterface.OnClickListener() {
							@Override
							public void onClick(DialogInterface dialog, int which) {
								retry(m.id, position);
							}
						});
					}

					dialog.setItems(content.toArray(new String[content.size()]), NO_CLICK_LISTENER);

					getActivity().runOnUiThread(new Runnable() {
						public void run() { dialog.create().show(); }
					});
				} catch(Exception ex) {
					logException(getContext(), ex, "Failed to load WO message details.");
				} finally {
					spinner.dismiss();
				}
			}
		});
	}

	void retry(String id, int position) {
		trace(this, "Retrying message at %!d(MISSING) with id %!s(MISSING)...", position, id);

		WtMessage m = db.getWtMessage(id);

		if(m.getStatus().canBeRetried()) {
			Status oldStatus = m.getStatus();
			m.setStatus(WAITING);
			db.updateStatusFrom(oldStatus, m);

			WtMessage updated = db.getWtMessage(id);

			View v = getListView().getChildAt(position);
			setText(v, R.id.txtWtStatus, updated.getStatus().toString());
			setText(v, R.id.txtWtLastAction, relativeTimestamp(updated.getLastAction()));
		}
	}

	private final String string(int stringId, Object...args) {
		return String.format(getActivity().getString(stringId), args);
	}
}

class WtCursorAdapter extends ResourceCursorAdapter {
	private static final int NO_FLAGS = 0;

	public WtCursorAdapter(Context ctx) {
		super(ctx, R.layout.wt_list_item, null, NO_FLAGS);
	}

	public void bindView(View v, final Context ctx, Cursor c) {
public void bindView(View v, final Context ctx, Cursor c) {
		CheckBox cbx = (CheckBox) v.findViewById(R.id.cbxMessage);
		// Old list items get re-used, so we need to make sure that the
		// checkbox is de-checked.
		cbx.setChecked(false);
		cbx.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
			@Override
			public void onCheckedChanged(CompoundButton btn, boolean isChecked) {
				View listItem = (View) btn.getParent();
				ViewGroup parent = (ViewGroup) listItem.getParent();

				if(parent == null) return;

				int listIndex = parent.indexOfChild(listItem);

				trace(this, "Changed checkbox at %!d(MISSING) to %!s(MISSING)", listIndex, isChecked);

				((WtListActivity) ctx).updateChecked(m.id, listIndex, isChecked);
			}
		});
	}
				android:layout_width="wrap_content"
				android:layout_height="wrap_content"
				/>
		<Button android:id="@+id/btnSelectNewer"
				android:text="@string/btnSelectNewer"
				android:layout_width="wrap_content"
				android:layout_height="wrap_content"
				/>
		<Button android:id="@+id/btnRetrySelected"
				android:text="@string/btnRetrySelected"
				android:layout_width="wrap_content"
				android:layout_width="wrap_content"
				android:layout_height="wrap_content"
				/>
		<Button android:id="@+id/btnSelectNewer"
				android:text="@string/btnSelectNewer"
				android:layout_width="wrap_content"
				android:layout_height="wrap_content"
				/>
		<Button android:id="@+id/btnRetrySelected"
				android:text="@string/btnRetrySelected"
				android:layout_width="wrap_content"
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void clearUserData() {
        CommCareApplication._().getCurrentApp().getAppPreferences().edit()
                .putString(CommCarePreferences.LAST_LOGGED_IN_USER, null).commit();

        // manually clear file-backed fixture storage to ensure files are removed
        CommCareApplication._().getFileBackedUserStorage("fixture", FormInstance.class).removeAll();

        CommCareApplication._().closeUserSession();
    }

    public void wipeSandboxForUser(final String username) {
        final Set<String> dbIdsToRemove = new HashSet<>();
        CommCareApplication._().getAppStorage(UserKeyRecord.class).removeAll(new EntityFilter<UserKeyRecord>() {
            @Override
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
package edu.byu.suite.features.testingcenter.controller;

import android.content.Intent;
import android.os.Bundle;
import android.support.v4.widget.SwipeRefreshLayout;
	private static final int RECYCLER_VIEW = 0;
	private static final int TEXT_VIEW = 1;
	private boolean makeCall = false;
	private final ByuCallback<ScoresResponseWrapper> scoresCallback = new ByuCallback<ScoresResponseWrapper>(this) {
		@Override
		public void onSuccess(Call<ScoresResponseWrapper> call, Response<ScoresResponseWrapper> response) {
public void onNothingSelected(AdapterView<?> parent) {
		if (result == null) { // When the activity is first created
			loadInitialData();
		} else { // When you return to the ScoresFragment from a different fragment in the activity
			updateSpinnerAdapter(spinnerItemSelected);
		}
	}

public void onSuccess(Call<ScoresResponseWrapper> call, Response<ScoresResponseW
				result = response.body();
				// YearTerm.equals() doesn't include description, so indexOf(...) will find the index of the YearTerm that matches the current year term
				spinnerItemSelected = result.getContent().getYearTermsWithDescriptions().indexOf(new YearTerm(result.getContent().getCurrentYearTerm(), null));
				updateSpinnerAdapter(spinnerItemSelected);
				swipeRefreshLayout.setEnabled(true);
				showScores();
			}
private void showScores() {
		viewSwitcher.setDisplayedChild(studentTests.isEmpty() ? TEXT_VIEW : RECYCLER_VIEW);
	}

	private void updateSpinnerAdapter(int yearTermSelected) {
		SpinnerUtils.setUpAdapter(getActivity(), spinner, result.getContent().getYearTermsWithDescriptions(), null);
		// This triggers the onItemSelectedListener, and calls loadScores()
		spinner.setSelection(yearTermSelected);
	}
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public LocationHandler start() {
    public LocationHandler stop() {
        if (mGoogleApiClient != null) {
            LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, this);
            mGoogleApiClient.disconnect();
        }
        return this;
    }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.view.animation.AccelerateDecelerateInterpolator;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import io.codetail.animation.SupportAnimator;
import io.codetail.animation.ViewAnimationUtils;

import org.kontalk.Kontalk;
import org.kontalk.R;
import org.kontalk.authenticator.Authenticator;
import org.kontalk.service.DownloadService;
import org.kontalk.service.msgcenter.MessageCenterService;
import org.kontalk.ui.adapter.MessageListAdapter;
import org.kontalk.ui.view.AudioContentView;
import org.kontalk.ui.view.AudioContentViewControl;
import org.kontalk.ui.view.AudioPlayerControl;
public int getValue() {
    }

    /* Attachment chooser stuff. */
    private SupportAnimator mAttachAnimator;
    private View mAttachmentCard;
    private View mAttachmentContainer;

    protected ComposerBar mComposer;

private void initAttachmentView()
    {
        View view = getView();

        mAttachmentContainer = view.findViewById(R.id.attachment_container);
        mAttachmentCard = view.findViewById(R.id.circular_card);

        View.OnClickListener hideAttachmentListener = new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                toggleAttachmentView();
            }
        };
        view.findViewById(R.id.attachment_overlay).setOnClickListener(hideAttachmentListener);
public void onClick(View v) {
            @Override
            public void onClick(View v) {
                selectPhotoAttachment();
                toggleAttachmentView();
            }
        });

        view.findViewById(R.id.attach_gallery).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                selectGalleryAttachment();
                toggleAttachmentView();
            }
        });

public void onClick(View v) {
            @Override
            public void onClick(View v) {
                selectAudioAttachment();
                toggleAttachmentView();
            }
        });

public void onClick(View v) {
            @Override
            public void onClick(View v) {
                selectContactAttachment();
                toggleAttachmentView();
            }
        });

private void chooseContact() {

    boolean tryHideAttachmentView() {
        if (isAttachmentViewVisible()) {
            setupAttachmentViewCloseAnimation();
            startAttachmentViewAnimation();
            return true;
        }
        return false;
    }

    private void setupAttachmentViewCloseAnimation() {
        if (mAttachAnimator != null && !mAttachAnimator.isRunning()) {
            // reverse the animation
            mAttachAnimator = mAttachAnimator.reverse();
            mAttachAnimator.addListener(new SupportAnimator.AnimatorListener() {
                public void onAnimationCancel() {
                }

                public void onAnimationEnd() {
                    mAttachmentContainer.setVisibility(View.INVISIBLE);
                    mAttachAnimator = null;
                }

                public void onAnimationRepeat() {
                }

                public void onAnimationStart() {
                }
            });
        }
    }

    private boolean isAttachmentViewVisible() {
        return mAttachmentContainer.getVisibility() != View.INVISIBLE || mAttachAnimator != null;
    }

    private void startAttachmentViewAnimation() {
        mAttachAnimator.setInterpolator(new AccelerateDecelerateInterpolator());
        mAttachAnimator.setDuration(250);
        mAttachAnimator.start();
    }

    /** Show or hide the attachment selector. */
    public void toggleAttachmentView() {
        if (isAttachmentViewVisible()) {
            setupAttachmentViewCloseAnimation();
        }
        else {
            mComposer.forceHideKeyboard();
            mAttachmentContainer.setVisibility(View.VISIBLE);

            int right = mAttachmentCard.getRight();
            int top = mAttachmentCard.getTop();
            float f = (float) Math.sqrt(Math.pow(mAttachmentCard.getWidth(), 2D) + Math.pow(mAttachmentCard.getHeight(), 2D));
            mAttachAnimator = ViewAnimationUtils.createCircularReveal(mAttachmentCard, right, top, 0, f);
        }

        startAttachmentViewAnimation();
    }

    /** Starts an activity for shooting a picture. */
    private void selectPhotoAttachment() {
        try {
            // check if camera is available
            final PackageManager packageManager = getActivity().getPackageManager();
private void selectPhotoAttachment() {

    /** Starts an activity for picture attachment selection. */
    @TargetApi(Build.VERSION_CODES.KITKAT)
    private void selectGalleryAttachment() {
        boolean useSAF = MediaStorage.isStorageAccessFrameworkAvailable();
        Intent pictureIntent = createGalleryIntent(useSAF);

private Intent createGalleryIntent(boolean useSAF) {
    }

    /** Starts activity for a vCard attachment from a contact. */
    private void selectContactAttachment() {
        try {
            Intent i = new Intent(Intent.ACTION_PICK, Contacts.CONTENT_URI);
            startActivityForResult(i, SELECT_ATTACHMENT_CONTACT);
private void selectContactAttachment() {
        }
    }

    private void selectAudioAttachment() {
        // create audio fragment if needed
        AudioFragment audio = getAudioFragment();
        // stop everything
public boolean onOptionsItemSelected(MenuItem item) {
                viewContact();
                return true;

            case R.id.menu_attachment:
                toggleAttachmentView();
                return true;

            case R.id.block_user:
                blockUser();
                return true;
     along with this program.  If not, see <http://www.gnu.org/licenses/>.
 -->

<io.codetail.widget.RevealFrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:id="@+id/attachment_container"
    android:layout_width="match_parent"

    </FrameLayout>

</io.codetail.widget.RevealFrameLayout>
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Subproject commit 5c114bfe592f3c23e16f283c3ff2ac2864d17025
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import android.util.Log;
import android.util.TypedValue;
import android.view.LayoutInflater;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.View;
public void setOnModeChangeListener(onModeChange listener) {
    public void onCreate(Bundle savedInstanceState)
    {
        super.onCreate(savedInstanceState);
        mActivity = (MainActivity) getActivity();
        mTolerancePX = mActivity.getResources().getDisplayMetrics().density * ConstantsUI.TOLERANCE_DP;

public void onCreate(Bundle savedInstanceState)
        mEditLayerOverlay = new EditLayerOverlay(mActivity, mMap);
    }

    public void restartGpsListener() {
        mGpsEventSource.removeListener(this);
        mGpsEventSource.addListener(this);
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import io.reactivex.Observable;
import io.reactivex.functions.Consumer;
import io.reactivex.schedulers.Schedulers;
import org.apache.commons.lang3.CharEncoding;
import org.apache.commons.lang3.StringUtils;

public static void changeExternalPrivateCgeoDir(final SettingsActivity fromActiv
                final File currentDataDir = new File(getExternalPrivateCgeoDirectory(), GEOCACHE_DATA_DIR_NAME);
                Log.i("Moving geocache data to " + newDataDir.getAbsolutePath());
                final File[] files = currentDataDir.listFiles();
                progress.setMaxProgressAndReset(files.length);
                progress.setProgress(0);
                boolean success = true;
                for (final File geocacheDataDir : files) {
                    success &= FileUtils.moveTo(geocacheDataDir, newDataDir);
                    progress.incrementProgressBy(1);
                }

                Settings.setExternalPrivateCgeoDirectory(newExtDir);
public static long getSize(final File file) {
        if (file.isDirectory()) {
            long result = 0;
            final File[] fileList = file.listFiles();
            for (final File aFileList : fileList) {
                result += getSize(aFileList);
            }
            return result; // return the file size
        }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void clearCanvas(){
    }

    @Override
    protected void onLayout(boolean changed, int left, int top, int right,
                            int bottom) {
        super.onLayout(changed, left, top, right, bottom);
        layoutLeft = left;
        layoutTop = top;
protected void onLayout(boolean changed, int left, int top, int right,
    private void newBitmapCanvas(int left, int top, int right, int bottom) {
        bmp = null;
        canvasBmp = null;
        bmp = Bitmap.createBitmap(right - left, bottom - top, Bitmap.Config.ARGB_8888);
        canvasBmp = new Canvas(bmp);
        canvasBmp.drawColor(backgroundColor);
    }

    @Override
private float getPt( float n1 , float n2 , float perc){

    private void draw(Point p0, Point p1, Point p2, float lastWidth,
                      float currentWidth, float velocity){

        float xa, xb, ya, yb, x, y;
        float increment;
        if(velocity>MIN_VELOCITY_BOUND && velocity< MAX_VELOCITY_BOUND){
            increment = DRAWING_CONSTANT - (velocity * INCREMENT_CONSTANT);
        }else{
            increment = MIN_INCREMENT;
        }

        for(float i = 0f; i < 1f; i += increment){
                xa = getPt( p0.x , p1.x , i );
                ya = getPt( p0.y , p1.y , i );
                xb = getPt( p1.x , p2.x , i );
private void draw(Point p0, Point p1, Point p2, float lastWidth,
                x = getPt( xa , xb , i );
                y = getPt( ya , yb , i );

            float strokeVal = lastWidth + (currentWidth - lastWidth) * (i);
            paint.setStrokeWidth(strokeVal < MIN_PEN_SIZE ? MIN_PEN_SIZE : strokeVal);
            canvasBmp.drawPoint(x, y, paint);
        }
    }

private Point midPoint(Point p1, Point p2){
     * @return Bitmap
     */
    public Bitmap getSignatureBitmap(){
        return Bitmap.createScaledBitmap(bmp, bmp.getWidth(), bmp.getHeight(), true);
    }

    private Bitmap getSignatureBitmap(Bitmap bitmap){
private Bitmap getSignatureBitmap(Bitmap bitmap){
     *
     * @param   bitmap Bitmap
     */
    public void setBitmap(Bitmap bitmap)
    {
        bmp=bitmap;
        canvasBmp = new Canvas(bitmap);
        postInvalidate();
    }
    
    /**
     * Check is signature bitmap empty
     *
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import static com.afollestad.aesthetic.Util.setLightStatusBarCompat;
import static com.afollestad.aesthetic.Util.setNavBarColorCompat;

/** @author Aidan Follestad (afollestad) */
@SuppressWarnings({"WeakerAccess", "unused"})
public class Aesthetic {

private static String key(@Nullable AppCompatActivity activity) {
    return key;
  }

  /** Should be called before super.onCreate() in each Activity. */
  @NonNull
  public static Aesthetic attach(@NonNull AppCompatActivity activity) {
    if (instance == null) {
public static Aesthetic get() {
    return instance;
  }

  /** Should be called in onPause() of each Activity. */
  public static void pause(@NonNull AppCompatActivity activity) {
    if (instance == null) {
      return;
public static void pause(@NonNull AppCompatActivity activity) {
    }
  }

  /** Should be called in onResume() of each Activity. */
  public static void resume(@NonNull AppCompatActivity activity) {
    if (instance == null) {
      return;
public void accept(@io.reactivex.annotations.NonNull Integer themeId) {
                onErrorLogAndRethrow()));
    instance.subs.add(
        Observable.combineLatest(
                instance.colorStatusBar(),
                instance.lightStatusBarMode(),
                new BiFunction<Integer, Integer, Pair<Integer, Integer>>() {
                  @Override
                  public Pair<Integer, Integer> apply(Integer integer, Integer integer2) {
                    return Pair.create(integer, integer2);
                  }
                })
            .compose(Rx.<Pair<Integer, Integer>>distinctToMainThread())
            .subscribe(
                new Consumer<Pair<Integer, Integer>>() {
private static void subscribeBackgroundListeners() {
    instance.backgroundSubscriptions = new CompositeDisposable();
    if (instance.backgroundSubscriberViews.size() > 0) {
      List<ViewObservablePair> pairs = instance.backgroundSubscriberViews.get(instance.context);
      for (ViewObservablePair pair : pairs) {
        instance.backgroundSubscriptions.add(
            pair.observable()
                .compose(Rx.<Integer>distinctToMainThread())
                .subscribeWith(ViewBackgroundSubscriber.create(pair.view())));
      }
    }
  }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Subproject commit 95a31c526bac7df8e898e0729afb54254fffca4d
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
dependencies {
    compile 'com.vistrav:ask:2.4'
    compile 'com.android.support:support-v4:25.0.1'
    compile 'com.google.android.gms:play-services-maps:9.0.2'
    compile 'com.google.android.gms:play-services-ads:9.0.2'
    compile 'com.facebook.android:facebook-android-sdk:4.+'
    compile 'com.android.support:design:25.0.1'
    compile 'com.android.support:appcompat-v7:25.0.1'
import android.widget.TabHost.TabSpec;
import android.widget.Toast;

import com.google.android.gms.ads.AdView;
import com.paypal.android.MEP.PayPal;
import com.vistrav.ask.Ask;

    public static BottomNavigationView mBottomNav;
    public static boolean check_donwload = false;
    public static boolean check_donwload_local_gallery = false;
    public static AdView ad;
    public static int flashStatus = 2;

    //Gallery
public void run() {
        Display display = getWindowManager().getDefaultDisplay();
        width = display.getWidth() / 3;
        height = width;
        /*
         * Google admod
         */
        //ad = (AdView) findViewById(R.id.adView);
        SharedPreferences setting = getSharedPreferences(PREFS_NAME, 0);
        FEEDS_GOOGLE_ADMOB = setting.getBoolean("Google Admob", true);
        File file = getBaseContext().getFileStreamPath("google_admob.txt");
        if (file.exists()) {
            try {
                FileInputStream Rfile = openFileInput("google_admob.txt");

                InputStreamReader einputreader = new InputStreamReader(Rfile);
                BufferedReader ebuffreader = new BufferedReader(einputreader);
                Boolean tmp = Boolean.valueOf(ebuffreader.readLine());
                PhimpMe.FEEDS_GOOGLE_ADMOB = tmp;
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        Log.i("PhimpMe", "feed_google_admob : " + FEEDS_GOOGLE_ADMOB);
//        AdView adView = (AdView) this.findViewById(R.id.adView);
//
//        AdRequest request = new AdRequest.Builder()       // All emulators
//                .addTestDevice("AC98C820A50B4AD8A2106EDE96FB87D4")  // An example device ID
//                .build();
//        adView.loadAd(request);
//        if (FEEDS_GOOGLE_ADMOB == false) {
//            adView.setVisibility(ViewGroup.GONE);
//            //adView.destroy();
//        }

    	        /*
    	         * user config
    	         */

        File file0 = getBaseContext().getFileStreamPath("local_gallery.txt");
        if (file0.exists()) {
public static void hideTabs() {
//        mBottomNav.setVisibility(ViewGroup.GONE);
    }

//    public static void ShowAd() {
//        ad.setVisibility(ViewGroup.VISIBLE);
//    }

    public static void hideAd() {
        ad.setVisibility(ViewGroup.GONE);
    }

    @Override
    protected void onPause() {
public void onResume() {
        super.onResume();
        PhimpMe.showTabs();

        if (PhimpMe.FEEDS_GOOGLE_ADMOB == true) {
            //PhimpMe.ShowAd();
        }
        if (PhimpMe.add_account_upload) {
            reloadAccountsList();
            PhimpMe.add_account_upload = false;
public void onResume()
        }
        else {
          PhimpMe.showTabs();	
		
          if (PhimpMe.FEEDS_GOOGLE_ADMOB == true){
            //PhimpMe.ShowAd();
          }
		
          if (PhimpMe.IdList.size() == 5) {
            PhimpMe.IdList.clear();
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:ads="http://schemas.android.com/apk/lib/com.google.ads"
    android:orientation="vertical"
    android:layout_width="fill_parent"
    android:layout_height="fill_parent">
    <TabHost xmlns:android="http://schemas.android.com/apk/res/android"
        android:id="@android:id/tabhost"
        android:layout_above="@+id/adView"
        android:layout_width="fill_parent"
        android:layout_height="fill_parent">
        <LinearLayout android:orientation="vertical"
        </LinearLayout>
    </TabHost>

    <com.google.ads.AdView
        android:id="@+id/adView"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentBottom="true"
        android:layout_centerHorizontal="true"
        ads:adSize="SMART_BANNER"
        ads:adUnitId="@string/admob_id"
        ads:loadAdOnCreate="true"
        ads:testDevices="TEST_EMULATOR" />

</RelativeLayout>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:ads="http://schemas.android.com/apk/lib/com.google.ads"
    android:orientation="vertical"
    android:layout_width="fill_parent"
    android:layout_height="fill_parent">
    <TabHost xmlns:android="http://schemas.android.com/apk/res/android"
        android:id="@android:id/tabhost"
        android:layout_above="@+id/adView"
        android:layout_width="fill_parent"
        android:layout_height="fill_parent">

        </LinearLayout>

    </TabHost>
    <com.google.ads.AdView
        android:id="@+id/adView"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentBottom="true"
        android:layout_centerHorizontal="true"
        ads:adSize="SMART_BANNER"
        ads:adUnitId="@string/admob_id"
        ads:loadAdOnCreate="true"
        ads:testDevices="TEST_EMULATOR" />

</RelativeLayout>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:ads="http://schemas.android.com/apk/lib/com.google.ads"
    android:orientation="vertical"
    android:layout_width="fill_parent"
    android:layout_height="fill_parent">
    <TabHost xmlns:android="http://schemas.android.com/apk/res/android"
        android:id="@android:id/tabhost"
        android:layout_above="@+id/adView"
        android:layout_width="fill_parent"
        android:layout_height="fill_parent">

        </LinearLayout>

    </TabHost>
    <com.google.ads.AdView
        android:id="@+id/adView"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentBottom="true"
        android:layout_centerHorizontal="true"
        ads:adSize="SMART_BANNER"
        ads:adUnitId="@string/admob_id"
        ads:loadAdOnCreate="true"
        ads:testDevices="TEST_EMULATOR" />

</RelativeLayout>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:ads="http://schemas.android.com/apk/lib/com.google.ads"
    android:orientation="vertical"
    android:layout_width="fill_parent"
    android:layout_height="fill_parent">
    <TabHost xmlns:android="http://schemas.android.com/apk/res/android"
        android:id="@android:id/tabhost"
        android:layout_above="@+id/adView"
        android:layout_width="fill_parent"
        android:layout_height="fill_parent">

        </LinearLayout>

    </TabHost>
    <com.google.ads.AdView
        android:id="@+id/adView"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentBottom="true"
        android:layout_centerHorizontal="true"
        ads:adSize="SMART_BANNER"
        ads:adUnitId="@string/admob_id"
        ads:loadAdOnCreate="true"
        ads:testDevices="TEST_EMULATOR" />

</RelativeLayout>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:ads="http://schemas.android.com/apk/lib/com.google.ads"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:orientation="vertical"
    android:layout_width="fill_parent"

</RelativeLayout>


    <!--<com.google.ads.AdView-->
    <!--android:id="@+id/adView"-->
    <!--android:layout_width="wrap_content"-->
    <!--android:layout_height="wrap_content"-->
    <!--android:layout_alignParentBottom="true"-->
    <!--android:layout_centerHorizontal="true"-->
    <!--ads:adSize="SMART_BANNER"-->
    <!--ads:adUnitId="@string/admob_id"-->
    <!--ads:loadAdOnCreate="true"-->
    <!--ads:testDevices="TEST_EMULATOR" />-->
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      <sourceFolder url="file://$MODULE_DIR$/src/main/java" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/src/main/rs" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/src/main/shaders" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/src/test/res" type="java-test-resource" />
      <sourceFolder url="file://$MODULE_DIR$/src/test/resources" type="java-test-resource" />
      <sourceFolder url="file://$MODULE_DIR$/src/test/assets" type="java-test-resource" />
      <sourceFolder url="file://$MODULE_DIR$/src/test/aidl" isTestSource="true" />
      <sourceFolder url="file://$MODULE_DIR$/src/test/java" isTestSource="true" />
      <sourceFolder url="file://$MODULE_DIR$/src/test/rs" isTestSource="true" />
      <sourceFolder url="file://$MODULE_DIR$/src/test/shaders" isTestSource="true" />
      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/res" type="java-test-resource" />
      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/resources" type="java-test-resource" />
      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/assets" type="java-test-resource" />
      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/aidl" isTestSource="true" />
      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/java" isTestSource="true" />
      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/rs" isTestSource="true" />
      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/shaders" isTestSource="true" />
      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/assets" />
      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/blame" />
      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/classes" />
    <orderEntry type="library" exported="" name="support-vector-drawable-25.1.1" level="project" />
    <orderEntry type="library" exported="" name="animated-vector-drawable-25.1.1" level="project" />
    <orderEntry type="module" module-name="restcomm.android.sdk" exported="" />
  </component>
</module>
public void onCallErrorEvent(String jobId, RCClient.ErrorCodes errorCode, String
   // don't need to disconnect media
   private void handleDisconnected(String jobId, boolean haveDisconnectedLocally)
   {
      // Device was already busy with another Connection, skip all handling here
      if (deviceAlreadyBusy) {
         return;
private void handleDisconnected(String jobId, boolean haveDisconnectedLocally)
   private void handleDisconnect(String reason)
   {
      RCLogger.i(TAG, "handleDisconnect(): reason: " + reason);

      audioManager.stop();

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
private void setPlaceGuess(String placeGuess) {
        if ((placeGuess != null) && (placeGuess.length() > 0)) {
            mLocationGuess.setText(placeGuess);
            mLocationGuess.setTextColor(Color.parseColor("#000000"));
            if (mObservation.geoprivacy.equals("private") || mObservation.geoprivacy.equals("obscured")) {
                mObservation.private_place_guess = placeGuess;
                mObservation.place_guess = null;
            } else {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     * 画面端移動アニメーションの時間
     */
    private static final long MOVE_TO_EDGE_DURATION = 450L;

    /**
     * 画面端移動アニメーションの係数
public boolean onPreDraw() {
            moveToEdge(mInitX, mInitY, mAnimateInitialMove);
        }
        mIsDraggable = true;
        mWindowManager.updateViewLayout(this, mParams);
        return true;
    }

else if (mMoveDirection == FloatingViewManager.MOVE_DIRECTION_RIGHT) {
            // スクリーン位置の比率からY座標を設定(四捨五入)
            final int newY = (int) (mParams.y * mPositionLimitRect.height() / (float) oldPositionLimitHeight + 0.5f);
            mParams.y = Math.min(Math.max(mPositionLimitRect.top, newY), mPositionLimitRect.bottom);
            mWindowManager.updateViewLayout(this, mParams);
        }

    }
private void moveTo(int currentX, int currentY, int goalPositionX, int goalPosit
                    @Override
                    public void onAnimationUpdate(ValueAnimator animation) {
                        mParams.y = (Integer) animation.getAnimatedValue();
                        mWindowManager.updateViewLayout(FloatingView.this, mParams);
                    }
                });
            } else {
public void onAnimationUpdate(ValueAnimator animation) {
                    @Override
                    public void onAnimationUpdate(ValueAnimator animation) {
                        mParams.x = (Integer) animation.getAnimatedValue();
                        mWindowManager.updateViewLayout(FloatingView.this, mParams);
                    }
                });
            }
public void onAnimationUpdate(ValueAnimator animation) {
            if (mParams.x != goalPositionX || mParams.y != goalPositionY) {
                mParams.x = goalPositionX;
                mParams.y = goalPositionY;
                mWindowManager.updateViewLayout(FloatingView.this, mParams);
            }
        }
        // タッチ座標を初期化
public void onAnimationUpdate(ValueAnimator animation) {
    }

    /**
     * アニメーションをキャンセルします。
     */
    private void cancelAnimation() {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void onConfigured(@NonNull CameraCaptureSession session) {
                mCaptureSession.setRepeatingRequest(mPreviewRequestBuilder.build(),
                        mCaptureCallback, null);
            } catch (CameraAccessException e) {
                Log.e(TAG, "Failed to start camera preview.", e);
            }
        }
public void onConfigureFailed(@NonNull CameraCaptureSession session) {

        @Override
        public void onClosed(@NonNull CameraCaptureSession session) {
            mCaptureSession = null;
        }

    };
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ~ along with this program.  If not, see <http://www.gnu.org/licenses/>.
  -->

<manifest
    package="com.nextgis.safeforest"
    xmlns:android="http://schemas.android.com/apk/res/android"
    >

    <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION"/>
    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/>

    <uses-feature
        android:name="android.hardware.location"
        android:required="true"
        />
    <uses-feature
        android:name="android.hardware.telephony"
        android:required="false"
        />
    <uses-feature
        android:name="android.hardware.wifi"
        android:required="false"
        />
    <uses-feature
        android:name="android.hardware.camera"
        android:required="false"
        />
    <uses-feature
        android:name="android.hardware.compass"
        android:required="false"
        />

    <supports-screens
        android:anyDensity="true"
        android:largeScreens="true"
        android:normalScreens="true"
        android:resizeable="true"
        android:smallScreens="true"
        android:xlargeScreens="true"
        />

    <application
        android:name=".MainApplication"
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:theme="@style/AppTheme"
        >

        <activity
            android:name=".activity.MainActivity"
            android:label="@string/app_name"
            >
            <intent-filter>
                <action android:name="android.intent.action.MAIN"/>


        <activity
            android:name=".activity.AboutActivity"
            android:label="@string/action_about"
            />

        <activity
            android:name=".activity.IntroActivity"
            android:label="@string/intro"
            />

        <activity
            android:name=".activity.PreferencesActivity"
            android:label="@string/action_settings"
            />

        <activity
            android:name=".activity.AccountActivity"
            android:label="@string/sf_login_title"
            />

        <activity
            android:name=".activity.CreateMessageActivity"
            android:windowSoftInputMode="stateHidden|adjustPan"
            android:label="@string/action_felling"
            />

        <activity
            android:name=".activity.MessageCompassActivity"
            android:windowSoftInputMode="stateHidden|adjustResize"
            android:label="@string/location_from_compass"
            />

        <activity
            android:name=".activity.ViewMessageActivity"
            android:label="@string/action_view_message"
            />

        <service
            android:name="com.nextgis.safeforest.datasource.FVSyncService"
            android:exported="true"
            android:process=":sync"
            >
            <intent-filter>
                <action
                    android:name="android.content.SyncAdapter"
                    />
            </intent-filter>
            <meta-data
                android:name="android.content.SyncAdapter"
                android:resource="@xml/syncadapter"
                />
        </service>

        <service
            android:name=".util.RegionSyncService">
        </service>

        <provider
            android:name="com.nextgis.maplib.datasource.LayerContentProvider"
            android:authorities="com.nextgis.safeforest.provider"
            android:exported="false"
            android:syncable="true"
            />

    </application>

import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.Toast;

import com.espian.showcaseview.ShowcaseView;
import java.util.Locale;

public class MainActivity extends SFActivity implements NGWLoginFragment.OnAddAccountListener, View.OnClickListener {
    enum CURRENT_VIEW {ACCOUNT, INITIAL, NORMAL}
    protected static final int PERMISSIONS_REQUEST = 1;
    protected static final String KEY_CURRENT_VIEW = "current_view";

    protected ViewPager mViewPager;
    protected TabLayout mTabLayout;
    protected boolean mFirstRun = true;
    protected int mCurrentView;
    protected int mCurrentViewState;
    protected TabLayout.ViewPagerOnTabSelectedListener mTabListener;

protected void onCreate(Bundle savedInstanceState) {
    }

    protected void requestPermissions() {
        String[] permissions = new String[] {Manifest.permission.ACCESS_COARSE_LOCATION, Manifest.permission.ACCESS_FINE_LOCATION,
                Manifest.permission.GET_ACCOUNTS, Manifest.permission.WRITE_EXTERNAL_STORAGE};
        requestPermissions(R.string.permissions, R.string.requested_permissions, PERMISSIONS_REQUEST, permissions);
public void onRequestPermissionsResult(int requestCode, @NonNull String[] permis
    }

    private void start() {
        // check if first run
        // get from properties if first time
        // and registered or guest user
        final MainApplication app = (MainApplication) getApplication();
        final Account account = app.getAccount(getString(R.string.account_name));
        if (account == null || mCurrentViewState == CURRENT_VIEW.ACCOUNT.ordinal()) {
            RegionSyncFragment.createChooseRegionDialog(this, new RegionSyncFragment.onRegionReceive() {
                @Override
                public void onRegionChosen(String regionName) {
                    Log.d(Constants.SFTAG, "No account. " + getString(R.string.account_name) + " created. Run first step.");
                    VectorLayer regions = (VectorLayer) MapBase.getInstance().getLayerByName(Constants.KEY_FV_REGIONS);
                    Feature feature = regions.getFeature(mPreferences.getLong(SettingsConstants.KEY_PREF_REGION, 0));
                    createFirstStartView(feature.getFieldValueAsString("url"));
                }
            });
        } else {
            if (!hasBasicLayers(app.getMap()) || mCurrentViewState == CURRENT_VIEW.INITIAL.ordinal()) {
                Log.d(Constants.SFTAG, "Account " + getString(R.string.account_name) + " created. Run second step.");
                createSecondStartView();
            } else {
                Log.d(Constants.SFTAG, "Account " + getString(R.string.account_name) + " created. Layers created. Run normal view.");
                mFirstRun = false;
private boolean isGrantedResult(int[] grantResults) {
    }

    protected boolean hasBasicLayers(MapBase map) {
        return MapUtil.hasLayer(map, Constants.KEY_FV_REGIONS) && MapUtil.hasLayer(map, Constants.KEY_CITIZEN_MESSAGES);
    }

    @Override
    protected void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
        outState.putInt(KEY_CURRENT_VIEW, mCurrentView);
    }

    protected void createFirstStartView(String server){
        mCurrentView = CURRENT_VIEW.ACCOUNT.ordinal();
        setContentView(R.layout.activity_main_first);
        setToolbar(R.id.main_toolbar);
        setTitle(getText(R.string.first_run));

        FragmentManager fm = getSupportFragmentManager();
        NGWLoginFragment ngwLoginFragment = (NGWLoginFragment) fm.findFragmentByTag(Constants.FRAGMENT_LOGIN);

        if (ngwLoginFragment == null) {
            ngwLoginFragment = new LoginFragment();
            FragmentTransaction ft = fm.beginTransaction();
            ft.add(com.nextgis.maplibui.R.id.login_frame, ngwLoginFragment, Constants.FRAGMENT_LOGIN);
            ft.commitAllowingStateLoss();
        }
        ngwLoginFragment.setForNewAccount(true);
        ngwLoginFragment.setOnAddAccountListener(this);
        ngwLoginFragment.setUrlText(server);
    }

    protected void createSecondStartView(){
        mCurrentView = CURRENT_VIEW.INITIAL.ordinal();
        setContentView(R.layout.activity_main_first);
        setToolbar(R.id.main_toolbar);
        setTitle(getText(R.string.initialization));
protected void createSecondStartView(){


    protected void createNormalView() {
        mCurrentView = CURRENT_VIEW.NORMAL.ordinal();
        PreferenceManager.setDefaultValues(this, R.xml.preferences, false);

        setContentView(R.layout.activity_main);
public void onClick(View v) {

        switch (v.getId()) {
            case R.id.grant_permissions:
                requestPermissions();
                break;
            case R.id.showcase_button:
                showLabels();
public void onClick(View v) {
        }
    }

    private void showLabels() {
        ShowcaseView sv = (ShowcaseView) findViewById(R.id.showcase);
        sv.onClick(sv);
private void call() {

    @Override
    public void onAddAccount(Account account, String token, boolean accountAdded) {
        if(accountAdded) {
            final SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(this);
            float minX = prefs.getFloat(SettingsConstants.KEY_PREF_USERMINX, -2000.0f);
             android:layout_height="match_parent"
             tools:context=".activity.MainActivity">

    <include
        layout="@layout/actionbar"/>

    <LinearLayout
        android:layout_width="match_parent"
        android:padding="8dp">

        <TextView
            style="@style/TextAppearance.AppCompat.Large"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void connect() throws ConnectionException {
     * This operation is asynchronous, once the connection is closed, the
     * `SignalingStateChangedEvent` will be emitted.
     */
    void disconnect(Integer reason) {
        this.setState(SignalingState.CLOSING);

        // Close WebSocket instance
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
private boolean postPhotos() throws AuthenticationException, CancelSyncException
                    }
                }
            }
            if (!(new File(imgFilePath)).exists()) {
                // Local (cached) photo was deleted - probably because the user deleted the app's cache

                // First, delete this photo record
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
android:
  components:
    - tools
    - platform-tools
    - build-tools-25.0.3
    - android-25
    - extra-android-support
    - extra-android-m2repository
    - extra-google-m2repository
Add this to your module's `build.gradle` file:
```gradle
dependencies {
    // ... other dependencies
    compile 'com.afollestad:sectioned-recyclerview:0.4.4'
}
```

buildscript {

    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:' + versions.gradlePlugin
buildscript {
allprojects {
    repositories {
        jcenter()
    }
}

ext.versions = [
        minSdk: 14,
        compileSdk: 25,
        buildTools: '25.0.3',
        publishVersion: '0.4.4',
        publishVersionCode: 14,
        gradlePlugin: '2.3.2',
        supportLib: '25.3.1',
        truth: '0.31',
@SuppressWarnings("WeakerAccess")
public class ItemCoord {

  private int section;
  private int relativePos;

  ItemCoord(int section, int relativePos) {
    this.section = section;
  private final ArrayMap<Integer, Integer> headerLocationMap;
  private final ArrayMap<Integer, Boolean> collapsedSectionMap;
  private ItemProvider itemProvider;

  PositionManager() {
    this.headerLocationMap = new ArrayMap<>(0);
    this.collapsedSectionMap = new ArrayMap<>(0);
  }

  int invalidate(ItemProvider itemProvider) {
    this.itemProvider = itemProvider;
    int count = 0;
    headerLocationMap.clear();
void toggleSectionExpanded(int section) {
    }
  }

  boolean isSectionExpanded(int section) {
    if (section < 0 || section > itemProvider.getSectionCount() - 1) {
      throw new IllegalArgumentException("Section " + section + " is out of bounds.");

import java.util.List;

/**
 * @author Aidan Follestad (afollestad)
 */
@SuppressWarnings({"WeakerAccess", "unused"})
public abstract class SectionedRecyclerViewAdapter<VH extends SectionedViewHolder>
    extends RecyclerView.Adapter<VH> implements ItemProvider {

  private static final String TAG = "SectionedRVAdapter";

  protected static final int VIEW_TYPE_HEADER = -2;
  protected static final int VIEW_TYPE_ITEM = -1;

  private PositionManager positionManager;
  private GridLayoutManager layoutManager;
  private boolean showHeadersForEmptySections;

  public SectionedRecyclerViewAdapter() {
    positionManager = new PositionManager();
    positionManager.invalidate(this);
  }

  public void notifySectionChanged(@IntRange(from = 0, to = Integer.MAX_VALUE) int section) {
public void notifySectionChanged(@IntRange(from = 0, to = Integer.MAX_VALUE) int
      Log.d(TAG, "There are no items in section " + section + " to notify.");
      return;
    }
    Log.d(TAG, "Invalidating " + sectionItemCount + " items starting at index " + sectionHeaderIndex);
    notifyItemRangeChanged(sectionHeaderIndex, sectionItemCount);
  }

public void collapseSection(int section) {
  }

  public void expandAllSections() {
    for (int i = 0; i < getSectionCount(); i++) {
      positionManager.expandSection(i);
    }
    notifyDataSetChanged();
  }

  public void collapseAllSections() {
    for (int i = 0; i < getSectionCount(); i++) {
      positionManager.collapseSection(i);
    }
    notifyDataSetChanged();
  }

public void toggleSectionExpanded(int section) {
    notifyDataSetChanged();
  }


  public abstract int getSectionCount();

  public abstract int getItemCount(int section);
protected int getRowSpan(
    return 1;
  }

  /**
   * Converts an absolute position to a relative position and section.
   */
  public ItemCoord getRelativePosition(int absolutePosition) {
    return positionManager.relativePosition(absolutePosition);
  }
import android.support.v7.widget.RecyclerView;
import android.view.View;

public abstract class SectionedViewHolder extends RecyclerView.ViewHolder {

  interface PositionDelegate {
    ItemCoord relativePosition(int absolutePosition);

    boolean isHeader(int absolutePosition);
  }

  private PositionDelegate positionDelegate;

  public SectionedViewHolder(View itemView) {
protected ItemCoord getRelativePosition() {
  protected boolean isHeader() {
    return positionDelegate.isHeader(getAdapterPosition());
  }
}
  @Before
  public void before() {
    positionManager = new PositionManager();
    invalidate();
  }

public void test_collapse_section() {
  }

  @Test
  public void test_expand_section() {
    positionManager.collapseSection(1);
    assertThat(invalidate()).isEqualTo(7);
public void test_expand_section() {
  }

  @Test
  public void test_toggle_expanded() {
    positionManager.collapseSection(1);
    assertThat(invalidate()).isEqualTo(7);
public void test_toggle_expanded() {
  }

  @Test
  public void test_item_coord_toString() {
    assertThat(new ItemCoord(8, 16).toString()).isEqualTo("8:16");
  }
protected void onCreate(@Nullable Bundle savedInstanceState) {
        new GridLayoutManager(this, getResources().getInteger(R.integer.grid_span));
    list.setLayoutManager(manager);
    adapter.setLayoutManager(manager);
    adapter.shouldShowHeadersForEmptySections(false);
    adapter.collapseAllSections();
    list.setAdapter(adapter);
  }

  @Override
  public boolean onCreateOptionsMenu(Menu menu) {
    getMenuInflater().inflate(R.menu.main, menu);
    return super.onCreateOptionsMenu(menu);
  }

public boolean onOptionsItemSelected(MenuItem item) {
      hideEmpty = !hideEmpty;
      adapter.shouldShowHeadersForEmptySections(hideEmpty);
      adapter.notifyDataSetChanged();
      item.setChecked(hideEmpty);
      return true;
    }
    return super.onOptionsItemSelected(item);
public MainVH onCreateViewHolder(ViewGroup parent, int viewType) {

    MainVH(View itemView, MainAdapter adapter) {
      super(itemView);
      this.title = (TextView) itemView.findViewById(R.id.title);
      this.caret = (ImageView) itemView.findViewById(R.id.caret);
      this.adapter = adapter;
      itemView.setOnClickListener(this);
    }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void onBindViewHolder(SpotifyArtistsListAdapter.ViewHolder holder, int po
            final List<Artists> artistsList = spotifyMusicFactory.getArtists();

            if (artistsList != null && !artistsList.isEmpty()) {
                if (artistsList.get(position).getArtistCatalogData().getImages() != null) {
                    String imageUrl = artistsList.get(position).getArtistCatalogData().getImages().get(0).getUrl();
                    holder.transparentView.setBackgroundResource(R.color.transparent_black_bg);
                    setArtistBgThumb(imageUrl, holder.albumBackground);
private void prepareArtistsList(SpotifyServiceProvider client) {
                        artists.setArtistCatalogData(artistCatalogData);
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                }

            }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
package com.genius.groupie.example;

import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;

    private int firstVisibleItem, visibleItemCount, totalItemCount;
    private int current_page = 0;
    private LinearLayoutManager linearLayoutManager;

    public InfiniteScrollListener(LinearLayoutManager linearLayoutManager) {
        this.linearLayoutManager = linearLayoutManager;
    }

    public void setLinearLayoutManager(LinearLayoutManager linearLayoutManager) {
        this.linearLayoutManager = linearLayoutManager;
    }

    @Override
    public void onScrolled(RecyclerView recyclerView, int dx, int dy) {
        super.onScrolled(recyclerView, dx, dy);

        visibleItemCount = recyclerView.getChildCount();
        totalItemCount = linearLayoutManager.getItemCount();
        firstVisibleItem = linearLayoutManager.findFirstVisibleItemPosition();

        if (loading) {
            if (totalItemCount > previousTotal || totalItemCount == 0) {
                loading = false;
                previousTotal = totalItemCount;
            }
        }

        // End has been reached
        if (!loading && (totalItemCount - visibleItemCount) <= (firstVisibleItem + visibleThreshold)) {
            current_page++;
            onLoadMore(current_page);
            loading = true;
        }
    }

    public abstract void onLoadMore(int current_page);
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Add this to your module's `build.gradle` file:
```gradle
dependencies {
    // ... other dependencies
    compile 'com.afollestad:aesthetic:0.4.0'
}
```

ext.versions = [
        minSdk            : 16,
        compileSdk        : 25,
        buildTools        : '25.0.3',
        publishVersion    : '0.4.1',
        publishVersionCode: 13,
        gradlePlugin      : '2.3.2',

        supportLib        : '25.3.1',
public static void pause(@NonNull AppCompatActivity activity) {
    if (instance.backgroundSubscriptions != null) {
      instance.backgroundSubscriptions.clear();
    }
    if (instance.context != null
        && instance.context.getClass().getName().equals(activity.getClass().getName())) {
      instance.context = null;
    }
    if (activity.isFinishing()) {
      instance.backgroundSubscriberViews.remove(activity);
    }
  }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import java.text.SimpleDateFormat;
import java.util.Iterator;


public class GpsStatusFragment extends Fragment implements GpsTestListener {

    private boolean mUseLegacyGnssApi = false;

    public void onLocationChanged(Location location) {
        if (!mGotFix) {
            mTTFFView.setText(GpsTestActivity.getInstance().mTtff);
            mGotFix = true;
        }
        mLatitudeView.setText(getString(R.string.gps_latitude_value, location.getLatitude()));
        mLongitudeView.setText(getString(R.string.gps_longitude_value, location.getLongitude()));
        mFixTime = location.getTime();
        if (location.hasAltitude()) {
            mAltitudeView.setText(getString(R.string.gps_altitude_value, location.getAltitude()));
        } else {
            mAltitudeView.setText("");
        }
        if (location.hasAccuracy()) {
            mAccuracyView.setText(getString(R.string.gps_accuracy_value, location.getAccuracy()));
        } else {
            mAccuracyView.setText("");
        }
        if (location.hasSpeed()) {
            mSpeedView.setText(getString(R.string.gps_speed_value, location.getSpeed()));
        } else {
            mSpeedView.setText("");
        }
        if (location.hasBearing()) {
            mBearingView.setText(getString(R.string.gps_bearing_value, location.getBearing()));
        } else {
            mBearingView.setText("");
        }
private void setStarted(boolean navigating) {
    }

    private void updateFixTime() {
        if (mFixTime == 0 || !GpsTestActivity.getInstance().mStarted) {
            mFixTimeView.setText("");
        } else {
            mFixTimeView.setText(mDateFormat.format(mFixTime));
public void onNmeaMessage(String message, long timestamp) {
        if (message.startsWith("$GPGGA") || message.startsWith("$GNGNS")) {
            Double altitudeMsl = GpsTestUtil.getAltitudeMeanSeaLevel(message);
            if (altitudeMsl != null && mNavigating) {
                mAltitudeMslView.setText(getString(R.string.gps_altitude_msl_value, altitudeMsl));
            }
        }
        if (message.startsWith("$GNGSA") || message.startsWith("$GPGSA")) {
public void onNmeaMessage(String message, long timestamp) {
                showDopViews();
                mPdopView.setText(String.valueOf(dop.getPositionDop()));
                mHvdopView.setText(
                        getString(R.string.hvdop_value, dop.getHorizontalDop(),
                                dop.getVerticalDop()));
            }
        }
private void updateGnssStatus(GnssStatus status) {
        setStarted(true);
        updateFixTime();

        mSnrCn0Title = mRes.getString(R.string.gps_cn0_column_label);

        if (mPrns == null) {
private void updateGnssStatus(GnssStatus status) {
            mSvCount++;
        }

        mNumSats.setText(getString(R.string.gps_num_sats_value, mUsedInFixCount, mSvCount));

        mAdapter.notifyDataSetChanged();
    }
private void updateLegacyStatus(GpsStatus status) {
        setStarted(true);
        updateFixTime();

        mSnrCn0Title = mRes.getString(R.string.gps_snr_column_label);

        Iterator<GpsSatellite> satellites = status.getSatellites().iterator();
private void updateLegacyStatus(GpsStatus status) {
            mSvCount++;
        }

        mNumSats.setText(getString(R.string.gps_num_sats_value, mUsedInFixCount, mSvCount));

        mAdapter.notifyDataSetChanged();
    }
public View getView(int position, View convertView, ViewGroup parent) {
                        break;
                    case ELEVATION_COLUMN:
                        if (mSvElevations[row] != 0.0f) {
                            text = getString(R.string.gps_elevation_column_value,
                                    Float.toString(mSvElevations[row]));
                        } else {
                            text = "";
                        }
                        break;
                    case AZIMUTH_COLUMN:
                        if (mSvAzimuths[row] != 0.0f) {
                            text = getString(R.string.gps_azimuth_column_value,
                                    Float.toString(mSvAzimuths[row]));
                        } else {
                            text = "";
import android.location.GnssStatus;
import android.os.Build;
import android.support.annotation.RequiresApi;
import android.text.TextUtils;
import android.util.Log;

public static boolean canManageDialog(Activity activity) {
    }

    /**
     * Outputs the provided nmea message and timestamp to log
     *
     * @param timestamp timestamp to write to the log, or Long.MIN_VALUE to not write a timestamp
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void onBindViewHolder(final ViewHolder holder, int position) {
                buttonControlMain1.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {
                        Double data = Double.valueOf(editTextControlMain.getText().toString());
                        Double dataDecrement = data - 0.0025;
                        if (dataDecrement < -5.0)
                            dataDecrement = -5.0;
                        else if (dataDecrement > 5.0)
                            dataDecrement = 5.0;
                        seekBarControlMain.setProgress((int)((dataDecrement+5)*10));
                        DecimalFormat df = new DecimalFormat("#.####");
                        editTextControlMain.setText(df.format(dataDecrement));
                    }
                });

                buttonControlMain2.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {
                        Double data1 = Double.valueOf(editTextControlMain.getText().toString());
                        Double dataIncrement = data1 + 0.0025;
                        if (dataIncrement < -5.0)
                            dataIncrement = -5.0;
                        else if (dataIncrement > 5.0)
                            dataIncrement = 5.0;
                        seekBarControlMain.setProgress((int)((dataIncrement+5)*10));
                        DecimalFormat df = new DecimalFormat("#.####");
                        editTextControlMain.setText(df.format(dataIncrement));
                    }
                });

                buttonControlMain3.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {
                        Float value = Float.parseFloat(editTextControlMain.getText().toString());
                        if (value > 5)
                            value = 5f;
                        else if (value < -5)
                            value = -5f;
                        editTextControlMain.setText(String.valueOf(value));
                        //seekBarControlMain.setProgress((int) ((value + 5) * 10));

                        if (scienceLab.isConnected())
                            scienceLab.setPV1(value);
                    }
                });

public void onStopTrackingTouch(SeekBar seekBar) {
                buttonControlMain1.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {
                        Double data = Double.valueOf(editTextControlMain.getText().toString());
                        Double dataDecrement = data - 0.0025;
                        if (dataDecrement < -3.3)
                            dataDecrement = -3.3;
                        else if (dataDecrement > 3.3)
                            dataDecrement = 3.3;
                        seekBarControlMain.setProgress((int)((dataDecrement+3.3)*15.15));
                        DecimalFormat df = new DecimalFormat("#.####");
                        editTextControlMain.setText(df.format(dataDecrement));
                    }
                });

                buttonControlMain2.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {
                        Double data1 = Double.valueOf(editTextControlMain.getText().toString());
                        Double dataIncrement = data1 + 0.0025;
                        if (dataIncrement < -3.3)
                            dataIncrement = -3.3;
                        else if (dataIncrement > 3.3)
                            dataIncrement = 3.3;
                        seekBarControlMain.setProgress((int)((dataIncrement+3.3)*15.15));
                        DecimalFormat df = new DecimalFormat("#.####");
                        editTextControlMain.setText(df.format(dataIncrement));
                    }
                });

                buttonControlMain3.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {
                        Float value = Float.parseFloat(editTextControlMain.getText().toString());
                        if (value > 3.3)
                            value = 3.3f;
                        else if (value < -3.3)
                            value = -3.3f;
                        editTextControlMain.setText(String.valueOf(value));
                        seekBarControlMain.setProgress((int) ((value + 3.3) * 15.15));

                        if (scienceLab.isConnected())
                            scienceLab.setPV2(value);
                    }
                });

public void onStopTrackingTouch(SeekBar seekBar) {
                buttonControlMain1.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {
                        Double data = Double.valueOf(editTextControlMain.getText().toString());
                        Double dataDecrement = data - 0.0025;
                        if (dataDecrement < 0.0)
                            dataDecrement = 0.0;
                        else if (dataDecrement > 3.3)
                            dataDecrement = 3.3;
                        seekBarControlMain.setProgress((int)(dataDecrement*30.30));
                        DecimalFormat df = new DecimalFormat("#.####");
                        editTextControlMain.setText(df.format(dataDecrement));
                    }
                });

                buttonControlMain2.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {
                        Double data1 = Double.valueOf(editTextControlMain.getText().toString());
                        Double dataIncrement = data1 + 0.0025;
                        if (dataIncrement < 0.0)
                            dataIncrement = 0.0;
                        else if (dataIncrement > 3.3)
                            dataIncrement = 3.3;
                        seekBarControlMain.setProgress((int)(dataIncrement*30.30));
                        DecimalFormat df = new DecimalFormat("#.####");
                        editTextControlMain.setText(df.format(dataIncrement));
                    }
                });

                buttonControlMain3.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {
                        Float value = Float.parseFloat(editTextControlMain.getText().toString());
                        if (value > 3.3)
                            value = 3.3f;
                        else if (value < 0)
                            value = 0f;
                        editTextControlMain.setText(String.valueOf(value));
                        //seekBarControlMain.setProgress((int) (value * 30.30));

                        if (scienceLab.isConnected())
                            scienceLab.setPV3(value);
                    }
                });

public void onStopTrackingTouch(SeekBar seekBar) {
                buttonControlMain1.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {
                        Double data = Double.valueOf(editTextControlMain.getText().toString());
                        Double dataDecrement = data - 0.0025;
                        if (dataDecrement < 0.0)
                            dataDecrement = 0.0;
                        else if (dataDecrement > 3.3)
                            dataDecrement = 3.3;
                        DecimalFormat df = new DecimalFormat("#.####");
                        editTextControlMain.setText(df.format(dataDecrement));
                    }
                });

                buttonControlMain2.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {
                        Double data1 = Double.valueOf(editTextControlMain.getText().toString());
                        Double dataIncrement = data1 + 0.0025;
                        if (dataIncrement < 0.0)
                            dataIncrement = 0.0;
                        else if (dataIncrement > 3.3)
                            dataIncrement = 3.3;
                        DecimalFormat df = new DecimalFormat("#.####");
                        editTextControlMain.setText(df.format(dataIncrement));
                    }
                });

                buttonControlMain3.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {
                        Float value = Float.parseFloat(editTextControlMain.getText().toString());
                        if (value > 3.3)
                            value = 3.3f;
                        else if (value < 0)
                            value = 0f;
                        editTextControlMain.setText(String.valueOf(value));
                        //seekBarControlMain.setProgress((int) (value * 30.30));

                        if (scienceLab.isConnected())
                            scienceLab.setPCS(value);

                    }
                });

public void onStopTrackingTouch(SeekBar seekBar) {
                buttonControlMain1.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {
                        int data = Integer.valueOf(editTextControlMain.getText().toString());
                        int dataDecrement = data - 1;
                        if (dataDecrement < 10)
                            dataDecrement = 10;
                        else if (dataDecrement > 5000)
                            dataDecrement = 5000;

                        seekBarControlMain.setProgress((int)((dataDecrement-10)/49.9));
                        DecimalFormat df = new DecimalFormat("####");
                        editTextControlMain.setText(df.format(dataDecrement));
                    }
                });

                buttonControlMain2.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {
                        int data1 = Integer.valueOf(editTextControlMain.getText().toString());
                        int dataIncrement = data1 + 1;
                        if (dataIncrement < 10)
                            dataIncrement = 10;
                        else if (dataIncrement > 5000)
                            dataIncrement = 5000;
                        seekBarControlMain.setProgress((int)((dataIncrement-10)/49.9));
                        DecimalFormat df = new DecimalFormat("####");
                        editTextControlMain.setText(df.format(dataIncrement));
                    }
                });

                buttonControlMain3.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {
                        Float value = Float.parseFloat(editTextControlMain.getText().toString());
                        if (value < 10)
                            value = 10f;
                        else if (value > 5000)
                            value = 5000f;
                        editTextControlMain.setText(String.valueOf(value));
                        //seekBarControlMain.setProgress((int) ((value - 10) / 49.9));

                        // call to scienceLab for setting
                    }
                });

public void onStopTrackingTouch(SeekBar seekBar) {
                buttonControlMain1.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {
                        int data = Integer.valueOf(editTextControlMain.getText().toString());
                        int dataDecrement = data - 1;
                        if (dataDecrement < 10)
                            dataDecrement = 10;
                        else if (dataDecrement > 5000)
                            dataDecrement = 5000;
                        seekBarControlMain.setProgress((int)((dataDecrement-10)/49.9));
                        DecimalFormat df = new DecimalFormat("####");
                        editTextControlMain.setText(df.format(dataDecrement));
                    }
                });

                buttonControlMain2.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {
                        int data1 = Integer.valueOf(editTextControlMain.getText().toString());
                        int dataIncrement = data1 + 1;
                        if (dataIncrement < 10)
                            dataIncrement = 10;
                        else if (dataIncrement > 5000)
                            dataIncrement = 5000;
                        seekBarControlMain.setProgress((int)((dataIncrement-10)/49.9));
                        DecimalFormat df = new DecimalFormat("####");
                        editTextControlMain.setText(df.format(dataIncrement));
                    }
                });

                buttonControlMain3.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {
                        Float value = Float.parseFloat(editTextControlMain.getText().toString());
                        if (value < 10)
                            value = 10f;
                        else if (value > 5000)
                            value = 5000f;
                        editTextControlMain.setText(String.valueOf(value));
                        seekBarControlMain.setProgress((int) ((value - 10) / 49.9));

                        // call to scienceLab for setting
                    }
                });
                seekBarControlMain.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {
public void onStopTrackingTouch(SeekBar seekBar) {
                buttonControlMain1.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {
                        int data = Integer.valueOf(editTextControlMain.getText().toString());
                        int dataDecrement = data - 1;
                        if (dataDecrement < 10)
                            dataDecrement = 10;
                        else if (dataDecrement > 5000)
                            dataDecrement = 5000;
                        seekBarControlMain.setProgress((int)((dataDecrement-10)/49.9));
                        DecimalFormat df = new DecimalFormat("####");
                        editTextControlMain.setText(df.format(dataDecrement));
                    }
                });

                buttonControlMain2.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {
                        int data1 = Integer.valueOf(editTextControlMain.getText().toString());
                        int dataIncrement = data1 + 1;
                        if (dataIncrement < 10)
                            dataIncrement = 10;
                        else if (dataIncrement > 5000)
                            dataIncrement = 5000;
                        seekBarControlMain.setProgress((int)((dataIncrement-10)/49.9));
                        DecimalFormat df = new DecimalFormat("####");
                        editTextControlMain.setText(df.format(dataIncrement));
                    }
                });

                buttonControlMain3.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {
                        Float value = Float.parseFloat(editTextControlMain.getText().toString());
                        if (value < 10)
                            value = 10f;
                        else if (value > 5000)
                            value = 5000f;
                        editTextControlMain.setText(String.valueOf(value));
                        seekBarControlMain.setProgress((int) ((value - 10) / 49.9));

                        // call to scienceLab for setting
                    }
                });
                seekBarControlMain.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
private Intent createGalleryIntent(boolean useSAF) {

    /** Starts activity for a vCard attachment from a contact. */
    private void selectContactAttachment() {
        Intent i = new Intent(Intent.ACTION_PICK, Contacts.CONTENT_URI);
        startActivityForResult(i, SELECT_ATTACHMENT_CONTACT);
    }

    private void selectAudioAttachment() {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import android.app.Fragment;
import android.app.FragmentManager;
import android.app.FragmentTransaction;
import android.support.v4.view.GravityCompat;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.ActionBar;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;

import com.google.android.gms.cast.framework.CastButtonFactory;
import com.google.android.gms.cast.framework.CastContext;

    protected FirebaseAnalytics mFirebaseAnalytics;

    public abstract int getLayoutResource();

    @Override
protected void onCreate( Bundle savedInstanceState ) {
        setContentView( getLayoutResource() );
        ButterKnife.bind( this );

        if( !FirebaseApp.getApps( this ).isEmpty() ) {

            mFirebaseAnalytics = FirebaseAnalytics.getInstance( this );
protected String getMasterBackendUrl() {

    }

}
void onButtonFabPlay() {
                        Log.e( TAG, "onButtonFabPlay : error", e );
                        FirebaseCrash.logcat( Log.ERROR, TAG, "onButtonFabPlay : mediaItemModel=" + mediaItemModel.toString() );
                        FirebaseCrash.report( e );
                    }

                    break;
public void onCreate( Bundle savedInstanceState ) {
    }

    /**
     * Shows a {@link android.widget.Toast} message.
     *
     * @param message A string representing a message to be shown.
     * @param retryMessage A string representing the retry message to be shown
private void updateProgress() {

        } else {

            this.pb_progress.getProgressDrawable().setColorFilter( Color.RED, android.graphics.PorterDuff.Mode.SRC_IN );
            this.pb_progress.setVisibility( View.GONE );
            this.pb_progress.setIndeterminate( true );
            this.pb_progress.setProgress( 0 );

        }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    <b>Next bugfix release (Beta version):</b>\n
    · Fix: Avoid possible crashes during file operation on Android devices below 4.1\n
    · Fix: Avoid possible crashes on Android devices below 4.4\n
    \n
    \n
    <b>2017.03.19:</b>\n
public void setVisitedDate(final long visitedDate) {
    }

    public void setLists(final Set<Integer> lists) {
        this.lists = lists;
    }

    public boolean isDetailed() {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Subproject commit f1f3f8e4dd70e8ecb4db155c04cde27df980ce6f
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ Project: Forest violations
  ~ Purpose: Mobile application for registering facts of the forest violations.
  ~ Author:  Dmitry Baryshnikov (aka Bishop), bishop.dev@gmail.com
  ~ Author:  NikitaFeodonit, nfeodonit@yandex.com
  ~ Author:  Stanislav Petriakov, becomeglory@gmail.com
  ~ ******************************************************************************
  ~ Copyright (c) 2015-2016 NextGIS, info@nextgis.com
  ~
  ~ This program is free software: you can redistribute it and/or modify
  ~ it under the terms of the GNU General Public License as published by
  ~ the Free Software Foundation, either version 3 of the License, or
  ~ (at your option) any later version.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ~ GNU General Public License for more details.
  ~
  ~ You should have received a copy of the GNU General Public License
  ~ along with this program.  If not, see <http://www.gnu.org/licenses/>.
  -->

<shape xmlns:android="http://schemas.android.com/apk/res/android">

    <corners
        android:radius="4dp"/>

    <solid
        android:color="?attr/layer_list_background"/>

    <!--
        <stroke
            android:width="2dp"
            android:color="@color/color_white"
            />
    -->

</shape>
<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ Project: Forest violations
  ~ Purpose: Mobile application for registering facts of the forest violations.
  ~ Author:  Dmitry Baryshnikov (aka Bishop), bishop.dev@gmail.com
  ~ Author:  NikitaFeodonit, nfeodonit@yandex.com
  ~ ******************************************************************************
  ~ Copyright (c) 2015-2015. NextGIS, info@nextgis.com
  ~
  ~ This program is free software: you can redistribute it and/or modify
  ~ it under the terms of the GNU General Public License as published by
  ~ the Free Software Foundation, either version 3 of the License, or
  ~ (at your option) any later version.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ~ GNU General Public License for more details.
  ~
  ~ You should have received a copy of the GNU General Public License
  ~ along with this program.  If not, see <http://www.gnu.org/licenses/>.
  -->

<shape xmlns:android="http://schemas.android.com/apk/res/android">

    <corners
        android:topLeftRadius="4dp"
        android:topRightRadius="4dp"
        />

    <solid
        android:color="@color/primary"
        />

<!--
    <stroke
        android:width="2dp"
        android:color="@color/color_black"
        />
-->

</shape>
  ~ Purpose: Mobile application for registering facts of the forest violations.
  ~ Author:  Dmitry Baryshnikov (aka Bishop), bishop.dev@gmail.com
  ~ Author:  NikitaFeodonit, nfeodonit@yandex.com
  ~ ******************************************************************************
  ~ Copyright (c) 2015-2015. NextGIS, info@nextgis.com
  ~
  ~ This program is free software: you can redistribute it and/or modify
  ~ it under the terms of the GNU General Public License as published by

<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_height="wrap_content"
    android:layout_width="wrap_content"
    android:orientation="vertical"
    >

    <!-- TODO: correct styles for dark theme -->

    <LinearLayout
        android:layout_height="wrap_content"
        android:layout_width="match_parent"
        android:layout_gravity="center_horizontal"
        android:background="@drawable/dialog_yes_no_background"
        android:orientation="vertical"
        >


        <LinearLayout
            android:layout_height="wrap_content"
            android:layout_width="match_parent"
            android:padding="12dp"
            android:background="@drawable/dialog_yes_no_title_background"
            android:orientation="horizontal"
            >

            <ImageView
                android:id="@+id/dialog_icon_yn"
                android:layout_height="wrap_content"
                android:layout_width="wrap_content"
                android:layout_marginRight="12dp"
                android:layout_gravity="center_vertical"
                android:visibility="gone"
                />

            <TextView
                android:id="@+id/dialog_title_yn"
                android:layout_height="wrap_content"
                android:layout_width="match_parent"
                android:layout_gravity="center_vertical"
                android:textColor="@color/color_white"
                android:textAppearance="?android:attr/textAppearanceLarge"
                />

        </LinearLayout>

        <View
            android:layout_height="2dp"
            android:layout_width="match_parent"
            android:background="@color/color_black"
            android:visibility="gone"
            />

        <ScrollView
            android:layout_height="wrap_content"
            android:layout_width="match_parent"
            android:layout_marginTop="24dp"
            android:layout_marginLeft="24dp"
            android:layout_marginRight="24dp"
            android:layout_marginBottom="24dp"
            >

            <LinearLayout
                android:layout_height="wrap_content"
                android:layout_width="match_parent"
                android:orientation="vertical"
                >

                <LinearLayout
                    android:id="@+id/dialog_layout_yn"
                    android:layout_height="wrap_content"
                    android:layout_width="match_parent"
                    android:orientation="vertical"
                    android:visibility="gone"
                    >

                </LinearLayout>


                <TableLayout
                    android:id="@+id/dialog_buttons_yn"
                    android:layout_height="wrap_content"
                    android:layout_width="match_parent"
                    android:stretchColumns="0,1"
                    android:orientation="horizontal"
                    android:visibility="gone"
                    >

                    <TableRow
                        android:layout_height="wrap_content"
                        android:layout_width="match_parent"
                        >

                        <Button
                            android:id="@+id/dialog_btn_negative_yn"
                            android:layout_height="wrap_content"
                            android:layout_width="1dp"
                            android:layout_weight="1"
                            android:layout_marginRight="12dp"
                            android:paddingTop="5dp"
                            android:paddingBottom="5dp"
                            android:paddingLeft="5dp"
                            android:paddingRight="5dp"
                            android:textAppearance="?android:attr/textAppearanceMedium"
                            android:visibility="invisible"
                            />

                        <Button
                            android:id="@+id/dialog_btn_positive_yn"
                            android:layout_height="wrap_content"
                            android:layout_width="1dp"
                            android:layout_weight="1"
                            android:layout_marginLeft="12dp"
                            android:paddingTop="5dp"
                            android:paddingBottom="5dp"
                            android:paddingLeft="5dp"
                            android:paddingRight="5dp"
                            android:textAppearance="?android:attr/textAppearanceMedium"
                            android:visibility="invisible"
                            />

                    </TableRow>

                </TableLayout>

            </LinearLayout>

        </ScrollView>

    </LinearLayout>

</LinearLayout>
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
private void onCreateNavigationView() {
            public void onDataChange(DataSnapshot dataSnapshot) {
                Usuario user = dataSnapshot.getValue(Usuario.class);

                for (String pId : user.getProjetos()) {
                    FirebaseDatabase database = FirebaseDatabase.getInstance();
                    DatabaseReference myRef = database.getReference("projects/" + pId );
                    final String projectId = pId;
                    myRef.addListenerForSingleValueEvent(
                            new ValueEventListener() {
                                @Override
                                public void onDataChange(DataSnapshot dataSnapshot) {
                                    // Get user value
                                    Projeto projeto = dataSnapshot.getValue(Projeto.class);
                                    addProjectMenu(projeto.getNomeProjeto(), projectId);

                                }

                                @Override
                                public void onCancelled(DatabaseError databaseError) {
                                    Log.w("Firebase", "getUser:onCancelled", databaseError.toException());
                                    // ...
                                }
                            });

                }
            }

            @Override
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void afterTextChanged(Editable editable) {
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_note);
        // Even though we change content view later, we secure window as soon as possible
        Misc.secureWindow(NoteActivity.this);

private void readFromParcel(Parcel inParcel) {
        mId = inParcel.readInt();
        mPosition = inParcel.readInt();
        mNoteTitle = inParcel.readString();
        String note = inParcel.readString();
        try {
            mEditedDate = EasyDate.fromIsoString(inParcel.readString());
        } catch (ParseException e) {
private void readFromParcel(Parcel inParcel) {
        mColor = inParcel.readInt();
        mArchived = inParcel.readInt() > 0;
        mDeleted = inParcel.readInt() > 0;
        mType = Type.valueOf(inParcel.readString());
        mNote = NoteContent.fromString(mType, inParcel.readString());
        mTags = convertToTagSet(inParcel.readString());
    }

public void writeToParcel(Parcel outParcel, int flags) {
        outParcel.writeInt(mId);
        outParcel.writeInt(mPosition);
        outParcel.writeString(mNoteTitle);
        outParcel.writeString(mNote.toString());
        outParcel.writeString(mEditedDate.toString());
        outParcel.writeInt(mColor);
        outParcel.writeInt(mArchived ?1 :0);
        outParcel.writeInt(mDeleted ?1 :0);
        outParcel.writeString(mType.name());
        outParcel.writeString(convertTagSetToString(mTags));
    }

import com.twistedplane.sealnote.data.AdapterLoader;
import com.twistedplane.sealnote.data.Note;
import com.twistedplane.sealnote.data.SealnoteAdapter;

/**
 * Main fragment where all cards are listed in a staggered grid
public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        Log.d(TAG, "Creating SealNote fragment...");

        // Get folder active in activity
        String folder = getArguments().getString("SN_FOLDER", Note.Folder.FOLDER_LIVE.name());
        int tagid = getArguments().getInt("SN_TAGID", -1);

import android.app.Activity;
import android.content.Context;
import android.content.res.Resources;
import android.view.Window;
import android.view.WindowManager;
import com.twistedplane.sealnote.R;

/**
 * Miscellaneous helper functions
public static void secureWindow(Activity activity) {
            window.setFlags(0, WindowManager.LayoutParams.FLAG_SECURE);
        }
    }
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void addNewMessage(Message message) {
            }
        }
        if (item == null) {
            item = new MessageHeaderParent((message.getStream() == null) ? null :
                    message.getStream().getName(), message.getSubject(), message.getIdForHolder(), message);
            item.setMessageType(message.getType());
            item.setDisplayRecipent(message.getDisplayRecipient(zulipApp));
            if (message.getType() == MessageType.STREAM_MESSAGE)
                item.setMute(mMutedTopics.isTopicMute(message));
            item.setColor((message.getStream() == null) ? mDefaultStreamHeaderColor : message.getStream().getParsedColor());
            items.add(getItemCount(true) - 1, item);
            notifyItemInserted(getItemCount(true) - 1);
        }
        items.add(getItemCount(true) - 1, message);
        notifyItemInserted(getItemCount(true) - 1);
    }


    public RecyclerView.ViewHolder onCreateViewHolder(final ViewGroup parent, int viewType) {
        switch (viewType) {
public void onBindViewHolder(final RecyclerView.ViewHolder holder, final int pos

                if (messageHeaderParent.getMessageType() == MessageType.STREAM_MESSAGE) {
                    messageHeaderHolder.streamTextView.setText(messageHeaderParent.getStream());
                    messageHeaderHolder.topicTextView.setText(messageHeaderParent.getSubject());

                    ViewCompat.setBackgroundTintList(messageHeaderHolder.arrowHead, ColorStateList.valueOf(messageHeaderParent.getColor()));
import com.zulip.android.util.MutedTopics;
import com.zulip.android.util.TypeSwapper;
import com.zulip.android.util.ZLog;
import com.zulip.android.widget.ZulipWidget;

import org.json.JSONException;
import java.net.SocketTimeoutException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Callable;

/**
private void processMessageEditParam(List<EventsBranch> messageEditLimitEvents)
     * @param updateEvents list of events {@link EventsBranch.BranchType#UPDATE_MESSAGE}
     */
    private void processUpdateMessages(List<EventsBranch> updateEvents) {
        final List<Integer> messageIds = new ArrayList<>();
        for (EventsBranch event : updateEvents) {
            UpdateMessageWrapper updateEvent = (UpdateMessageWrapper) event;
            Message message = updateEvent.getMessage();
            if (message != null) {
                message.setFormattedContent(updateEvent.getFormattedContent());
                message.setHasBeenEdited(true);

                // update the message in database
                Dao<Message, Integer> messageDao = app.getDao(Message.class);
                try {
                    messageDao.update(message);
                    messageIds.add(message.getId());
                } catch (SQLException e) {
                    ZLog.logException(e);
                }
            }
        }
private void processUpdateMessages(List<EventsBranch> updateEvents) {
            @Override
            public void run() {
                RecyclerMessageAdapter adapter = mActivity.getCurrentMessageList().getAdapter();
                for (int id : messageIds) {
                    // notify adapter data item changed
                    adapter.notifyItemChanged(adapter.getItemIndex(id));
                }
            }
        });
    @SerializedName("message_id")
    private int messageId;

    /**
     * Returns old form of edited message.
     *
     * @return {@link Message} message
     */
    public Message getMessage() {
        try {
            Dao<Message, Integer> messageDao = ZulipApp.get().getDao(Message.class);
            return messageDao.queryBuilder().where().eq(Message.ID_FIELD, this.messageId).queryForFirst();
        } catch (SQLException e) {
            ZLog.logException(e);
        }

        return null;
    }

    public String getFormattedContent() {
        return this.formattedContent;
    }

    public void setFormattedContent(String formattedContent) {
        this.formattedContent = formattedContent;
    }

    public String getOrigFormattedContent() {
        return this.origFormattedContent;
    }
}
public String getSubject() {
        return subject;
    }

    public Person[] getRecipients(ZulipApp app) {
        Person[] recipientsCache;
        String[] ids = TextUtils.split(this.getId(), ",");
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public static Boolean parseBoolean(Object obj) {
     * Sometimes search returns a count as a json number ("count":0), sometimes a string ("count":"1103").
     * Seems to be the same for result "ids" list (See Issue #1).  Handle either form and return as an int.
     */
    public static Integer parseInteger(Object o) {
        if (o instanceof Integer) {
            return (Integer)o;
        } else if (o instanceof String) {
public static Integer parseInteger(Object o) {
            }
        } else {
            Log.d(TAG, "unexpected type: "+o);
            return null;
        }
    }
}

    public Integer offset;

    public Integer visible;

    public final Integer searchLimit = 500;
    
private static HttpConnection conn() {
            return results; // search failed or server crashed

        Map<String, ?> response = (Map<String, ?>) resp;
        visible = Api.parseInteger(response.get("count"));

        // result_lol is a list of lists and looks like one of:
        //   [[32673,null,"0.0"],[886843,null,"0.0"]] // integer ids+?
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void onUnbind(long messageId, AudioContentViewControl view) {
            player.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                @Override
                public void onCompletion(MediaPlayer mp) {
                    getAudioFragment().seekPlayerTo(0);
                    setAudioStatus(AudioContentView.STATUS_ENDED);
                }
            });
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
private String getTempDirectoryPath(Context ctx) {

		return cache.getAbsolutePath();
	}
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
private void autoCorrectTextAt(Editable s, int cursor)
	{
		String textToCursor = s.subSequence(0, cursor).toString();
		String[] words = textToCursor.split("[ -]+");
		String lastWordBeforeCursor = words[words.length-1];

		boolean isFirstWord = words.length == 1;
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    private MenuItem mInviteGroupMenu;
    private MenuItem mSetGroupSubjectMenu;
    private MenuItem mLeaveGroupMenu;
    private MenuItem mAttachMenu;

protected void updateUI() {

            // menu items requiring membership
            visible = mConversation.getGroupMembership() == Groups.MEMBERSHIP_MEMBER;
            mLeaveGroupMenu.setVisible(visible);
            mLeaveGroupMenu.setEnabled(visible);
            mAttachMenu.setVisible(visible);
            mAttachMenu.setEnabled(visible);
            if (!visible)
protected void onInflateOptionsMenu(Menu menu, MenuInflater inflater) {
        inflater.inflate(R.menu.group_message_menu, menu);
        mInviteGroupMenu = menu.findItem(R.id.invite_group);
        mSetGroupSubjectMenu = menu.findItem(R.id.group_subject);
        mLeaveGroupMenu = menu.findItem(R.id.leave_group);
        mAttachMenu = menu.findItem(R.id.menu_attachment);
    }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

android {
        applicationId "com.booboot.vndbandroid"
        minSdkVersion 17
        targetSdkVersion 25
        versionCode 26
        versionName "2.0.7"
    }

    buildTypes {
public boolean goToFragment(int id) {
        } else if (id == R.id.nav_about) {
            directSubfragment = new AboutFragment();
        } else if (id == R.id.nav_logout) {
            VNDBServer.closeAll();
            Cache.clearCache(this);
            SettingsManager.setUserId(this, -1);
            RecommendationsFragment.recommendations = null;
            startActivity(new Intent(this, LoginActivity.class));
            selectedItem = 0;
            instance = null;
            finish();
            return true;
        }

        directSubfragment.setArguments(args);
public boolean goToFragment(int id) {
        return true;
    }

    public void addActiveFragment(VNTypeFragment fragment) {
        this.activeFragments.add(fragment);
    }
import com.booboot.vndbandroid.util.Utils;

public class RankingMostVotedFragment extends Fragment {
    private static ProgressiveResultLoader progressiveResultLoader;

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
import com.booboot.vndbandroid.util.Utils;

public class RankingNewlyAddedFragment extends Fragment {
    private static ProgressiveResultLoader progressiveResultLoader;

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
import java.util.Locale;

public class RankingNewlyReleasedFragment extends Fragment {
    private static ProgressiveResultLoader progressiveResultLoader;

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
import com.booboot.vndbandroid.util.Utils;

public class RankingPopularFragment extends Fragment {
    private static ProgressiveResultLoader progressiveResultLoader;

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
import com.booboot.vndbandroid.util.Utils;

public class RankingTopFragment extends Fragment {
    private static ProgressiveResultLoader progressiveResultLoader;

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void onDismiss(boolean userInitiated) {

    @Override
    protected void onDraw(Canvas c) {
        if (isDismissed) return;

        if (dimColor != -1) {
            c.drawColor(dimColor);
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Subproject commit 8d7612d3cc7f3577294b12825b64fb3e71a44704
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
private CameraUpdate addCircle(GoogleMap map, LatLng latlng, int radius, Observa
                include(SphericalUtil.computeOffset(latlng, radius, 180)).
                include(SphericalUtil.computeOffset(latlng, radius, 270)).build();

        return CameraUpdateFactory.newLatLngBounds(bounds, radius);
    }

    public void addMapPosition(final GoogleMap map, Observation observation, BetterJSONObject observationJson) {
public void addMapPosition(final GoogleMap map, Observation observation, BetterJ
        map.setOnMapLoadedCallback(new GoogleMap.OnMapLoadedCallback() {
            @Override
            public void onMapLoaded() {
                if (finalCameraUpdate != null) map.moveCamera(finalCameraUpdate);
            }
        });

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void trustKeyChange(String fingerprint) {
    }

    private void showKeyWarning(int textId, final int dialogTitleId, final int dialogMessageId, final Object... data) {
        Activity context = getActivity();
        if (context != null) {
            showWarning(context.getText(textId), new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    new MaterialDialog.Builder(getActivity())
                        .title(dialogTitleId)
                        .content(dialogMessageId)
                        .positiveText(R.string.button_accept)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void onFailure(IMqttToken asyncActionToken,
				myClient.connect(connectOptions, invocationContext, listener);
			}
		} catch (Exception e) {
			handleException(resultBundle, e);
		}
	}
void offline() {
	* multiple times 
	*/
	synchronized void reconnect() {
		if (isConnecting) {
			service.traceDebug(TAG, "The client is connecting. Reconnect return directly.");
			return ;
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import android.os.Bundle;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;

    private void parseIntent() {
        mCrashArray = getIntent().getStringArrayExtra(EXTRA_CRASH_LOGS);
        mLog4Cat = getIntent().getStringExtra(EXTRA_CRASH_4_LOGCAT);
        mPackageName = getIntent().getStringExtra(EXTRA_PACKAGE);
    }
private void setUpRecyclerView() {
        mRecyclerView.setLayoutManager(layoutManager);
        mCrashListAdapter = new CrashListAdapter(mCrashArray, mPackageName);
        mRecyclerView.setAdapter(mCrashListAdapter);
        Log.e("CrashWoodpecker", mLog4Cat);
    }

    @Override public boolean onCreateOptionsMenu(Menu menu) {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import org.kontalk.provider.MyMessages.Messages;
import org.kontalk.provider.MyMessages.Messages.Fulltext;

import android.content.Context;
import android.database.Cursor;


/**
public static SearchItem fromCursor(Context context, Cursor cursor) {
    }

    public static Cursor query(Context context, String query) {
        // TODO enhanced queries?
        return context.getContentResolver().query(Fulltext.CONTENT_URI
                    .buildUpon().appendQueryParameter("pattern", query + "*").build(),
                SEARCH_PROJECTION, null, null, null);
    }
}
public void setQuery(String query) {
        Activity parent = getActivity();
        if (parent != null) {
            mCursor = SearchItem.query(parent, mQuery);
            getActivity().startManagingCursor(mCursor);

            mListAdapter = new SearchListAdapter(parent, mCursor);
            // TODO mListAdapter.setOnContentChangedListener(mContentChangedListener);
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 * Author:   NikitaFeodonit, nfeodonit@yandex.com
 * Author:   Stanislav Petriakov, becomeglory@gmail.com
 * *****************************************************************************
 * Copyright (c) 2012-2015. NextGIS, info@nextgis.com
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
import android.view.View;
import android.widget.LinearLayout;
import android.widget.ListView;
import com.nextgis.maplib.util.Constants;
import com.nextgis.maplibui.api.ISelectResourceDialog;
import com.nextgis.maplibui.dialog.LocalResourcesListAdapter;
protected void onDialogClosed(boolean positiveResult)


    /**
     * Saves the text to the {@link SharedPreferences}.
     *
     * @param text
     *         The text to save
public void setText(String text)


    /**
     * Gets the text from the {@link SharedPreferences}.
     *
     * @return The current preference value.
     */
Subproject commit 558f08a66cf52225d5ee381d93932796ba8ce297
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    private static final int MESSAGE_PAGE_QUERY_TOKEN = 8723;

    /** How many messages to load per page. */
    private static final int MESSAGE_PAGE_SIZE = 1000;

    private static final int SELECT_ATTACHMENT_OPENABLE = Activity.RESULT_FIRST_USER + 1;
    private static final int SELECT_ATTACHMENT_CONTACT = Activity.RESULT_FIRST_USER + 2;
public int getValue() {

    protected ComposerBar mComposer;

    private MessageListQueryHandler mQueryHandler;
    MessageListAdapter mListAdapter;
    /** Header view for the list view: "previous messages" button. */
    private View mHeaderView;
public void onClick(View v) {
                startMessagesQuery(mQueryHandler.getLastId());
            }
        });
        list.addHeaderView(mHeaderView);

        // set custom background (if any)
        ImageView background = (ImageView) getView().findViewById(R.id.background);
private void startMessagesQuery() {
            threadId, isSearching() ? 0 : MESSAGE_PAGE_SIZE, 0);
    }

    private void startMessagesQuery(long lastId) {
        CompositeMessage.startQuery(mQueryHandler, MESSAGE_PAGE_QUERY_TOKEN,
            threadId, isSearching() ? 0 : MESSAGE_PAGE_SIZE, lastId);
    }
private void hideHeaderView() {
        mHeaderView.setVisibility(View.GONE);
    }

    private void enableHeaderView(boolean enabled) {
        mNextPageButton.setEnabled(enabled);
    }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
protected void handleActionView(Uri uri) {
                threadId);
            setThreadId(threadId);
        }
        else {
            mConversation = Conversation.createNew(getActivity());
            mConversation.setRecipient(mUserJID);
protected void handleActionViewConversation(Uri uri, Bundle args) {
    @Override
    protected void onArgumentsProcessed() {
        // non existant thread - check for not synced contact
        if (getThreadId() <= 0 && mConversation != null) {
            Contact contact = mConversation.getContact();
            if (!(mUserPhone != null && contact != null) || !contact.isRegistered()) {
                // ask user to send invitation
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        <item name="android:singleLine">true</item>
    </style>

    <style name="passcode_field_defaults">
        <item name="android:layout_height">wrap_content</item>
        <item name="android:layout_width">wrap_content</item>
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public static String stringFromHtml(String source) {
	}

	private static Spanned trim(Spanned text) {
		int end = text.length();
		while (isWhitespace(text.charAt(end - 1)) && --end > 0) {}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public boolean equals(Object inObject) {
		return false;
	}

	@Override
	public int hashCode() {
		return id.hashCode();
	xmlns:android="http://schemas.android.com/apk/res/android"
	xmlns:tools="http://schemas.android.com/tools"
	android:layout_width="match_parent"
	android:layout_height="match_parent">

	<android.support.v4.widget.SwipeRefreshLayout
		android:id="@+id/swipeRefreshLayout"
package eu.davidea.flexibleadapter;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
public void run() {
	 * @return ViewGroup layout that will hold the sticky header ItemViews
	 * @since 5.0.0-b6
	 */
	//TODO: make it working programmatically
	public ViewGroup getStickySectionHeadersHolder() {
		return (ViewGroup) ((Activity) mRecyclerView.getContext()).findViewById(R.id.sticky_header_container);
	}

	/**
public int getRelativePositionOf(@NonNull T child) {
	}

	/**
	 * Expands an item that is Expandable, not yet expanded, that has subItems and
	 * no child is selected.
	 * <p>If configured, automatic smooth scroll will be performed.</p>
	 *
	 * @param position the position of the item to expand
	 * @return the number of subItems expanded
private int expand(int position, boolean expandAll, boolean init) {
		if (init || !expandable.isExpanded() &&
				(!parentSelected || expandable.getExpansionLevel() <= selectedLevel)) {

			//Collapse others expandable if configured so
			//Skip when expanding all is requested
			//Fetch again the new position after collapsing all!!
			if (collapseOnExpand && !expandAll && collapseAll(minCollapsibleLevel) > 0) {
				position = getGlobalPositionOf(item);
private int expand(int position, boolean expandAll, boolean init) {
	}

	/**
	 * Expands all expandable items with minimum of level {@link #minCollapsibleLevel}.
	 *
	 * @return the number of parent successfully expanded
	 * @see #expandAll(int)
public int expandAll() {
	}

	/**
	 * Expands all expandable items with at least the specified level.
	 *
	 * @param level the minimum level to expand the sub expandable items
	 * @return the number of parent successfully expanded
public int expandAll(int level) {
	}

	/**
	 * Collapses an Expandable item that is already expanded, in conjunction with no subItems
	 * selected or item is pending removal (used in combination with removeRange).
	 * <p>All Expandable subItem, that are expanded, are recursively collapsed.</p>
	 *
	 * @param position the position of the item to collapse
	 * @return the number of subItems collapsed
	 * @see #collapse(int)
	 * @since 5.0.0-b1
	 */
	public int collapse(@IntRange(from = 0) int position) {
private int recursiveCollapse(int startPosition, List<T> subItems, int level) {
	 * Collapses all expandable items with the minimum level of {@link #minCollapsibleLevel}.
	 *
	 * @return the number of parent successfully collapsed
	 * @see #collapseAll(int)
	 * @see #setMinCollapsibleLevel(int)
	 * @since 5.0.0-b1
	 * public boolean equals(Object o) {
	 *     return this == o;
	 * }</pre></p>
	 * <p>When used with {@code HashMap}, the general contract for the {@code equals} and
	 * {@link #hashCode()} methods is that if {@code equals} returns {@code true} for any two
	 * objects, then {@code hashCode()} must return the same value for these objects. This means
	 * that subclasses of {@code Object} usually override either both methods or neither of them.
	 *
	 * @param o instance to compare
	 * @return true if items are equals, false otherwise.
	/**
	 * Checks and performs the filter on this item, you can apply the logic and the filter on
	 * every fields your use case foreseen.
	 *
	 * @param constraint the search text typed by the user
	 * @return true if this item should be collected by the Adapter for the filtered list, false otherwise
package eu.davidea.flexibleadapter.utils;

import android.annotation.TargetApi;
import android.content.Context;
import android.content.res.TypedArray;
import android.graphics.Typeface;
import android.os.Build;
public static int findLastCompletelyVisibleItemPosition(RecyclerView.LayoutManag
		}
	}

}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
In the java `Calendar` class months use 0 based indexing: January is month 0, De

### How do I use my custom logic to enable/disable dates?
`DatePickerDialog` exposes some utility methods to enable / disable dates for common scenario's. If your needs are not covered by these, you can supply a custom implementation of the `DateRangeLimiter` interface.

```java
class MyDateRangeLimiter implements DateRangeLimiter {
  @Override
  public int getMinYear() {
    return 1900;
class MyDateRangeLimiter implements DateRangeLimiter {
  public Calendar setToNearestDate(Calendar day) {
      return day;
  }
}
```

    private static final String KEY_VERSION = "version";
    private static final String KEY_TIMEZONE = "timezone";
    private static final String KEY_DATERANGELIMITER = "daterangelimiter";
    private static final String KEY_DEFAULTDATERANGELIMITER = "defaultdaterangelimiter";

    private static final int ANIMATION_DURATION = 300;
    private static final int ANIMATION_DELAY = 500;
    private int mCancelColor = -1;
    private Version mVersion;
    private TimeZone mTimezone;
    private DefaultDateRangeLimiter mDefaultLimiter = new DefaultDateRangeLimiter(this);
    private DateRangeLimiter mDateRangeLimiter = mDefaultLimiter;

    private HapticFeedbackController mHapticFeedbackController;
public void onSaveInstanceState(@NonNull Bundle outState) {
        outState.putInt(KEY_CANCEL_COLOR, mCancelColor);
        outState.putSerializable(KEY_VERSION, mVersion);
        outState.putSerializable(KEY_TIMEZONE, mTimezone);
        outState.putSerializable(KEY_DATERANGELIMITER, mDateRangeLimiter);
        outState.putSerializable(KEY_DEFAULTDATERANGELIMITER, mDefaultLimiter);
    }

    @Override
public View onCreateView(LayoutInflater inflater, ViewGroup container,
            mCancelColor = savedInstanceState.getInt(KEY_CANCEL_COLOR);
            mVersion = (Version) savedInstanceState.getSerializable(KEY_VERSION);
            mTimezone = (TimeZone) savedInstanceState.getSerializable(KEY_TIMEZONE);
            mDateRangeLimiter = (DateRangeLimiter) savedInstanceState.getSerializable(KEY_DATERANGELIMITER);
            mDefaultLimiter = (DefaultDateRangeLimiter) savedInstanceState.getSerializable(KEY_DEFAULTDATERANGELIMITER);
        }

        int viewRes = mVersion == Version.VERSION_1 ? R.layout.mdtp_date_picker_dialog : R.layout.mdtp_date_picker_dialog_v2;
        View view = inflater.inflate(viewRes, container, false);
        // All options have been set at this point: round the initial selection if necessary

package com.wdullaer.materialdatetimepicker.date;

import java.io.Serializable;
import java.util.Calendar;

@SuppressWarnings("WeakerAccess")
public interface DateRangeLimiter extends Serializable {
    int getMinYear();

    int getMaxYear();

package com.wdullaer.materialdatetimepicker.date;

import android.support.annotation.NonNull;
import android.support.annotation.Nullable;

import java.util.Arrays;
import java.util.Calendar;
import java.util.HashSet;
import java.util.TreeSet;

class DefaultDateRangeLimiter implements DateRangeLimiter {
    private static final int DEFAULT_START_YEAR = 1900;
    private static final int DEFAULT_END_YEAR = 2100;

    private DatePickerController mController;
    private int mMinYear = DEFAULT_START_YEAR;
    private int mMaxYear = DEFAULT_END_YEAR;
    private Calendar mMinDate;
    private Calendar mMaxDate;
    private TreeSet<Calendar> selectableDays = new TreeSet<>();
    private HashSet<Calendar> disabledDays = new HashSet<>();

    DefaultDateRangeLimiter(@NonNull DatePickerController controller) {
        mController = controller;
    }

    void setSelectableDays(@NonNull Calendar[] days) {
        for (Calendar selectableDay : days) Utils.trimToMidnight(selectableDay);
        this.selectableDays.addAll(Arrays.asList(days));
void setMaxDate(@NonNull Calendar calendar) {
        mMaxDate = Utils.trimToMidnight((Calendar) calendar.clone());
    }

    void setYearRange(int startYear, int endYear) {
        if (endYear < startYear) {
            throw new IllegalArgumentException("Year end must be larger than or equal to year start");
public int getMaxYear() {
    public @NonNull Calendar getStartDate() {
        if (!selectableDays.isEmpty()) return (Calendar) selectableDays.first().clone();
        if (mMinDate != null) return (Calendar) mMinDate.clone();
        Calendar output = Calendar.getInstance(mController.getTimeZone());
        output.set(Calendar.YEAR, mMinYear);
        output.set(Calendar.DAY_OF_MONTH, 1);
        output.set(Calendar.MONTH, Calendar.JANUARY);
public int getMaxYear() {
    public @NonNull Calendar getEndDate() {
        if (!selectableDays.isEmpty()) return (Calendar) selectableDays.last().clone();
        if (mMaxDate != null) return (Calendar) mMaxDate.clone();
        Calendar output = Calendar.getInstance(mController.getTimeZone());
        output.set(Calendar.YEAR, mMaxYear);
        output.set(Calendar.DAY_OF_MONTH, 31);
        output.set(Calendar.MONTH, Calendar.DECEMBER);
private boolean isAfterMax(@NonNull Calendar calendar) {

            if (newCalendar != null || higher == null) {
                newCalendar = newCalendar == null ? calendar : newCalendar;
                newCalendar.setTimeZone(mController.getTimeZone());
                return (Calendar) newCalendar.clone();
            }

public void setToNearestShouldBeInSelectableDays(
            @InRange(min = "01/01/1800", max = "12/31/2099", format = "MM/dd/yyyy") Date date,
            @InRange(min = "01/01/1800", max = "12/31/2099", format = "MM/dd/yyyy") Date[] dates
    ) {
        DefaultDateRangeLimiter limiter = new DefaultDateRangeLimiter(controller);

        Calendar day = Calendar.getInstance();
        day.setTime(date);
public void setToNearestShouldNeverBeInDisabledDays(
            @InRange(min = "01/01/1800", max = "12/31/2099", format = "MM/dd/yyyy") Date date,
            @InRange(min = "01/01/1800", max = "12/31/2099", format = "MM/dd/yyyy") Date[] dates
    ) {
        DefaultDateRangeLimiter limiter = new DefaultDateRangeLimiter(controller);

        Calendar day = Calendar.getInstance();
        day.setTime(date);
public void setToNearestShouldNeverBeBelowMinDate(
            @InRange(min = "01/01/1800", max = "12/31/2099", format = "MM/dd/yyyy") Date date,
            @InRange(min = "01/01/1800", max = "12/31/2099", format = "MM/dd/yyyy") Date minDate
    ) {
        DefaultDateRangeLimiter limiter = new DefaultDateRangeLimiter(controller);

        Calendar day = Calendar.getInstance();
        day.setTime(date);
public void setToNearestShouldNeverBeAboveMaxDate(
            @InRange(min = "01/01/1800", max = "12/31/2099", format = "MM/dd/yyyy") Date date,
            @InRange(min = "01/01/1800", max = "12/31/2099", format = "MM/dd/yyyy") Date maxDate
    ) {
        DefaultDateRangeLimiter limiter = new DefaultDateRangeLimiter(controller);

        Calendar day = Calendar.getInstance();
        day.setTime(date);
public TimeZone getTimeZone() {
    // getters
    @Test
    public void getSelectableDaysShouldHaveDatesTrimmedToMidnight() {
        DefaultDateRangeLimiter limiter = new DefaultDateRangeLimiter(controller);
        Calendar[] days = new Calendar[3];
        for (int i = 0;i < days.length; i++) {
            Calendar day = Calendar.getInstance();
public void getSelectableDaysShouldHaveDatesTrimmedToMidnight() {

    @Test
    public void getDisabledDaysShouldHaveDatesTrimmedToMidnight() {
        DefaultDateRangeLimiter limiter = new DefaultDateRangeLimiter(controller);
        Calendar[] days = new Calendar[3];
        for (int i = 0;i < days.length; i++) {
            Calendar day = Calendar.getInstance();
public void getDisabledDaysShouldHaveDatesTrimmedToMidnight() {

    @Test
    public void getMinDateShouldHaveDateTrimmedToMidnight() {
        DefaultDateRangeLimiter limiter = new DefaultDateRangeLimiter(controller);
        Calendar day = Calendar.getInstance();
        day.set(Calendar.YEAR, 1999);
        day.set(Calendar.HOUR_OF_DAY, 2);
public void getMinDateShouldHaveDateTrimmedToMidnight() {

    @Test
    public void getMaxDateShouldHaveDateTrimmedToMidnight() {
        DefaultDateRangeLimiter limiter = new DefaultDateRangeLimiter(controller);
        Calendar day = Calendar.getInstance();
        day.set(Calendar.YEAR, 1999);
        day.set(Calendar.HOUR_OF_DAY, 2);
public void getMaxDateShouldHaveDateTrimmedToMidnight() {
    // getStartDate()
    @Test
    public void getStartDateShouldReturnFirstSelectableDay() {
        DefaultDateRangeLimiter limiter = new DefaultDateRangeLimiter(controller);
        Calendar[] days = new Calendar[3];
        for (int i = 0; i < days.length; i++) {
            days[i] = Calendar.getInstance();
public void getStartDateShouldReturnFirstSelectableDay() {

    @Test
    public void getStartDateShouldReturnMinDate() {
        DefaultDateRangeLimiter limiter = new DefaultDateRangeLimiter(controller);
        Calendar minDate = Calendar.getInstance();

        limiter.setMinDate(minDate);
public void getStartDateShouldReturnMinDate() {

    @Test
    public void getStartDateShouldPreferSelectableOverMinDate() {
        DefaultDateRangeLimiter limiter = new DefaultDateRangeLimiter(controller);
        Calendar[] days = new Calendar[3];
        for (int i = 0; i < days.length; i++) {
            days[i] = Calendar.getInstance();
public void getStartDateShouldPreferSelectableOverMinDate() {
    // getEndDate()
    @Test
    public void getEndDateShouldReturnLastSelectableDay() {
        DefaultDateRangeLimiter limiter = new DefaultDateRangeLimiter(controller);
        Calendar[] days = new Calendar[3];
        for (int i = 0; i < days.length; i++) {
            days[i] = Calendar.getInstance();
public void getEndDateShouldReturnLastSelectableDay() {

    @Test
    public void getEndDateShouldReturnMaxDate() {
        DefaultDateRangeLimiter limiter = new DefaultDateRangeLimiter(controller);
        Calendar maxDate = Calendar.getInstance();

        limiter.setMaxDate(maxDate);
public void getEndDateShouldReturnMaxDate() {

    @Test
    public void getEndDateShouldPreferSelectableOverMaxDate() {
        DefaultDateRangeLimiter limiter = new DefaultDateRangeLimiter(controller);
        Calendar[] days = new Calendar[3];
        for (int i = 0; i < days.length; i++) {
            days[i] = Calendar.getInstance();
public void getEndDateShouldPreferSelectableOverMaxDate() {
    // isOutOfRange()
    @Test
    public void isOutOfRangeShouldReturnTrueForDisabledDates() {
        DefaultDateRangeLimiter limiter = new DefaultDateRangeLimiter(controller);
        Calendar[] days = new Calendar[1];
        Calendar day = Calendar.getInstance();
        day.set(Calendar.YEAR, 1999);
public void isOutOfRangeShouldReturnTrueForDisabledDates() {

    @Test
    public void isOutOfRangeShouldReturnFalseForEnabledDates() {
        DefaultDateRangeLimiter limiter = new DefaultDateRangeLimiter(controller);
        Calendar[] days = new Calendar[1];
        Calendar day = Calendar.getInstance();
        day.set(Calendar.YEAR, 1999);
public void isOutOfRangeShouldReturnFalseForEnabledDates() {

    @Test
    public void isOutOfRangeShouldReturnTrueIfDateIsBeforeMin() {
        DefaultDateRangeLimiter limiter = new DefaultDateRangeLimiter(controller);
        Calendar day = Calendar.getInstance();
        day.set(Calendar.YEAR, 1999);

public void isOutOfRangeShouldReturnTrueIfDateIsBeforeMin() {

    @Test
    public void isOutOfRangeShouldReturnTrueIfDateIsBeforeMinYear() {
        DefaultDateRangeLimiter limiter = new DefaultDateRangeLimiter(controller);
        int minYear = 1999;

        limiter.setYearRange(minYear, minYear + 1);
public void isOutOfRangeShouldReturnTrueIfDateIsBeforeMinYear() {

    @Test
    public void isOutOfRangeShouldReturnTrueIfDateIsAfterMax() {
        DefaultDateRangeLimiter limiter = new DefaultDateRangeLimiter(controller);
        Calendar day = Calendar.getInstance();
        day.set(Calendar.YEAR, 1999);

public void isOutOfRangeShouldReturnTrueIfDateIsAfterMax() {

    @Test
    public void isOutOfRangeShouldReturnTrueIfDateIsAfterMaxYear() {
        DefaultDateRangeLimiter limiter = new DefaultDateRangeLimiter(controller);
        int maxYear = 1999;

        limiter.setYearRange(maxYear - 1, maxYear);
public void isOutOfRangeShouldReturnTrueIfDateIsAfterMaxYear() {

    @Test
    public void isOutOfRangeShouldPreferDisabledOverEnabled() {
        DefaultDateRangeLimiter limiter = new DefaultDateRangeLimiter(controller);
        Calendar[] days = new Calendar[1];
        Calendar day = Calendar.getInstance();
        day.set(Calendar.YEAR, 1999);
public void isOutOfRangeShouldPreferDisabledOverEnabled() {
    // setToNearestDate()
    @Test
    public void setToNearestShouldReturnTheInputWhenValid() {
        DefaultDateRangeLimiter limiter = new DefaultDateRangeLimiter(controller);
        Calendar day = Calendar.getInstance();
        Calendar expected = (Calendar) day.clone();

public void setToNearestShouldReturnTheInputWhenValid() {

    @Test
    public void setToNearestShouldRoundDisabledDates() {
        DefaultDateRangeLimiter limiter = new DefaultDateRangeLimiter(controller);
        Calendar[] days = new Calendar[3];
        for (int i = 0;i < days.length; i++) {
            Calendar day = Calendar.getInstance();
public void setToNearestShouldRoundDisabledDates() {

    @Test
    public void setToNearestShouldRoundToMinDate() {
        DefaultDateRangeLimiter limiter = new DefaultDateRangeLimiter(controller);
        Calendar minDate = Calendar.getInstance();
        minDate.set(Calendar.YEAR, 1999);

public void setToNearestShouldRoundToMinDate() {

    @Test
    public void setToNearestShouldRoundToMaxDate() {
        DefaultDateRangeLimiter limiter = new DefaultDateRangeLimiter(controller);
        Calendar maxDate = Calendar.getInstance();
        maxDate.set(Calendar.YEAR, 1999);

public void setToNearestShouldRoundToMaxDate() {

    @Test
    public void setToNearestShouldRoundToASelectableDay() {
        DefaultDateRangeLimiter limiter = new DefaultDateRangeLimiter(controller);
        Calendar[] days = new Calendar[3];
        for (int i = 0;i < days.length; i++) {
            Calendar day = Calendar.getInstance();
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Dv6
            <option value="$PROJECT_DIR$/app" />
          </set>
        </option>
        <option name="myModules">
          <set>
            <option value="$PROJECT_DIR$" />
            <option value="$PROJECT_DIR$/app" />
          </set>
        </option>
      </GradleProjectSettings>
    </option>
  </component>
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="NullableNotNullManager">
    <option name="myDefaultNullable" value="android.support.annotation.Nullable" />
    <option name="myDefaultNotNull" value="android.support.annotation.NonNull" />
    <ConfirmationsSetting value="0" id="Add" />
    <ConfirmationsSetting value="0" id="Remove" />
  </component>
  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_7" default="true" assert-keyword="true" jdk-15="true" project-jdk-name="1.8" project-jdk-type="JavaSDK">
    <output url="file://$PROJECT_DIR$/build/classes" />
  </component>
  <component name="ProjectType">
<project version="4">
  <component name="ProjectModuleManager">
    <modules>
      <module fileurl="file://$PROJECT_DIR$/Dv6.iml" filepath="$PROJECT_DIR$/Dv6.iml" />
      <module fileurl="file://$PROJECT_DIR$/app/app.iml" filepath="$PROJECT_DIR$/app/app.iml" />
    </modules>
  </component>
<?xml version="1.0" encoding="UTF-8"?>
<module external.linked.project.id="Dv6" external.linked.project.path="$MODULE_DIR$" external.root.project.path="$MODULE_DIR$" external.system.id="GRADLE" external.system.module.group="" external.system.module.version="unspecified" type="JAVA_MODULE" version="4">
  <component name="FacetManager">
    <facet type="java-gradle" name="Java-Gradle">
      <configuration>
    <content url="file://$MODULE_DIR$">
      <excludeFolder url="file://$MODULE_DIR$/.gradle" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
  </component>
</module>
    <facet type="android" name="Android">
      <configuration>
        <option name="SELECTED_BUILD_VARIANT" value="debug" />
        <option name="SELECTED_TEST_ARTIFACT" value="_android_test_" />
        <option name="ASSEMBLE_TASK_NAME" value="assembleDebug" />
        <option name="COMPILE_JAVA_TASK_NAME" value="compileDebugSources" />
        <afterSyncTasks>
      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/aidl/debug" isTestSource="false" generated="true" />
      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/debug" isTestSource="false" generated="true" />
      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/rs/debug" isTestSource="false" generated="true" />
      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/rs/debug" type="java-resource" />
      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/resValues/debug" type="java-resource" />
      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/r/androidTest/debug" isTestSource="true" generated="true" />
      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/aidl/androidTest/debug" isTestSource="true" generated="true" />
      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/androidTest/debug" isTestSource="true" generated="true" />
      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/rs/androidTest/debug" isTestSource="true" generated="true" />
      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/rs/androidTest/debug" type="java-test-resource" />
      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/resValues/androidTest/debug" type="java-test-resource" />
      <sourceFolder url="file://$MODULE_DIR$/src/debug/res" type="java-resource" />
      <sourceFolder url="file://$MODULE_DIR$/src/debug/resources" type="java-resource" />
      <sourceFolder url="file://$MODULE_DIR$/src/debug/assets" type="java-resource" />
      <sourceFolder url="file://$MODULE_DIR$/src/debug/aidl" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/src/debug/java" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/src/debug/jni" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/src/debug/rs" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/src/debug/shaders" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/src/testDebug/res" type="java-test-resource" />
      <sourceFolder url="file://$MODULE_DIR$/src/testDebug/resources" type="java-test-resource" />
      <sourceFolder url="file://$MODULE_DIR$/src/testDebug/assets" type="java-test-resource" />
      <sourceFolder url="file://$MODULE_DIR$/src/testDebug/aidl" isTestSource="true" />
      <sourceFolder url="file://$MODULE_DIR$/src/testDebug/java" isTestSource="true" />
      <sourceFolder url="file://$MODULE_DIR$/src/testDebug/jni" isTestSource="true" />
      <sourceFolder url="file://$MODULE_DIR$/src/testDebug/rs" isTestSource="true" />
      <sourceFolder url="file://$MODULE_DIR$/src/testDebug/shaders" isTestSource="true" />
      <sourceFolder url="file://$MODULE_DIR$/src/main/res" type="java-resource" />
      <sourceFolder url="file://$MODULE_DIR$/src/main/resources" type="java-resource" />
      <sourceFolder url="file://$MODULE_DIR$/src/main/assets" type="java-resource" />
      <sourceFolder url="file://$MODULE_DIR$/src/main/aidl" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/src/main/java" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/src/main/jni" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/src/main/rs" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/src/main/shaders" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/res" type="java-test-resource" />
      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/resources" type="java-test-resource" />
      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/assets" type="java-test-resource" />
      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/aidl" isTestSource="true" />
      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/java" isTestSource="true" />
      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/jni" isTestSource="true" />
      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/rs" isTestSource="true" />
      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/shaders" isTestSource="true" />
      <sourceFolder url="file://$MODULE_DIR$/src/test/res" type="java-test-resource" />
      <sourceFolder url="file://$MODULE_DIR$/src/test/resources" type="java-test-resource" />
      <sourceFolder url="file://$MODULE_DIR$/src/test/assets" type="java-test-resource" />
      <sourceFolder url="file://$MODULE_DIR$/src/test/aidl" isTestSource="true" />
      <sourceFolder url="file://$MODULE_DIR$/src/test/java" isTestSource="true" />
      <sourceFolder url="file://$MODULE_DIR$/src/test/jni" isTestSource="true" />
      <sourceFolder url="file://$MODULE_DIR$/src/test/rs" isTestSource="true" />
      <sourceFolder url="file://$MODULE_DIR$/src/test/shaders" isTestSource="true" />
      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/assets" />
      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/blame" />
      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/bundles" />
      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/classes" />
      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/dependency-cache" />
      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/exploded-aar/com.android.support/appcompat-v7/23.0.0/jars" />
      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/exploded-aar/com.android.support/design/23.0.0/jars" />
      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/exploded-aar/com.android.support/support-v4/23.0.0/jars" />
      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/exploded-aar/eu.chainfire/libsuperuser/1.0.0.201602271131/jars" />
      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/incremental" />
      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/incremental-classes" />
      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/incremental-runtime-classes" />
      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/incremental-safeguard" />
      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/incremental-verifier" />
      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/instant-run-support" />
      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/jniLibs" />
      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/manifests" />
      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/restart-dex" />
      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/rs" />
      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/shaders" />
      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/symbols" />
      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/transforms" />
      <excludeFolder url="file://$MODULE_DIR$/build/outputs" />
    <orderEntry type="jdk" jdkName="Android API 23 Platform" jdkType="Android SDK" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" exported="" name="appcompat-v7-23.0.0" level="project" />
    <orderEntry type="library" exported="" name="libsuperuser-1.0.0.201602271131" level="project" />
    <orderEntry type="library" exported="" name="systembartint-1.0.4" level="project" />
    <orderEntry type="library" exported="" name="support-v4-23.0.0" level="project" />
    <orderEntry type="library" exported="" name="design-23.0.0" level="project" />
    <orderEntry type="library" exported="" name="support-annotations-23.0.0" level="project" />
apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.0"

    defaultConfig {
        applicationId "org.daduke.realmar.dhcpv6client"
 * Created by Anastassios Martakos on 8/24/15.
 */
public class MainFragment extends Fragment {
    private Button refresh_button;
    private BroadcastReceiver resultReceiver;

    @Override
public void onCreate(Bundle savedInstanceState) {
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        // Inflate the layout for this fragment
        return inflater.inflate(R.layout.main_fragment, container, false);
    }

    @Override
    public void onStart() {
        super.onStart();

        refresh_button = (Button) getView().findViewById(R.id.button_refresh);

        refresh_button.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
public void onClick(View view) {
        });

        get_ip_addresses();
    }

    @Override
private BroadcastReceiver createBroadcastReceiver() {
        return new BroadcastReceiver() {
            @Override
            public void onReceive(Context context, Intent intent) {
                if(intent.getStringExtra("refresh_ips") == "refresh_ips") {
                    get_ip_addresses();
                }
            }
public void onReceive(Context context, Intent intent) {
    public void get_ip_addresses() {
        ArrayList[] ips = Misc.get_ips();

        final ListView list_view = (ListView) getView().findViewById(R.id.ip_addresses);

        ArrayList<Object> ip_collection = new ArrayList<>();

            android:layout_height="match_parent">

            <Button
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="@string/button_refresh"
                android:id="@+id/button_refresh"
                android:layout_centerHorizontal="true" />

        </RelativeLayout>

buildscript {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.1.0'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
#Tue May 17 12:38:59 CEST 2016
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-2.10-all.zip
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import android.support.annotation.IdRes;
import android.support.annotation.LayoutRes;
import android.support.annotation.StringRes;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.MotionEvent;
@SuppressWarnings("SameParameterValue")
public class SimpleTooltip implements PopupWindow.OnDismissListener {

    // Default Resources
    private static final int mDefaultPopupWindowStyleRes = android.R.attr.popupWindowStyle;
    private static final int mDefaultTextAppearanceRes = R.style.simpletooltip_default;
public void show() {
        mRootView.post(new Runnable() {
            @Override
            public void run() {
                mPopupWindow.showAtLocation(mRootView, Gravity.NO_GRAVITY, mRootView.getWidth(), mRootView.getHeight());
            }
        });
    }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import android.widget.LinearLayout;
import android.widget.RatingBar;
import android.widget.TextView;

import org.secuso.privacyfriendlysudoku.controller.GameController;
import org.secuso.privacyfriendlysudoku.controller.GameStateManager;
import org.secuso.privacyfriendlysudoku.ui.view.SudokuSpecialButtonLayout;
import org.secuso.privacyfriendlysudoku.ui.view.WinDialog;

import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.RunnableFuture;
public void run() {
        }

        SharedPreferences sharedPref = PreferenceManager.getDefaultSharedPreferences(this);
        Symbol s = Symbol.valueOf(Symbol.class, sharedPref.getString("pref_symbols", "Default"));
        layout.setSymbols(s);
        keyboard.setSymbols(s);
    }
import java.util.LinkedList;
import java.util.List;

public class MainActivity extends BaseActivity implements NavigationView.OnNavigationItemSelectedListener{

    RatingBar difficultyBar;
private boolean goToNavigationItem(int id) {
                startActivity(intent);
                overridePendingTransition(0, 0);
                break;
            default:
        }
        return true;

public class TutorialActivity extends AppCompatActivity {

    private ViewPager viewPager;
    private MyViewPagerAdapter myViewPagerAdapter;
    private LinearLayout dotsLayout;
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        // Checking for first time launch - before calling setContentView()
        prefManager = new PrefManager(this);
        if (!prefManager.isFirstTimeLaunch()) {
            launchHomeScreen();
            finish();
        }

        // Making notification bar transparent
private int getItem(int i) {

    private void launchHomeScreen() {
        prefManager.setFirstTimeLaunch(false);
        startActivity(new Intent(TutorialActivity.this, MainActivity.class));
        finish();
    }

        android:title="@string/menu_reset" />

    <group android:id="@+id/group4">
        <item android:id="@+id/nav_newgame" android:icon="@android:drawable/ic_menu_today"
            android:title="@string/menu_main" />
        <item android:id="@+id/nav_highscore" android:icon="@android:drawable/ic_menu_myplaces"
            android:title="@string/menu_highscore" />
        android:checkableBehavior="all">
        <item android:id="@+id/menu_settings_main" android:icon="@drawable/ic_menu_settings"
            android:title="@string/menu_settings" />
        <item android:id="@+id/menu_help_main" android:icon="@drawable/ic_menu_help"
            android:title="@string/menu_help" />
        <item android:id="@+id/menu_about_main" android:icon="@drawable/ic_menu_about"

    <string name="next">Weiter</string>
    <string name="skip">Skip</string>

</resources>

    <string name="next">Next</string>
    <string name="skip">Skip</string>
</resources>
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public static void markAsFavorite(Context context, String routeId, String headsi

                // If a single stop is unstarred, but isFavorite(...) == true due to starring all
                // stops, insert exclusion record
                if (stopIdInternal != ALL_STOPS && isFavorite(context, routeId, headsign, stopId)) {
                    // Insert an exclusion record for this single stop, in case the user is unstarring it
                    // after starring the entire route
                    ContentValues values = new ContentValues();
public static void markAsFavorite(Context context, String routeId, String headsi
         * @return true if this combination of routeId and headsign is a favorite for this stop
         * or all stops (and that stop is not excluded as a favorite), false if it is not
         */
        public static boolean isFavorite(Context context, String routeId, String headsign,
                String stopId) {
            final String[] selection = {ROUTE_ID, HEADSIGN, STOP_ID, EXCLUDE};
            final String[] selectionArgs = {routeId, headsign, stopId, Integer.toString(0)};
            ContentResolver cr = context.getContentResolver();
            final String FILTER_WHERE_ALL_FIELDS = ROUTE_ID + "=? AND " + HEADSIGN + "=? AND "
                    + STOP_ID + "=? AND " + EXCLUDE + "=?";
            Cursor c = cr.query(CONTENT_URI, selection, FILTER_WHERE_ALL_FIELDS,
public ArrivalInfo(Context context, ObaArrivalInfo info, long now,

        // Check if the user has marked this routeId/headsign/stopId as a favorite
        mIsRouteAndHeadsignFavorite = ObaContract.RouteHeadsignFavorites
                .isFavorite(context, info.getRouteId(),
                        info.getHeadsign(), info.getStopId());
    }

    /**
public void showListItemMenu(View v, final ArrivalInfo arrivalInfo) {
        View tripView = v.findViewById(R.id.reminder);
        boolean isReminderVisible = tripView != null && tripView.getVisibility() != View.GONE;
        // Check route favorite, for whether we show "Add star" or "Remove star"
        final boolean isRouteFavorite = ObaContract.RouteHeadsignFavorites.isFavorite(getActivity(),
                routeId, arrivalInfo.getInfo().getHeadsign(), arrivalInfo.getInfo().getStopId());

        List<String> items = UIUtils
                .buildTripOptions(getActivity(), isRouteFavorite, hasUrl, isReminderVisible);
private void refreshArrivalInfoData() {
                // We have a non-negative ETA for at least one bus - fill the first arrival row
                final int i1 = etaIndexes.get(0);
                ObaArrivalInfo info1 = mArrivalInfo.get(i1).getInfo();
                boolean isFavorite = ObaContract.RouteHeadsignFavorites.isFavorite(mContext,
                        info1.getRouteId(),
                        info1.getHeadsign(),
                        info1.getStopId());
public void onClick(View v) {
                if (etaIndexes.size() >= 2) {
                    final int i2 = etaIndexes.get(1);
                    ObaArrivalInfo info2 = mArrivalInfo.get(i2).getInfo();
                    boolean isFavorite2 = ObaContract.RouteHeadsignFavorites.isFavorite(mContext,
                            info2.getRouteId(),
                            info2.getHeadsign(),
                            info2.getStopId());
private void refreshArrivalInfoVisibilityAndListeners() {

            // Setup tapping on star for first row
            final ObaArrivalInfo info1 = mHeaderArrivalInfo.get(0).getInfo();
            final boolean isRouteFavorite = ObaContract.RouteHeadsignFavorites.isFavorite(mContext,
                    info1.getRouteId(), info1.getHeadsign(), info1.getStopId());
            mEtaRouteFavorite1.setOnClickListener(new View.OnClickListener() {
                @Override
public void onClick(View v) {

            // Setup tapping on star for second row
            final ObaArrivalInfo info2 = mHeaderArrivalInfo.get(1).getInfo();
            final boolean isRouteFavorite2 = ObaContract.RouteHeadsignFavorites.isFavorite(mContext,
                    info2.getRouteId(), info2.getHeadsign(), info2.getStopId());
            mEtaRouteFavorite2.setOnClickListener(new View.OnClickListener() {
                @Override
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import android.graphics.Typeface;
import android.net.Uri;
import android.os.Bundle;
import android.support.v4.app.FragmentTransaction;
import android.support.v7.app.ActionBar;
import android.support.v7.widget.Toolbar;
protected void onCreate(Bundle savedInstanceState) {
        if (mFragment == null) {
            // build chat fragment
            AbstractComposeFragment f = getComposeFragment(savedInstanceState);
            // insert it into the activity
            setComposeFragment(f);
        }
    }

public boolean onOptionsItemSelected(MenuItem item) {
        return super.onOptionsItemSelected(item);
    }

    private void setComposeFragment(AbstractComposeFragment f) {
        if (f != null) {
            mFragment = f;
            FragmentTransaction ft = getSupportFragmentManager().beginTransaction();
            ft.replace(R.id.fragment_compose_message, f);
            ft.setTransition(FragmentTransaction.TRANSIT_NONE);
            ft.commitAllowingStateLoss();
            getSupportFragmentManager().executePendingTransactions();
        }
    }

    @Override
public void loadConversation(Uri threadUri) {
    public void loadConversation() {
        // build chat fragment
        AbstractComposeFragment f = getComposeFragment(null);
        // insert it into the activity
        setComposeFragment(f);
    }

    @Override
else if (mFragment instanceof GroupMessageFragment)
    private AbstractComposeFragment getComposeFragment(Bundle savedInstanceState) {
        Bundle args = processIntent(savedInstanceState);
        if (args != null) {
            AbstractComposeFragment f;
            Uri threadUri = args.getParcelable("data");
            String action = args.getString("action");
            if (ACTION_VIEW_CONVERSATION.equals(action)) {
                long threadId = ContentUris.parseId(threadUri);
                Conversation conv = Conversation.loadFromId(this, threadId);
                f = conv.isGroupChat() ?
                    new GroupMessageFragment() :
                    new ComposeMessageFragment();
            }
            else if (ACTION_VIEW_USERID.equals(action)) {
                String userId =  threadUri.getLastPathSegment();
else if (ACTION_VIEW_USERID.equals(action)) {
                f = new ComposeMessageFragment();
            }

            f.setArguments(args);
            return f;
        }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void syncJson(JSONArray json, boolean isUser) {
                // Save the new observation's photos
                for (int j = 0; j < jsonObservation.photos.size(); j++) {
                    ObservationPhoto photo = jsonObservation.photos.get(j);
                    photo._observation_id = jsonObservation._id;

                    ContentValues opcv = photo.getContentValues();
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    public static final String KEY_SETUP_COMPLETE = "SETUP-COMPLETE";
    public static final String KEY_HTSP_STREAM_PROFILE = "htsp_stream_profile";

    // Advanced Preferences Keys and Values
    public static final String KEY_FFMPEG_AUDIO_ENABLED = "ffmpeg_audio_enabled";
    public static final String KEY_SHIELD_WORKAROUND_ENABLED = "shield_workaround_enabled";

import android.accounts.Account;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.support.v7.preference.PreferenceManager;
import android.util.Log;
import ie.macinnes.tvheadend.MiscUtils;
import ie.macinnes.tvheadend.R;
import ie.macinnes.tvheadend.account.AccountUtils;
import ie.macinnes.tvheadend.tvinput.TvInputService;


public class MigrateUtils {
import com.google.android.exoplayer2.drm.DrmSessionManager;
import com.google.android.exoplayer2.drm.FrameworkMediaCrypto;
import com.google.android.exoplayer2.ext.ffmpeg.FfmpegAudioRenderer;
import com.google.android.exoplayer2.mediacodec.MediaCodecSelector;
import com.google.android.exoplayer2.trackselection.TrackSelector;
import com.google.android.exoplayer2.video.MediaCodecVideoRenderer;
import com.google.android.exoplayer2.video.VideoRendererEventListener;
protected void buildAudioRenderers(Context context, Handler mainHandler, DrmSess
        AudioCapabilities audioCapabilities = AudioCapabilities.getCapabilities(context);

        SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFERENCE_TVHEADEND, Context.MODE_PRIVATE);

        if (sharedPreferences.getBoolean(Constants.KEY_FFMPEG_AUDIO_ENABLED, true)) {
            // FFMpeg Audio Decoder
            Log.d(TAG, "Adding FfmpegAudioRenderer");
            out.add(new FfmpegAudioRenderer(mainHandler, eventListener, audioCapabilities));
        }

        // Native Audio Decoders
        Log.d(TAG, "Adding MediaCodecAudioRenderer");
        out.add(new MediaCodecAudioRenderer(MediaCodecSelector.DEFAULT, drmSessionManager,
                true, mainHandler, eventListener, audioCapabilities));
    }

    @Override
import com.google.android.exoplayer2.trackselection.DefaultTrackSelector;
import com.google.android.exoplayer2.trackselection.FixedTrackSelection;
import com.google.android.exoplayer2.trackselection.TrackSelection;


public class TvheadendTrackSelector extends DefaultTrackSelector {
public boolean onSelectTrack(int type, String trackId) {
        return true;
    }

    protected TrackSelection selectVideoTrack(
            RendererCapabilities rendererCapabilities, TrackGroupArray groups, int[][] formatSupport,
            int maxVideoWidth, int maxVideoHeight, boolean allowNonSeamlessAdaptiveness,
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:title="TVHeadend Settings">

    <PreferenceCategory android:title="EPG">
        <CheckBoxPreference
            android:key="epg_sync_enabled"

    <PreferenceCategory android:title="Advanced Settings">
        <CheckBoxPreference
            android:key="ffmpeg_audio_enabled"
            android:title="Enable FFMpeg Audio Renderer"
            android:defaultValue="true" />

        <CheckBoxPreference
            android:key="shield_workaround_enabled"
            android:title="Enable nVidia Shield Workaround"
            android:defaultValue="true" />
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
private static File getInternalCgeoDirectory() {
        final List<File> extDirs = new ArrayList<>();
        final File[] externalFilesDirs = ContextCompat.getExternalFilesDirs(CgeoApplication.getInstance(), null);
        for (final File dir : externalFilesDirs) {
            if (EnvironmentCompat.getStorageState(dir).equals(Environment.MEDIA_MOUNTED)) {
                extDirs.add(dir);
            }
        }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void onOrientationChanged(double orientation, double tilt) {

    @Override
    public void onNmeaMessage(String message, long timestamp) {
        if (message.startsWith("$GPGGA") || message.startsWith("$GNGNS")) {
            Double altitudeMsl = GpsTestUtil.getAltitudeMeanSeaLevel(message);
            if (altitudeMsl != null && mNavigating) {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import org.kontalk.BuildConfig;
import org.kontalk.Log;
import org.kontalk.client.EndpointServer;
import org.kontalk.client.ServerList;
import org.kontalk.crypto.Coder;
import org.kontalk.message.CompositeMessage;
import org.kontalk.message.GroupCommandComponent;
import org.kontalk.message.TextComponent;
import org.kontalk.provider.MyMessages.CommonColumns;
import org.kontalk.provider.MyMessages.Messages.Fulltext;
import org.kontalk.provider.MyMessages.Threads;
import org.kontalk.provider.MyMessages.Threads.Conversations;
import org.kontalk.service.ServerListUpdater;
import org.kontalk.util.SystemUtils;


            DELETE_GROUP_MEMBERS      + ";" +
            "END";

        private static final String[] SCHEMA_UPGRADE_V4 = {
            // create temporary messages tables without msg_id UNIQUE constraint
            "CREATE TABLE " + TABLE_MESSAGES + "_new " + _SCHEMA_MESSAGES,
            // create temporary threads tables without msg_id UNIQUE constraint
            "CREATE TABLE " + TABLE_THREADS + "_new " + _SCHEMA_THREADS,
            // copy contents of messages table
            "INSERT INTO " + TABLE_MESSAGES + "_new SELECT " +
            "_id, thread_id, msg_id, SUBSTR(peer, 1, ?) || '@' || ?, direction, unread, 0, timestamp, status_changed, status, 'text/plain', " +
            "CASE WHEN mime <> 'text/plain' THEN NULL ELSE content END, "+
            "CASE WHEN mime <> 'text/plain' THEN 0 ELSE length(content) END, " +
            "CASE WHEN mime <> 'text/plain' THEN mime ELSE NULL END, preview_path, fetch_url, local_uri, length, 0, 0, 0, encrypted, " +
            "CASE WHEN encrypt_key IS NOT NULL THEN " + Coder.SECURITY_LEGACY_ENCRYPTED + " ELSE " + Coder.SECURITY_CLEARTEXT + " END, "+
            "strftime('%!s(MISSING)', server_timestamp)*1000" +
                " FROM " + TABLE_MESSAGES + " WHERE encrypted = 0",
            // copy contents of threads table
            "INSERT INTO " + TABLE_THREADS + "_new SELECT " +
            "_id, msg_id, SUBSTR(peer, 1, ?) || '@' || ?, direction, count, unread, 0, 'text/plain', content, timestamp, status_changed, status, 0, draft, 0" +
                " FROM " + TABLE_THREADS,
            // drop table messages
            "DROP TABLE " + TABLE_MESSAGES,
            // drop table threads
            "DROP TABLE " + TABLE_THREADS,
            // rename messages_new to messages
            "ALTER TABLE " + TABLE_MESSAGES + "_new RENAME TO " + TABLE_MESSAGES,
            // rename threads_new to threads
            "ALTER TABLE " + TABLE_THREADS + "_new RENAME TO " + TABLE_THREADS,
            // unique message index
            SCHEMA_MESSAGES_INDEX,
            // timestamp message index (for sorting)
            SCHEMA_MESSAGES_TIMESTAMP_IDX,
            // triggers
            TRIGGER_THREADS_INSERT_COUNT,
            TRIGGER_THREADS_UPDATE_COUNT,
            TRIGGER_THREADS_DELETE_COUNT
        };

        private static final String[] SCHEMA_UPGRADE_V8 = {
            SCHEMA_GROUPS,
            SCHEMA_GROUPS_MEMBERS,
            SCHEMA_MESSAGES_GROUPS,
            TRIGGER_GROUPS_DELETE_MEMBERS,
        };

        private static final String[] SCHEMA_UPGRADE_V9 = {
            "ALTER TABLE groups ADD COLUMN membership INTEGER NOT NULL DEFAULT 1",
            "DROP VIEW " + TABLE_MESSAGES_GROUPS,
            SCHEMA_MESSAGES_GROUPS,
        };

        private static final String[] SCHEMA_UPGRADE_V10 = {
            "ALTER TABLE threads ADD COLUMN sticky INTEGER NOT NULL DEFAULT 0",
        };

        private static final String SCHEMA_UPGRADE_V11 =
            "ALTER TABLE " + TABLE_THREADS + " ADD COLUMN encryption INTEGER NOT NULL DEFAULT 1";

        private Context mContext;

public void onCreate(SQLiteDatabase db) {

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (oldVersion != 4 && oldVersion < 8) {
                // unsupported version
                throw new SQLException("database can only be upgraded from version 4 or versions greather than 7");
            }

            if (oldVersion == 4) {
                // take the first server from the builtin list
                ServerList list = ServerListUpdater.getCurrentList(mContext);
                EndpointServer server = list.get(0);
                String host = server.getNetwork();

                for (String sql : SCHEMA_UPGRADE_V4) {
                    if (sql.startsWith("INSERT ")) {
                        db.execSQL(sql, new Object[]{
                            CompositeMessage.USERID_LENGTH,
                            host
                        });
                    }
                    else {
                        db.execSQL(sql);
                    }
                }

                // fallback to next upgrade
                oldVersion = 8;
            }

            if (oldVersion == 8) {
                for (String sql : SCHEMA_UPGRADE_V8) {
                    db.execSQL(sql);
                }
                // fallback to next upgrade
                oldVersion = 10;
            }
            else if (oldVersion == 9) {
                for (String sql : SCHEMA_UPGRADE_V9) {
                    db.execSQL(sql);
                }
                // fallback to next upgrade
                oldVersion = 10;
            }

            if (oldVersion == 10) {
                for (String sql : SCHEMA_UPGRADE_V10) {
                    db.execSQL(sql);
                }
                // fallback to next upgrade
                oldVersion = 11;
            }

            if (oldVersion == 11) {
                db.execSQL(SCHEMA_UPGRADE_V11);
            }
        }
    }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"

    defaultConfig {
        applicationId "com.dimorinny.sample"
        minSdkVersion 14
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
    }
android {

repositories {
    maven {
        url  "http://dl.bintray.com/lukaville/maven"
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile 'junit:junit:4.12'
    compile project(':library')
    compile 'com.android.support:appcompat-v7:23.4.0'
}
package com.dimorinny.sample;

import android.content.Intent;
import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;

import com.nbsp.materialfilepicker.MaterialFilePicker;
import com.nbsp.materialfilepicker.ui.FilePickerActivity;

public class MainActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        new MaterialFilePicker()
                .withActivity(this)
                .withRequestCode(1)
                .withFilterDirectories(false)
                .withFilter(Pattern.compile(".*\\.txt$"))
                .withHiddenFiles(true)
                .start();
    }
protected void onCreate(Bundle savedInstanceState) {
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        if (requestCode == 1 && resultCode == RESULT_OK) {
            Log.d("File", String.valueOf(data.getStringExtra(FilePickerActivity.RESULT_FILE_PATH)));
        }
    }
}
<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    >

    <FrameLayout
        android:id="@+id/container"
        android:layout_width="match_parent"
        android:layout_height="match_parent"/>
</RelativeLayout>
<resources>
    <string name="app_name">sample</string>
</resources>
buildscript {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.1.0'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.2'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.3'
    }
ext {
    siteUrl = 'https://github.com/nbsp-team/MaterialFilePicker'
    gitUrl = 'https://github.com/nbsp-team/MaterialFilePicker'

    libraryVersion = '1.09'

    developerId = 'lukaville'
    developerName = 'Nickolay Chameev'
ext {
}

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 23
        versionCode 10
        versionName "1.09"
    }
    buildTypes {
        release {
dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'

    compile 'com.android.support:appcompat-v7:23.4.0'
    compile 'com.android.support:recyclerview-v7:23.4.0'
    compile 'com.android.support:design:23.4.0'
}

apply from: 'https://raw.githubusercontent.com/nuuneoi/JCenter/master/installv1.gradle'
package com.nbsp.materialfilepicker;

import android.app.Application;
import android.test.ApplicationTestCase;

/**
 * <a href="http://d.android.com/tools/testing/testing_android.html">Testing Fundamentals</a>
 */
public class ApplicationTest extends ApplicationTestCase<Application> {
    public ApplicationTest() {
        super(Application.class);
    }
}
package com.nbsp.materialfilepicker;

import android.app.Activity;
import android.content.Intent;

import com.nbsp.materialfilepicker.filter.CompositeFilter;
import java.util.ArrayList;
import java.util.regex.Pattern;

/**
 * Created by Dimorinny on 25.02.16.
 */
public class MaterialFilePicker {
    private Activity mActivity;
    private Integer mRequestCode;
    private Pattern mFileFilter;
    private Boolean mDirectoriesFilter = false;
    private String mRootPath;
    private String mCurrentPath;
    private Boolean mShowHidden = false;

    public MaterialFilePicker() {}

    public MaterialFilePicker withActivity(Activity activity) {
        mActivity = activity;
        return this;
    }

    public MaterialFilePicker withRequestCode(int requestCode) {
        mRequestCode = requestCode;
        return this;
    }

    public MaterialFilePicker withFilter(Pattern pattern) {
        mFileFilter = pattern;
        return this;
    }

    public MaterialFilePicker withFilterDirectories(boolean directoriesFilter) {
        mDirectoriesFilter = directoriesFilter;
        return this;
    }

    public MaterialFilePicker withRootPath(String rootPath) {
        mRootPath = rootPath;
        return this;
    }

    public MaterialFilePicker withPath(String path) {
        mCurrentPath = path;
        return this;
    }

    public MaterialFilePicker withHiddenFiles(boolean show) {
        mShowHidden = show;
        return this;
    }

    private CompositeFilter getFilter() {
        ArrayList<FileFilter> filters = new ArrayList<>();

        if (!mShowHidden) {
private CompositeFilter getFilter() {
        return new CompositeFilter(filters);
    }

    public void start() {
        if (mActivity == null) {
            throw new RuntimeException("You must pass activity by calling withActivity method");
        }

        if (mRequestCode == null) {
            throw new RuntimeException("You must pass request code by calling withRequestCode method");
        }

        CompositeFilter filter = getFilter();

        Intent intent = new Intent(mActivity, FilePickerActivity.class);
        intent.putExtra(FilePickerActivity.ARG_FILTER, filter);

        if (mRootPath != null) {
public void start() {
        if (mCurrentPath != null) {
            intent.putExtra(FilePickerActivity.ARG_CURRENT_PATH, mCurrentPath);
        }
        mActivity.startActivityForResult(intent, mRequestCode);
    }
}

    public class DirectoryViewHolder extends RecyclerView.ViewHolder {
        private ImageView mFileImage;
        private TextView mFileTite;
        private TextView mFileSubtitle;

        public DirectoryViewHolder(View itemView, final OnItemClickListener clickListener) {
public void onClick(View v) {
            });

            mFileImage = (ImageView) itemView.findViewById(R.id.item_file_image);
            mFileTite = (TextView) itemView.findViewById(R.id.item_file_title);
            mFileSubtitle = (TextView) itemView.findViewById(R.id.item_file_subtitle);
        }
    }
public void onBindViewHolder(DirectoryViewHolder holder, int position) {
        FileTypeUtils.FileType fileType = FileTypeUtils.getFileType(currentFile);
        holder.mFileImage.setImageResource(fileType.getIcon());
        holder.mFileSubtitle.setText(fileType.getDescription());
        holder.mFileTite.setText(currentFile.getName());
    }

    @Override

import com.nbsp.materialfilepicker.R;
import com.nbsp.materialfilepicker.filter.CompositeFilter;
import com.nbsp.materialfilepicker.utils.FileUtils;

import java.io.File;
import java.lang.reflect.Field;

/**
 * Created by Dimorinny on 24.10.15.
protected void onCreate(Bundle savedInstanceState) {
    @SuppressWarnings("unchecked")
    private void initArguments() {
        if (getIntent().hasExtra(ARG_FILTER)) {
            mFilter = (CompositeFilter) getIntent().getSerializableExtra(ARG_FILTER);
        }

        if (getIntent().hasExtra(ARG_START_PATH)) {
private void initArguments() {
        }

        if (getIntent().hasExtra(ARG_CURRENT_PATH)) {
            String currentPath = getIntent().getStringExtra(ARG_START_PATH);

            if (currentPath.startsWith(mStartPath)) {
                mCurrentPath = currentPath;

import org.junit.Test;

import static org.junit.Assert.*;

/**
 * To work on unit tests, switch the Test Artifact in the Build Variants view.
 */
public class ExampleUnitTest {
    @Test
    public void addition_isCorrect() throws Exception {
        assertEquals(4, 2 + 2);
    }
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import static com.afollestad.aesthetic.Util.setLightStatusBarCompat;
import static com.afollestad.aesthetic.Util.setNavBarColorCompat;

/**
 * @author Aidan Follestad (afollestad)
 */
@SuppressWarnings({"WeakerAccess", "unused"})
public class Aesthetic {

private static String key(@Nullable AppCompatActivity activity) {
    return key;
  }

  /**
   * Should be called before super.onCreate() in each Activity.
   */
  @NonNull
  public static Aesthetic attach(@NonNull AppCompatActivity activity) {
    if (instance == null) {
public static Aesthetic get() {
    return instance;
  }

  /**
   * Should be called in onPause() of each Activity.
   */
  public static void pause(@NonNull AppCompatActivity activity) {
    if (instance == null) {
      return;
public static void pause(@NonNull AppCompatActivity activity) {
    }
  }

  /**
   * Should be called in onResume() of each Activity.
   */
  public static void resume(@NonNull AppCompatActivity activity) {
    if (instance == null) {
      return;
public void accept(@io.reactivex.annotations.NonNull Integer themeId) {
                onErrorLogAndRethrow()));
    instance.subs.add(
        Observable.combineLatest(
            instance.colorStatusBar(),
            instance.lightStatusBarMode(),
            new BiFunction<Integer, Integer, Pair<Integer, Integer>>() {
              @Override
              public Pair<Integer, Integer> apply(Integer integer, Integer integer2) {
                return Pair.create(integer, integer2);
              }
            })
            .compose(Rx.<Pair<Integer, Integer>>distinctToMainThread())
            .subscribe(
                new Consumer<Pair<Integer, Integer>>() {
static int resolveColor(Context context, @AttrRes int attr, int fallback) {
    TypedArray a = context.getTheme().obtainStyledAttributes(new int[] {attr});
    try {
      return a.getColor(0, fallback);
    } finally {
      a.recycle();
    }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public CodeGeneratorManager(Context context) {
            public void onServiceConnected(ComponentName className, IBinder binder) {
                try {
                    if (!mResumed) {
                        mContext.unbindService(mCodeGenerationConnection);
                    } else {
                        mGeneratorService = ((CodeGeneratorService.CodeGeneratorBinder) binder).getService();

public void onServiceDisconnected(ComponentName arg0) {
     */
    public void onPause() {
        mResumed = false;
        if (isBound()) {
            mContext.unbindService(mCodeGenerationConnection);
        }
    }

    /**
public void onResume() {
    }

    /**
     * Calls the Service to request code generation for the workspace passed in.
     *
     * @param codeGenerationRequest the request to generate code.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
else if (requestCode == SELECT_ATTACHMENT_CONTACT) {
            if (resultCode == Activity.RESULT_OK) {
                Uri uri = data.getData();
                if (uri != null) {
                    // get lookup key
                    final Cursor c = getActivity().getContentResolver()
                        .query(uri, new String[] { Contacts.LOOKUP_KEY }, null, null, null);
                    if (c != null) {
                        try {
                            c.moveToFirst();
                            String lookupKey = c.getString(0);
                            Uri vcardUri = Uri.withAppendedPath(Contacts.CONTENT_VCARD_URI, lookupKey);
                            sendBinaryMessage(vcardUri, VCardComponent.MIME_TYPE, false, VCardComponent.class);
                        }
                        finally {
                            c.close();
                        }
                    }
                }
            }
        }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Subproject commit 7969c6e84c869c2ed03f85e91ef639176495195f
Subproject commit bc4b6e151f8e08ecd28adbbc6be1cbc54289ef25
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
private void postProjectObservations() throws AuthenticationException, CancelSyn
            c.moveToNext();
        }

        // Now it's safe to delete all of the project-observations locally
        getContentResolver().delete(ProjectObservation.CONTENT_URI, "is_deleted = 1", null);
        
private void postProjectObservations() throws AuthenticationException, CancelSyn
                Cursor c2 = getContentResolver().query(Observation.CONTENT_URI, Observation.PROJECTION, "id = '"+projectObservation.observation_id+"'", null, Observation.DEFAULT_SORT_ORDER);
                c2.moveToFirst();
                if (c2.getCount() == 0) {
                    break;
                }
                Observation observation = new Observation(c2);
private void postProjectObservations() throws AuthenticationException, CancelSyn
                c2 = getContentResolver().query(Project.CONTENT_URI, Project.PROJECTION, "id = '"+projectObservation.project_id+"'", null, Project.DEFAULT_SORT_ORDER);
                c2.moveToFirst();
                if (c2.getCount() == 0) {
                    break;
                }
                Project project = new Project(c2);
public void run() {
            c.moveToNext();
        }

        mApp.setObservationIdBeingSynced(INaturalistApp.NO_OBSERVATION);

        // Finally, retrieve all project observations
private void storeProjectObservations() {
                    if (c.getCount() == 0) {
                        getContentResolver().insert(ProjectObservation.CONTENT_URI, cv);
                    }
                } catch (JSONException e) {
                    e.printStackTrace();
                }
private void deleteObservationPhotos() throws AuthenticationException, CancelSyn
            c.moveToNext();
        }

        // Now it's safe to delete all of the observation photos locally
        getContentResolver().delete(ObservationPhoto.CONTENT_URI, "is_deleted = 1", null);

private void deleteObservations() throws AuthenticationException, CancelSyncExce
            obsIds.add(observation.id);
            c.moveToNext();
        }
        
        // Now it's safe to delete all of the observations locally
        getContentResolver().delete(Observation.CONTENT_URI, "is_deleted = 1", null);
private void postPhotos() throws AuthenticationException, CancelSyncException {
                ObservationPhoto.PROJECTION, 
                "_synced_at IS NULL", null, ObservationPhoto.DEFAULT_SORT_ORDER);
        if (c.getCount() == 0) {
            return;
        }

private void postPhotos() throws AuthenticationException, CancelSyncException {
                            null,
                            null,
                            MediaStore.Images.Media.DEFAULT_SORT_ORDER);
                    if ((pc != null) && (pc.getCount() > 0)) {
                        pc.moveToFirst();
                        imgFilePath = pc.getString(pc.getColumnIndexOrThrow(MediaStore.Images.Media.DATA));
                        pc.close();
                    }
                }
private SerializableJSONArray getNearByProjects(Location location) throws Authen
            try {
                c = getContentResolver().query(Project.CONTENT_URI, Project.PROJECTION, "id = '"+json.getJSONObject(i).getInt("id")+"'", null, Project.DEFAULT_SORT_ORDER);
                c.moveToFirst();
                if (c.getCount() > 0) {
                    json.getJSONObject(i).put("joined", true);
                }
            } catch (JSONException e) {
private SerializableJSONArray getFeaturedProjects() throws AuthenticationExcepti
            try {
                c = getContentResolver().query(Project.CONTENT_URI, Project.PROJECTION, "id = '"+json.getJSONObject(i).getInt("id")+"'", null, Project.DEFAULT_SORT_ORDER);
                c.moveToFirst();
                if (c.getCount() > 0) {
                    json.getJSONObject(i).put("joined", true);
                }
            } catch (JSONException e) {
private void syncObservationFields() throws AuthenticationException, CancelSyncE
                    getString(R.string.syncing_observation_fields),
                    getString(R.string.syncing));
        } else {
            return;
        }

private void syncObservationFields() throws AuthenticationException, CancelSyncE
                    "id = ? AND _synced_at IS NOT NULL",
                    new String[] { localField.observation_id.toString() },
                    ProjectFieldValue.DEFAULT_SORT_ORDER);
            if (obsc.getCount() == 0) {
                continue;
            }
            obsc.close();


            mApp.setObservationIdBeingSynced(localField.observation_id);
public void onClick(View v) {
        }

        if (!syncNeeded) {
            // See if it's an existing observation with a new photo:w

            Cursor opc = mContext.getContentResolver().query(ObservationPhoto.CONTENT_URI,
                    new String[]{
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
private AudioFragment getAudioFragment() {
            FragmentActivity parent = getActivity();
            if (parent != null) {
                fragment = new AudioFragment();
                FragmentManager fm = parent.getSupportFragmentManager();
                fm.beginTransaction()
                    .add(fragment, "audio")
                    .commit();
                // commit immediately please
                fm.executePendingTransactions();
            }
        }

protected boolean isNormalUpNavigation() {

    private void setComposeFragment(@NonNull AbstractComposeFragment f) {
        mFragment = f;
        FragmentTransaction ft = getSupportFragmentManager().beginTransaction();
        ft.replace(R.id.fragment_compose_message, f);
        ft.setTransition(FragmentTransaction.TRANSIT_NONE);
        ft.commitAllowingStateLoss();
        getSupportFragmentManager().executePendingTransactions();
    }

    @Override
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public FlexibleAdapter initializeListeners(@Nullable Object listener) {

	/**
	 * {@inheritDoc}
	 * <p>Attaches the StickyHeaderHelper from the RecyclerView when necessary</p>
	 *
	 * @since 5.0.0-b6
	 */
public void run() {
					position--;
				}
				headersShown = false;
				setStickyHeaders(false);
				multiRange = false;
			}
		});
	private FlexibleViewHolder mStickyHeaderViewHolder;
	private OnStickyHeaderChangeListener mStickyHeaderChangeListener;
	private int mHeaderPosition = RecyclerView.NO_POSITION;


	public StickyHeaderHelper(FlexibleAdapter adapter,
public void attachToRecyclerView(RecyclerView parent) {
		mRecyclerView = parent;
		if (mRecyclerView != null) {
			mRecyclerView.addOnScrollListener(this);
			mRecyclerView.post(new Runnable() {
				@Override
				public void run() {
					initStickyHeadersHolder();
				}
			});
		}
	}

	public void detachFromRecyclerView(RecyclerView parent) {
		if (mRecyclerView == parent) {
			mRecyclerView.removeOnScrollListener(this);
			mRecyclerView = null;
			mStickyHolderLayout.animate().setListener(new Animator.AnimatorListener() {
				@Override
				public void onAnimationStart(Animator animation) {
				}

				@Override
				public void onAnimationEnd(Animator animation) {
					clearHeader();
				}

				@Override
				public void onAnimationCancel(Animator animation) {
				}

				@Override
				public void onAnimationRepeat(Animator animation) {
				}
			});
			mStickyHolderLayout.animate().alpha(0).start();
			if (FlexibleAdapter.DEBUG) Log.i(TAG, "StickyHolderLayout detached");
		}
	}

	private void initStickyHeadersHolder() {
private void onStickyHeaderChange(int sectionIndex) {
	}

	public void updateOrClearHeader(boolean updateHeaderContent) {
		if (mStickyHolderLayout == null || mAdapter.hasSearchText() ||
				mRecyclerView == null || mRecyclerView.getChildCount() == 0) {
			clearHeader();
			return;
		}
		int firstHeaderPosition = getHeaderPosition(RecyclerView.NO_POSITION);
public void updateOrClearHeader(boolean updateHeaderContent) {
	}

	private void updateHeader(int headerPosition, boolean updateHeaderContent) {
		// Check if there is a new header to be sticky
		if (mHeaderPosition != headerPosition) {
			mHeaderPosition = headerPosition;
private void translateHeader() {

		int headerOffsetX = 0, headerOffsetY = 0;

		//Search for the position where the next header item is found and take the new offset
		for (int i = 0; i < mRecyclerView.getChildCount(); i++) {
			final View nextChild = mRecyclerView.getChildAt(i);
			if (nextChild != null) {
private void translateHeader() {
						if (nextChild.getLeft() > 0) {
							int headerWidth = mStickyHolderLayout.getMeasuredWidth();
							headerOffsetX = Math.min(nextChild.getLeft() - headerWidth, 0);
							if (headerOffsetX < 0) break;
						}
					} else {
						if (nextChild.getTop() > 0) {
							int headerHeight = mStickyHolderLayout.getMeasuredHeight();
							headerOffsetY = Math.min(nextChild.getTop() - headerHeight, 0);
							if (headerOffsetY < 0) break;
						}
					}
private void ensureHeaderParent() {
		mStickyHolderLayout.addView(view);
	}

	private void clearHeader() {
		if (mStickyHeaderViewHolder != null) {
			if (FlexibleAdapter.DEBUG) Log.d(TAG, "clearHeader");
private void clearHeader() {
		}
	}

	private void resetHeader(FlexibleViewHolder header) {
		final View view = header.getContentView();
		removeViewFromParent(view);
		//Reset transformation on removed header
		view.setTranslationX(0);
		view.setTranslationY(0);
		mStickyHeaderViewHolder.itemView.setVisibility(View.VISIBLE);
		if (!header.itemView.equals(view))
			((ViewGroup) header.itemView).addView(view);
		header.setIsRecyclable(true);
	}

	private static void removeViewFromParent(final View view) {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import android.app.job.JobParameters;
import android.app.job.JobService;
import android.content.Intent;
import android.util.Log;

import org.literacyapp.authentication.AuthenticationActivity;
import org.literacyapp.authentication.TrainingHelper;
    @Override
    public boolean onStartJob(JobParameters jobParameters) {
        Log.i(getClass().getName(), "onStartJob");
        if (!rescheduleIfTrainingJobServiceIsRunning()){
            Intent authenticationIntent = new Intent(getApplicationContext(), AuthenticationActivity.class);
            authenticationIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
            startActivity(authenticationIntent);
        }
        return false;
    }

private boolean rescheduleIfTrainingJobServiceIsRunning(){
        }
        return isFaceRecognitionTrainingJobServiceRunning;
    }
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void writeToParcel(Parcel out, int flags) {
        out.writeParcelable(gameType, 0);
        out.writeParcelable(difficulty, 0);
        out.writeParcelable(gameBoard, 0);
        out.writeParcelable(undoRedoManager, 0);

        out.writeTypedList(errorList);
    }
private GameController(Parcel in) {
        gameType = in.readParcelable(GameType.class.getClassLoader());
        difficulty = in.readParcelable(GameDifficulty.class.getClassLoader());
        gameBoard = in.readParcelable(GameBoard.class.getClassLoader());
        undoRedoManager = in.readParcelable(UndoRedoManager.class.getClassLoader());

        in.readTypedList(errorList, CellConflict.CREATOR);

import android.content.Intent;
import android.os.Handler;
import android.os.IBinder;
import android.support.annotation.IntDef;
import android.support.annotation.Nullable;
import android.support.v4.content.ContextCompat;
import org.secuso.privacyfriendlysudoku.ui.view.R;

import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.atomic.AtomicBoolean;

    private final List<Pair<GameType, GameDifficulty>> generationList = new LinkedList<>();
    private final DatabaseHelper dbHelper = new DatabaseHelper(this);


    public GeneratorService() {
        super("Generator Service");
    }

    private void buildGenerationList() {
        generationList.clear();

private void buildGenerationList() {

    private void handleGenerationStop() {
        stopForeground(true);
        stopSelf();
    }

    private void handleGenerationStart(Intent intent) {
        GameType gameType = intent.getParcelableExtra(EXTRA_GAMETYPE);
        GameDifficulty gameDifficulty = intent.getParcelableExtra(EXTRA_DIFFICULTY);

        if(gameType == null || gameDifficulty == null) {
            generateLevels();
        } else {
            generateLevel(gameType, gameDifficulty);
private void showNotification(GameType gameType, GameDifficulty gameDifficulty)
        builder.setSmallIcon(R.drawable.splash_icon);
        startForeground(50, builder.build());
    }

    @Nullable
    @Override
    public IBinder onBind(Intent intent) {
        return null;
    }

    @Override
    protected void onHandleIntent(@Nullable Intent intent) {
        if (intent != null) {
protected void onCreate(Bundle savedInstanceState) {

            Bundle extras = getIntent().getExtras();
            if (extras != null) {
                Object o = extras.get("gameType");
                if (o instanceof GameType) {
                    gameType = (GameType) extras.get("gameType");
                }
                gameDifficulty = (GameDifficulty) (extras.get("gameDifficulty"));
                loadLevel = extras.getBoolean("loadLevel", false);
                if (loadLevel) {
                    loadLevelID = extras.getInt("loadLevelID");
public void onClick(View view) {

                    // send everything to game activity
                    i = new Intent(this, GameActivity.class);
                    i.putExtra("gameType", (Serializable)gameType);
                    i.putExtra("gameDifficulty", (Serializable)gameDifficulty);
                } else {
                    newLevelManager.checkAndRestock();
                    Toast t = Toast.makeText(getApplicationContext(), R.string.generating, Toast.LENGTH_SHORT);
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import android.app.Dialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.graphics.Color;
import android.graphics.drawable.ColorDrawable;
import android.net.Uri;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.text.TextUtils;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
 */
public class MaoniActivity extends AppCompatActivity {

    public static final String APPLICATION_INFO_VERSION_CODE = "APPLICATION_INFO_VERSION_CODE";
    public static final String APPLICATION_INFO_VERSION_NAME = "APPLICATION_INFO_VERSION_NAME";
    public static final String APPLICATION_INFO_PACKAGE_NAME = "APPLICATION_INFO_PACKAGE_NAME";
private void validateAndSubmitForm() {

            if (intent.hasExtra(FILE_PROVIDER_AUTHORITY)) {
                final String fileProviderAuthority = intent.getStringExtra(FILE_PROVIDER_AUTHORITY);
                if (mScreenshotFilePath != null) {
                    screenshotFile = new File(mScreenshotFilePath.toString());
                    screenshotUri = FileProvider
                            .getUriForFile(this, fileProviderAuthority, screenshotFile);
                    grantUriPermission(intent.getComponent().getPackageName(),
                            screenshotUri, Intent.FLAG_GRANT_READ_URI_PERMISSION);
                }
                if (logsFile != null) {
                    logsUri = FileProvider
                            .getUriForFile(this, fileProviderAuthority, logsFile);
                    grantUriPermission(intent.getComponent().getPackageName(),
                            logsUri, Intent.FLAG_GRANT_READ_URI_PERMISSION);
                }
            }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
private void extractPreferences(Uri uri){
            Timber.e(e, "import exception ");
            finish();
            Toast.makeText(this, getString(R.string.errorPreferencesImportFailed), Toast.LENGTH_SHORT).show();

        }

    }

    private static String formatString(String text){

        StringBuilder json = new StringBuilder();
        String indentString = "";
    <string name="ERROR_CONFIGURATION">Konfiguration unvollständig</string>
    <string name="errorPreferencesImportFailed">Import fehlgeschlagen</string>
    <string name="errorPreferencesImportFailedParseException">Konfiguration fehlerhaft</string>
    <string name="welcome_play_description">Owntracks benötigt die Google Play-Dienste</string>
    <string name="play_services_not_available_general">Google Play-Dienste sind nicht verfügbar</string>
    <string name="icon_description_warning">Warnung</string>
    <string name="errorPreferencesImportFailedParseException">unable to parse file</string>
    <string name="preferencesIgnoreInaccurateLocations">Inaccurate locations</string>
    <string name="preferencesIgnoreInaccurateLocationsSummary">Ignore inaccurate locations</string>

</resources>
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
     * Accès au menu
     */
    private Menu monMenu;

    @Override
    public void onCreate(Bundle savedInstanceState) {
public void onCreate(Bundle savedInstanceState) {
        monDAO = DAO.getInstance(getApplicationContext());

        // ViewPager (pour le slide des articles)
        ViewPager monViewPager = (ViewPager) findViewById(R.id.article_viewpager);
        final ArticlePagerAdapter pagerAdapter = new ArticlePagerAdapter(getSupportFragmentManager(), getApplicationContext(),
                                                                         getLayoutInflater());
        monViewPager.setAdapter(pagerAdapter);

        // Définition de l'article demandé !
        monViewPager.setCurrentItem(pagerAdapter.getPosition(articleID));

        monViewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener() {
            @Override
            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {
public void onPageScrollStateChanged(int state) {

            }
        });
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Je charge mon menu dans l'actionBar
        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.activity_article_actions, menu);

        // Récupération du bouton de partage
        MenuItem shareItem = menu.findItem(R.id.action_share);
        // Get the provider and hold onto it to set/change the share intent.
        ShareActionProvider mShareActionProvider = (ShareActionProvider) MenuItemCompat.getActionProvider(shareItem);

        // Assignation de mon intent
        mShareActionProvider.setShareIntent(genererShareIntent());

        // Option : cacher le bouton de partage
        Boolean cacherBoutonPartage = Constantes.getOptionBoolean(getApplicationContext(), R.string.idOptionCacherBoutonPartage,
                                                                  R.bool.defautOptionCacherBoutonPartage);
        if (cacherBoutonPartage) {
            // Le cacher
            shareItem.setVisible(false);
        }

        // Stockage du menu
        monMenu = menu;

        return super.onCreateOptionsMenu(menu);
    }

    @Override
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public GcmIntentService() {

    @Override
    protected void onHandleIntent(Intent intent) {

        if (ACTION_RETRY.equals(intent.getAction())) {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
>重写`onInitRefreshView()`和`onInitLoadMoreView()`方法设置视图。

* 刷新视图和加载更多视图背景色
>使用`setRefreshViewBackgroundResId(int refreshViewBackgroundResId)`方法设置刷新视图的背景色；加载更多视图背景色方法为`setLoadMoreViewBackgroundResId(int loadMoreViewBackgroundResId)`。

* 手指移动距离和刷新控件移动距离比值
>使用`setPullDistanceScale(float pullDistanceScale)` 方法设置，参数不对则抛出异常。默认比例值是`1.8f`。
### Gradle

```
compile 'com.netease.hearttouch:ht-refreshrecyclerview:1.0.0'
```

### Maven

``` 
<dependency>
  <groupId>com.netease.hearttouch</groupId>
  <artifactId>ht-refreshrecyclerview</artifactId>
  <version>1.0.0</version>
</dependency>
```

buildscript {
        jcenter()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:${ANDROID_GRADLE_VERSION}"
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
allprojects {

task clean(type: Delete) {
    delete rootProject.buildDir
}
org.gradle.daemon=true
org.gradle.configureondemand=true

SUPPORT_V4_VERSION=24.0.0
SUPPORT_V7_VERSION=24.0.0
RECYCLERVIEW_VERSION=24.0.0
JUNIT_VERSION=4.12

ANDROID_GRADLE_VERSION=2.1.2

VERSION_NAME=0.0.1-SNAPSHOT

COMPILE_SDK_VERSION=24
BUILD_TOOLS_VERSION=23.0.2
TARGET_SDK_VERSION=24
MIN_SDK_VERSION=14
#Mon Jul 11 10:39:42 CST 2016
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-2.10-all.zip
apply plugin: 'com.android.library'

android {
    compileSdkVersion COMPILE_SDK_VERSION as int
    buildToolsVersion BUILD_TOOLS_VERSION as String
    defaultConfig {
        vectorDrawables.useSupportLibrary = true
        minSdkVersion MIN_SDK_VERSION as int
        targetSdkVersion TARGET_SDK_VERSION as int
        versionCode 1
        versionName VERSION_NAME as String
    }
    buildTypes {
        release {
android {

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile "junit:junit:${JUNIT_VERSION}"
    compile "com.android.support:appcompat-v7:${SUPPORT_V4_VERSION}"
    compile "com.android.support:recyclerview-v7:${RECYCLERVIEW_VERSION}"
}

import com.netease.hearttouch.htrefreshrecyclerview.HTRecyclerViewDragListener;
import com.netease.hearttouch.htrefreshrecyclerview.HTRefreshListener;
import com.netease.hearttouch.htrefreshrecyclerview.R;
import com.netease.hearttouch.htrefreshrecyclerview.viewimpl.HTDefaultHorizontalRefreshViewHolder;
import com.netease.hearttouch.htrefreshrecyclerview.viewimpl.HTDefaultVerticalRefreshViewHolder;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;

import static android.widget.LinearLayout.HORIZONTAL;
import static android.widget.LinearLayout.VERTICAL;
import static com.netease.hearttouch.htrefreshrecyclerview.base.HTOrientation.VERTICAL_DOWN;
import static com.netease.hearttouch.htrefreshrecyclerview.base.HTOrientation.VERTICAL_UP;

 */
public abstract class HTBaseRecyclerView extends ViewGroup implements HTRefreshRecyclerViewInterface {
    private static final String TAG = HTBaseRecyclerView.class.getSimpleName();
    /**
     * 设置全局的默认刷新加载样式
     */
    protected final int mTouchSlop = ViewConfiguration.get(getContext()).getScaledTouchSlop();

    private Paint mRefreshBgPaint;


    public HTBaseRecyclerView(Context context) {
private void initViews() {
            HTBaseViewHolder viewHolder;
            if (checkOrientationVertical()) {
                viewHolder = new HTDefaultVerticalRefreshViewHolder(getContext());
                ((HTDefaultVerticalRefreshViewHolder) viewHolder).setDefaultRefreshViewArrow(mHTOrientation);
            } else {
                viewHolder = new HTDefaultHorizontalRefreshViewHolder(getContext());
                ((HTDefaultHorizontalRefreshViewHolder) viewHolder).setDefaultRefreshViewArrow(mHTOrientation);
            }
            setRefreshViewHolder(viewHolder);//设置默认刷新样式
        }
private void initListeners() {
        setRecyclerViewOnScrollListener();
    }

    /**
     * 设置全局的刷新样式
     */
public static void setRefreshViewHolderClass(@NonNull Class<? extends HTBaseView
     * 设置刷新和加载更多的视图控件并初始化
     */
    public void setRefreshViewHolder(@NonNull HTBaseViewHolder refreshViewHolder) {
        mHTViewHolder = refreshViewHolder;
        mHTViewHolderTracker = mHTViewHolder.getViewHolderTracker();
        mHTViewHolderTracker.setOrientation(mHTOrientation);
        mHTViewHolder.computeViewSize(checkOrientationVertical() ? VERTICAL : HORIZONTAL);

        resetRefreshViewHolderView();
        initRefreshView();
        initLoadMoreView();
    }


    private void resetRefreshViewHolderView() {
        mRefreshContainerView.removeAllViews();
        mLoadMoreContainerView.removeAllViews();
    }


    private void initRefreshView() {
        if (mHTViewHolder == null) return;
        View refreshView = mHTViewHolder.getRefreshView();
        if (refreshView != null) {
            if (refreshView.getParent() != null) {
                ((ViewGroup) refreshView.getParent()).removeView(refreshView);
            }
            int res = mHTViewHolder.getRefreshViewBackgroundResId();
            if (res != 0) {//默认背景透明
                mRefreshContainerView.setBackgroundResource(res);
            } else {
                mRefreshContainerView.setBackgroundResource(android.R.color.transparent);
            }
            mRefreshContainerView.removeAllViews();
            setViewLayoutParams(refreshView);
            mRefreshContainerView.addView(refreshView);
//            hideRefreshView(true);
        }
        setRefreshUIChangeListener(mHTViewHolder);
    }

    private void initLoadMoreView() {
        if (mHTViewHolder == null) return;
        View loadMoreView = mHTViewHolder.getLoadMoreView();
        if (loadMoreView != null) {
            if (loadMoreView.getParent() != null) {
                ((ViewGroup) loadMoreView.getParent()).removeView(loadMoreView);
            }
            int res = mHTViewHolder.getLoadMoreViewBackgroundResId();
            if (res != 0) {//默认背景透明
                mLoadMoreContainerView.setBackgroundResource(res);
            } else {
                mLoadMoreContainerView.setBackgroundResource(android.R.color.transparent);
            }
            mLoadMoreContainerView.removeAllViews();
            setViewLayoutParams(loadMoreView);
            mLoadMoreContainerView.addView(loadMoreView);
            hideLoadMoreView(true);
        }
        setLoadMoreUIChangeListener(mHTViewHolder);
    }

    private void setViewLayoutParams(View view) {
private void setViewLayoutParams(View view) {
        view.setLayoutParams(lp);
    }

    protected boolean checkOrientationVertical() {
        return mHTOrientation == VERTICAL_UP || mHTOrientation == VERTICAL_DOWN;
    }

    protected boolean checkOrientationReverse() {
        return mHTOrientation == HTOrientation.HORIZONTAL_LEFT || mHTOrientation == VERTICAL_UP;
    }

protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        }
    }

    protected void onLayout(boolean changed, int l, int t, int r, int b) {
//        super.onLayout(changed, l, t, r, b);
        if (checkOrientationVertical()) {
public void hideLoadMoreView(boolean isHide) {
        if (mLoadMoreContainerView != null && mHTViewHolder != null) {
            int size = 0;
            if (isHide) {
                size = -mHTViewHolderTracker.getLoadMoreSize();
            }
            switch (mHTOrientation) {
                case VERTICAL_DOWN:
package com.netease.hearttouch.htrefreshrecyclerview.base;

import android.content.Context;
import android.view.View;
import android.view.ViewGroup;

import com.netease.hearttouch.htrefreshrecyclerview.utils.Utils;

import static android.R.attr.orientation;

/**
 * 刷新视图和加载更多视图的包裹基类,用户需要继承该类完成自定义视图样式
 */
public abstract class HTBaseViewHolder implements HTBaseRecyclerView.HTLoadMoreUIChangeListener, HTBaseRecyclerView.HTRefreshUIChangeListener {

    private static final int DEFAULT_ANIMATION_TIME = 500;
    private static final int DEFAULT_VIEW_SIZE = 50;

    protected Context mContext;
    /**
     * 加载更多视图对象
     */
    protected View mLoadMoreView;
    /**
     * 刷新视图的背景色
     */
    private int mRefreshViewBackgroundResId = 0;
    /**
     * 加载更多视图的背景色
     */
    private int mLoadMoreViewBackgroundResId = 0;
    /**
     * 动画时间，默认500ms
     */
    private int mAnimationTime = DEFAULT_ANIMATION_TIME;

    private HTViewHolderTracker mViewHolderTracker;

    private int mOrientation = 1;

    public HTBaseViewHolder(Context context) {
        mContext = context;
        mRefreshView = onInitRefreshView();
        mLoadMoreView = onInitLoadMoreView();
        mViewHolderTracker = new HTViewHolderTracker();
    }

    /**
     * 设置加载更多视图的背景色
     *
     * @param loadMoreViewBackgroundResId 背景色资源Id
     */
    public void setLoadMoreViewBackgroundResId(int loadMoreViewBackgroundResId) {
        if (loadMoreViewBackgroundResId > 0) {
            this.mLoadMoreViewBackgroundResId = loadMoreViewBackgroundResId;
            if (mLoadMoreView != null) {
                ViewGroup container = (ViewGroup) mLoadMoreView.getParent();
                if (container != null) {
                    container.setBackgroundResource(loadMoreViewBackgroundResId);
                }
            }
        }
    }

    protected void updateViewSize() {
        computeViewSize(orientation);
    }

    /**
     *  计算刷新视图和加载更多视图在刷新方向上的尺寸
     * @param orientation
     */
    protected void computeViewSize(int orientation) {
        mOrientation = orientation;
        int refreshSize = mRefreshView == null ? 0 : Utils.getItemViewSize(orientation, mRefreshView);
        int loadMoreSize = mRefreshView == null ? 0 : Utils.getItemViewSize(orientation, mLoadMoreView);
        mViewHolderTracker.setRefreshViewSize(refreshSize == 0 ? DEFAULT_VIEW_SIZE : refreshSize);
        mViewHolderTracker.setLoadMoreSize(loadMoreSize == 0 ? DEFAULT_VIEW_SIZE : loadMoreSize);
    }


protected void computeViewSize(int orientation) {
     *
     * @param refreshViewBackgroundResId 背景色资源Id
     */
    public void setRefreshViewBackgroundResId(int refreshViewBackgroundResId) {
        if (refreshViewBackgroundResId > 0) {
            mRefreshViewBackgroundResId = refreshViewBackgroundResId;
            if (mRefreshView != null) {
                ViewGroup container = (ViewGroup) mRefreshView.getParent();
                if (container != null) {
                    container.setBackgroundResource(refreshViewBackgroundResId);
                }
            }
        }
    }


    public HTViewHolderTracker getViewHolderTracker() {
        return mViewHolderTracker;
    }


    /**
     * 设置刷新和加载更多相关动画的执行时间
public void setSpringDistanceScale(float springDistanceScale) {
    }

    /**
     * 自定义的刷新视图
     */
    public abstract View onInitRefreshView();

    /**
     * 自定义的加载更多视图
     */
    public abstract View onInitLoadMoreView();

    public final int getAnimationTime() {
        return mAnimationTime;
    }

    public final int getLoadMoreViewBackgroundResId() {
        return mLoadMoreViewBackgroundResId;
    }

    public final int getRefreshViewBackgroundResId() {
        return mRefreshViewBackgroundResId;
    }
public final View getRefreshView() {
    public final View getLoadMoreView() {
        return mLoadMoreView;
    }

}
    private float mOffsetX;
    private float mOffsetY;
    private int mRefreshViewSize;
    private int mLoadMoreSize;
    /**刷新视图移动上一次的位置*/
    private int mLastPos = 0;
    /**刷新视图移动当前的位置*/
public boolean isIdlePosition() {
        return mCurrentPos == POSITION_IDLE;
    }

    public int getLoadMoreSize() {
        return mLoadMoreSize;
    }

    public void setLoadMoreSize(int loadMoreSize) {
        mLoadMoreSize = loadMoreSize;
    }

    public boolean hasLeftIdlePosition() {
        return mCurrentPos > POSITION_IDLE;
    }
    protected boolean mAutoRefresh;

    public HTBaseRecyclerViewImpl(Context context) {
        this(context, null);
    }

    public HTBaseRecyclerViewImpl(Context context, AttributeSet attrs) {
        this(context, attrs, 0);
    }

    public HTBaseRecyclerViewImpl(Context context, AttributeSet attrs, int defStyleAttr) {
public boolean shouldHandleLoadMore() {
                postDelayed(new Runnable() {
                    @Override
                    public void run() {
                        changeLoadMoreViewPositionWithAnimation(-mHTViewHolderTracker.getLoadMoreSize(), null);
                    }
                }, mHTViewHolder.getAnimationTime());
            }
protected void updatePos(float offset) {
                (mHTViewHolderTracker.isOverCompletePos() && mRefreshStatus == RefreshStatus.COMPLETE)*/) {
            mRefreshStatus = RefreshStatus.REFRESH_PREPARE;
            mRefreshUIChangeListener.onRefreshPrepare();
            if(mRecyclerViewDragListener!=null){
                mRecyclerViewDragListener.onRefreshViewPrepareToMove();
            }
        }
protected void endLoadMore() {
            if (mLoadMoreViewDisplay) {//一直显示没有更多提示
                if (mScreenFilled) {
                    if (mHasMore) {//还有更多数据的时候,满一屏动画隐藏,否则直接隐藏
                        changeLoadMoreViewPositionWithAnimation(-mHTViewHolderTracker.getLoadMoreSize(), null);
                    } else {
                        hideLoadMoreView(false);
                    }
protected void endLoadMore() {
                }
            } else {
                if (mScreenFilled) {
                    changeLoadMoreViewPositionWithAnimation(-mHTViewHolderTracker.getLoadMoreSize(), null);
                } else {
                    hideLoadMoreView(true);
                }
public void setRefreshCompleted(boolean hasMore) {

    @Override
    public void startAutoRefresh() {
        if (mRecyclerView != null && mHTViewHolder != null && mHTViewHolder.getRefreshView() != null) {
            if (mRefreshStatus != RefreshStatus.IDLE || mLoadMoreStatus != LoadMoreStatus.IDLE || mRefreshDelegate == null) {
                return;
            }
public void startAutoRefresh() {
                if (mRefreshUIChangeListener != null) {
                    mRefreshUIChangeListener.onRefreshPrepare();
                }
                if(mRecyclerViewDragListener!=null){
                    mRecyclerViewDragListener.onRefreshViewPrepareToMove();
                }
                mScrollJob.tryToScrollTo(mHTViewHolderTracker.getOffsetToRefresh(), mHTViewHolder.getAnimationTime());
protected void changeLoadMoreViewPositionWithAnimation(int targetPosition, @Null
                startValue = mLoadMoreContainerView.getPaddingRight();
                break;
        }
        if (startValue <= -mHTViewHolderTracker.getLoadMoreSize()) return;
        mLoadMoreAnimator = ValueAnimator.ofInt(startValue, targetPosition);
        mLoadMoreAnimator.setDuration(mHTViewHolder.getAnimationTime());
        mLoadMoreAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {

import android.content.Context;
import android.view.View;
import android.view.animation.Animation;
import android.view.animation.RotateAnimation;
import android.widget.ImageView;
import com.netease.hearttouch.htrefreshrecyclerview.R;
import com.netease.hearttouch.htrefreshrecyclerview.base.HTBaseRecyclerView;
import com.netease.hearttouch.htrefreshrecyclerview.base.HTBaseViewHolder;
import com.netease.hearttouch.htrefreshrecyclerview.base.HTOrientation;
import com.netease.hearttouch.htrefreshrecyclerview.base.HTViewHolderTracker;

/**
private void initAnimation() {
        mRightAnim.setFillAfter(true);
    }

    @Override
    public View onInitRefreshView() {
        View refreshView = View.inflate(mContext, R.layout.ht_view_horizontal_refresh_default, null);
        mTvRefreshStatus = (TextView) refreshView.findViewById(R.id.tv_refresh_status);
        mIvRefreshArrow = (ImageView) refreshView.findViewById(R.id.iv_refresh_arrow);
        mRefreshProgressBar = (ProgressBar) refreshView.findViewById(R.id.pb_loading);
        return refreshView;
    }

    @Override
    public View onInitLoadMoreView() {
        View loadMoreView = View.inflate(mContext, R.layout.ht_view_horizontal_load_more_default, null);
        mVLoadMore = loadMoreView.findViewById(R.id.liner_loading);
        mVNoMore = loadMoreView.findViewById(R.id.tv_no_more);
        return loadMoreView;
    }

public void onRefreshPositionChange(float scale, float moveDistance, int refresh
        }
    }

    public void setDefaultRefreshViewArrow(int orientation) {
        if (mIvRefreshArrow == null) return;
        switch (orientation) {
            case HTOrientation.HORIZONTAL_LEFT:
                mIvRefreshArrow.setImageResource(R.drawable.ht_left_arrow_default);
                break;
            case HTOrientation.HORIZONTAL_RIGHT:
            default:
                mIvRefreshArrow.setImageResource(R.drawable.ht_right_arrow_default);
                break;
        }
    }
}

import android.content.Context;
import android.view.View;
import android.view.animation.Animation;
import android.view.animation.RotateAnimation;
import android.widget.ImageView;
import com.netease.hearttouch.htrefreshrecyclerview.R;
import com.netease.hearttouch.htrefreshrecyclerview.base.HTBaseRecyclerView;
import com.netease.hearttouch.htrefreshrecyclerview.base.HTBaseViewHolder;
import com.netease.hearttouch.htrefreshrecyclerview.base.HTOrientation;
import com.netease.hearttouch.htrefreshrecyclerview.base.HTViewHolderTracker;

/**
private void initAnimation() {
    }

    @Override
    public View onInitRefreshView() {
        View refreshView = View.inflate(mContext, R.layout.ht_view_vertical_refresh_default, null);
        mTvRefreshStatus = (TextView) refreshView.findViewById(R.id.tv_refresh_status);
        mIvRefreshArrow = (ImageView) refreshView.findViewById(R.id.iv_refresh_arrow);
        mRefreshProgressBar = (ProgressBar) refreshView.findViewById(R.id.pb_loading);
        return refreshView;
    }

    @Override
    public View onInitLoadMoreView() {
        View loadMoreView = View.inflate(mContext, R.layout.ht_view_vertical_load_more_default, null);
        mVLoadMore = loadMoreView.findViewById(R.id.liner_loading);
        mVNoMore = loadMoreView.findViewById(R.id.tv_no_more);
        return loadMoreView;
    }

public void onRefreshPositionChange(float scale, float moveDistance, int refresh
        }
    }

    public void setDefaultRefreshViewArrow(int orientation) {
        if (mIvRefreshArrow == null) return;
        switch (orientation) {
            case HTOrientation.VERTICAL_UP:
                mIvRefreshArrow.setImageResource(R.drawable.ht_up_arrow_default);
                break;
            case HTOrientation.VERTICAL_DOWN:
            default:
                mIvRefreshArrow.setImageResource(R.mipmap.refresh_down_arrow_default);
                break;
        }
    }
}
  * LICENSE file in the root directory of this source tree.
  -->
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
              android:layout_width="@dimen/default_height"
              android:layout_height="match_parent"
              android:gravity="center"
              android:orientation="vertical"
              android:paddingLeft="@dimen/default_padding"
              android:paddingRight="@dimen/default_padding">

    <FrameLayout
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginBottom="@dimen/default_space"
        android:layout_above="@+id/tv_refresh_status">

        <ImageView
            android:id="@+id/iv_refresh_arrow"
            android:layout_width="@dimen/default_arrow_width"
            android:layout_height="@dimen/default_arrow_height"
            android:layout_gravity="center"/>

        <ProgressBar
            android:id="@+id/pb_loading"
            style="?android:attr/progressBarStyle"
            android:layout_width="@dimen/default_arrow_width"
            android:layout_height="@dimen/default_arrow_height"
            android:visibility="gone"
            android:indeterminateDrawable="@drawable/ht_refresh_loading_default"
            />
    </FrameLayout>


    <TextView
        android:id="@+id/tv_refresh_status"
        android:layout_width="@dimen/default_text_line_height"
        android:layout_height="wrap_content"
        android:gravity="center_horizontal"
        android:text="@string/pull_to_refresh"
        android:textColor="#777"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:paddingLeft="@dimen/default_space"
        android:layout_toLeftOf="@+id/tv_refresh_status"
        android:layout_toStartOf="@+id/tv_refresh_status">

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
android {
        applicationId "de.westnordost.streetcomplete"
        minSdkVersion 17
        targetSdkVersion 25
        // until #286 is fixed
        maxSdkVersion 25
        versionCode 8
        versionName "0.11"
        multiDexEnabled true
dependencies {
    // tests (perhaps migrate to junit4 later if any features of it seem convenient or necessary)
    testCompile 'junit:junit:3.8.1'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile 'org.objenesis:objenesis:2.2'

    androidTestCompile 'org.mockito:mockito-core:1.10.19'
    androidTestCompile 'org.objenesis:objenesis:2.2'
    androidTestCompile "com.crittercism.dexmaker:dexmaker:1.4"
    androidTestCompile "com.crittercism.dexmaker:dexmaker-dx:1.4"
    androidTestCompile "com.crittercism.dexmaker:dexmaker-mockito:1.4"


    // dependency injection
    compile 'com.google.dagger:dagger:2.5'
    apt 'com.google.dagger:dagger-compiler:2.5'
dependencies {
    }

    // serialization
    compile 'com.esotericsoftware:kryo:4.0.0'

    // map and location
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void onSurfaceChanged() {
    }

    @Override
    void start() {
        chooseCamera();
        openCamera();
        if (mPreview.isReady()) {
            setUpPreview();
        }
        mShowingPreview = true;
        mCamera.startPreview();
    }

    @Override
public void onSurfaceChanged() {
    }

    @Override
    void start() {
        chooseCameraIdByFacing();
        collectCameraInfo();
        prepareImageReader();
        startOpeningCamera();
    }

    @Override
void setDisplayOrientation(int displayOrientation) {
     * <p>This rewrites {@link #mCameraId}, {@link #mCameraCharacteristics}, and optionally
     * {@link #mFacing}.</p>
     */
    private void chooseCameraIdByFacing() {
        try {
            int internalFacing = INTERNAL_FACINGS.get(mFacing);
            final String[] ids = mCameraManager.getCameraIdList();
            for (String id : ids) {
                CameraCharacteristics characteristics = mCameraManager.getCameraCharacteristics(id);
                Integer internal = characteristics.get(CameraCharacteristics.LENS_FACING);
                if (internal == null) {
                    throw new NullPointerException("Unexpected state: LENS_FACING null");
                }
                if (internal == internalFacing) {
                    mCameraId = id;
                    mCameraCharacteristics = characteristics;
                    return;
                }
            }
            // Not found
            mCameraId = ids[0];
            mCameraCharacteristics = mCameraManager.getCameraCharacteristics(mCameraId);
            Integer internal = mCameraCharacteristics.get(CameraCharacteristics.LENS_FACING);
            if (internal == null) {
                throw new NullPointerException("Unexpected state: LENS_FACING null");
            }
            for (int i = 0, count = INTERNAL_FACINGS.size(); i < count; i++) {
                if (INTERNAL_FACINGS.valueAt(i) == internal) {
                    mFacing = INTERNAL_FACINGS.keyAt(i);
                    return;
                }
            }
            // The operation can reach here when the only camera device is an external one.
            // We treat it as facing back.
            mFacing = Constants.FACING_BACK;
        } catch (CameraAccessException e) {
            throw new RuntimeException("Failed to get a list of camera devices", e);
        }
View getView() {
        return mPreview.getView();
    }

    abstract void start();

    abstract void stop();

    public @interface Flash {
    }

    final CameraViewImpl mImpl;

    private final CallbackBridge mCallbacks;

public CameraView(Context context, AttributeSet attrs) {
    public CameraView(Context context, AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);
        // Internal setup
        final PreviewImpl preview;
        if (Build.VERSION.SDK_INT < 14) {
            preview = new SurfaceViewPreview(context, this);
        } else {
            preview = new TextureViewPreview(context, this);
        }
        mCallbacks = new CallbackBridge();
        if (Build.VERSION.SDK_INT < 21) {
            mImpl = new Camera1(mCallbacks, preview);
public void onDisplayOrientationChanged(int displayOrientation) {
        };
    }

    @Override
    protected void onAttachedToWindow() {
        super.onAttachedToWindow();
protected void onRestoreInstanceState(Parcelable state) {
     * {@link Activity#onResume()}.
     */
    public void start() {
        mImpl.start();
    }

    /**
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    private static AppDatabase db;

    public static DatabaseFactory getInstance(Context context){
        if(instance == null){
            createDb(context);
            instance = new DatabaseFactory();
        }
        return instance;
    }

    private static void createDb(Context context){
        if(db == null){
            db = Room.databaseBuilder(context, AppDatabase.class, "bookbase-db").allowMainThreadQueries().build();
        }
        return;
    }

    public static AppDatabase getDb(){
        return db;
    }

public void onAttach(Context context) {
        super.onAttach(context);
        if (context instanceof OnFragmentInteractionListener) {
            mListener = (OnFragmentInteractionListener) context;
            database = DatabaseFactory.getInstance(this.getContext()).getDb();
        } else {
            throw new RuntimeException(context.toString()
                    + " must implement OnFragmentInteractionListener");
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public int findLastSeenPosition(long lastSeen) {
    if (lastSeen <= 0)     return -1;
    if (!isActiveCursor()) return -1;

    int count = getItemCount();

    for (int i=0;i<count;i++) {
      MessageRecord messageRecord = getRecordForPositionOrThrow(i);
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import java.util.HashSet;
import java.util.Set;

import ie.macinnes.htsp.MessageListener;
import ie.macinnes.htsp.ResponseMessage;
import ie.macinnes.htsp.messages.BaseChannelResponse;
public void enableAsyncMetadata(Runnable initialSyncCompleteCallback) {
            Log.d(TAG, "Skipping lastUpdate field, disabled by preference");
        }

        mConnection.sendMessage(enableAsyncMetadataRequest);
    }

    @Override
public void run() {
                    }
                }

                if (mSocketChannel != null) {
                    if (mSocketChannel.isConnected() && mMessageQueue.isEmpty()) {
                        mSocketChannel.register(mSelector, SelectionKey.OP_READ);
                    } else if (mSocketChannel.isConnected()) {
                        mSocketChannel.register(mSelector, SelectionKey.OP_READ | SelectionKey.OP_WRITE);
                    }
                }
            } catch (Exception e) {
                Log.e(TAG, "Something failed - shutting down", e);
protected void close(int endState) {
        }
    }

    public void sendMessage(HtspMessage htspMessage) {
        Log.d(TAG, "Sending HtspMessage: " + htspMessage.toString());

        mMessageQueue.add(htspMessage);

        mLock.lock();
public void sendMessage(HtspMessage htspMessage) {
        }
    }

    public void sendMessage(BaseMessage message) {
        sendMessage(message.toHtspMessage());
    }

    public boolean isClosed() {
        return getState() == STATE_CLOSED || getState() == STATE_FAILED;
    }

    public int getState() {
private void processWritableSelectionKey() throws IOException {
        Log.v(TAG, "processWritableSelectionKey()");
        HtspMessage htspMessage = mMessageQueue.poll();

        if (htspMessage != null) {
            mSocketChannel.write(htspMessage.toWire());
        }
    }
import java.util.concurrent.Callable;

import ie.macinnes.htsp.Connection;
import ie.macinnes.htsp.IMessageListener;
import ie.macinnes.htsp.MessageListener;
import ie.macinnes.htsp.ResponseMessage;
private void sendHello() {
        helloRequest.setUsername(mUsername);

        Log.d(TAG, "Sending helloRequest");
        mConnection.sendMessage(helloRequest);
    }

    private void sendAuthenticate(HelloResponse response) {
private void sendAuthenticate(HelloResponse response) {
        authenticateRequest.setDigest(md.digest());

        Log.d(TAG, "Sending authenticateRequest");
        mConnection.sendMessage(authenticateRequest);
    }

    private void completeAuthentication(AuthenticateResponse response) {
import java.util.Map;
import java.util.concurrent.atomic.AtomicInteger;

import ie.macinnes.htsp.MessageListener;
import ie.macinnes.htsp.ResponseMessage;
import ie.macinnes.htsp.messages.FileCloseRequest;
private void sendFileOpen(int openCount, String file) {

        Log.d(TAG, "Sending fileOpenRequest");
        mSequences.put(fileOpenRequest.getSeq(), openCount);
        mConnection.sendMessage(fileOpenRequest);
    }

    private void createByteBuffer(int openCount, FileOpenResponse response) {
private void sendFileRead(int openCount) {

        Log.d(TAG, "Sending fileReadRequest");
        mSequences.put(fileReadRequest.getSeq(), openCount);
        mConnection.sendMessage(fileReadRequest);
    }

    private void sendFileClose(int openCount) {
private void sendFileClose(int openCount) {

            Log.d(TAG, "Sending fileCloseRequest");
            mSequences.put(fileCloseRequest.getSeq(), openCount);
            mConnection.sendMessage(fileCloseRequest);
        }
    }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
dependencies {
    compile 'com.jakewharton:process-phoenix:1.1.1'

    // RxJava
    def rxjavaVersion = '2.0.0'
    compile "io.reactivex.rxjava2:rxjava:$rxjavaVersion"
    compile "io.reactivex.rxjava2:rxandroid:$rxjavaVersion"

    // Showcase view
    // TODO replace by repository dependency. however, there is a conflict in min sdk, which needs to be solved then
import java.lang.ref.WeakReference;
import java.util.concurrent.TimeUnit;

import io.reactivex.BackpressureStrategy;
import io.reactivex.Observable;
import io.reactivex.android.schedulers.AndroidSchedulers;
import io.reactivex.disposables.CompositeDisposable;
import io.reactivex.functions.Consumer;
import io.reactivex.schedulers.Schedulers;

public class CompassView extends View {

public void onAttachedToWindow() {

        initialDisplay = true;

        // FIXME: this causes an exception with RxAndroid 2.0.0 (see https://github.com/cgeo/cgeo/issues/6087)
        // periodicUpdate.add(AndroidSchedulers.mainThread().schedulePeriodicallyDirect(new UpdateAction(this), 0, 40, TimeUnit.MILLISECONDS));
        // Use a workaround in the meantime.
        periodicUpdate.add(Observable.interval(40, 40, TimeUnit.MILLISECONDS, Schedulers.computation()).observeOn(AndroidSchedulers.mainThread()).toFlowable(BackpressureStrategy.DROP).subscribe(new Consumer<Long>() {
            final UpdateAction action = new UpdateAction(CompassView.this);
            @Override
            public void accept(final Long aLong) throws Exception {
                action.run();
            }
        }));
    }

    @Override
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
dependencies {

    // map and location
    compile 'com.mapzen.tangram:tangram:0.6.3'
    compile 'com.mapzen.android:lost:2.1.2'

    // config files
    compile 'com.esotericsoftware.yamlbeans:yamlbeans:1.09'
public void startPositionTracking()

	public void stopPositionTracking()
	{
		try // TODO remove when https://github.com/mapzen/lost/issues/178 is solved
		{
			if(lostApiClient.isConnected())
			{
				LocationServices.FusedLocationApi.removeLocationUpdates(lostApiClient, this);
				lostApiClient.disconnect();
			}
		} catch(Exception e) {
			e.printStackTrace();
		}
	}

public void onConnectionSuspended() {}

	@Override public void onLocationChanged(Location location)
	{
		LatLon pos = new OsmLatLon(location.getLatitude(), location.getLongitude());
		// TODO remove when https://github.com/mapzen/lost/issues/142 is fixed
		if(this.pos != null)
		{
			if(SphericalEarthMath.distance(pos, this.pos) < 400) return;
		}
		this.pos = pos;
		triggerAutoDownload();
	}

	@Override public void onProviderEnabled(String provider) {}
	@Override public void onProviderDisabled(String provider) {}

	public void triggerAutoDownload()
	{
		if(!isAllowedByPreference()) return;
public void startRequest(int priority, Callback listener)

	public void stopRequest()
	{
		try // TODO remove when https://github.com/mapzen/lost/issues/178 is solved
		{
			Handler h = new Handler(Looper.getMainLooper());
			h.post(new Runnable()
			{
				@Override public void run()
				{
					if(lostApiClient.isConnected())
					{
						LocationServices.FusedLocationApi.removeLocationUpdates(lostApiClient, SingleLocationRequest.this);
						lostApiClient.disconnect();
					}
				}
			});

		} catch(Exception e) {
			e.printStackTrace();
		}
	}

	@Override public void onConnected() throws SecurityException
public void stopRequest()
		stopRequest();
	}

	@Override public void onProviderDisabled(String provider) {}
	@Override public void onProviderEnabled(String provider) {}
	@Override public void onConnectionSuspended() {}
}
public void stopPositionTracking()
		}
		zoomedYet = false;

		try // TODO remove when https://github.com/mapzen/lost/issues/178 is solved
		{
			if(lostApiClient.isConnected())
			{
				LocationServices.FusedLocationApi.removeLocationUpdates(lostApiClient, this);
				lostApiClient.disconnect();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

private float meters2Pixels(LngLat at, float meters) {
		return Math.abs(screenPos1.y - screenPos0.y);
	}

	@Override public void onProviderEnabled(String provider)
	{

	}

	@Override public void onProviderDisabled(String provider)
	{

	}

	private static final String PREF_ROTATION = "map_rotation";
	private static final String PREF_TILT = "map_tilt";
	private static final String PREF_ZOOM = "map_zoom";
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

android {
        applicationId "openfoodfacts.github.scrachx.openfood"
        minSdkVersion 16
        targetSdkVersion 25
        versionCode 29
        versionName "0.6"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary = true
public void onResponse(Call<AllergenRestResponse> call, Response<AllergenRestRes
                    return;
                }

                mAllergenDao.insertInTx(response.body().getAllergens());
                onAllergensCallback.onAllergensResponse(true);
            }

public class OFFApplication extends Application {

    private DaoSession daoSession;
    private boolean DEBUG = true;

    @Override
    public void onCreate() {
        super.onCreate();

        // Use only during development: DaoMaster.DevOpenHelper (Drops all table on Upgrade!)
        // Use only during production: DatabaseHelper (see on Upgrade!)
        DaoMaster.DevOpenHelper helper = new DaoMaster.DevOpenHelper(this, "open_food_facts");
        Database db = helper.getWritableDb();
        daoSession = new DaoMaster(db).newSession();

protected Boolean doInBackground(Void... arg0) {
                is = getAssets().open(additivesFile);
                List<Additive> frenchAdditives = JsonUtils.readFor(new TypeReference<List<Additive>>() {})
                        .readValue(is);
                mAdditiveDao.insertInTx(frenchAdditives);
            } catch (IOException e) {
                result = false;
                Log.e(ADDITIVE_IMPORT, "Unable to import additives from " + additivesFile);
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
package com.wolfgoes.popularmovies.ui;

import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.text.TextUtils;

import com.wolfgoes.popularmovies.R;
import com.wolfgoes.popularmovies.utils.Utility;

public class MainActivity extends AppCompatActivity {

    private static final String STATE_MOVIE_ORDER = "extra_movie_order";

    private String mOrder;

    @Override
    protected void onSaveInstanceState(Bundle outState) {
protected void onCreate(Bundle savedInstanceState) {

        setContentView(R.layout.activity_main);

        if (findViewById(R.id.fragment_container) != null) {
            MoviesFragment moviesFragment = new MoviesFragment();

protected void onResume() {
        }
        mOrder = order;
    }
}
import android.widget.TextView;
import android.widget.Toast;

import com.wolfgoes.popularmovies.BuildConfig;
import com.wolfgoes.popularmovies.R;
import com.wolfgoes.popularmovies.api.MovieApi;
import com.wolfgoes.popularmovies.data.MoviesContract;
public boolean onOptionsItemSelected(MenuItem item) {
    @Override
    public void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
        outState.putParcelableArrayList(STATE_MOVIE_LIST, mMovies);
        outState.putString(STATE_MOVIE_ORDER, mOrder);
    }

public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);

        if (savedInstanceState != null) {
            mMovies = savedInstanceState.getParcelableArrayList(STATE_MOVIE_LIST);

            synchronized (lock) {
                if (mMovies != null && mMovies.size() > 0 && mMovies.get(mMovies.size() - 1) == null) {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
private void blockUser() {
            .negativeText(android.R.string.cancel)
            .onPositive(new MaterialDialog.SingleButtonCallback() {
                @Override
                public void onClick(@NonNull MaterialDialog materialDialog, @NonNull DialogAction dialogAction) {
                    setPrivacy(PRIVACY_BLOCK);
                }
            })
            .show();
private void unblockUser() {
            .negativeText(android.R.string.cancel)
            .onPositive(new MaterialDialog.SingleButtonCallback() {
                @Override
                public void onClick(@NonNull MaterialDialog materialDialog, @NonNull DialogAction dialogAction) {
                    setPrivacy(PRIVACY_UNBLOCK);
                }
            })
            .show();
public void onClick(View v) {
                        else
                            action = PRIVACY_REJECT;

                        setPrivacy(action);
                    }
                };

public void onClick(View v) {
            mInvitationBar.setVisibility(visible ? View.VISIBLE : View.GONE);
    }

    void setPrivacy(int action) {
        int status;

        switch (action) {
void setPrivacy(int action) {
                return;
        }

        Context ctx = getActivity();

        // temporarly disable peer observer because the next call will write to the threads table
        unregisterPeerObserver();

public void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which)
                        switch (which) {
                            case POSITIVE:
                                // trust new key
                                trustKeyChange(null);
                                break;
                            case NEGATIVE:
                                // block user immediately
                                setPrivacy(PRIVACY_BLOCK);
                                break;
                        }
                    }
public void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which)
        builder.show();
    }

    void trustKeyChange(String fingerprint) {
        // mark current key as trusted
        if (fingerprint == null)
            fingerprint = getContact().getFingerprint();
        Kontalk.getMessagesController(getContext())
            .setTrustLevelAndRetryMessages(getContext(), mUserJID, fingerprint, MyUsers.Keys.TRUST_VERIFIED);
        // reload contact
        invalidateContact();
    }
public void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which)
                                        // hide warning bar
                                        hideWarning();
                                        // trust new key
                                        trustKeyChange((String) data[0]);
                                        break;
                                    case NEUTRAL:
                                        showIdentityDialog(false, dialogTitleId);
public void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which)
                                        // hide warning bar
                                        hideWarning();
                                        // block user immediately
                                        setPrivacy(PRIVACY_BLOCK);
                                        break;
                                }
                            }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
 * Copyright (C) 2012 OpenIntents.org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
import java.util.ArrayList;
import java.util.HashMap;

import static com.veniosg.dir.fragment.PreferenceFragment.getMediaScanFromPreference;
import static com.veniosg.dir.util.CopyHelper.Operation.COPY;
import static com.veniosg.dir.view.PathController.OnDirectoryChangedListener;
public void onViewCreated(View view, Bundle savedInstanceState) {

        mPathBar = (PathController) getActivity().findViewById(R.id.pathview);
        mTransitionView = (AnimatedFileListContainer) view.findViewById(R.id.zoomview);

        // Handle mPath differently if we restore state or just initially create the view.
        if (savedInstanceState == null) {
public void onViewCreated(View view, Bundle savedInstanceState) {
            @Override
            public void directoryChanged(File newCurrentDir) {
                open(new FileHolder(newCurrentDir, getActivity()));
            }
        });
        if (savedInstanceState != null && savedInstanceState.getBoolean(INSTANCE_STATE_PATHBAR_MODE)) {
private void firstTimeAnimation(@SuppressWarnings("UnusedParameters") final View
        // Everyone hates lag on launch.
    }

    /**
     * Override this to handle initialization of list item long clicks.
     */
    private void initContextualActions() {
        if (mActionsEnabled) {
            getListView().setMultiChoiceModeListener(mMultiChoiceModeListener);
protected void onListVisibilityChanged(boolean visible) {

    @Override
    protected void onEmptyViewClicked() {
        mPathBar.cd(mPathBar.getCurrentDirectory().getParentFile());
    }

    public void closeActionMode() {
/* 
 * Copyright (C) 2007-2008 OpenIntents.org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
import android.net.Uri;
import android.provider.MediaStore.Audio;
import android.provider.MediaStore.Video;
import android.text.format.DateFormat;
import android.text.format.Formatter;
import android.util.Log;
public static Intent getViewIntentFor(FileHolder fileholder, Context c) {
        return intent;
    }

    public static boolean isOk(File file) {
        // Check file state.
        boolean isFileOK = true;
        isFileOK &= file.exists();
        isFileOK &= file.isDirectory();
        // add more filters here..

        return isFileOK;
    }

    private static void launchFileIntent(Intent intent, Context c) {
     */
    File getInitialDirectory();

    /**
     * Sets the directory the parent activity showed first so that back behavior is fixed.
     *
import static android.view.inputmethod.EditorInfo.IME_ACTION_GO;
import static com.veniosg.dir.AnimationConstants.ANIM_DURATION;
import static com.veniosg.dir.AnimationConstants.IN_INTERPOLATOR;
import static com.veniosg.dir.util.FileUtils.isOk;
import static com.veniosg.dir.util.Utils.backWillExit;
import static com.veniosg.dir.view.CheatSheet.setup;
import static com.veniosg.dir.view.PathController.Mode.MANUAL_INPUT;
public boolean cd(File file) {
    public boolean cd(File file, boolean forceNoAnim) {
        boolean result;

        if (isOk(file)) {
            File oldDir = new File(mCurrentDirectory.getAbsolutePath());
            mCurrentDirectory = file;

public File getInitialDirectory() {
    }

    @Override
    public void setInitialDirectory(File initDir) {
        mInitialDirectory = initDir;
        cd(initDir);
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void onError(String message) {
        request.execute();
    }

    public static void register(String mail, String password, String name, String studentenNumber, final SimpleLibraryServiceCallback<Boolean> callback) {
        HashMap<String, String> parameter = new HashMap<>();
        parameter.put("email", mail);
        parameter.put("password", password);
        parameter.put("name", name);
        parameter.put("studentnumber", studentenNumber);

        Request<Boolean> request = new Request<>(HttpVerb.POST, serverUrl + "/register", Boolean.class, parameter, new SimpleLibraryServiceCallback<Boolean>() {
            @Override
            public void onCompletion(Boolean input) {
protected void doSignUp(final EditText emailAddressEditText,
        final String password = passwordEditText.getText().toString();
        final boolean keepMeLoggedIn = keepMeLoggedInSwitch.isChecked();

        LibraryService.register(emailAddress, password, name, studentNumber, new SimpleLibraryServiceCallback<Boolean>() {

            @Override
            public void onCompletion(Boolean input) {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import android.animation.AnimatorSet;
import android.animation.ObjectAnimator;
import android.annotation.SuppressLint;
import android.content.Context;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.support.annotation.NonNull;
import android.support.v4.content.ContextCompat;
import android.text.format.DateUtils;
import android.util.AttributeSet;
import android.util.Log;
public boolean trySettingInputEnabled(boolean inputEnabled) {
    @SuppressWarnings("deprecation")
    public void onInitializeAccessibilityNodeInfo(@NonNull AccessibilityNodeInfo info) {
        super.onInitializeAccessibilityNodeInfo(info);
        if(Build.VERSION.SDK_INT >= 21) {
            info.addAction(AccessibilityNodeInfo.AccessibilityAction.ACTION_SCROLL_BACKWARD);
            info.addAction(AccessibilityNodeInfo.AccessibilityAction.ACTION_SCROLL_FORWARD);
        }
        else {
            info.addAction(AccessibilityNodeInfo.ACTION_SCROLL_FORWARD);
            info.addAction(AccessibilityNodeInfo.ACTION_SCROLL_BACKWARD);
        }
    }

public boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent event) {
     * When scroll forward/backward events are received, jump the time to the higher/lower
     * discrete, visible value on the circle.
     */
    @SuppressLint("NewApi")
    @Override
    public boolean performAccessibilityAction(int action, Bundle arguments) {
        if (super.performAccessibilityAction(action, arguments)) {
            return true;
        }

        int changeMultiplier = 0;
        if (action == AccessibilityNodeInfo.ACTION_SCROLL_FORWARD) {
            changeMultiplier = 1;
        } else if (action == AccessibilityNodeInfo.ACTION_SCROLL_BACKWARD) {
            changeMultiplier = -1;
        }
        if (changeMultiplier != 0) {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
private void setTheme(MessageListItemTheme theme) {

    @Override
    public void onClick(View v) {
        mAudioPlayerControl.buttonClick(new File(mComponent.getLocalUri().getPath()), this, mMessageId);
    }

    @Override
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import android.support.test.rule.ActivityTestRule;
import android.support.test.runner.AndroidJUnit4;
import android.view.LayoutInflater;
import android.widget.ListView;

import org.junit.Before;
import org.junit.Rule;
public void listViewAdapterItemIds() {
        assertThat(adapter).isInstanceOf(TestHelpers.MyBindingListViewAdapter.class);
        assertThat(TestHelpers.iterableIds(adapter)).containsExactlyElementsOf(itemIds);
    }
}
import android.databinding.BindingConversion;
import android.support.annotation.LayoutRes;
import android.support.v4.view.ViewPager;
import android.widget.AdapterView;

import java.util.List;

/**
        if (itemBinding == null) {
            throw new IllegalArgumentException("onItemBind must not be null");
        }
        BindingListViewAdapter<T> oldAdapter = (BindingListViewAdapter<T>) adapterView.getAdapter();
        if (adapter == null) {
            if (oldAdapter == null) {
                int count = itemTypeCount != null ? itemTypeCount : 1;
        }
    }

    // ViewPager
    @SuppressWarnings("unchecked")
    @BindingAdapter(value = {"itemBinding", "items", "adapter", "pageTitles"}, requireAll = false)
            viewPager.setAdapter(adapter);
        }
    }
    
    @BindingConversion
    public static <T> ItemBinding<T> toItemBinding(OnItemBind<T> onItemBind) {
        return ItemBinding.of(onItemBind);
# org.gradle.parallel=true

group=me.tatarka.bindingcollectionadapter
version=2.0.0-beta2
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void call() {
                    @Override
                    public void call() {
                        activity.supportInvalidateOptionsMenu();
                        CacheDetailActivity.updateOfflineBox(getView(), cache, res, new RefreshCacheClickListener(), new DropCacheClickListener(), new StoreCacheClickListener(), null);
                        CacheDetailActivity.updateCacheLists(getView(), cache, res);
                    }
                });
            }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
dependencies {
    compile 'com.github.afollestad:sectioned-recyclerview:0.2.0'
    compile 'com.github.afollestad:assent:ec59bea20f'
    compile 'com.github.afollestad:inquiry:b13a58b902'
    compile 'com.github.afollestad:icon-request:8686cb0f31'

    compile 'me.zhanghai.android.materialprogressbar:library:1.1.5'

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
protected void onPostExecute(Integer integer) {

            anim.fadeOut(R.id.layout_preset_store_download_installing, 100, 200, parentView, activity);
            anim.fadeIn(R.id.layout_preset_store_action_layout, 300, 200, "actionIn", parentView, activity);
            window.getProgressBar(R.id.layout_preset_store_download_progressbar, activity).setIndeterminate(true);
        }

        @Override
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    public static boolean isAuthenticated;

    public RedditAuthentication() {
        redditClient = new RedditClient(UserAgent.of("android", "com.example.jorgegil96.allnba",
                "v0.1", "jorgegil96"));
        isLoggedIn = false;
        isAuthenticated = false;
    }
protected void onCreate(Bundle savedInstanceState) {
        setUpDrawerContent();
        setUpPreferences();
        setNavigationHeaderContent();
        setFragment(GAMES_FRAGMENT_ID);
        toolbar.setBackgroundColor(ContextCompat.getColor(this, R.color.tricornBlack));

        registerGmcClient();
public void onFailure() {

            }
        };
        RedditAuthentication redditAuthentication = new RedditAuthentication();
        redditAuthentication.updateToken(this, listener);
        NetworkManager.getInstance(this);
    }

    private void setUpToolbar(){
import android.content.Context;
import android.graphics.Typeface;
import android.os.Bundle;
import android.support.design.widget.Snackbar;
import android.support.v4.app.Fragment;
import android.util.Log;

    @Override
    public void onCreate(Bundle savedInstanceState) {
        context = getActivity();
        setHasOptionsMenu(true);
        super.onCreate(savedInstanceState);
    }
public View onCreateView(LayoutInflater inflater, ViewGroup container,
        linlaHeaderProgress = (LinearLayout) rootView.findViewById(R.id.linlaHeaderProgress);

        tableLayout = (TableLayout) rootView.findViewById(R.id.tableLayout);
        getStandings();

        return rootView;
    }

    private void getStandings() {

        tableLayout.removeAllViews();

        linlaHeaderProgress.setVisibility(View.VISIBLE);
private void getStandings() {
        StringRequest request = new StringRequest(standingsURL, new Response.Listener<String>() {
            @Override
            public void onResponse(String response) {
                parseStandings(response);
            }
        }, new Response.ErrorListener() {
            @Override
private void parseStandings(String jsonString) {

        } catch (Exception e) {
            Log.e(TAG, "Volley error: " + e.toString());
            showSnackBar("Error parsing data", true);
        }
    }
private void dismissSnackbar() {
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case R.id.action_refresh:
                getStandings();
                return true;
        }
public boolean onOptionsItemSelected(MenuItem item) {
    @Override
    public void onPause() {
        dismissSnackbar();
        Log.d(TAG, "onPause");
        super.onPause();
    }

    @Override
    public void onResume() {
        super.onResume();
        Log.d(TAG, "onResume");
    }
}
            android:id="@+id/pbHeaderProgress"
            style="@style/Widget.AppCompat.ProgressBar"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content" >
        </ProgressBar>

    </LinearLayout>
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
protected void onCreate(Bundle savedInstanceState) {
        TimeEvent timeEvent = timeToAct.watchEvent(new TimeEvent(TimeUnit./*DAYS*/MINUTES.toMillis(1), delayKey));
        if(timeEvent.isHappened()) {
            makeText(this, R.string.welcome_back, LENGTH_LONG).show();
        }
        timeToAct.watchLastDropped(delayKey);

        AfterUpdateEvent afterUpdate = timeToAct.watchEvent(new AfterUpdateEvent(this, afterUpdateKey));
        if(afterUpdate.isHappened()) {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which)
                            @Override
                            public void onProductSentResponse(boolean value) {
                                if (value) {
                                    saveItems.remove(listSaveProduct.indexOf(product));
                                    ((SaveListAdapter) listView.getAdapter()).notifyDataSetChanged();
                                    SendProduct.deleteAll(SendProduct.class, "barcode = ?", product.getBarcode());
                                }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import android.os.Environment;
import android.os.Handler;
import android.support.annotation.NonNull;
import android.support.v4.app.Fragment;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.LinearLayoutManager;
private void setAdapter() {
            public void run() {
                if (window.getView(R.id.layout_online_preset_store_recyclerview_loading, v).getVisibility() == View.VISIBLE) {
                    // loading for 10 seconds, prompt user to retry or not
                    new MaterialDialog.Builder(a)
                            .title(R.string.preset_store_connection_timeout_dialog_title)
                            .content(R.string.preset_store_connection_timeout_dialog_text)
                            .contentColorRes(R.color.dark_primary)
                            .positiveText(R.string.preset_store_connection_timeout_dialog_positive)
                            .negativeText(R.string.preset_store_connection_timeout_dialog_negative)
                            .onPositive(new MaterialDialog.SingleButtonCallback() {
                                @Override
                                public void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which) {
                                    setAdapter();
                                }
                            })
                            .onNegative(new MaterialDialog.SingleButtonCallback() {
                                @Override
                                public void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which) {
                                    setLoadingFailed();
                                }
                            })
                            .show();
                }
            }
        }, 10000);
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public static String getPeer(Cursor cursor) {
        return cursor.getString(COLUMN_PEER);
    }

    public static boolean isGroup(Cursor cursor, int requiredMembership) {
        return cursor.getString(COLUMN_GROUP_JID) != null && cursor.getInt(COLUMN_GROUP_MEMBERSHIP) == requiredMembership;
    }

    public static void deleteFromCursor(Context context, Cursor cursor, boolean leaveGroup) {
        String groupJid = cursor.getString(COLUMN_GROUP_JID);
        String[] groupPeers = null;
public static CompositeMessage fromCursor(Context context, Cursor cursor) {
        return msg;
    }

    public static void deleteFromCursor(Context context, Cursor cursor) {
        MessagesProviderUtils.deleteMessage(context, cursor.getLong(COLUMN_ID));
    }
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.regex.Pattern;
private int getCheckedItemPosition() {
    }

    private void deleteSelectedMessages(final SparseBooleanArray checked) {
        new MaterialDialog.Builder(getActivity())
            .content(R.string.confirm_will_delete_messages)
            .positiveText(android.R.string.ok)
            .positiveColorRes(R.color.button_danger)
            .onPositive(new MaterialDialog.SingleButtonCallback() {
                @Override
                public void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which) {
                    Context ctx = getActivity();
                    for (int i = 0, c = getListView().getCount()+getListView().getHeaderViewsCount(); i < c; ++i) {
                        if (checked.get(i)) {
                            Cursor cursor = (Cursor) getListView().getItemAtPosition(i);
                            // skip group command messages
                            if (!GroupCommandComponent.isCursor(cursor))
                                CompositeMessage.deleteFromCursor(ctx, cursor);
                        }
                    }
                    mListAdapter.notifyDataSetChanged();
                }

package org.kontalk.ui;

import com.afollestad.materialdialogs.DialogAction;
import com.afollestad.materialdialogs.MaterialDialog;
import com.akalipetis.fragment.ActionModeListFragment;
public boolean onPrepareActionMode(ActionMode mode, Menu menu) {
        return true;
    }

    private void deleteSelectedThreads(final SparseBooleanArray checked) {
        boolean addGroupCheckbox = false;
        int checkedCount = 0;
        for (int i = 0, c = mListAdapter.getCount(); i < c; ++i) {
            if (checked.get(i)) {
                checkedCount++;
                if (!addGroupCheckbox && Conversation.isGroup((Cursor) mListAdapter.getItem(i),
                        MyMessages.Groups.MEMBERSHIP_MEMBER)) {
                    addGroupCheckbox = true;
                }
            }
        }

public void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which)
                    Context ctx = getContext();
                    boolean promptCheckBoxChecked = false;
                    if (hasGroupCheckbox) {
                        CheckBox promptCheckbox = (CheckBox) dialog.getCustomView().findViewById(R.id.promptCheckbox);
                        promptCheckBoxChecked = promptCheckbox.isChecked();
                    }

                    for (int i = 0, c = mListAdapter.getCount(); i < c; ++i) {
                        if (checked.get(i)) {
                            Cursor cursor = (Cursor) mListAdapter.getItem(i);
                            boolean hasLeftGroup = Conversation.isGroup(cursor, MyMessages.Groups.MEMBERSHIP_PARTED) ||
                                Conversation.isGroup(cursor, MyMessages.Groups.MEMBERSHIP_KICKED);
                            Conversation.deleteFromCursor(ctx, cursor,
                                hasGroupCheckbox ? promptCheckBoxChecked : hasLeftGroup);
                        }
                    }
                    mListAdapter.notifyDataSetChanged();
                }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void onResponse(Call<JsonNode> call, Response<JsonNode> response) {
                if(!response.isSuccess()) {
                    Toast.makeText(context, context.getString(R.string.errorWeb), Toast.LENGTH_LONG).show();
                    lt.error();
                }

                JsonNode body = response.body();
                if (body.get("status").asText().contains("status not ok")) {
                    Toast.makeText(context, body.get("error").asText(), Toast.LENGTH_LONG).show();
                    lt.error();
                } else {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      <sourceFolder url="file://$MODULE_DIR$/src/main/jni" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/src/main/rs" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/src/main/shaders" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/src/test/res" type="java-test-resource" />
      <sourceFolder url="file://$MODULE_DIR$/src/test/resources" type="java-test-resource" />
      <sourceFolder url="file://$MODULE_DIR$/src/test/assets" type="java-test-resource" />
      <sourceFolder url="file://$MODULE_DIR$/src/test/aidl" isTestSource="true" />
      <sourceFolder url="file://$MODULE_DIR$/src/test/java" isTestSource="true" />
      <sourceFolder url="file://$MODULE_DIR$/src/test/jni" isTestSource="true" />
      <sourceFolder url="file://$MODULE_DIR$/src/test/rs" isTestSource="true" />
      <sourceFolder url="file://$MODULE_DIR$/src/test/shaders" isTestSource="true" />
      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/res" type="java-test-resource" />
      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/resources" type="java-test-resource" />
      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/assets" type="java-test-resource" />
      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/jni" isTestSource="true" />
      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/rs" isTestSource="true" />
      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/shaders" isTestSource="true" />
      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/assets" />
      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/blame" />
      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/builds" />
      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/bundles" />
      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/classes" />
      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/dependency-cache" />
      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/incremental" />
      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/incremental-classes" />
      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/incremental-runtime-classes" />
      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/incremental-safeguard" />
      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/incremental-verifier" />
      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/instant-run-support" />
      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/jniLibs" />
      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/manifests" />
      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/pre-dexed" />
      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/reload-dex" />
      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/res" />
      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/restart-dex" />
      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/rs" />
      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/shaders" />
      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/symbols" />
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
protected void onSaveInstanceState(final Bundle outState) {
        outState.putParcelable(CURRENT_PREFERENCE_HEADER_EXTRA, currentHeader);
        outState.putParcelableArrayList(PREFERENCE_HEADERS_EXTRA, getListAdapter().getAllItems());

        if (preferenceScreenFragment != null) {
            getFragmentManager().putFragment(outState, PREFERENCE_SCREEN_FRAGMENT_EXTRA,
                    preferenceScreenFragment);
        }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
package openfoodfacts.github.scrachx.openfood.fragments;

import android.content.Intent;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.text.Html;
public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
        }

        if(mState != null && product.getIngredientsText() != null) {
            SpannableStringBuilder txtIngredients = new SpannableStringBuilder(Html.fromHtml(product.getIngredientsText().replace("_","")));
            txtIngredients = setSpanBoldBetweenTokens(txtIngredients);
            if(!txtIngredients.toString().substring(txtIngredients.toString().indexOf(":")).trim().isEmpty()) {
                ingredientsProduct.setText(txtIngredients);
            } else {
                ingredientsProduct.setVisibility(View.GONE);
            }
private SpannableStringBuilder setSpanBoldBetweenTokens(CharSequence text) {
            final String tm = m.group();
            for (String l: cleanAllergensMultipleOccurrences()) {
                if(l.equalsIgnoreCase(tm.replaceAll("[(),.-]+", ""))) {
                    StyleSpan bold = new StyleSpan(android.graphics.Typeface.BOLD);
                    if(tm.contains("(")) {
                        ssb.setSpan(bold, m.start()+1, m.end(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
                    } else if(tm.contains(")")) {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void onBackPressed() {
     * "Plan A Trip" option until a region is selected.
     */
    private void redrawNavigationDrawerFragment() {
        mNavigationDrawerFragment.populateNavDrawer();
    }

    /**
public void populateNavDrawer() {
    }

    private void createNavDrawerItems() {
        if (mDrawerItemsListContainer == null) {
            return;
        }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void onNmeaReceived(long timestamp, String nmea) {

    private void removeNmeaListener() {
        if (GpsTestUtil.isGnssStatusListenerSupported()) {
            mLocationManager.removeNmeaListener(mOnNmeaMessageListener);
        } else {
            mLocationManager.removeNmeaListener(mLegacyNmeaListener);
        }
    }

public void onStatusChanged(int status) {

    @RequiresApi(api = Build.VERSION_CODES.N)
    private void removeNavMessageListener() {
        mLocationManager.unregisterGnssNavigationMessageCallback(mGnssNavMessageListener);
    }

    /**
private void checkNavMessageOutput(SharedPreferences settings) {

    @Override
    protected void onDestroy() {
        removeStatusListener();
        mLocationManager.removeUpdates(this);
        super.onDestroy();
    }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Subproject commit 2f194cb848622d2bbf2451dc2a9e286eff2abde5
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      <sourceFolder url="file://$MODULE_DIR$/src/main/jni" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/src/main/rs" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/src/main/shaders" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/res" type="java-test-resource" />
      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/resources" type="java-test-resource" />
      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/assets" type="java-test-resource" />
      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/aidl" isTestSource="true" />
      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/java" isTestSource="true" />
      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/jni" isTestSource="true" />
      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/rs" isTestSource="true" />
      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/shaders" isTestSource="true" />
      <sourceFolder url="file://$MODULE_DIR$/src/test/res" type="java-test-resource" />
      <sourceFolder url="file://$MODULE_DIR$/src/test/resources" type="java-test-resource" />
      <sourceFolder url="file://$MODULE_DIR$/src/test/assets" type="java-test-resource" />
      <sourceFolder url="file://$MODULE_DIR$/src/test/jni" isTestSource="true" />
      <sourceFolder url="file://$MODULE_DIR$/src/test/rs" isTestSource="true" />
      <sourceFolder url="file://$MODULE_DIR$/src/test/shaders" isTestSource="true" />
      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/assets" />
      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/blame" />
      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/bundles" />
package com.nextgis.mobile.fragment;


import android.content.ContentUris;
import android.content.ContentValues;
import android.content.Context;
public boolean saveEdits() {
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        if (mMode == MODE_INFO)
            return;

        if (requestCode == IVectorLayerUI.MODIFY_REQUEST && data != null) {
            long id = data.getLongExtra(ConstantsUI.KEY_FEATURE_ID, NOT_FOUND);

            if (id != NOT_FOUND) {
                mEditLayerOverlay.setSelectedFeature(id);
                mSelectedLayer.showFeature(id);
                setMode(MODE_SELECT_ACTION);
            }
        } else if (mEditLayerOverlay.getSelectedFeatureGeometry() != null)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
protected void onCreate(@Nullable Bundle savedInstanceState) {
        timegapLabel = (TextView) findViewById(R.id.tv_timegap_label);
        playPauseButton = (ImageButton) findViewById(R.id.imageButton_play_pause_sensor);
        play = false;


        sensorDock.setVisibility(View.INVISIBLE);
        playPauseButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
public void onClick(View v) {
                }
            }
        });

        FragmentManager fragmentManager = getSupportFragmentManager();
        FragmentTransaction transaction = fragmentManager.beginTransaction();
package org.fossasia.pslab.sensorfragment;

import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentTransaction;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;

/**
 * Created by asitava on 13/7/17.

    private I2C i2c;
    private ScienceLab scienceLab;
    private HashMap<Integer, String> sensorAddr = new HashMap<>();
    private ArrayList<Integer> data = new ArrayList<>();
    private ArrayList<String> dataAddress = new ArrayList<>();
    private ArrayList<String> dataName = new ArrayList<>();
public static SensorFragmentMain newInstance() {
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        scienceLab = ScienceLabCommon.scienceLab;
        i2c = scienceLab.i2c;

        sensorAddr.put(0x60, "MCP4728");
        sensorAddr.put(0x48, "ADS1115");
        sensorAddr.put(0x23, "BH1750");
        sensorAddr.put(0x77, "BMP180");
        sensorAddr.put(0x5A, "MLX90614");
        sensorAddr.put(0x1E, "HMC5883L");
        sensorAddr.put(0x68, "MPU6050");
        sensorAddr.put(0x40, "SHT21");
        sensorAddr.put(0x39, "TSL2561");

        try {
            data = i2c.scan(null);
        } catch (IOException e) {
            e.printStackTrace();
        }
        if (data != null) {
            for (Integer myInt : data) {
                if (sensorAddr.get(myInt) != null) {
                    dataAddress.add(String.valueOf(myInt));
                    dataName.add(sensorAddr.get(myInt));
                }
            }
            for (String s : dataAddress) {
                tvData += s + ":" + sensorAddr.get(Integer.parseInt(s)) + "\n";
            }
        }
        String[] dataDisp = dataName.toArray(new String[dataName.size()]);
        adapter = new ArrayAdapter<>(getContext(), R.layout.sensor_list_item, R.id.tv_sensor_list_item, dataDisp);
    }

    @Override
    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.sensor_main, container, false);

        Button buttonSensorAutoscan = (Button) view.findViewById(R.id.button_sensor_autoscan);
        tvSensorScan = (TextView) view.findViewById(R.id.tv_sensor_scan);
        tvSensorScan.setText(tvData);
        lvSensor = (ListView) view.findViewById(R.id.lv_sensor);
        lvSensor.setAdapter(adapter);

        buttonSensorAutoscan.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (scienceLab.isConnected()) {
public void onClick(View v) {

                    if (data != null) {
                        for (Integer myInt : data) {
                            if (myInt != null && sensorAddr.get(myInt) != null ) {
                                dataAddress.add(String.valueOf(myInt));
                                dataName.add(sensorAddr.get(myInt));
                            }
public void onClick(View v) {
                    String[] dataDisp = dataName.toArray(new String[dataName.size()]);
                    adapter = new ArrayAdapter<>(getContext(), R.layout.sensor_list_item, R.id.tv_sensor_list_item, dataDisp);
                    lvSensor.setAdapter(adapter);
                }
            }
        });
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:focusable="true"
    android:focusableInTouchMode="true"
    app:layout_behavior="@string/appbar_scrolling_view_behavior">
            android:layout_height="wrap_content"
            android:layout_alignParentTop="true"
            android:layout_marginLeft="5dp"
            android:layout_toEndOf="@+id/imageButton_play_pause_sensor"
            android:layout_toLeftOf="@+id/tv_timegap_label"
            android:layout_toRightOf="@+id/imageButton_play_pause_sensor"
<?xml version="1.0" encoding="utf-8"?>
<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_marginEnd="10dp"
        android:layout_marginLeft="10dp"
        android:layout_marginRight="10dp"
                android:layout_width="match_parent"
                android:layout_height="match_parent"
                android:background="@drawable/control_custom_border"
                android:textSize="@dimen/sensor_body_font"
                android:textAlignment="center"
                android:textStyle="bold"
                android:gravity="center"/>
        </android.support.v4.widget.NestedScrollView>

        <TextView
        <ListView
            android:id="@+id/lv_sensor"
            android:layout_width="match_parent"
            android:layout_height="200dp"
            android:layout_marginBottom="10dp"
            android:layout_marginTop="10dp" />
    </LinearLayout>
</ScrollView>
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    · Fix: Prevent crash when logging a trackable on some Xiaomi devices\n
    · Fix: Correctly display user name containing &amp; on main screen\n
    · Fix: Fix crash when dismissing cache popup dialog at the wrong time\n
    \n
    \n
    <b>2017.03.19:</b>\n
public void handleRegularMessage(final Message msg) {
            if (waitDialog != null) {
                if (msg.what == UPDATE_PROGRESS) {
                    final int secondsElapsed = (int) ((System.currentTimeMillis() - detailProgressTime) / 1000);
                    final int secondsRemaining = (detailTotal - detailProgress) * secondsElapsed / detailProgress;

                    waitDialog.setProgress(detailProgress);
                    if (secondsRemaining < 40) {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
private void removeQuests(Collection<Long> questIds, QuestGroup group)

	@UiThread private void closeQuestDetails()
	{
		getFragmentManager().popBackStack(BOTTOM_SHEET, FragmentManager.POP_BACK_STACK_INCLUSIVE);

		mapFragment.removeQuestGeometry();

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ConsoleBuffer clear() {
  }

  ConsoleBuffer printTo(TextView textView) {
    textView.setText(buffer);
    return this;
  }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
protected AbstractLocusApp(@NonNull final String text, @NonNull final String int

    @Override
    public boolean isInstalled() {
        return LocusUtils.getActiveVersion(CgeoApplication.getInstance()) != null;
    }

    /**
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
package eu.davidea.samples.flexibleadapter.models;

import android.support.v7.widget.RecyclerView;

import java.io.Serializable;

import eu.davidea.flexibleadapter.items.AbstractFlexibleItem;

/**
 * This class will benefit of the already implemented methods (getter and setters) in
 * {@link eu.davidea.flexibleadapter.items.AbstractFlexibleItem}.
 *
 * It is used as Base item for all example models.
 */
public abstract class AbstractModelItem<VH extends RecyclerView.ViewHolder>
		extends AbstractFlexibleItem<VH>
		implements Serializable {


/**
 * A sticky header helper, to use only with {@link FlexibleAdapter}.
 *
 * @since 25/03/2016 Created
 */
	private ViewGroup mStickyHolderLayout;
	private FlexibleViewHolder mStickyHeaderViewHolder;
	private OnStickyHeaderChangeListener mStickyHeaderChangeListener;

	/* Header state, used to not call getSectionHeader() all the time */
	private int mHeaderPosition = RecyclerView.NO_POSITION;


private void updateHeader(int headerPosition, boolean updateHeaderContent) {
		if (mHeaderPosition != headerPosition) {
			mHeaderPosition = headerPosition;
			FlexibleViewHolder holder = getHeaderViewHolder(headerPosition);
			if (mStickyHeaderViewHolder != holder && holder.isStickyHeader()) {
				if (FlexibleAdapter.DEBUG) Log.v(TAG, "swapHeader newPosition=" + mHeaderPosition);
				swapHeader(holder);
			}
		} else if (updateHeaderContent && mStickyHeaderViewHolder != null) {
			mAdapter.onBindViewHolder(mStickyHeaderViewHolder, mHeaderPosition);
			ensureHeaderParent();
public void clearHeader() {
		}
	}

	@SuppressWarnings({"unchecked", "ConstantConditions"})
	private int getHeaderPosition(int adapterPosHere) {
		if (adapterPosHere == RecyclerView.NO_POSITION) {
			View firstChild = mRecyclerView.getChildAt(0);
			adapterPosHere = mRecyclerView.getChildAdapterPosition(firstChild);
		}
		IHeader header = mAdapter.getSectionHeader(adapterPosHere);
		return mAdapter.getGlobalPositionOf(header);
	}

	/**
	 * Gets the header view for the associated position. If it doesn't exist
	 * yet, it will be created, measured, and laid out.
	 *
	 * @param position the adapter position to get the header view for
	 * @return Header ViewHolder of the associated header position
	 */
	@SuppressWarnings("unchecked")
	private FlexibleViewHolder getHeaderViewHolder(int position) {
 */
package eu.davidea.flexibleadapter.items;

import android.support.v7.widget.RecyclerView;

/**
 * Generic implementation of {@link IExpandable} interface combined with {@link IHeader} interface
 * with most useful methods to manage expandable sections with sticky headers and sub items of
 * type {@link ISectionable}.<br/>
 * This abstract class extends also {@link AbstractExpandableItem}.
 * <p>Call {@code super()} in the constructor to auto-configure the section status as shown,
 * expanded, not selectable.</p>
 *
 * @author Davide Steduto
 * @since 01/04/2016 Created
 */
public abstract class AbstractExpandableHeaderItem<VH extends RecyclerView.ViewHolder, S extends ISectionable>
		extends AbstractExpandableItem<VH, S>
		implements IHeader<VH> {

 */
package eu.davidea.flexibleadapter.items;

import android.support.v7.widget.RecyclerView;

import java.util.ArrayList;
import java.util.List;

/**
 * Generic implementation of {@link IExpandable} interface with most useful methods to manage
 * expansion and sub items.<br/>
 * This abstract class extends also {@link AbstractFlexibleItem}.
 *
 * @author Davide Steduto
 * @since 17/01/2016 Created
 */
public abstract class AbstractExpandableItem<VH extends RecyclerView.ViewHolder, S extends IFlexible>
		extends AbstractFlexibleItem<VH>
		implements IExpandable<VH, S> {

public int getExpansionLevel() {
	}

	public final boolean hasSubItems() {
		return mSubItems!= null && mSubItems.size() > 0;
	}

	public IFlexible setSubItems(List<S> subItem) {
 * Generic implementation of {@link IFlexible} interface with most useful methods to manage
 * selection and view holder methods.
 *
 * @author Davide Steduto
 * @since 20/01/2016 Created
 */

	/* Item flags recognized by the FlexibleAdapter */
	protected boolean mEnabled = true, mHidden = false,
			mSelectable = true,	mDraggable = false, mSwipeable = false;

	/*---------------*/
	/* BASIC METHODS */
	/*---------------*/

	/**
	 * You <b>must</b> implement this method to compare items Identifiers.
	 * <p>Adapter needs this method to distinguish them and pick up correct items.</p>
	 * See <a href="http://developer.android.com/reference/java/lang/Object.html#writing_equals">Writing a correct
	 * {@code equals} method</a> to implement your own {@code equals} method.
	 * <p>The general contract for the {@code equals} and {@link
	 * #hashCode()} methods is that if {@code equals} returns {@code true} for
	 * any two objects, then {@code hashCode()} must return the same value for
	 * these objects. This means that subclasses of {@code Object} usually
	 * override either both methods or neither of them.
	 *
	 * @param o instance to compare
	 * @return true if items are equals, false otherwise.
 */
package eu.davidea.flexibleadapter.items;

import android.support.v7.widget.RecyclerView;

/**
 * Generic implementation of {@link IHeader} interface.
 * <p>By default this item is hidden, not selectable.</p>
 * This abstract class extends also {@link AbstractFlexibleItem}.
 *
 * @author Davide Steduto
 * @since 17/01/2016 Created
 */
public abstract class AbstractHeaderItem<VH extends RecyclerView.ViewHolder>
		extends AbstractFlexibleItem<VH>
		implements IHeader<VH> {

import android.support.v7.widget.RecyclerView;

/**
 * Abstract class for items that holds a header item.
 *
 * @param <VH>
 * @param <T>
 */
public abstract class AbstractSectionableItem<VH extends RecyclerView.ViewHolder, T extends IHeader>
		extends AbstractFlexibleItem<VH>
		implements ISectionable<VH, T> {

	/**
	 * The header of this item
	 */
	protected T header;

	public AbstractSectionableItem(T header) {
		this.header = header;
	}

	@Override
	public T getHeader() {
		return header;
	}

	@Override
	public void setHeader(T header) {
		this.header = header;
	}

 */
package eu.davidea.flexibleadapter.items;

import android.support.v7.widget.RecyclerView;

import java.util.List;

/**
 * Interface to manage expanding operations on items with
 * {@link eu.davidea.flexibleadapter.FlexibleAdapter}.
 * @see IHolder
 * @see ISectionable
 * @since 17/01/2016 Created
 */
public interface IExpandable<VH extends RecyclerView.ViewHolder, S extends IFlexible>
		extends IFlexible<VH> {

	/*--------------------*/
 */
package eu.davidea.flexibleadapter.items;

import android.support.v7.widget.RecyclerView;

/**
 * Wrapper empty interface to identify if the current item is a header.
 * @see IHolder
 * @see ISectionable
 * @since 15/02/2016 Created
 */
public interface IHeader<VH extends RecyclerView.ViewHolder> extends IFlexible<VH> {

}
/**
 * ViewHolder for a Expandable Items. Holds callbacks which can be used to trigger expansion events.
 * <p>This class extends {@link FlexibleViewHolder}, which means it will benefit of all implemented
 * methods the lower class holds.</p>
 *
 * @author Davide Steduto
 * @since 16/01/2016 Created
public boolean onLongClick(View view) {
		return super.onLongClick(view);
	}

//	@Override
//	public boolean onTouch(View view, MotionEvent event) {
//		//We don't allow Drag of Children if a parent is selected
//		boolean expandable = mAdapter.isExpandable(getFlexibleAdapterPosition());
//		if (expandable && !mAdapter.isAnyChildSelected() || !expandable && !mAdapter.isAnyParentSelected())
//			return super.onTouch(view, event);
//		return false;
//	}

	/**
	 * {@inheritDoc}
	 * <p><b>Note:</b> In the Expandable version, expanded items are forced to collapse.</p>
 * @since 03/01/2016 Created
 * <br/>23/01/2016 ItemTouch with Drag&Drop, Swipe
 * <br/>26/01/2016 Constructor revisited
 * <br/>04/06/2016 Added StickyHeader flag
 */
public abstract class FlexibleViewHolder extends RecyclerView.ViewHolder
		implements View.OnClickListener, View.OnLongClickListener,
		View.OnTouchListener, ItemTouchHelperCallback.ViewHolderCallback {

	private static final String TAG = FlexibleViewHolder.class.getSimpleName();

	protected final FlexibleAdapter mAdapter;
	private int mBackupPosition = RecyclerView.NO_POSITION;

	/* These 2 fields avoid double tactile feedback triggered by Android and allow to Drag an
	   item maintaining LongClick events for ActionMode, all at the same time */
	protected int mActionState = ItemTouchHelper.ACTION_STATE_IDLE;
	private boolean mLongClickSkipped = false;
	private boolean alreadySelected = false;
	private View contentView;

	/*--------------*/
	/* CONSTRUCTORS */
public FlexibleViewHolder(View view, FlexibleAdapter adapter) {
	 * @param stickyHeader true if the View can be a Sticky Header, false otherwise
	 */
	public FlexibleViewHolder(View view, FlexibleAdapter adapter, boolean stickyHeader) {
		super(stickyHeader ? new FrameLayout(view.getContext()) : view);
		this.mAdapter = adapter;
		if (stickyHeader) {
			itemView.setLayoutParams(mAdapter.getRecyclerView().getLayoutManager()
					.generateLayoutParams(view.getLayoutParams()));
			((FrameLayout) itemView).addView(view);//Add View after setLayoutParams
			contentView = view;
			contentView.setOnClickListener(this);
			contentView.setOnLongClickListener(this);
		} else {
			itemView.setOnClickListener(this);
			itemView.setOnLongClickListener(this);
		}
	}

	/*--------------------------------*/
public View getRearRightView() {
		return null;
	}

	/*---------------*/
	/* STICKY HEADER */
	/*---------------*/

	public View getContentView() {
		return contentView != null ? contentView : itemView;
	}

	public boolean isStickyHeader() {
		return contentView != null;
	}

	/**
	 * Overcomes the situation of returning an unknown position (-1) of ViewHolders created out of
	 * the LayoutManager (ex. StickyHeaders).
	 * <p><b>NOTE:</b> Always call this method, instead of {@code getAdapterPosition()}, in case
	 * of StickyHeaders use case.</p>
	 *
	 * @return the Adapter position result of {@link #getAdapterPosition()} OR the backup position
	 * preset and known, if the previous result was {@link RecyclerView#NO_POSITION}.
	 * @see #setBackupPosition(int)
	 */
	public int getFlexibleAdapterPosition() {
		int position = getAdapterPosition();
		if (position == RecyclerView.NO_POSITION) {
			position = mBackupPosition;
		}
		return position;
	}

	/**
	 * Restore the Adapter position if the original Adapter position is unknown.
	 * <p>Called by StickyHeaderHelper to support the clickListeners events.</p>
	 *
	 * @param backupPosition the known position of this ViewHolder
	 */
	public void setBackupPosition(int backupPosition) {
		mBackupPosition = backupPosition;
	}

}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
android {
        applicationId "com.ae.apps.tripmeter"
        minSdkVersion 16
        targetSdkVersion 25
        versionCode 11
        versionName "2.0.18"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }
    /**
     * Return a reference to the ExpenseContactManager implementation
     *
     * @param contentResolver
     * @return
     */
    public static ExpenseContactManager newInstance(ContentResolver contentResolver){
        if(null == instance){
            instance = new ExpenseContactManager(contentResolver);
        }
        return instance;
    }

    public ExpenseContactManager(ContentResolver contentResolver) {
        super(contentResolver);
    }

    @Override
public ExpenseContactManager(ContentResolver contentResolver) {

    /**
     * Returns a list of ContactVos from contactIds
     * @param memberIds comma separated member ids
     * @return
     */
    public List<ContactVo> getContactsFromIds(String memberIds) {
        List<ContactVo> contacts = new ArrayList<>();
        if(null != memberIds && !TextUtils.isEmpty(memberIds)){
            ContactVo contactVo;
            String [] contactIds = memberIds.split(",");
            for(String contactId : contactIds){
                contactVo = getContactInfo(contactId);
                contacts.add(contactVo);
            }
public ExpenseContactManager(ContentResolver contentResolver) {

    /**
     * Finds and returns the default Profile (current user)
     *
     * Owner details are stored in ContactsContract.Profile for ICS and up
     *
     * @return
     */
    public ContactVo getDefaultContact(){
        ContactVo contactVo = new ContactVo();

        boolean userFound = false;
        Cursor cursor = contentResolver.query( ContactsContract.Profile.CONTENT_URI, null, null, null, null);
        if(cursor.moveToFirst()){
            contactVo.setName(cursor.getString(cursor.getColumnIndex( ContactsContract.Profile.DISPLAY_NAME)));
            contactVo.setId(cursor.getString(cursor.getColumnIndex( ContactsContract.Profile._ID)));
            userFound = true;
        }
        cursor.close();

        if(!userFound){
            contactVo.setName("You");
            contactVo.setId("0");
        }
public static ExpenseManager newInstance(final Context context) {
    private ExpenseManager(final Context context) {
        mContext = context;
        mExpensesDatabase = new TripExpensesDatabase(mContext);
        mContactManager = new ExpenseContactManager(mContext.getContentResolver());

        mDefaultProfilePic = BitmapFactory.decodeResource(mContext.getResources(), R.drawable.default_profile_image);
    }
<resources>
    <string name="app_name">Trip O Meter</string>
    <string name="app_version_name">2.0.18 (Balanjar)</string>
    <string name="app_version_code">Balanjar was a medieval city located in the North Caucasus region, between the cities of Derbent and Samandar, which flourished from the seventh to the tenth centuries CE.</string>
    <string name="app_release_date">Mar 2017</string>
    <string name="app_disclaim">The data shown in this app is approximate and should be used for a rough estimate only and may vary with actually observed values.</string>
    <string name="app_desc">This app calculates an estimate of fuel and cost needed for a trip</string>
    <string name="app_developer_info">Designed &amp; Developed at ae labs</string>
buildscript {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.0'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import javax.inject.Inject;

import de.westnordost.osmapi.common.errors.OsmConnectionException;
import de.westnordost.streetcomplete.Injector;

public ChangesetAutoCloserService()
			// wasn't able to connect to the server (i.e. connection timeout). Oh well, then,
			// never mind.
		}
		ChangesetAutoCloserReceiver.completeWakefulIntent(intent);
	}
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        </activity>

        <activity
            android:name=".activities.ShortcutActivity"
            android:label="@string/manual_connection_shortcut"
            android:theme="@style/AppBaseTheme.Dialog">
    <string name="pref_timeout">Таймаут соединения</string>
    <string name="pref_timeout_summary">Количество миллисекунд, в течение которого приложение ожидает ответа от сервера. Если установлен 0, приложеие будет ждать до тех пор пока не будет поймана одна из ошибок (по умолчанию: 0).</string>
    <string name="toast_unsupported_function">Похоже эта функция не поддерживается вашим устройством :(</string>
</resources>
    <string name="pref_timeout">Connection timeout</string>
    <string name="pref_timeout_summary">Number of milliseconds to wait for server answer. If 0 is set, application will wait until connection error is caught (default: 0).</string>
    <string name="toast_unsupported_function">This function seems to be unsupported on your device. Sorry :(</string>
</resources>
        android:title="@string/developer_github_repo"
        android:summary="@string/developer_github_repo_summary">

        <intent
            android:action="android.intent.action.VIEW"
            android:data="@string/developer_github_repo_link" />

    </PreferenceScreen>

    <PreferenceScreen
        android:title="@string/developer_vkontakte"
        android:summary="@string/developer_vkontakte_summary">

        <intent
            android:action="android.intent.action.VIEW"
            android:data="@string/developer_vkontakte_link" />

    </PreferenceScreen>

    <PreferenceScreen
        android:title="@string/developer_site"
        android:summary="@string/developer_site_link">

        <intent
            android:action="android.intent.action.VIEW"
            android:data="@string/developer_site_link" />

    </PreferenceScreen>

    <PreferenceScreen
        android:title="@string/developer_google_play">

        <intent
            android:action="android.intent.action.VIEW"
            android:data="@string/developer_google_play_link" />

    </PreferenceScreen>

            android:title="@string/contirutor_revertron"
            android:summary="@string/contributor_revertron_summary">

            <intent
                android:action="android.intent.action.VIEW"
                android:data="@string/contributor_revertron_link" />

        </PreferenceScreen>

        <PreferenceScreen
            android:title="@string/contributor_Mikhail_Kuropatkin"
            android:summary="@string/contrinutor_Mikhail_Kuropatkin_summary">

            <intent
                android:action="android.intent.action.VIEW"
                android:data="@string/contributor_Mikhail_Kuropatkin_link" />

        </PreferenceScreen>

        <PreferenceScreen
            android:title="@string/contributor_Alexander_Krotov"
            android:summary="@string/contributor_Alexander_Krotov_summary">

            <intent
                android:action="android.intent.action.VIEW"
                android:data="@string/contributor_Alexander_Krotov_link" />

        </PreferenceScreen>
    </PreferenceCategory>
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.preference.CheckBoxPreference;
private void donate_dialog() {
            public void onClick(DialogInterface dialogInterface, int i) {
                switch (i) {
                    case 0: // Yandex.Money
                        Intent yandex = new Intent(Intent.ACTION_VIEW);
                        yandex.setData(Uri.parse(getString(R.string.donate_yandex_data)));
                        startActivity(yandex);
                        break;

                    case 1: // WebMoney
public void onClick(DialogInterface dialogInterface, int i) {
                        break;

                    case 2: // GitHub
                        Intent github = new Intent(Intent.ACTION_VIEW);
                        github.setData(Uri.parse(getString(R.string.developer_github_repo_link)));
                        startActivity(github);
                        break;

                    case 3: // VK
                        Intent vk = new Intent(Intent.ACTION_VIEW);
                        vk.setData(Uri.parse(getString(R.string.developer_vkontakte_link)));
                        startActivity(vk);
                        break;

                    case 4: // Google Play
                        Intent google = new Intent(Intent.ACTION_VIEW);
                        google.setData(Uri.parse(getString(R.string.developer_google_play_link)));
                        startActivity(google);
                        break;
                }
            }
import android.app.PendingIntent;
import android.content.Intent;
import android.content.SharedPreferences;
import android.net.Uri;
import android.os.SystemClock;
import android.preference.PreferenceManager;


import pw.thedrhax.mosmetro.R;
import pw.thedrhax.mosmetro.activities.DebugActivity;
import pw.thedrhax.mosmetro.authenticator.Provider;
import pw.thedrhax.mosmetro.authenticator.Task;
import pw.thedrhax.util.Logger;
private void notify (Provider.RESULT result) {
                            .text(getString(R.string.notification_not_registered_register))
                            .icon(R.drawable.ic_notification_register)
                            .onClick(PendingIntent.getActivity(this, 0,
                                    new Intent(Intent.ACTION_VIEW)
                                            .setData(Uri.parse("http://wi-fi.ru")),
                                    PendingIntent.FLAG_UPDATE_CURRENT
                            ))
                            .id(2).show().id(1);
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.net.Uri;
import android.preference.PreferenceManager;
import android.support.annotation.NonNull;


import pw.thedrhax.mosmetro.BuildConfig;
import pw.thedrhax.mosmetro.R;
import pw.thedrhax.mosmetro.httpclient.CachedRetriever;
import pw.thedrhax.util.Notify;
import pw.thedrhax.util.Version;
public void check() {
        }

        long id, max_version;
        String title, message;
        Uri url;
        try {
            id = Integer.parseInt((String)data.get("id"));
            max_version = Integer.parseInt((String)data.get("max_version"));
            title = (String)data.get("title");
            message = (String)data.get("message");
            url = Uri.parse((String)data.get("url"));
        } catch (Exception ex) {
            return;
        }
public void check() {
        new Notify(context).id(255)
                .icon(R.drawable.ic_notification_message)
                .onClick(PendingIntent.getActivity(context, 255,
                        new Intent(Intent.ACTION_VIEW).setData(url),
                        PendingIntent.FLAG_UPDATE_CURRENT
                ))
                .title(title)
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.net.Uri;
import android.os.AsyncTask;
import android.preference.PreferenceManager;


import pw.thedrhax.mosmetro.BuildConfig;
import pw.thedrhax.mosmetro.R;
import pw.thedrhax.mosmetro.httpclient.CachedRetriever;
import pw.thedrhax.util.Version;

public void download() {
                    .putInt("pref_updater_build", version)
                    .apply();

            context.startActivity(new Intent(Intent.ACTION_VIEW).setData(Uri.parse(url)));
        }
    }
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
package com.thebluealliance.androidclient.listitems;

import com.thebluealliance.androidclient.R;
import com.thebluealliance.androidclient.listeners.EventClickListener;

import android.content.Context;
import android.view.LayoutInflater;
public View getView(Context c, LayoutInflater inflater, View convertView) {
            holder.container.addView(listItem.getView(c, inflater, null), 2);
        }

        holder.detail.setOnClickListener(new EventClickListener(c, key));

        return convertView;
    }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import retrofit.http.Path;
import retrofit.http.Query;

/**
 * Created by Bernat on 03/10/2014.
 */
public interface EventsService {

  //Async
import java.util.List;
import retrofit.RestAdapter;

/**
 * Created by Bernat on 03/10/2014.
 */
public class GetUserEventsClient extends GithubListClient<List<GithubEvent>> {
  private String username;
  private int page = 0;
public boolean onPrepareOptionsMenu(Menu menu) {

      StoreCredentials settings = new StoreCredentials(this);

      if (user != null && !settings.getUserName().equals(user.getLogin()) && user.getType().equals(UserType.User.name())) {
        MenuItem item;
        if (followingUser) {
          item = menu.add(0, R.id.action_menu_unfollow_user, 0, R.string.action_menu_unfollow_user);
public void onClick(final View v) {
      Answers.getInstance().logContentView(new ContentViewEvent().putContentName("UserAvatarViewClick"));
    }

    if (user.getType().equals(UserType.Organization.name())) {
      v.getContext().startActivity(OrganizationActivity.launchIntent(v.getContext(), user.getLogin()));
    } else {
      final Intent intent = ProfileActivity.createLauncherIntent(v.getContext(), user);
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import java.util.List;
import java.util.Locale;

/**
 * A placeholder fragment containing a simple view.
 */
public void success(final Recipe recipe) {
                    etServing.setText(String.valueOf(recipe.getServing()));
                    if (recipe.getSteps() != null) {
                        for (String step : recipe.getSteps()) {
                            EditText et = addDynamicEditTexts(R.id.llStepListCompose, "Add Step");
                            et.setText(step);
                        }
                    }
public void onClick(View v) {
                if (Integer.parseInt(v.getTag().toString()) == 1) {
                    Toast.makeText(getContext(), "ADD", Toast.LENGTH_SHORT).show();
                    v.setTag(2);
                    addDynamicEditTexts(R.id.llStepListCompose, "Step(s)");
                    v.setBackgroundResource(R.drawable.cancel);
                } else {
                    LinearLayout linearParent = (LinearLayout) v.getParent().getParent();
public void onClick(View v) {
            public void onClick(View v) {
                // TODO: Required field value check

                if (validateFields(R.id.llStepListCompose)) {
                    return;
                }

public void onClick(View v) {
                //iterarte over the linear layout and get steps added


                ArrayList<String> steps = getDataFromDynamicEditText(R.id.llStepListCompose);
                ArrayList<String> ingridients = getDataFromDynamicEditText(R.id.llIngridentsCompose);

                recipe.setSteps(steps);
public void onClick(View v) {
    }

    public ArrayList<String> getDataFromDynamicEditText(int llResourceId) {

        ArrayList<String> steps = new ArrayList<>();
        LinearLayout ll = (LinearLayout) view.findViewById(llResourceId);
        for (int i = 0; i < ll.getChildCount(); i++) {
            View llView = ll.getChildAt(i);
            if (llView instanceof LinearLayout) {
                EditText et = (EditText) ((LinearLayout) llView).getChildAt(0);
                if (et != null && !et.getText().toString().isEmpty())
                    steps.add(et.getText().toString());
            }
        }

        return steps;
    }

    public boolean validateFields(int linearLayoutResourceId) {
            android:layout_alignParentStart="true"
            android:layout_alignParentEnd="true"
            android:layout_alignParentRight="true"
            android:layout_alignTop="@+id/btnCancel"
            android:layout_below="@+id/vBorder"
            android:background="@color/colorPrimary"
            android:text="Publish"
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
private void triggerSyncIfNeeded() {
                getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
                startService(serviceIntent);

                Log.d(TAG, String.format("triggerSyncIfNeeded: hasOldOBs: %!d(MISSING); syncCount: %!d(MISSING); photoSyncCount: %!d(MISSING); mUserCanceledSync: %!s(MISSING)",
                        hasOldObs, syncCount, photoSyncCount, mUserCanceledSync));


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public static Drawable getDrawable(Context context, @Nullable Feed feed) {
            drawable = faviconCache.get(feed.getId());

            if(drawable == null) {
                drawable = new TextDrawable.Builder(feed.getName().substring(0, 1), getFeedColor(context, feed))
                        .textColor(ContextCompat.getColor(context, R.color.textdrawable_text))
                        .build();
                faviconCache.put(feed.getId(), drawable);
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public boolean performAction(MenuItem item, ActionMode actionMode) {
            }
        }

		((OmniNotes)getActivity().getApplication()).getAnalyticsHelper().trackActionFromResourceId(getActivity(), item.getItemId());

        checkSortActionPerformed(item);

        return super.onOptionsItemSelected(item);
void onActivityResult(int requestCode, final int resultCode, Intent intent) {
    private void checkSortActionPerformed(MenuItem item) {
        if (item.getGroupId() == Constants.MENU_SORT_GROUP_ID) {
            final String[] arrayDb = getResources().getStringArray(R.array.sortable_columns);
            prefs.edit().putString(Constants.PREF_SORTING_COLUMN, arrayDb[item.getOrder()]).commit();
            initNotesList(mainActivity.getIntent());
            // Resets list scrolling position
            listViewPositionOffset = 16;
private void checkSortActionPerformed(MenuItem item) {
			toggleSearchLabel(false);
            // Updates app widgets
            BaseActivity.notifyAppWidgets(mainActivity);
        }
    }


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public Double getCapacitance() {
                return C;
            else if (V < GOOD_VOLTS[0] && V > 0.01 && CT < 40000) {
                if (GOOD_VOLTS[0] / V > 1.1 && iterations < 10) {
                    CT = CT * (int) GOOD_VOLTS[0] / (int) V;
                    iterations += 1;
                    Log.v(TAG, "Increased CT " + CT);
                } else if (iterations == 10)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
private ApiEvent(Builder builder) {
        if (null != builder.mRequestId) {
            setProperty(EventProperty.REQUEST_ID, builder.mRequestId);
        }
        setProperty(EventProperty.AUTHORITY_NAME, HttpEvent.sanitizeUrlForTelemetry(builder.mAuthority));
        setAuthorityType(builder.mAuthorityType);
        setProperty(EventProperty.UI_BEHAVIOR, builder.mUiBehavior);
        setProperty(EventProperty.API_ID, builder.mApiId);
private HttpEvent(Builder builder) {
        setProperty(EventProperty.HTTP_API_VERSION, builder.mApiVersion);
        setProperty(EventProperty.OAUTH_ERROR_CODE, builder.mOAuthErrorCode);
        setProperty(EventProperty.REQUEST_ID_HEADER, builder.mRequestIdHeader);
        setHttpPath(builder.mHttpPath);
        setProperty(EventProperty.HTTP_RESPONSE_CODE, String.valueOf(builder.mResponseCode));
    }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void onDestroy() {
        mHeadlinesPresenter.detachView();
        if (null != mPicassoBackgroundManager) {
            Timber.d("onDestroy: " + mPicassoBackgroundManager.toString());
            //mPicassoBackgroundManager.cancel();
        }
    }

public void onStart() {
        CoreApplication.getAnalyticsReporter().reportScreenLoadedEvent(ANALYTICS_SCREEN_NAME);
    }

    private void setupEventListeners(final DetailsViewInteractionListener listener) {
        setOnItemViewSelectedListener(listener);
        setOnItemViewClickedListener(listener);
private void startBackgroundTimer() {
        mBackgroundTimer.schedule(new UpdateBackgroundTask(), BACKGROUND_UPDATE_DELAY);
    }


    private class UpdateBackgroundTask extends TimerTask {
        @Override
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
private void startPlaying(Uri uri) {
			mPlayer.start();
			mPlayer.setOnCompletionListener(mp -> {
				mPlayer = null;
				((ImageView) isPlayingView.findViewById(R.id.gridview_item_picture)).setImageBitmap
						(recordingBitmap);
				recordingBitmap = null;
				isPlayingView = null;
			});
		} catch (IOException e) {
			Log.e(Constants.TAG, "prepare() failed", e);
private void startPlaying(Uri uri) {

	private void stopPlaying() {
		if (mPlayer != null) {
			((ImageView) isPlayingView.findViewById(R.id.gridview_item_picture)).setImageBitmap(recordingBitmap);
			isPlayingView = null;
			recordingBitmap = null;
			mPlayer.release();
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void onSaveInstanceState(Bundle outState) {
        outState.putParcelable(PreviewMediaFragment.EXTRA_ACCOUNT, mAccount);

        if (getFile().isVideo()) {
            mSavedPlaybackPosition = mVideoPreview.getCurrentPosition();
            mAutoplay = mVideoPreview.isPlaying();
            outState.putInt(PreviewMediaFragment.EXTRA_PLAY_POSITION, mSavedPlaybackPosition);
            outState.putBoolean(PreviewMediaFragment.EXTRA_PLAYING, mAutoplay);
        }
        else {
            outState.putInt(
                    PreviewMediaFragment.EXTRA_PLAY_POSITION,
                    mMediaServiceBinder.getCurrentPosition());
            outState.putBoolean(
                    PreviewMediaFragment.EXTRA_PLAYING, mMediaServiceBinder.isPlaying());
        }
    }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
private FileList getDataFromApi(String pageToken) throws IOException {
				.setSpaces("photos")
				.setOrderBy("createdTime")
				.setFields(PHOTO_FIELDS)
				.setPageSize(1000);
		if (pageToken != null) {
			apiCall.setPageToken(pageToken);
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        implements OnCardClickListener<T>, LoaderManager.LoaderCallbacks<List<T>> {

    protected boolean supportsStatistics = false;
    @State(SelectorBundler.class)
    MultiSelector mSelector = new MultiSelector();
    @PluralsRes
        public boolean onPrepareActionMode(ActionMode mode, Menu menu) {
            MenuItem edit = menu.findItem(R.id.action_edit);
            edit.setVisible(mSelector.getSelectedIds().size() == 1);
            MenuItem stats = menu.findItem(R.id.action_statistics);
            stats.setVisible(supportsStatistics);
            return false;
        }

import java.util.List;
import java.util.Locale;

import de.dreier.mytargets.ApplicationInstance;
import de.dreier.mytargets.R;
import de.dreier.mytargets.activities.ScoreboardActivity;
import de.dreier.mytargets.activities.SimpleFragmentActivityBase;
public void onActivityCreated(@Nullable Bundle savedInstanceState) {
    public void onLoadFinished(Loader<List<Round>> loader, List<Round> data) {
        // Hide fab for standard rounds
        StandardRound standardRound = standardRoundDataSource.get(training.standardRoundId);
        binding.fab.setVisibility(
                standardRound.club == StandardRoundFactory.CUSTOM_PRACTICE ? View.VISIBLE : View.GONE);

        // Set round info
        int weatherDrawable = R.drawable.ic_house_24dp;
protected void onStatistics(List<Long> roundIds) {
        @Override
        public void bindItem() {
            binding.title.setText(String.format(Locale.ENGLISH, "%!s(MISSING) %!d(MISSING)",
                    ApplicationInstance.getContext().getString(R.string.round),
                    mItem.info.index + 1));
            binding.subtitle.setText(HtmlUtils.fromHtml(HtmlUtils.getRoundInfo(mItem, equals)));
            if (binding.subtitle.getText().toString().isEmpty()) {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      <sourceFolder url="file://$MODULE_DIR$/src/main/jni" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/src/main/rs" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/src/main/shaders" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/src/test/res" type="java-test-resource" />
      <sourceFolder url="file://$MODULE_DIR$/src/test/resources" type="java-test-resource" />
      <sourceFolder url="file://$MODULE_DIR$/src/test/assets" type="java-test-resource" />
      <sourceFolder url="file://$MODULE_DIR$/src/test/aidl" isTestSource="true" />
      <sourceFolder url="file://$MODULE_DIR$/src/test/java" isTestSource="true" />
      <sourceFolder url="file://$MODULE_DIR$/src/test/jni" isTestSource="true" />
      <sourceFolder url="file://$MODULE_DIR$/src/test/rs" isTestSource="true" />
      <sourceFolder url="file://$MODULE_DIR$/src/test/shaders" isTestSource="true" />
      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/res" type="java-test-resource" />
      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/resources" type="java-test-resource" />
      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/assets" type="java-test-resource" />
      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/jni" isTestSource="true" />
      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/rs" isTestSource="true" />
      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/shaders" isTestSource="true" />
      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/assets" />
      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/blame" />
      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/bundles" />
Subproject commit b1e7a733ea16c5a26a1b7fcd224f17c207884144
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import android.provider.ContactsContract.Contacts;
import android.provider.MediaStore;
import android.support.annotation.NonNull;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.FragmentManager;
import android.support.v4.content.ContextCompat;
import android.support.v4.content.LocalBroadcastManager;
public int getValue() {
    private Handler mHandler;
    private Runnable mMediaPlayerUpdater;
    private AudioContentViewControl mAudioControl;

    /** Audio recording dialog. */
    private AudioDialog mAudioDialog;
void selectAudioAttachment() {
    }

    private AudioFragment getAudioFragment() {
        AudioFragment fragment = findAudioFragment();
        if (fragment == null) {
            FragmentActivity parent = getActivity();
            if (parent != null) {
                fragment = new AudioFragment();
                FragmentManager fm = getFragmentManager();
                fm.beginTransaction()
                    .add(fragment, "audio")
                    .commit();
            }
        }

        return fragment;
    }

    private AudioFragment findAudioFragment() {
        FragmentManager fm = getFragmentManager();
        return fm != null ? (AudioFragment) fm
            .findFragmentByTag("audio") : null;
    }

    protected abstract void deleteConversation();
public void onPause() {
        MessageCenterService.release(getActivity());

        // release audio player
        AudioFragment audio = findAudioFragment();
        if (audio != null) {
            stopMediaPlayerUpdater();

private boolean prepareAudio(File audioFile, final AudioContentViewControl view,
                public void onCompletion(MediaPlayer mp) {
                    stopMediaPlayerUpdater();
                    view.end();
                    AudioFragment audio = findAudioFragment();
                    if (audio != null) {
                        // this is mainly to get the wake lock released
                        audio.pausePlaying();
public void onCompletion(MediaPlayer mp) {
    @Override
    public void playAudio(AudioContentViewControl view, long messageId) {
        view.play();
        findAudioFragment().startPlaying();
        setAudioStatus(AudioContentView.STATUS_PLAYING);
        startMediaPlayerUpdater(view);
    }

    private void updatePosition(AudioContentViewControl view) {
        // we don't use getElapsedTime() here because it might get moved by seeking
        view.updatePosition(findAudioFragment().getPlayer().getCurrentPosition());
    }

    @Override
    public void pauseAudio(AudioContentViewControl view) {
        view.pause();
        findAudioFragment().pausePlaying();
        stopMediaPlayerUpdater();
        setAudioStatus(AudioContentView.STATUS_PAUSED);
    }
private void resetAudio(AudioContentViewControl view) {
            stopMediaPlayerUpdater();
            view.end();
        }
        AudioFragment audio = findAudioFragment();
        if (audio != null) {
            audio.resetPlayer();
            audio.setMessageId(-1);
public void stopAllSounds() {

    @Override
    public void onBind(long messageId, final AudioContentViewControl view) {
        final AudioFragment audio = findAudioFragment();
        if (audio != null && audio.getMessageId() == messageId) {
            mAudioControl = view;
            audio.getPlayer().setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
public void onCompletion(MediaPlayer mp) {

    @Override
    public void onUnbind(long messageId, AudioContentViewControl view) {
        AudioFragment audio = findAudioFragment();
        if (audio != null && audio.getMessageId() == messageId) {
            mAudioControl = null;
            MediaPlayer player = audio.getPlayer();
public void onCompletion(MediaPlayer mp) {

    @Override
    public boolean isPlaying() {
        AudioFragment audio = findAudioFragment();
        return audio != null && audio.isPlaying();
    }

    @Override
    public void seekTo(int position) {
        AudioFragment audio = findAudioFragment();
        if (audio != null)
            audio.seekPlayerTo(position);
    }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

package org.kontalk.service.msgcenter.group;

import org.jivesoftware.smack.XMPPConnection;
import org.jivesoftware.smack.packet.Message;
import org.jivesoftware.smack.packet.Stanza;
else if (command instanceof AddRemoveMembersCommand) {
            KontalkAddRemoveMembersCommand addRemove = (KontalkAddRemoveMembersCommand) command;
            String[] added = addRemove.getAddedMembers();
            String[] members = addRemove.getMembers();
            String[] filteredMembers = members;
            if (added != null) {
                // remove added users from members list
                filteredMembers = new String[members.length - added.length];
                int fi = 0;
                for (String member : members) {
                    if (!SystemUtils.contains(added, member)) {
                        filteredMembers[fi++] = member;
                    }
                }
            }
            group.addRemoveMembers(addRemove.getSubject(), filteredMembers,
                addRemove.getAddedMembers(), addRemove.getRemovedMembers(), packet);
        }
        else if (command instanceof PartCommand) {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
 * Copyright 2016 requery.io
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.requery.android.example.app.model;


import android.databinding.Bindable;
import android.databinding.Observable;
import android.os.Parcelable;
import io.requery.CascadeAction;
import io.requery.Entity;
import io.requery.Generated;
import io.requery.JunctionTable;
import io.requery.Key;
import io.requery.ManyToMany;
import io.requery.Persistable;

import java.util.List;

@Entity
public interface Group extends Observable, Parcelable, Persistable {

    @Key @Generated
    int getId();

    @Bindable
    String getName();

    @JunctionTable
    @ManyToMany(mappedBy = "groups", cascade = {CascadeAction.DELETE, CascadeAction.SAVE})
    List<Person> getMembers();
}
import io.requery.Generated;
import io.requery.Index;
import io.requery.Key;
import io.requery.ManyToMany;
import io.requery.OneToMany;
import io.requery.OneToOne;
import io.requery.Persistable;

    @OneToMany(mappedBy = "owner", cascade = {CascadeAction.DELETE, CascadeAction.SAVE})
    List<Phone> getPhoneNumberList();

    @ManyToMany(mappedBy = "members", cascade = {CascadeAction.DELETE, CascadeAction.SAVE})
    List<Group> getGroups();
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import java.io.IOException;
import java.io.InputStream;
import java.util.HashMap;
import java.util.Map;

import static junit.framework.Assert.assertNotNull;
Bitmap bitmapForId(String id) {
  }

  void recycleBitmaps() {
    for (String key : bitmaps.keySet()) {
      Bitmap bitmap = bitmaps.remove(key);
      bitmap.recycle();
    }
  }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void takePictureInternal() {
            @Override
            public void onPictureTaken(byte[] data, Camera camera) {
                mCallback.onPictureTaken(data);
                camera.startPreview();
            }
        });
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        private static final String SCHEMA_KEYS =
            "CREATE TABLE " + TABLE_KEYS + " " + CREATE_TABLE_KEYS;

        private static final String[] SCHEMA_UPGRADE_V7 = {
            SCHEMA_KEYS,
            "INSERT INTO " + TABLE_KEYS + " SELECT jid, public_key, fingerprint FROM " + TABLE_USERS,
        };

        private static final String[] SCHEMA_UPGRADE_V8 = {
            // online table
            "CREATE TABLE users_backup " + CREATE_TABLE_USERS,
            "INSERT INTO users_backup SELECT _id, jid, number, display_name, lookup_key, contact_id, registered, status, last_seen, public_key, fingerprint, blocked FROM " + TABLE_USERS,
            "DROP TABLE " + TABLE_USERS,
            "ALTER TABLE users_backup RENAME TO " + TABLE_USERS,
            // offline table
            "CREATE TABLE users_backup " + CREATE_TABLE_USERS,
            "INSERT INTO users_backup SELECT _id, jid, number, display_name, lookup_key, contact_id, registered, status, last_seen, public_key, fingerprint, blocked FROM " + TABLE_USERS_OFFLINE,
            "DROP TABLE " + TABLE_USERS_OFFLINE,
            "ALTER TABLE users_backup RENAME TO " + TABLE_USERS_OFFLINE,
        };

        private static final String[] SCHEMA_UPGRADE_V9 = {
            // online table
            "CREATE TABLE users_backup " + CREATE_TABLE_USERS,
            "ALTER TABLE keys_backup RENAME TO " + TABLE_KEYS,
        };

        // any upgrade - just replace the table
        private static final String[] SCHEMA_UPGRADE = {
            "DROP TABLE IF EXISTS " + TABLE_USERS,
            SCHEMA_USERS,
            "DROP TABLE IF EXISTS " + TABLE_USERS_OFFLINE,
            SCHEMA_USERS_OFFLINE,
        };

        private Context mContext;
public void onCreate(SQLiteDatabase db) {
        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            switch (oldVersion) {
                case 7:
                    // create keys table and trust anyone
                    for (String sql : SCHEMA_UPGRADE_V7)
                        db.execSQL(sql);
                    // go on with next version
                case 8:
                    for (String sql : SCHEMA_UPGRADE_V8)
                        db.execSQL(sql);
                    // go on with next version
                case 9:
                    // new keys management
                    for (String sql : SCHEMA_UPGRADE_V9)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
private float pxFromDp(float dp) {
    }

    void restartPreview(int isFront) {
        if (inPreview) {
            camera.stopPreview();
        }
        camera.release();
        camera = Camera.open(isFront);
        initPreview(preview.getHeight());
        startPreview();
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void initialisation(Context unContext, LayoutInflater unLayoutInflater, i
        idArticle = articleID;
        monContext = unContext;
        monLayoutInflater = unLayoutInflater;
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        View maView;
        maView = inflater.inflate(R.layout.article_fragment, null, false);

        // Liste des commentaires
        ListView monListView = (ListView) maView.findViewById(R.id.contenuArticle);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public FileDownloadTask saveFromFirebase(StorageReference storageReference,
        }
    }

    public void saveFromFirebase(StorageReference storageReference,
                                 final String fileLocation,
                                 final Runnable onSuccess,
                                 final Runnable onFailure,
                                 Activity activity) {
        // permission check
        boolean hasPermission = ContextCompat.checkSelfPermission(
                activity,
public void removeLocalPreset(String presetName) {
    public void removeLocalPreset(String presetName, Runnable onSuccess, Runnable onFailure) {
        if (fileHelper.deleteRecursive(new File(PROJECT_LOCATION_PRESETS + "/" + presetName))) {
            Log.d(TAG, "Successfully removed preset folder");
            onSuccess.run();
        } else {
            Log.d(TAG, "Failed to remove preset folder");
            onFailure.run();
        }
    }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
private void ensureIdleAlarm() {
    }

    void cancelIdleAlarm() {
        ensureIdleAlarm();
        mAlarmManager.cancel(mIdleIntent);
    }

    private void setIdleAlarm() {
        long delay = Preferences.getIdleTimeMillis(this, 0);
        if (delay > 0) {
            ensureIdleAlarm();
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 * @see FlexibleAdapter
 * @see AnimatorAdapter
 * @since 03/05/2015 Created
 * <br/>27/01/2016 Improved Selection, SelectAll, FastScroller
 * <br/>29/05/2016 Use of TreeSet instead of ArrayList
 * <br/>04/04/2017 Use of FastScrollerDelegate
 */
@SuppressWarnings({"unused", "unchecked", "ConstantConditions", "WeakerAccess"})
public abstract class SelectableAdapter extends RecyclerView.Adapter
	public static boolean DEBUG = false;

	/**
	 * - MODE_IDLE: Adapter will not keep track of selections<br/>
	 * - MODE_SINGLE: Select only one per time<br/>
	 * - MODE_MULTI: Multi selection will be activated
	 */
	public static final int MODE_IDLE = 0, MODE_SINGLE = 1, MODE_MULTI = 2;
	public @interface Mode {
	}

	private Set<Integer> mSelectedPositions;
	private Set<FlexibleViewHolder> mBoundViewHolders;
	private int mMode;
	private IFlexibleLayoutManager mFlexibleLayoutManager;
	protected RecyclerView mRecyclerView;
public RecyclerView getRecyclerView() {
	 * Current instance of the wrapper class for LayoutManager suitable for FlexibleAdapter.
	 * LayoutManager must be already initialized in the RecyclerView.
	 *
	 * return wrapper class for any non-conventional LayoutManagers or {@code null} if not initialized.
	 * @since 5.0.0-rc2
	 */
	public IFlexibleLayoutManager getFlexibleLayoutManager() {
public void selectAll(Integer... viewTypes) {

	/**
	 * Clears the selection status for all items one by one and it doesn't stop animations in the items.
	 * <br/><br/>
	 * <b>Note 1:</b> Items are invalidated and rebound!<br/>
	 * <b>Note 2:</b> This method use java.util.Iterator to avoid java.util.ConcurrentModificationException.
	 *
	 * @since 1.0.0
	 */
	public void clearSelection() {
		if (DEBUG) Log.d(TAG, "clearSelection " + mSelectedPositions);
		Iterator<Integer> iterator = mSelectedPositions.iterator();
		int positionStart = 0, itemCount = 0;
		// The notification is done only on items that are currently selected.
		while (iterator.hasNext()) {
			int position = iterator.next();
			iterator.remove();
			// Optimization for ItemRangeChanged
			if (positionStart + itemCount == position) {
				itemCount++;
			} else {
				// Notify previous items in range
				notifySelectionChanged(positionStart, itemCount);
				positionStart = position;
				itemCount = 1;
			}
		}
		// Notify remaining items in range
		notifySelectionChanged(positionStart, itemCount);
	}

	private void notifySelectionChanged(int positionStart, int itemCount) {
public FastScroller getFastScroller() {
	 * <b>NOTE:</b> If the device has at least Lollipop, the Accent color is fetched, otherwise
	 * for previous version, the default value is used.
	 *
	 * @param fastScroller        instance of {@link FastScroller}
	 * @since 5.0.0-b6
	 */
	public void setFastScroller(@NonNull FastScroller fastScroller) {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void onNothingSelected(AdapterView<?> parent) {
        }
        else {
            final TelephonyManager tm = (TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE);
            final String regionCode = tm.getSimCountryIso().toUpperCase(Locale.US);
            CountryCode cc = new CountryCode();
            cc.regionCode = regionCode;
            cc.countryCode = util.getCountryCodeForRegion(regionCode);
            mCountryCode.setSelection(ccList.getPositionForId(cc));
        }

        // listener for autoselecting country code from typed phone number
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public String loadInBackground() {
            public void onLoadFinished(Loader loader, String data) {
                try {
                    prefs.edit().putString(PreferenceKeys.GOOGLE_APP_HOOK_CONFIGS, MiscUtils.checkValidJSONArray(data).toString()).commit();
                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }
public boolean onOptionsItemSelected(MenuItem item) {
        return super.onOptionsItemSelected(item);
    }

}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import cgeo.geocaching.maps.CGeoMap.MapMode;
import cgeo.geocaching.maps.interfaces.OnMapDragListener;
import cgeo.geocaching.settings.Settings;

import org.mapsforge.core.model.LatLong;
import org.mapsforge.core.model.Point;
import org.mapsforge.core.util.MercatorProjection;
import org.mapsforge.map.android.view.MapView;

import android.annotation.SuppressLint;
import android.content.Context;
import android.view.GestureDetector.SimpleOnGestureListener;
import android.view.MotionEvent;

public class MfMapView extends MapView {

    private final GestureDetector gestureDetector;
public double getLatitudeSpan() {

        if (getHeight() > 0) {

            final LatLong low = MercatorProjection.fromPixels(center.x, center.y - getHeight() / 2, mapSize);
            final LatLong high = MercatorProjection.fromPixels(center.x, center.y + getHeight() / 2, mapSize);

            span = Math.abs(high.latitude - low.latitude);
        }

        return span;
public double getLongitudeSpan() {
        final Point center = MercatorProjection.getPixelAbsolute(getModel().mapViewPosition.getCenter(), mapSize);

        if (getWidth() > 0) {
            final LatLong low = MercatorProjection.fromPixels(center.x - getWidth() / 2, center.y, mapSize);
            final LatLong high = MercatorProjection.fromPixels(center.x + getWidth() / 2, center.y, mapSize);

            span = Math.abs(high.longitude - low.longitude);
        }

        return span;
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public synchronized void onRefresh(boolean isRefresh) {
    }

    protected void stopRefresh(final MenuItem refreshItem) {
        Handler handler = new Handler(Looper.getMainLooper());
        final Runnable r = new Runnable() {
            @TargetApi(Build.VERSION_CODES.HONEYCOMB)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void onCancel(Exception exception){
		if (exception != null) {
			Log.e(TAG, exception.getMessage());
		}
		jobFinished(null, false);
	}

	public void onStartFetch(){
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
package com.booboot.vndbandroid.activity;

import android.app.Fragment;
import android.content.Intent;
import android.os.Bundle;
import android.support.v4.widget.SwipeRefreshLayout;
import android.util.Log;
public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle sa
        materialListView.addOnItemTouchListener(new RecyclerItemClickListener.OnItemClickListener() {
            @Override
            public void onItemClick(Card card, int position) {
                Intent intent = new Intent(getActivity(), VNDetailsActivity.class);
                intent.putExtra(VN_ARG, (int) card.getTag());
                startActivity(intent);
                getActivity().overridePendingTransition(R.anim.slide_in, R.anim.slide_out);
            }

            @Override
public void init() {
        materialListView.addOnItemTouchListener(new RecyclerItemClickListener.OnItemClickListener() {
            @Override
            public void onItemClick(Card card, int position) {
                Intent intent = new Intent(activity, VNDetailsActivity.class);
                intent.putExtra(VNTypeFragment.VN_ARG, (int) card.getTag());
                activity.startActivity(intent);
                activity.overridePendingTransition(R.anim.slide_in, R.anim.slide_out);
            }

            @Override
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.impl.client.DefaultRedirectHandler;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.params.CoreProtocolPNames;
import org.apache.http.protocol.HTTP;
import org.apache.http.protocol.HttpContext;
public class INaturalistService extends IntentService implements ConnectionCallbacks, OnConnectionFailedListener {
    // How many observations should we initially download for the user
    private static final int INITIAL_SYNC_OBSERVATION_COUNT = 100;
    
    private boolean mGetLocationForProjects = false; // if true -> we assume it's for near by guides
    
    
    public static final String REGISTER_USER_ERROR = "error";
    public static final String REGISTER_USER_STATUS = "status";
    public static final String SYNC_CANCELED = "sync_canceled";
    public static final String FIRST_SYNC = "first_sync";

	public static final int NEAR_BY_OBSERVATIONS_PER_PAGE = 25;
public INaturalistService() {
    @Override
    protected void onHandleIntent(Intent intent) {
        boolean cancelSyncRequested = false;
        boolean dontStopSync = false;
        mPreferences = getSharedPreferences("iNaturalistPreferences", MODE_PRIVATE);
        mLogin = mPreferences.getString("username", null);
protected void onHandleIntent(Intent intent) {
        if (action == null) return;
        
        mPassive = action.equals(ACTION_PASSIVE_SYNC);
        
        
        Log.d(TAG, "Service: " + action);

        try {
protected void onHandleIntent(Intent intent) {
                mApp.setIsSyncing(mIsSyncing);

                saveJoinedProjects();
                getUserObservations(INITIAL_SYNC_OBSERVATION_COUNT);
                syncObservationFields();
                postProjectObservations();

protected void onHandleIntent(Intent intent) {
                mIsSyncing = true;
                mApp.setIsSyncing(mIsSyncing);

                getUserObservations(0);

                 // Update last sync time
                long lastSync = System.currentTimeMillis();
                mPreferences.edit().putLong("last_sync_time", lastSync).commit();
                mPreferences.edit().putLong("last_user_details_refresh_time", 0); // Force to refresh user details

            } else {
                if (!mIsSyncing) {
protected void onHandleIntent(Intent intent) {
            mApp.setCancelSync(false);
            mApp.setObservationIdBeingSynced(INaturalistApp.NO_OBSERVATION);

        } catch (AuthenticationException e) {
            if (!mPassive) {
                requestCredentials();
protected void onHandleIntent(Intent intent) {
                // Notify the rest of the app of the completion of the sync
                Intent reply = new Intent(ACTION_SYNC_COMPLETE);
                reply.putExtra(SYNC_CANCELED, cancelSyncRequested);
                reply.putExtra(FIRST_SYNC, action.equals(ACTION_FIRST_SYNC));
                sendBroadcast(reply);
            }
        }
    }


    private void syncObservations() throws AuthenticationException, CancelSyncException {
        deleteObservations(); // Delete locally-removed observations
        getUserObservations(0); // First, download remote observations (new/updated)
        postObservations(); // Next, update local-to-remote observations
        postPhotos();
        deleteObservationPhotos(); // Delete locally-removed observation photos
private BetterJSONObject getTaxon(int id) throws AuthenticationException {
        return new BetterJSONObject(res);
    }
 
    private void postProjectObservations() throws AuthenticationException, CancelSyncException {
        // First, delete any project-observations that were deleted by the user
        Cursor c = getContentResolver().query(ProjectObservation.CONTENT_URI, 
                ProjectObservation.PROJECTION, 
private void postProjectObservations() throws AuthenticationException, CancelSyn

            try {
                // Remove obs from project
                removeObservationFromProject(projectObservation.observation_id, projectObservation.project_id);
            } catch (Exception exc) {
                // In case we're trying to delete a project-observation that wasn't synced yet
            }

            c.moveToNext();
private void postProjectObservations() throws AuthenticationException, CancelSyn
            ProjectObservation projectObservation = new ProjectObservation(c);
            BetterJSONObject result = addObservationToProject(projectObservation.observation_id, projectObservation.project_id);

            mApp.setObservationIdBeingSynced(projectObservation.observation_id);

            if (mResponseErrors != null) {
public void run() {

        // Finally, retrieve all project observations
        storeProjectObservations();
    }

    private void storeProjectObservations() {
private void storeProjectObservations() {
        }
    }
    
    private void saveJoinedProjects() throws AuthenticationException, CancelSyncException {
        mApp.notify(SYNC_PHOTOS_NOTIFICATION,
                getString(R.string.projects),
                getString(R.string.syncing_projects),
private void saveJoinedProjects() throws AuthenticationException, CancelSyncExce
        checkForCancelSync();

        if (projects == null) {
            return;
        }

        JSONArray arr = projects.getJSONArray();
private void saveJoinedProjects() throws AuthenticationException, CancelSyncExce
            int count = getContentResolver().delete(Project.CONTENT_URI, "id not in (" + StringUtils.join(projectIds, ',') + ")", null);
        } catch (Exception exc) {
            exc.printStackTrace();
            return;
        }

        // Add any newly-joined projects
private void saveJoinedProjects() throws AuthenticationException, CancelSyncExce
            }
            c.close();
        }
    }

    private void deleteObservationPhotos() throws AuthenticationException, CancelSyncException {
        // Remotely delete any locally-removed observation photos
        Cursor c = getContentResolver().query(ObservationPhoto.CONTENT_URI,
                ObservationPhoto.PROJECTION,
private void deleteObservationPhotos() throws AuthenticationException, CancelSyn
        c.moveToFirst();
        while (c.isAfterLast() == false) {
            ObservationPhoto op = new ObservationPhoto(c);
            delete(HOST + "/observation_photos/" + op.id + ".json", null);
            obsIds.add(op.id);
            c.moveToNext();
        }
private void deleteObservationPhotos() throws AuthenticationException, CancelSyn
        getContentResolver().delete(ObservationPhoto.CONTENT_URI, "is_deleted = 1", null);

        checkForCancelSync();
    }
    
    private void deleteObservations() throws AuthenticationException, CancelSyncException {
        // Remotely delete any locally-removed observations
        Cursor c = getContentResolver().query(Observation.CONTENT_URI, 
                Observation.PROJECTION, 
private void deleteObservations() throws AuthenticationException, CancelSyncExce
        c.moveToFirst();
        while (c.isAfterLast() == false) {
            Observation observation = new Observation(c);
            delete(HOST + "/observations/" + observation.id + ".json", null);
            obsIds.add(observation.id);
            c.moveToNext();
        }
private void deleteObservations() throws AuthenticationException, CancelSyncExce
        int count3 = getContentResolver().delete(ProjectFieldValue.CONTENT_URI, "observation_id in (" + StringUtils.join(obsIds, ",") + ")", null);

        checkForCancelSync();
    }

    private void checkForCancelSync() throws CancelSyncException {
private void addComment(int observationId, String body) throws AuthenticationExc
        post(HOST + "/comments.json", params);
    }

    private void postObservations() throws AuthenticationException, CancelSyncException {
        Observation observation;
        // query observations where _updated_at > updated_at
        Cursor c = getContentResolver().query(Observation.CONTENT_URI, 
private void postObservations() throws AuthenticationException, CancelSyncExcept
                    getString(R.string.syncing));
            observation = new Observation(c);
            mApp.setObservationIdBeingSynced(observation._id);
            handleObservationResponse(
                    observation,
                    put(API_HOST + "/observations/" + observation.id, observationToJsonObject(observation, false))
            );
            c.moveToNext();
        }
        c.close();

private void postObservations() throws AuthenticationException, CancelSyncExcept
            observation = new Observation(c);
            mApp.setObservationIdBeingSynced(observation._id);

            handleObservationResponse(
                    observation,
                    post(API_HOST + "/observations", observationToJsonObject(observation, true))
            );
            c.moveToNext();
        }
        c.close();
        
private void postObservations() throws AuthenticationException, CancelSyncExcept
        			getString(R.string.not_all_observations_were_synced),
        			getString(R.string.sync_failed));
        }
    }

    
private Observation getObservation(int id) throws AuthenticationException {
        return new Observation(new BetterJSONObject(json));
    }
    
    private void postPhotos() throws AuthenticationException, CancelSyncException {
        ObservationPhoto op;
        int createdCount = 0;
        ContentValues cv;
private void postPhotos() throws AuthenticationException, CancelSyncException {
            JSONArray response = put("http://" + inatHost + "/observation_photos/" + op.id + ".json", params);
            try {
                if (response == null || response.length() != 1) {
                    break;
                }
                JSONObject json = response.getJSONObject(0);
                BetterJSONObject j = new BetterJSONObject(json);
private void postPhotos() throws AuthenticationException, CancelSyncException {
                "_synced_at IS NULL", null, ObservationPhoto.DEFAULT_SORT_ORDER);
        if (c.getCount() == 0) {
            c.close();
            return;
        }

        checkForCancelSync();
private void postPhotos() throws AuthenticationException, CancelSyncException {
            JSONArray response = post("http://" + inatHost + "/observation_photos.json", params);
            try {
                if (response == null || response.length() != 1) {
                    break;
                }
                JSONObject json = response.getJSONObject(0);
                BetterJSONObject j = new BetterJSONObject(json);
private void postPhotos() throws AuthenticationException, CancelSyncException {

        if (currentCount == 0) {
        	// Sync completed successfully
        	mApp.notify(SYNC_PHOTOS_NOTIFICATION, 
        			getString(R.string.photo_sync_complete), 
        			String.format(getString(R.string.posted_new_x_photos), createdCount),
        			getString(R.string.sync_complete));
        } else {
        	// Sync failed
        	mApp.notify(SYNC_PHOTOS_NOTIFICATION, 
        			getString(R.string.photo_sync_failed), 
        			getString(R.string.not_all_photos_were_synced),
        			getString(R.string.sync_failed));
        }
    }

private BetterJSONObject removeObservationFromProject(int observationId, int pro

        String url = String.format("%!s(MISSING)/projects/%!d(MISSING)/remove.json?observation_id=%!d(MISSING)", HOST, projectId, observationId);
        JSONArray json = delete(url, null);
       
        try {
            return new BetterJSONObject(json.getJSONObject(0));
private BetterJSONObject addObservationToProject(int observationId, int projectI
        JSONArray json = post(url, params);
        
        if (json == null) {
            return new BetterJSONObject();
        }
       
        try {
            return new BetterJSONObject(json.getJSONObject(0));
        } catch (JSONException e) {
            e.printStackTrace();
            return new BetterJSONObject();
        }
    }
 
private SerializableJSONArray getJoinedProjects() throws AuthenticationException
    
    
    @SuppressLint("NewApi")
	private void getUserObservations(int maxCount) throws AuthenticationException, CancelSyncException {
        if (ensureCredentials() == false) {
            return;
        }
        String url = HOST + "/observations/" + Uri.encode(mLogin) + ".json";
        
private void getUserObservations(int maxCount) throws AuthenticationException, C
        JSONArray json = get(url, true);
        if (json != null && json.length() > 0) {
            syncJson(json, true);
        } else {
        	if (mResponseHeaders != null) {
        		// Delete any local observations which were deleted remotely by the user
private void getUserObservations(int maxCount) throws AuthenticationException, C
        }

        checkForCancelSync();
    }
    
    private void syncObservationFields() throws AuthenticationException, CancelSyncException {

        // First, remotely update the observation fields which were modified
        
private void syncObservationFields() throws AuthenticationException, CancelSyncE
                    getString(R.string.syncing));
        } else {
            c.close();
            return;
        }

        while (c.isAfterLast() == false) {
private void syncObservationFields() throws AuthenticationException, CancelSyncE
                	mProjectFieldValues.put(localField.observation_id, fields);

                    checkForCancelSync();
                }
            }
            
private void syncObservationFields() throws AuthenticationException, CancelSyncE
                params.add(new BasicNameValuePair("observation_field_value[observation_id]", Integer.valueOf(localField.observation_id).toString()));
                params.add(new BasicNameValuePair("observation_field_value[observation_field_id]", Integer.valueOf(localField.field_id).toString()));
                params.add(new BasicNameValuePair("observation_field_value[value]", localField.value));
                post(HOST + "/observation_field_values.json", params);
                
            } else {
                // Overwrite local value
private void syncObservationFields() throws AuthenticationException, CancelSyncE
                        "field_id = " + field.field_id, null, Project.DEFAULT_SORT_ORDER);
                if (c.getCount() == 0) {
                    // This observation has a non-project custom field - add it as well
                    addProjectField(field.field_id);
                }
                c.close();
 
            }
        }

    }
    
    private void addProjectField(int fieldId) throws AuthenticationException {
        try {
            JSONArray result = get(String.format("%!s(MISSING)/observation_fields/%!d(MISSING).json", HOST, fieldId));
            BetterJSONObject jsonObj;
            jsonObj = new BetterJSONObject(result.getJSONObject(0));
            ProjectField field = new ProjectField(jsonObj);
            
            getContentResolver().insert(ProjectField.CONTENT_URI, field.getContentValues());
            
        } catch (JSONException e) {
            e.printStackTrace();
        }
    }
    
public boolean isRedirectRequested(HttpResponse response, HttpContext context) {
            }
        });
        client.getParams().setParameter(CoreProtocolPNames.USER_AGENT, getUserAgent(mApp));

//        Log.d(TAG, String.format("%!s(MISSING) (%!b(MISSING) - %!s(MISSING)): %!s(MISSING)", method, authenticated,
//                authenticated ? mCredentials : "<null>",
private JSONObject observationToJsonObject(Observation observation, boolean isPO
        return params;
    }
    
    private void handleObservationResponse(Observation observation, JSONArray response) {
        try {
            if (response == null || response.length() != 1) {
                return;
            }
            JSONObject json = response.getJSONObject(0);
            BetterJSONObject o = new BetterJSONObject(json);
private void handleObservationResponse(Observation observation, JSONArray respon
            getContentResolver().update(observation.getUri(), cv, null, null);
        } catch (JSONException e) {
            // Log.d(TAG, "JSONException: " + e.toString());
        }
    }

    private class AuthenticationException extends Exception {
public void onReceive(Context context, Intent intent) {
                    mOnboardingSyncing.setVisibility(hasOnboardedSyncing ? View.GONE : View.VISIBLE);
                }

            }
        }
    } 	
    <string name="preparing_photo">Preparing photo...</string>
    <string name="updating_photos">Updating photos...</string>
    <string name="updating_x_photos">Updating %!$(MISSING)d of %!$(MISSING)d existing photos...</string>
 </resources>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public Dialog onCreateDialog(Bundle savedInstanceState)
        else
        {
            dialogCache.getTitleTextView().setText(getActivity().getResources().getString(R.string.product_name_new));
            Bitmap bitmap = BitmapFactory.decodeResource(getContext().getResources(), R.drawable.ic_menu_camera);
            dialogCache.getProductImage().setImageBitmap(bitmap);
            dialogCache.getProductCheckBox().setVisibility(View.GONE);
        }

        dialogCache.getButtonPlus().setOnClickListener(new View.OnClickListener()
        {
            int value;
            String newQuantity;

            @Override
            public void onClick(View view)
            {

                if ( !StringUtils.isEmpty(String.valueOf(dialogCache.getQuantity().getText())) )
                {
                    value = Integer.parseInt(String.valueOf(dialogCache.getQuantity().getText()));
                    value++;
                    newQuantity = String.valueOf(value);
                    dialogCache.getQuantity().setText(newQuantity);
                }
                else
public void onClick(View view)

        dialogCache.getButtonMinus().setOnClickListener(new View.OnClickListener()
        {
            int value;
            String newQuantity;

            @Override
            public void onClick(View view)
            {
                value = Integer.parseInt(String.valueOf(dialogCache.getQuantity().getText()));
                if ( value > 0 )
                {
                    value--;
                    newQuantity = String.valueOf(value);
                    dialogCache.getQuantity().setText(newQuantity);
                }
            }
        });
buildscript {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.0'
        classpath 'me.tatarka:gradle-retrolambda:3.2.5'

        // NOTE: Do not place your application dependencies here; they belong
#Tue Mar 07 22:06:38 CET 2017
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-3.3-all.zip
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
private String getCandyNameFromImg(Bitmap pokemonImage) {
            try {
                //If "/" comes at the end we'll get an array with only one component.
                String[] hpParts = pokemonHPStr.split("/");
                String hpStr =
                        hpParts.length >= 2
                                ? hpParts[1]
                                : hpParts[0];

                return Optional.of(Integer.parseInt(fixOcrLettersToNums(hpStr).replaceAll("[^0-9]", "")));
            } catch (NumberFormatException e) {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import android.support.v4.app.FragmentActivity;
import android.text.Html;
import android.util.DisplayMetrics;
import android.util.Patterns;
import android.view.Display;
import android.view.LayoutInflater;
import android.view.Menu;
public View onCreateView(
        }

        mAttributes = (LinearLayout) view.findViewById(R.id.ll_attributes);
//        setAttributes();

        return view;
    }

private void setAttributes()
        ((MainActivity) activity).setSubtitle(String.format(getString(R.string.features_count_attributes), mItemPosition + 1, mFeatureIDs.size()));
        checkNearbyItems();

        String selection = Constants.FIELD_ID + " = ?";
        Cursor attributes = mLayer.query(null, selection, new String[]{mItemId + ""}, null, null);
        if (null == attributes || attributes.getCount() == 0)
            return;

        if (attributes.moveToFirst()) {
            for (int i = 0; i < attributes.getColumnCount(); i++) {
private void setAttributes()
                        text = toString(attributes.getString(i));
                        Pattern pattern = Pattern.compile(URL_PATTERN);
                        Matcher match = pattern.matcher(text);
//                        while (Patterns.IP_ADDRESS)
                        while (match.matches()) {
                            String url = text.substring(match.start(), match.end());
                            text = text.replaceFirst(URL_PATTERN, "<a href = '" + url + "'>" + url + "</a>");
private void setAttributes()

                data += getRow(field != null ? field.getAlias() : "", text);
            }

            data += "</tbody></table></body></html>";
            webView.loadDataWithBaseURL(null, data, "text/html", "UTF-8", null);
            mAttributes.addView(webView);
            webView.setWebViewClient(new WebViewClient() {
                @Override
                public void onPageFinished(WebView view, String url) {
                    webView.setBackgroundColor(Color.TRANSPARENT);
                }
                public boolean shouldOverrideUrlLoading(WebView view, String url) {
                    view.getContext().startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(url)));
                    return true;
                }
            });

            IGISApplication app = (GISApplication) getActivity().getApplication();
            final Map<String, Integer> mAttaches = new HashMap<>();
            PhotoGallery.getAttaches(app, mLayer, mItemId, mAttaches, false);

            if (mAttaches.size() > 0) {
                final PhotoPicker gallery = new PhotoPicker(getActivity(), true);
                int px = ControlHelper.dpToPx(16, getResources());
                gallery.setPadding(px, 0, px, 0);
                gallery.post(new Runnable() {
                    @Override
                    public void run() {
                        gallery.restoreImages(new ArrayList<>(mAttaches.keySet()));
                    }
                });

                mAttributes.addView(gallery);
            }
        }

        attributes.close();
    }


public void onViewStateRestored(
            mItemId = savedInstanceState.getLong(KEY_ITEM_ID);
            mItemPosition = savedInstanceState.getInt(KEY_ITEM_POSITION);
        }

//        setAttributes();
    }


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import android.support.v4.util.ArraySet;
import android.util.Log;

import java.util.Set;

/**
public void onCreate() {
    public int onStartCommand(Intent intent, int flags, int startId) {
        Log.d(TAG, "onStartCommand");

        int id = intent.getIntExtra("id", -1);
        Log.d(TAG, "id: " + id);
        if (id != -1) {
            NotificationManager notificationManager =
                    (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);
            notificationManager.cancel(id);
        }

        Set<String> mutedGames = sharedPreferences.getStringSet(KEY_MUTE_GAMES, null);
public int onStartCommand(Intent intent, int flags, int startId) {

        mutedGamesCopy.add(String.valueOf(id));
        editor.putStringSet(KEY_MUTE_GAMES, mutedGamesCopy);
        editor.apply();

        return START_REDELIVER_INTENT;
    }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void run() {
    public boolean deleteRecursive(File fileOrDirectory) {
        boolean recursive = true;
        if (fileOrDirectory.isDirectory())
            for (File child : fileOrDirectory.listFiles())
                recursive = deleteRecursive(child);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.v7.app.AppCompatActivity;

import org.fraunhofer.cese.madcap.authentication.LoginResultCallback;
import org.fraunhofer.cese.madcap.authentication.MadcapAuthManager;

import javax.inject.Inject;

public void onLoginResult(GoogleSignInResult signInResult) {
                    if (signInResult.isSuccess()) {
                        MyApplication.madcapLogger.d(TAG, "User successfully signed in and authenticated to MADCAP.");
                        errorTextView.setText("Welcome");
                        startActivity(new Intent(context, MainActivity.class));
                    } else {
                        MyApplication.madcapLogger.d(TAG, "User could not be authenticated to MADCAP. Starting SignInActivity.");
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
private void addComment() {
        Fragment fragment = pagerAdapter.getItem(pos);

        if (pos == 0 || pos == 2) {
            ((GameThreadFragment) fragment).replyToThread();
        }
    }
}
public void onReplyToComment(final int position, final Comment parentComment) {
    }

    public void replyToThread() {
        presenter.replyToThreadBtnClick();
    }
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
private void switchTileLayer(final MapSource mapSource) {
            layers.add(index, newLayer.getTileLayer());
            this.tileLayer = newLayer;
            this.setMapTheme();
            newLayer.onResume();
        } else {
            this.tileLayer = null;
        }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
private void checkDatabase(String DecryptionKey) throws IOException {
            WelcomeActivity.this.runOnUiThread(new Runnable() {
                public void run() {
                    Toast.makeText(WelcomeActivity.this, R.string.Password_wrong, Toast.LENGTH_LONG).show();
                }
            });
            enterPasswordDialog();
        } else {
            WelcomeActivity.this.runOnUiThread(new Runnable() {
                public void run() {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void solveQuest(final long questId, final QuestGroup group, final Bundle
	{
		workerHandler.post(new Runnable() { @Override public void run()
		{
			if (group == QuestGroup.OSM)
			{
				// race condition: another thread (i.e. quest download thread) may have removed the
				// element already (#282). So in this case, just ignore
				OsmQuest q = osmQuestDB.get(questId);
				if(q == null) return;
				Element e = osmElementDB.get(q.getElementType(), q.getElementId());
				if(e == null) return;

				StringMapChangesBuilder changesBuilder = new StringMapChangesBuilder(e.getTags());
				q.getOsmElementQuestType().applyAnswerTo(answer, changesBuilder);
				StringMapChanges changes = changesBuilder.create();
				if(!changes.isEmpty())
				{
					q.setChanges(changes);
					q.setStatus(QuestStatus.ANSWERED);
					osmQuestDB.update(q);
					openChangesetsDao.setLastQuestSolvedTimeToNow();
					relay.onQuestSolved(q.getId(), group);
				}
				else
				{
					throw new RuntimeException(
							"OsmQuest " + questId + " (" + q.getType().getClass().getSimpleName() +
							") has been answered by the user but the changeset is empty!");
				}
			}
			else if (group == QuestGroup.OSM_NOTE)
			{
				OsmNoteQuest q = osmNoteQuestDB.get(questId);
				String comment = answer.getString(NoteDiscussionForm.TEXT);
				if(comment != null && !comment.isEmpty())
				{
					q.setComment(comment);
					q.setStatus(QuestStatus.ANSWERED);
					osmNoteQuestDB.update(q);
					relay.onQuestSolved(q.getId(), group);
				}
				else
				{
					throw new RuntimeException(
							"NoteQuest has been answered with an empty comment!");
				}
			}
		}});
	}

	/** Make the given quest invisible asynchronously (per user interaction). */
	public void hideQuest(final long questId, final QuestGroup group)
	{
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    · Fix: Prevent crash when moving a cache freshly loaded through send2cgeo to another list\n
    · Fix: Prevent crash when logging a trackable on some Xiaomi devices\n
    · Fix: Correctly display user name containing &amp; on main screen\n
    \n
    \n
    <b>2017.03.19:</b>\n
public void handleRegularMessage(final Message msg) {

        private void updateStatusMsg(final String msg) {
            final CachePopupFragment popup = popupRef.get();
            if (popup == null) {
                return;
            }
            popup.progress.setMessage(popup.getString(progressMessage)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void pause() {
        this.paused = true;

        if (singleFetchDataTask != null) singleFetchDataTask.pause();
        for (DownloadRunnable runnable : downloadRunnableList) {
            runnable.pause();
        }

        statusCallback.onPaused();
private void fetchWithMultipleConnection(final List<ConnectionModel> connectionM
                FileDownloadLog.d(this, "enable multiple connection: %!s(MISSING)", connectionModel);
            }

            downloadRunnableList.add(runnable);
        }

public boolean isRetry(Exception exception) {
    public void onError(Exception exception) {

        // discard all
        for (DownloadRunnable runnable : downloadRunnableList) {
            runnable.discard();
        }

        statusCallback.onError(exception);
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import android.content.res.Configuration;
import android.net.Uri;
import android.os.Bundle;
import android.support.v4.app.LoaderManager;
import android.support.v4.content.Loader;
import android.view.ContextMenu;
private void refreshTrackable() {
        // Initialize the UI
        init();

        createDisposables.add(AndroidRxUtils.bindActivity(this, ConnectorFactory.loadTrackable(geocode, null, null, brand)).subscribe(new Consumer<Trackable>() {
            @Override
            public void accept(final Trackable newTrackable) {
                if (trackingCode != null) {
public void accept(final Trackable newTrackable) {
        }, new Consumer<Throwable>() {
            @Override
            public void accept(final Throwable throwable) throws Exception {
                Log.e("refreshTrackable", throwable);
            }
        }, new Action() {
            @Override
            public void run() throws Exception {
                startLoader(null);
            }
        }));
    }

    private void startLoader(final Trackable newTrackable) {
        trackable = newTrackable;
        // Start loading in background
        getSupportLoaderManager().initLoader(connector.getTrackableLoggingManagerLoaderId(), null, LogTrackableActivity.this).forceLoad();
        displayTrackable();
    }

    private void displayTrackable() {
        if (trackable == null) {
            Log.e("LogTrackableActivity.onCreate, cannot load trackable: " + geocode);
            showProgress(false);

            if (StringUtils.isNotBlank(geocode)) {
                showToast(res.getString(R.string.err_tb_find) + ' ' + geocode + '.');
            } else {
                showToast(res.getString(R.string.err_tb_find_that));
            }

            setResult(RESULT_CANCELED);
            finish();
            return;
        }

        // We're in LogTrackableActivity, so trackable must be loggable ;)
        if (!trackable.isLoggable()) {
            showProgress(false);
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void onRegionTaskFinished(boolean currentRegionChanged) {
                .getLastKnownLocation(getActivity(), mLocationHelper.getGoogleApiClient());
        // If the region changed, and we don't have a location or the map center is still (0,0),
        // then zoom to the region
        if (currentRegionChanged &&
                (l == null ||
                        (getMapCenterAsLocation().getLatitude() == 0.0 &&
                                getMapCenterAsLocation().getLongitude() == 0.0))) {
            zoomToRegion();
        }

public void onRegionTaskFinished(boolean currentRegionChanged) {
                .getLastKnownLocation(getActivity(), mLocationHelper.getGoogleApiClient());
        // If the region changed, and we don't have a location or the map center is still (0,0),
        // then zoom to the region
        if (currentRegionChanged &&
                (l == null ||
                        (getMapCenterAsLocation().getLatitude() == 0.0 &&
                                getMapCenterAsLocation().getLongitude() == 0.0))) {
            zoomToRegion();
        }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void initBaseLayers() {
                public void run() {
                    try {
                        layer.fillFromZip(Uri.parse("android.resource://" + getPackageName() + "/" + R.raw.mapnik), null);
                    } catch (IOException | NGException e) {
                        e.printStackTrace();
                    }
                }
Subproject commit 30059bf550708e45c846a49c38cd673967c7a8f2
Subproject commit d63b861e05418a0216363086a21bed80db5e6b6b
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import de.schildbach.pte.dto.Location;
import de.schildbach.pte.dto.LocationType;

public class RecentsDB {

	/* FavLocation */

	public static List<FavLocation> getFavLocationList(Context context) {
		List<FavLocation> fav_list = new ArrayList<>();
		String network = Preferences.getNetwork(context);
		if(network == null) return fav_list;

		DBHelper mDbHelper = new DBHelper(context);
else if(sort == FavLocation.LOC_TYPE.TO) {

	public static void updateFavLocation(Context context, Location loc, FavLocation.LOC_TYPE loc_type) {
		if(loc == null || loc.type == LocationType.COORD || loc.type == LocationType.ANY) {
			// don't store GPS or ANY locations
			return;
		}

		if(loc.id != null && loc.id.equals("IS_AMBIGUOUS")) {
			// don't store ambiguous locations
			return;
		}

public static void updateFavLocation(Context context, Location loc, FavLocation.
		if(loc.hasId()) {
			// use location id to identify location
			whereClause = "network = ? AND id = ?";
			whereArgs = new String[] { Preferences.getNetwork(context), loc.id };
		} else {
			// use other values to identify location
			String lat = String.valueOf(loc.lat);
public static void updateFavLocation(Context context, Location loc, FavLocation.
			String name = loc.name == null ? "" : loc.name;

			whereClause = "network = ? AND type = ? AND lat = ? AND lon = ? AND place = ? AND name = ?";
			whereArgs = new String[] { Preferences.getNetwork(context), loc.type.name(), lat, lon, place, name };
		}

		DBHelper mDbHelper = new DBHelper(context);
else if(loc_type == FavLocation.LOC_TYPE.TO) {
		}
		else {
			// add new favorite location
			values.put("network", Preferences.getNetwork(context));
			values.put("type", loc.type.name());
			values.put("id", loc.id);
			values.put("lat", loc.lat);
else if(loc_type == FavLocation.LOC_TYPE.TO) {
		List<RecentTrip> recent_list = new ArrayList<>();

		// when the app starts for the first time, no network is selected
		if(Preferences.getNetwork(context) == null)  return recent_list;

		DBHelper mDbHelper = new DBHelper(context);
		SQLiteDatabase db = mDbHelper.getReadableDatabase();
else if(loc_type == FavLocation.LOC_TYPE.TO) {
			"WHERE r.network = ? " +
			"ORDER BY " + (sort_count ? "r.count" : "r.last_used") + " DESC";

		Cursor c = db.rawQuery(RECENT_TRIPS, new String[]{ Preferences.getNetwork(context) });

		while(c.moveToNext()) {
			Location from = getLocation(c, "from_");
else if(loc_type == FavLocation.LOC_TYPE.TO) {
		List<RecentTrip> favourite_list = new ArrayList<>();

		// when the app starts for the first time, no network is selected
		if(Preferences.getNetwork(context) == null)  return favourite_list;

		DBHelper mDbHelper = new DBHelper(context);
		SQLiteDatabase db = mDbHelper.getReadableDatabase();
else if(loc_type == FavLocation.LOC_TYPE.TO) {
			"WHERE r.network = ? AND r.is_favourite > 0 " +
			"ORDER BY r.count DESC";

		Cursor c = db.rawQuery(FAVOURITE_TRIPS, new String[]{ Preferences.getNetwork(context) });

		while(c.moveToNext()) {
			Location from = getLocation(c, "from_");
public static void updateRecentTrip(Context context, RecentTrip recent) {
			return;
		}

		if( (recent.getFrom().id != null && recent.getFrom().id.equals("IS_AMBIGUOUS")) ||
				(recent.getVia() != null && recent.getVia().id != null && recent.getVia().id.equals("IS_AMBIGUOUS")) ||
				(recent.getTo().id != null && recent.getTo().id.equals("IS_AMBIGUOUS")) ) {
			// don't store trips with ambiguous locations
			return;
		}

		DBHelper mDbHelper = new DBHelper(context);
		SQLiteDatabase db = mDbHelper.getWritableDatabase();

		int from_id = getLocationId(db, recent.getFrom(), Preferences.getNetwork(context));
		int via_id = getLocationId(db, recent.getVia(), Preferences.getNetwork(context));
		int to_id = getLocationId(db, recent.getTo(), Preferences.getNetwork(context));

		if(from_id < 0 || to_id < 0) {
			db.close();
public static void updateRecentTrip(Context context, RecentTrip recent) {
						"network = ? AND from_loc = ? AND via_loc = ? AND to_loc = ?"
				),
				(via_id < 0 ?
						new String[] { Preferences.getNetwork(context), from, to } :
						new String[] { Preferences.getNetwork(context), from, via, to }
				),
				null,   // don't group the rows
				null,   // don't filter by row groups
public static void updateRecentTrip(Context context, RecentTrip recent) {
		}
		else {
			// add new recent trip trip database
			values.put("network", Preferences.getNetwork(context));
			values.put("from_loc", from_id);
			if(via_id < 0) values.putNull("via_loc");
			else values.put("via_loc", via_id);
public static void toggleFavouriteTrip(Context context, RecentTrip recent) {
		DBHelper mDbHelper = new DBHelper(context);
		SQLiteDatabase db = mDbHelper.getWritableDatabase();

		int from_id = getLocationId(db, recent.getFrom(), Preferences.getNetwork(context));
		int via_id = getLocationId(db, recent.getVia(), Preferences.getNetwork(context));
		int to_id = getLocationId(db, recent.getTo(), Preferences.getNetwork(context));

		if(from_id < 0 || to_id < 0) {
			db.close();
public static void toggleFavouriteTrip(Context context, RecentTrip recent) {
						"network = ? AND from_loc = ? AND via_loc = ? AND to_loc = ?"
				),
				(via_id < 0 ?
						new String[] { Preferences.getNetwork(context), from, to } :
						new String[] { Preferences.getNetwork(context), from, via, to }
				),
				null,   // don't group the rows
				null,   // don't filter by row groups
public static boolean isFavedRecentTrip(Context context, RecentTrip recent) {
		DBHelper mDbHelper = new DBHelper(context);
		SQLiteDatabase db = mDbHelper.getWritableDatabase();

		int from_id = getLocationId(db, recent.getFrom(), Preferences.getNetwork(context));
		int via_id = getLocationId(db, recent.getVia(), Preferences.getNetwork(context));
		int to_id = getLocationId(db, recent.getTo(), Preferences.getNetwork(context));

		if(from_id < 0 || to_id < 0) {
			db.close();
public static boolean isFavedRecentTrip(Context context, RecentTrip recent) {
						"network = ? AND from_loc = ? AND via_loc = ? AND to_loc = ?"
				),
				(via_id < 0 ?
						new String[] { Preferences.getNetwork(context), from, to } :
						new String[] { Preferences.getNetwork(context), from, via, to }
				),
				null,   // don't group the rows
				null,   // don't filter by row groups
public static void deleteRecentTrip(Context context, RecentTrip recent) {
		DBHelper mDbHelper = new DBHelper(context);
		SQLiteDatabase db = mDbHelper.getWritableDatabase();

		int from_id = getLocationId(db, recent.getFrom(), Preferences.getNetwork(context));
		int via_id = getLocationId(db, recent.getVia(), Preferences.getNetwork(context));
		int to_id = getLocationId(db, recent.getTo(), Preferences.getNetwork(context));

		if(from_id < 0 || to_id < 0) {
			db.close();
public static void deleteRecentTrip(Context context, RecentTrip recent) {
						"network = ? AND from_loc = ? AND via_loc = ? AND to_loc = ?"
				),
				(via_id < 0 ?
						new String[] { Preferences.getNetwork(context), from, to } :
						new String[] { Preferences.getNetwork(context), from, via, to }
				));

		db.close();
public static void deleteRecentTrip(Context context, RecentTrip recent) {
	public static Location getHome(Context context) {
		Location home = null;

		String network = Preferences.getNetwork(context);
		if(network == null) return null;

		DBHelper mDbHelper = new DBHelper(context);
public static void setHome(Context context, Location home) {

		// prepare values for new home location
		ContentValues values = new ContentValues();
		values.put("network", Preferences.getNetwork(context));
		values.put("type", home.type.name());
		values.put("id", home.id);
		values.put("lat", home.lat);
public static void setHome(Context context, Location home) {
			DBHelper.TABLE_HOME_LOCS,   // The table to query
			new String[] { "_id" },     // The columns to return (null == all)
			"network = ?",              // The columns for the WHERE clause
			new String[] { Preferences.getNetwork(context) }, // The values for the WHERE clause
			null,   // don't group the rows
			null,   // don't filter by row groups
			null    // The sort order
		);

		if(c.getCount() > 0) {
			// found previous home location, so update entry
			db.update(DBHelper.TABLE_HOME_LOCS, values, "network = ?", new String[] { Preferences.getNetwork(context) });
		} else {
			// no previous home location found, so insert new entry
			db.insert(DBHelper.TABLE_HOME_LOCS, null, values);
private Boolean checkLocation(LocationView loc_view) {
			// no location was selected by user
			if(loc_view.getText() != null && loc_view.getText().length() > 0) {
				// no location selected, but text entered. So let's try create locations from text
				loc_view.setLocation(new Location(LocationType.ANY, "IS_AMBIGUOUS", loc_view.getText(), loc_view.getText()), null);

				return true;
			}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public boolean isRouteDisplayed() {
                MapParams.MODE_ROUTE.equals(mController.getMode());
    }

    public void setupStopOverlay() {
        if (mStopOverlay == null) {
            mStopOverlay = new StopOverlay(getActivity(), mMap);
            mStopOverlay.setOnFocusChangeListener(this);
        }
    }

    public void setupVehicleOverlay() {
public void showProgress(boolean show) {

    @Override
    public void showStops(List<ObaStop> stops, ObaReferences refs) {
        // Make sure that the stop overlay has been initialized
        setupStopOverlay();

        if (stops != null) {
            mStopOverlay.populateStops(stops, refs);
        }
    }
public boolean canWatchMapChanges() {
     */
    @Override
    public void setFocusStop(ObaStop stop, List<ObaRoute> routes) {
        // Make sure that the stop overlay has been initialized
        setupStopOverlay();

        mStopOverlay.setFocus(stop, routes);
    }

    @Override
public boolean isRouteDisplayed() {
                MapParams.MODE_ROUTE.equals(mController.getMode());
    }

    public void setupStopOverlay() {
        if (mStopOverlay == null) {
            mStopOverlay = new StopOverlay(getActivity(), mMap);
            mStopOverlay.setOnFocusChangeListener(this);
        }
    }

    public void setupVehicleOverlay() {
public void showProgress(boolean show) {

    @Override
    public void showStops(List<ObaStop> stops, ObaReferences refs) {
        // Make sure that the stop overlay has been initialized
        setupStopOverlay();

        if (stops != null) {
            mStopOverlay.populateStops(stops, refs);
        }
    }
public boolean canWatchMapChanges() {
     */
    @Override
    public void setFocusStop(ObaStop stop, List<ObaRoute> routes) {
        // Make sure that the stop overlay has been initialized
        setupStopOverlay();

        mStopOverlay.setFocus(stop, routes);
    }

    @Override
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import vn.mbm.phimp.me.PhimpMe;
import vn.mbm.phimp.me.R;

//import vn.mbm.phimp.me.UploadMap;
//import android.media.MediaScannerConnection;
//import android.view.View.OnClickListener;

/**
 * The activity can crop specific region of interest from an image.
 */
public class CropImage extends MonitoredActivity 
{
	
	private static int brightnessValue = 0;
	private static float toDegree = 90;
	private static float fromDegree = 0;
    // These are various options can be specified in the intent.
    private Bitmap.CompressFormat mOutputFormat =
	Bitmap.CompressFormat.JPEG; // only used with mSaveUri
    private Uri mSaveUri = null;
    private int mAspectX, mAspectY;
    private boolean mCircleCrop = false;

    private final int GET_POSITION_ON_MAP = 5;
    private String mImagePath;
    static int position ;
    private static boolean check=false;
   // private String activityName;
    ProgressDialog gpsloading;
    ImageButton btnUseMap;
    EditText txtPhotoTitle;	
	EditText txtLongtitude;
	EditText txtLatitude;
	EditText txtTags;
	static Context ctx;
	static String p[] = null;
    private String newpath;


    @Override
    public void onCreate(Bundle icicle) 
    {
    	try
    	{
    		super.onCreate(icicle);
    		mContentResolver = getContentResolver();
    		ctx = this;    		
    		Log.d("crop image","start");
    		requestWindowFeature(Window.FEATURE_NO_TITLE);
    		setContentView(R.layout.cropimage);
    		setRequestedOrientation (ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);		
    		btnSave=(Button)findViewById(R.id.save);
    		
    		txtPhotoTitle = (EditText) findViewById(R.id.txtUploadPhotoTitle);
    		
    		txtLongtitude = (EditText) findViewById(R.id.txtUploadPhotoLongtitude);
    		
    		txtLatitude = (EditText) findViewById(R.id.txtUploadPhotoLatitude);
    		
    		txtTags = (EditText) findViewById(R.id.txtUploadPhotoTags);
    		btnUseMap = (ImageButton) findViewById(R.id.btnUploadPhotoPutPos);
    		/*btnUseMap.setOnClickListener(new OnClickListener() {
    			
    			@Override
    			public void onClick(View v) 
    			{
    				Intent _itent = new Intent(ctx, UploadMap.class);
    				
    				_itent.putExtra("latitude", txtLatitude.getText().toString());
    				_itent.putExtra("longitude", txtLongtitude.getText().toString());
    				startActivityForResult(_itent, GET_POSITION_ON_MAP);
    			}
    		});*/
    		mImageView = (CropImageView) findViewById(R.id.image);
    		gpsloading = new ProgressDialog(ctx);
    		gpsloading.setCancelable(true);
    		gpsloading.setCanceledOnTouchOutside(false);
    		gpsloading.setTitle(getString(R.string.loading));
    		gpsloading.setMessage(getString(R.string.infor_upload_loading_current_position));
    		gpsloading.setIndeterminate(true);
    		Log.d("cropimage","cropimage running..");
    		//showStorageToast(this);
			Intent intent = getIntent();
			Bundle extras = intent.getExtras();
			if (extras != null) 
			{
				if (extras.getString("circleCrop") != null) 
				{
					mCircleCrop = true;
					mAspectX = 1;
					mAspectY = 1;
				}
				
				mImagePath = extras.getString("image-path");
				p = mImagePath.split(";");
				
				if (p.length == 2){
					JSONObject js = new JSONObject(p[1]);
					txtLatitude.setText(js.getString("lati"));
					txtLongtitude.setText(js.getString("logi"));
					txtPhotoTitle.setText(js.getString("name"));
					txtTags.setText(js.getString("tags"));
				}
				Log.d("path",mImagePath);
				//mSaveUri = getImageUri(mImagePath);
				Date date = new Date();
				Long longTime = new Long(date.getTime()/1000);
				newpath = PhimpMe.DataDirectory+"/PhimpMe_Photo_Effect"+"/tmp_"+longTime+".jpg";
				mSaveUri = getImageUri(newpath);
				Log.d("mSaveUri",mSaveUri.toString());
				Log.d("p[0]",p[0]);	
				
				BitmapFactory.Options options = new BitmapFactory.Options();
		        options.inSampleSize = 4;		    	
		        mBitmap = BitmapFactory.decodeFile( p[0], options );
		        if(mBitmap.getWidth() %! (MISSING)!= 0||mBitmap.getHeight() %! (MISSING)!= 0){
		        	//bitmap width , height must even
		        	Log.i("CropImage","mBitmap width or height not even");			        	
		        	mBitmap=Bitmap.createScaledBitmap(mBitmap, mBitmap.getWidth()*4, mBitmap.getHeight()*4, false);
	        				        	
		        }
				modifiedBitmap= flippedImaged = mBitmap;
				
				Log.i("CropImage", "mBitmap Width :"+mBitmap.getWidth()+" mBitmap Height : "+mBitmap.getHeight());
				mAspectX = extras.getInt("aspectX");
			    mAspectY = extras.getInt("aspectY");
			    mOutputX = extras.getInt("outputX");
			    mOutputY = extras.getInt("outputY");
			    mScale = extras.getBoolean("scale", true);
			    mScaleUp = extras.getBoolean("scaleUpIfNeeded", true);	
			    position = extras.getInt("position");
			}
			if (mBitmap == null) 
			{
			    Log.d("null", "finish!!!");
				setResult(RESULT_CANCELED);
			    finish();
			    return;
			}
		
			// Make UI fullscreen.
			getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);

			findViewById(R.id.discard).setOnClickListener(
				new View.OnClickListener() 
				{
				    public void onClick(View v) 
				    {
				    	if (btnSave.getVisibility() != View.VISIBLE)
				    		{
				    		//mBitmapSave.recycle();
				    		//mBitmap.recycle();
				    		//mBitmapResize.recycle();
				    		//modifiedBitmap.recycle();
				    		//flippedImaged.recycle();
				    		}
				    		setResult(RESULT_CANCELED);
				    		//System.exit(0);
							finish();				    					    								
				    }
				});
		
			/*
			 * Thong - Add event for button rotate image
			 */
			findViewById(R.id.btnRotateLeftRight).setOnClickListener(
					new View.OnClickListener() {
					    public void onClick(View v) 
					    {
					    	check=true;
					    	try{
					    		doRotate(mImageView, fromDegree, toDegree);
								fromDegree = (toDegree == 360) ? 0 : toDegree;
								toDegree += 90;
								if (toDegree > 360) {
									toDegree = 90;
								}
								
					    	}catch(OutOfMemoryError o){
					    		o.printStackTrace();
					    	}
					    	
					    }
					});
			/*
			 * Thong - Add event for button rotate image - End
			 */
						
			/*
			 * Danh - Add event for button rotate top-down image
			 */
			findViewById(R.id.btnRotateTopDown).setOnClickListener(
					new View.OnClickListener() {
					    public void onClick(View v) 
					    {
					    	check=true;
					    	try{
					    		modifiedBitmap = doVerticalFlip(modifiedBitmap);
								flippedImaged = doVerticalFlip(flippedImaged);
								mImageView.setImageBitmap(changeBrightness(
										modifiedBitmap, brightnessValue));
								mBitmapSave = modifiedBitmap;
								
					    	}catch(OutOfMemoryError o){
					    		mBitmapResize=getResizedBitmap(mBitmap, (mBitmap.getHeight()/4), (mBitmap.getWidth()/4));
					    		//mBitmapResize=getResizedBitmap(p[0], (mBitmap.getHeight()/2), (mBitmap.getWidth()/2));
					    		modifiedBitmap=flippedImaged=mBitmapResize;
					    	}
					    	
					    }
					});
			/*
			 * Danh - Add event for button rotate top-down image - End
			 */
			/*
			 * Danh - Add event for button black white image effect
			 */
			findViewById(R.id.btnBlackAndWhite).setOnClickListener(
					new View.OnClickListener() {
					    public void onClick(View v) 
					    {
					    	check=true;
					    	try{

					    		modifiedBitmap = null;
								modifiedBitmap = ImagesFilter.convertToBW(flippedImaged);
								mImageView.setImageBitmap(changeBrightness(
										modifiedBitmap, brightnessValue));
								mBitmapSave = modifiedBitmap;
								
					    	}catch(OutOfMemoryError o){								

					    		mBitmapResize=getResizedBitmap(mBitmap, (mBitmap.getHeight()/4), (mBitmap.getWidth()/4));
					    		//mBitmapResize=getResizedBitmap(p[0], (mBitmap.getHeight()/2), (mBitmap.getWidth()/2));
					    		modifiedBitmap=flippedImaged=mBitmapResize;
				    		

					    	}
					    	
					    }
					});
			/*
			 * Danh - Add event for button black white image effect - End
			 */
			/*
			 * Danh - Add event for button Sepia image effect
			 */
			findViewById(R.id.btnSaphia).setOnClickListener(
					new View.OnClickListener() {
					    public void onClick(View v) 
					    {
					    	check=true;
					    	try{

					    		modifiedBitmap = null;
								modifiedBitmap = ImagesFilter.convertToSepia(flippedImaged);
								mImageView.setImageBitmap(changeBrightness(
										modifiedBitmap, brightnessValue));
								mBitmapSave = modifiedBitmap;
								
					    	}catch(OutOfMemoryError o){
					    		mBitmapResize=getResizedBitmap(mBitmap, (mBitmap.getHeight()/4), (mBitmap.getWidth()/4));
					    		//mBitmapResize=getResizedBitmap(p[0], (mBitmap.getHeight()/2), (mBitmap.getWidth()/2));
								modifiedBitmap=flippedImaged=mBitmapResize;

					    	}
					    
					    }
					});

			/*
			 * Danh - Add event for button Sepia image effect - End
			 */

            findViewById(R.id.btnalpha).setOnClickListener(
                    new View.OnClickListener() {
                        public void onClick(View v) {
                            check=true;
                            try {
                                modifiedBitmap = null;
                                modifiedBitmap = ImagesFilter.convertToAlpha(flippedImaged);
                                mImageView.setImageBitmap(changeBrightness(modifiedBitmap, brightnessValue));
                                mBitmap = modifiedBitmap;
                            } catch (OutOfMemoryError o) {
                                mBitmapResize=getResizedBitmap(mBitmap, (mBitmap.getHeight()/4), (mBitmap.getWidth()/4));
                                modifiedBitmap=flippedImaged=mBitmapResize;
                            }
                        }
                    });
            findViewById(R.id.btnpink).setOnClickListener(
                    new View.OnClickListener() {
                        public void onClick(View v) {
                            check=true;
                            try {
                                modifiedBitmap = null;
                                modifiedBitmap = ImagesFilter.convertToPink(flippedImaged);
                                mImageView.setImageBitmap(changeBrightness(modifiedBitmap, brightnessValue));
                                mBitmap = modifiedBitmap;
                            } catch (OutOfMemoryError o) {
                                mBitmapResize=getResizedBitmap(mBitmap, (mBitmap.getHeight()/4), (mBitmap.getWidth()/4));
                                modifiedBitmap=flippedImaged=mBitmapResize;
                            }
                        }
                    });
            findViewById(R.id.btnpolaroid).setOnClickListener(
                    new View.OnClickListener() {
                        public void onClick(View v) {
                            check=true;
                            try {
                                modifiedBitmap = null;
                                modifiedBitmap = ImagesFilter.convertToPolaroid(flippedImaged);
                                mImageView.setImageBitmap(changeBrightness(modifiedBitmap, brightnessValue));
                                mBitmap = modifiedBitmap;
                            } catch (OutOfMemoryError o) {
                                mBitmapResize=getResizedBitmap(mBitmap, (mBitmap.getHeight()/4), (mBitmap.getWidth()/4));
                                modifiedBitmap=flippedImaged=mBitmapResize;
                            }
                        }
                    });
            findViewById(R.id.btnblur).setOnClickListener(
                    new View.OnClickListener() {
                        public void onClick(View v) {
                            check=true;
                            try {
                                modifiedBitmap = null;
                                modifiedBitmap = ImagesFilter.converttoBlur(flippedImaged,9,getApplicationContext());
                                mImageView.setImageBitmap(changeBrightness(modifiedBitmap, brightnessValue));
                                mBitmap = modifiedBitmap;
                            } catch (OutOfMemoryError o) {
                                mBitmapResize=getResizedBitmap(mBitmap, (mBitmap.getHeight()/4), (mBitmap.getWidth()/4));
                                modifiedBitmap=flippedImaged=mBitmapResize;
                            }
                        }
                    });
            findViewById(R.id.btnsharp).setOnClickListener(
                    new View.OnClickListener() {
                        public void onClick(View v) {
                            check=true;
                            try {
                                modifiedBitmap = null;
                                modifiedBitmap = ImagesFilter.convertToSharp(flippedImaged,getApplicationContext());
                                mImageView.setImageBitmap(changeBrightness(modifiedBitmap, brightnessValue));
                                mBitmap = modifiedBitmap;
                            } catch (OutOfMemoryError o) {
                                mBitmapResize=getResizedBitmap(mBitmap, (mBitmap.getHeight()/4), (mBitmap.getWidth()/4));
                                modifiedBitmap=flippedImaged=mBitmapResize;
                            }
                        }
                    });
            findViewById(R.id.btnedge).setOnClickListener(
                    new View.OnClickListener() {
                        public void onClick(View v) {
                            check=true;
                            try {
                                modifiedBitmap = null;
                                modifiedBitmap = ImagesFilter.convertToEdge(flippedImaged,getApplicationContext());
                                mImageView.setImageBitmap(changeBrightness(modifiedBitmap, brightnessValue));
                                mBitmap = modifiedBitmap;
                            } catch (OutOfMemoryError o) {
                                mBitmapResize=getResizedBitmap(mBitmap, (mBitmap.getHeight()/4), (mBitmap.getWidth()/4));
                                modifiedBitmap=flippedImaged=mBitmapResize;
                            }
                        }
                    });
            findViewById(R.id.btnfuzz).setOnClickListener(
                    new View.OnClickListener() {
                        public void onClick(View v) {
                            check=true;
                            try {
                                modifiedBitmap = null;
                                modifiedBitmap = ImagesFilter.convertToFuzz(flippedImaged,getApplicationContext());
                                mImageView.setImageBitmap(changeBrightness(modifiedBitmap, brightnessValue));
                                mBitmap = modifiedBitmap;
                            } catch (OutOfMemoryError o) {
                                mBitmapResize=getResizedBitmap(mBitmap, (mBitmap.getHeight()/4), (mBitmap.getWidth()/4));
                                modifiedBitmap=flippedImaged=mBitmapResize;
                            }
                        }
                    });
			/*
			 * Danh - Add event for button Negative image effect
			 */
			findViewById(R.id.btnNegative).setOnClickListener(
					new View.OnClickListener() {
					    public void onClick(View v) 
					    {
					    	check=true;
					    	try{
					    		
					    		modifiedBitmap = null;
								modifiedBitmap = ImagesFilter.convertToNegative(flippedImaged);
								mImageView.setImageBitmap(changeBrightness(
										modifiedBitmap, brightnessValue));
								mBitmapSave = modifiedBitmap;
								
					    	}catch(OutOfMemoryError o){

					    		mBitmapResize=getResizedBitmap(mBitmap, (mBitmap.getHeight()/4), (mBitmap.getWidth()/4));
					    		//mBitmapResize=getResizedBitmap(p[0], (mBitmap.getHeight()/2), (mBitmap.getWidth()/2));
					    		modifiedBitmap=flippedImaged=mBitmapResize;

					    	}
					    	
					    }
					});
			/*
			 * Danh - Add event for button Negative image effect - End
			 */
			btnSave.setOnClickListener(
					new View.OnClickListener() {
					    public void onClick(View v)
					    {
					    	if(check==true){
					    		onSaveClicked();
					    		//finish();
						    	Intent intent=new Intent(ctx, PhimpMe.class);
						    	intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
						    	startActivity(intent);
					    	}else{
					    		
					    		//finish();
					    		Intent intent=new Intent(ctx, PhimpMe.class);
						    	intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
						    	startActivity(intent);
					    	}
					    	
					    }
				});			
			startFaceDetection();
	    }
    	catch (Exception e)
    	{
    	}
    }

    @Override
public void onClick(DialogInterface dialog, int id) {
                .setNegativeButton(R.string.go_back, new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int id) {

                    }})
                .create()
                .show();
    }

    public static void ConvertToOriginal() {
    	try{

			doRotate(mImageView, 0, 0);
			fromDegree = 0;
			toDegree = 90;
			mImageView.setImageBitmap(mBitmap);
			modifiedBitmap = flippedImaged = mBitmap;
    	}catch(OutOfMemoryError o){

			doRotate(mImageView, 0, 0);
			fromDegree = 0;
			toDegree = 90;
			mImageView.setImageBitmap(mBitmapResize);
			modifiedBitmap = flippedImaged = mBitmapResize;
    	}
	}
    public static void doRotate(ImageView im, float fromDegree, float toDegree) {
		RotateAnimation ra1 = new RotateAnimation(fromDegree, toDegree,
				RotateAnimation.RELATIVE_TO_SELF, 0.5f,
				RotateAnimation.RELATIVE_TO_SELF, 0.5f);
		ra1.setStartOffset(0);
		ra1.setDuration(0);
		ra1.setFillAfter(true);
		ra1.setFillEnabled(true);
		im.startAnimation(ra1);
	}
    public static Bitmap doHorizontalFlip(Bitmap sampleBitmap) {
		Matrix matrixHorizontalFlip = new Matrix();
		matrixHorizontalFlip.preScale(-1.0f, 1.0f);
		Bitmap des = sampleBitmap.copy(Bitmap.Config.ARGB_8888, true);
		des = Bitmap.createBitmap(sampleBitmap, 0, 0, sampleBitmap.getWidth(), sampleBitmap.getHeight(),
				matrixHorizontalFlip, true);
		return des;
	}

	public static Bitmap doVerticalFlip(Bitmap sampleBitmap) {
		Matrix matrixVerticalFlip = new Matrix();
		matrixVerticalFlip.preScale(1.0f, -1.0f);
		Bitmap des = sampleBitmap.copy(Bitmap.Config.ARGB_8888, true);
		des = Bitmap.createBitmap(sampleBitmap, 0, 0, sampleBitmap.getWidth(), sampleBitmap.getHeight(),
				matrixVerticalFlip, true);
		return des;
	}

	public static Bitmap changeBrightness(Bitmap sampleBitmap,
			int brightnessValue) {
		ColorMatrix sepiaMatrix = new ColorMatrix();
		float[] sepMat = { 1, 0, 0, 0, brightnessValue, 0, 1, 0, 0,
				brightnessValue, 0, 0, 1, 0, brightnessValue, 0, 0, 0, 1,
				brightnessValue };
		sepiaMatrix.set(sepMat);
		final ColorMatrixColorFilter colorFilter = new ColorMatrixColorFilter(
				sepiaMatrix);
		Bitmap rBitmap = sampleBitmap.copy(Bitmap.Config.ARGB_8888, true);
		Paint paint = new Paint();
		paint.setColorFilter(colorFilter);
		Canvas myCanvas = new Canvas(rBitmap);
		myCanvas.drawBitmap(rBitmap, 0, 0, paint);
		return rBitmap;
	}

    
    OnSeekBarChangeListener brightnessBarSeekListener = new OnSeekBarChangeListener() {

		public void onStopTrackingTouch(SeekBar seekBar) {
			// TODO Auto-generated method stub

		}

		public void onStartTrackingTouch(SeekBar seekBar) {
			// TODO Auto-generated method stub

		}

		public void onProgressChanged(SeekBar seekBar, int progress,boolean fromUser) {
			try{
				brightnessValue = progress;
				ColorMatrix sepiaMatrix = new ColorMatrix();
				float[] sepMat = { 1, 0, 0, 0, brightnessValue, 0, 1, 0, 0,
						brightnessValue, 0, 0, 1, 0, brightnessValue, 0, 0, 0, 1,
						brightnessValue };
				sepiaMatrix.set(sepMat);
				final ColorMatrixColorFilter colorFilter = new ColorMatrixColorFilter(
						sepiaMatrix);
				Bitmap rBitmap = mBitmap.copy(Bitmap.Config.ARGB_8888, true);
				Paint paint = new Paint();
				paint.setColorFilter(colorFilter);
				Canvas myCanvas = new Canvas(rBitmap);
				myCanvas.drawBitmap(rBitmap, 0, 0, paint);
				
				mImageView.setImageBitmap(rBitmap);
				
			}
			catch(OutOfMemoryError o){
				mBitmapResize=getResizedBitmap(mBitmap, (mBitmap.getHeight()/4), (mBitmap.getWidth()/4));
				brightnessValue = progress;
				ColorMatrix sepiaMatrix = new ColorMatrix();
				float[] sepMat = { 1, 0, 0, 0, brightnessValue, 0, 1, 0, 0,
						brightnessValue, 0, 0, 1, 0, brightnessValue, 0, 0, 0, 1,
						brightnessValue };
				sepiaMatrix.set(sepMat);
				final ColorMatrixColorFilter colorFilter = new ColorMatrixColorFilter(
						sepiaMatrix);
				Bitmap rBitmap = mBitmapResize.copy(Bitmap.Config.ARGB_8888, true);
				Paint paint = new Paint();
				paint.setColorFilter(colorFilter);
				Canvas myCanvas = new Canvas(rBitmap);
				myCanvas.drawBitmap(rBitmap, 0, 0, paint);
				
				mImageView.setImageBitmap(rBitmap);
			}
			btnSave.setVisibility(View.INVISIBLE);
		}
	};
    private Uri getImageUri(String path) 
    {
    	return Uri.fromFile(new File(path));
    }

    public Bitmap getBitmap(String path) {
	Uri uri = getImageUri(path);
	InputStream in = null;
	try {
	    in = mContentResolver.openInputStream(uri);
	    return BitmapFactory.decodeStream(in);
	} catch (FileNotFoundException e) {
	}
	return null;
    }

    @Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) 
	{
		switch (requestCode) 
		{			
			case GET_POSITION_ON_MAP:
			{
				if (resultCode == Activity.RESULT_OK)
				{
					Log.d("thong", "Upload: Result OK");
					
					int lat = data.getIntExtra("latitude", 0);
					int log = data.getIntExtra("longitude", 0);
					
					float _lat = (float) (lat / 1E6);
					float _log = (float) (log / 1E6);
					
					txtLatitude.setText(String.valueOf(_lat));
					
					txtLongtitude.setText(String.valueOf(_log));
				}
				break;
			}
		}
	}
    private void startFaceDetection() 
    {
    	if (isFinishing()) 
    	{
    		return;
    	}
    	if(mBitmap.getWidth()>1800){
    		mBitmapResize=getResizedBitmap(mBitmap, (mBitmap.getHeight()/2), (mBitmap.getWidth()/2));
        	mBitmap = mBitmapResize;
        	mImageView.setImageBitmapResetBase(mBitmap, true);
        	ConvertToOriginal();
    	}else
    	ConvertToOriginal();
    	
    	Util.startBackgroundJob(this, null, "Please wait\u2026", new Runnable() 
    		{
	    		public void run() 
	    		{
	    			final CountDownLatch latch = new CountDownLatch(1);
	    			final Bitmap b = (mImage != null) ? mImage.fullSizeBitmap(IImage.UNCONSTRAINED, 1024 * 1024) : mBitmap;
	    			mHandler.post(new Runnable() 
		    			{
		    				public void run() 
		    				{
		    					//vn.mbm.postmail.Util.WriteLog("d", "startFaceDetection()", "Runnable");
		    					if (b != mBitmap && b != null) 
		    					{
		    						mImageView.setImageBitmapResetBase(b, true);
		    						mBitmap.recycle();
		    						mBitmap = b;
		    					}
		    					if (mImageView.getScale() == 1F) 
		    					{
		    						mImageView.center(true, true);
		    					}
		    					latch.countDown();
		    				}
		    			});
	    			try 
	    			{
	    				latch.await();
	    			} 
	    			catch (InterruptedException e) 
	    			{
	    				throw new RuntimeException(e);
	    			}
	    			mRunFaceDetection.run();
	    		}
	    	}, mHandler);
    }
    private void onSaveClicked() 
    {
		// TODO this code needs to change to use the decode/crop/encode single
		// step api so that we don't require that the whole (possibly large)
		// bitmap doesn't have to be read into memory
    	if (mSaving) return;

    	if (mCrop == null) 
    	{
    		return;
    	}

    	mSaving = true;

    	Rect r = mCrop.getCropRect();

    	int width = r.width();
    	int height = r.height();

    	// If we are circle cropping, we want alpha channel, which is the
    	// third param here.
    	Bitmap croppedImage = null;
    	try
    	{
	    	croppedImage = Bitmap.createBitmap(width, height, mCircleCrop ? Bitmap.Config.ARGB_8888 : Bitmap.Config.RGB_565);
	    	{
	    		Canvas canvas = new Canvas(croppedImage);
	    		Rect dstRect = new Rect(0, 0, width, height);
	    		canvas.drawBitmap(mBitmapSave, r, dstRect, null);
	    	}	    	
    	}
    	catch (OutOfMemoryError o) 
    	{
    		mBitmapSave.recycle();
    		croppedImage.recycle();
    		setResult(RESULT_CANCELED,new Intent());
    		finish();
		}

    	if (mCircleCrop) 
    	{
    		// OK, so what's all this about?
    		// Bitmaps are inherently rectangular but we want to return
    		// something that's basically a circle.  So we fill in the
    		// area around the circle with alpha.  Note the all important
    		// PortDuff.Mode.CLEAR.
    		Canvas c = new Canvas(croppedImage);
    		Path p = new Path();
    		p.addCircle(width / 2F, height / 2F, width / 2F, Path.Direction.CW);
    		c.clipPath(p, Region.Op.DIFFERENCE);
	    	c.drawColor(0x00000000, PorterDuff.Mode.CLEAR);
    	}

    	/* If the output is required to a specific size then scale or fill */
    	if (mOutputX != 0 && mOutputY != 0) 
    	{
    		if (mScale) 
    		{
    			/* Scale the image to the required dimensions */
    			Bitmap old = croppedImage;
    			croppedImage = Util.transform(new Matrix(), croppedImage, mOutputX, mOutputY, mScaleUp);
    			if (old != croppedImage) 
    			{
    				old.recycle();
    			}
    		} 
    		else 
    		{
    			try{
    				/* Don't scale the image crop it to the size requested.
    				 * Create an new image with the cropped image in the center and
    				 * the extra space filled.
    				 */

        			// Don't scale the image but instead fill it so it's the
        			// required dimension
        			Bitmap b = Bitmap.createBitmap(mOutputX, mOutputY, Bitmap.Config.RGB_565);
        			Canvas canvas = new Canvas(b);

        			Rect srcRect = mCrop.getCropRect();
        			Rect dstRect = new Rect(0, 0, mOutputX, mOutputY);

        			int dx = (srcRect.width() - dstRect.width()) / 2;
        			int dy = (srcRect.height() - dstRect.height()) / 2;

        			/* If the srcRect is too big, use the center part of it. */
        			srcRect.inset(Math.max(0, dx), Math.max(0, dy));

        			/* If the dstRect is too big, use the center part of it. */
        			dstRect.inset(Math.max(0, -dx), Math.max(0, -dy));

        			/* Draw the cropped bitmap in the center */
        			canvas.drawBitmap(mBitmapSave, srcRect, dstRect, null);

        			/* Set the cropped bitmap as the new bitmap */
        			croppedImage.recycle();
        			croppedImage = b;
        			
        			b.recycle();
    			}catch(OutOfMemoryError o){
    				o.printStackTrace();
    			}
				
    		}
    	}

    	// Return the cropped image directly or save it to the specified URI.
    	Bundle myExtras = getIntent().getExtras();
    	if (myExtras != null && (myExtras.getParcelable("data") != null || myExtras.getBoolean("return-data"))) 
    	{
    		Bundle extras = new Bundle();
    		extras.putParcelable("data", croppedImage);
    		setResult(RESULT_OK,(new Intent()).setAction("inline-data").putExtras(extras));
    		finish();
    		
    	} 
    	else 
    	{
    		final Bitmap b = croppedImage;
    		Util.startBackgroundJob(this, null,"Please wait ...", new Runnable() 
    		{
    			public void run() {
    				saveOutput(b);
    			}
    		}, mHandler);
    	}
    }
    private boolean isMediaScannerRunning() {
    	Cursor query = getContentResolver().query(MediaStore.getMediaScannerUri(),
                                                       new String[]{MediaStore.MEDIA_SCANNER_VOLUME}, null, null, null);
            if(query!=null){
            	if(query.moveToFirst()){
            		int columnIndex = query.getColumnIndex(MediaStore.MEDIA_SCANNER_VOLUME);
            		String volumeName = query.getString(columnIndex);
            		if(volumeName!=null){
            			return true;
            		}
            	}
            	query.close();
            }
            return false;
    }
    private void saveOutput(Bitmap croppedImage) 
    {
		if (mSaveUri != null) 
		{
		    OutputStream outputStream = null;
		    try 
		    {
				outputStream = mContentResolver.openOutputStream(mSaveUri);
				if (outputStream != null) 
				{
				    croppedImage.compress(mOutputFormat, 100, outputStream);
				}
		    } 
		    catch (IOException ex) 
		    {
		    } 
		    finally 
		    {
		    	mBitmapSave.recycle();
		    	croppedImage.recycle();
		    	Util.closeSilently(outputStream);
		    }
		    		
		}		                      
        sendBroadcast(new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE, mSaveUri));
        sendBroadcast(new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE,
                Uri.parse("file://" + Environment.getExternalStorageDirectory())));

		mBitmapSave.recycle();
		croppedImage.recycle();
		Intent intent = this.getIntent();
		while(isMediaScannerRunning())
		{
				new Thread(){
					public void run(){
						try{
						sleep(1000);
						}catch(Exception e)
						{e.printStackTrace();}
					}
				}.start();
			
		}
		intent.putExtra("Impath", mImagePath);
		intent.putExtra("saveUri",newpath);
		intent.putExtra("lati", txtLatitude.getText().toString());
		intent.putExtra("logi",txtLongtitude.getText().toString());
		intent.putExtra("tags",txtTags.getText().toString());
		intent.putExtra("name", txtPhotoTitle.getText().toString());		
		Log.i("Danh","Image path output save : "+mImagePath);
		setResult(RESULT_OK,intent);		
		finish();
    }

    @Override
    protected void onPause() {
	super.onPause();
    }

    @Override
    protected void onDestroy() 
    {
    	super.onDestroy();
    	
    	System.gc();
    }


    Runnable mRunFaceDetection = new Runnable() 
    {
    	float mScale = 1F;
    	Matrix mImageMatrix;
    	FaceDetector.Face[] mFaces = new FaceDetector.Face[3];
    	int mNumFaces;

    	// For each face, we create a HightlightView for it.
    	private void handleFace(FaceDetector.Face f) 
    	{
    		PointF midPoint = new PointF();

		    int r = ((int) (f.eyesDistance() * mScale)) * 2;
		    f.getMidPoint(midPoint);
		    midPoint.x *= mScale;
		    midPoint.y *= mScale;
	
		    int midX = (int) midPoint.x;
		    int midY = (int) midPoint.y;
	
		    HighlightView hv = new HighlightView(mImageView);
	
		    int width = mBitmap.getWidth();
		    int height = mBitmap.getHeight();
	
		    Rect imageRect = new Rect(0, 0, width, height);
	
		    RectF faceRect = new RectF(midX, midY, midX, midY);
		    faceRect.inset(-r, -r);
		    if (faceRect.left < 0) 
		    {
		    	faceRect.inset(-faceRect.left, -faceRect.left);
		    }
	
		    if (faceRect.top < 0)
		    {
		    	faceRect.inset(-faceRect.top, -faceRect.top);
		    }
	
		    if (faceRect.right > imageRect.right) 
		    {
		    	faceRect.inset(faceRect.right - imageRect.right, faceRect.right - imageRect.right);
		    }
	
		    if (faceRect.bottom > imageRect.bottom) 
		    {
		    	faceRect.inset(faceRect.bottom - imageRect.bottom, faceRect.bottom - imageRect.bottom);
		    }
	
		    hv.setup(mImageMatrix, imageRect, faceRect, mCircleCrop, mAspectX != 0 && mAspectY != 0);
		    mImageView.add(hv);
    	}

		private void makeDefault() 
		{
		    HighlightView hv = new HighlightView(mImageView);
	
		    int width = mBitmap.getWidth();
		    int height = mBitmap.getHeight();
			    
			
		    Rect imageRect = new Rect(0, 0, width, height);
	
		    // make the default size about 4/5 of the width or height
		    int cropWidth = Math.min(width, height) * 4 / 5;
		    int cropHeight = cropWidth;
		    
		    if (mAspectX != 0 && mAspectY != 0) 
		    {
		    	if (mAspectX > mAspectY) 
		    	{
		    		cropHeight = cropWidth * mAspectY / mAspectX;
		    	} 
		    	else 
		    	{
		    		cropWidth = cropHeight * mAspectX / mAspectY;
		    	}
		    }		    
		    int x = (width - cropWidth) / 2;
		    int y = (height - cropHeight) / 2;
		    RectF cropRect = new RectF(x, y, x + cropWidth, y + cropHeight);
		    hv.setup(mImageMatrix, imageRect, cropRect, mCircleCrop, mAspectX != 0 && mAspectY != 0);
		    mImageView.mHighlightViews.clear(); // Thong
		    mImageView.add(hv);
		}

		// Scale the image down for faster face detection.
		private Bitmap prepareBitmap() 
		{
		    if (mBitmap == null) 
		    {
		    	return null;
		    }
	
		    // 256 pixels wide is enough.
		    if (mBitmap.getWidth() > 256) 
		    {
		    	mScale = 256.0F / mBitmap.getWidth();
		    }
		    Matrix matrix = new Matrix();
		    matrix.setScale(mScale, mScale);
		    Bitmap faceBitmap = Bitmap.createBitmap(mBitmap, 0, 0, mBitmap.getWidth(), mBitmap.getHeight(), matrix, true);
		    return faceBitmap;
		}

		public void run() 
		{
		    mImageMatrix = mImageView.getImageMatrix();
		    Bitmap faceBitmap = prepareBitmap();
	
		    mScale = 1.0F / mScale;
		    if (faceBitmap != null && mDoFaceDetection) 
		    {
		    	FaceDetector detector = new FaceDetector(faceBitmap.getWidth(), faceBitmap.getHeight(), mFaces.length);
		    	mNumFaces = detector.findFaces(faceBitmap, mFaces);
		    }
	
		    if (faceBitmap != null && faceBitmap != mBitmap) 
		    {
		    	faceBitmap.recycle();
		    }
	
		    mHandler.post(new Runnable() 
		    {
				public void run() 
				{
				    mWaitingToPick = mNumFaces > 1;
				    if (mNumFaces > 0) 
				    {
						for (int i = 0; i < mNumFaces; i++) 
						{
						    handleFace(mFaces[i]);
						}
				    } 
				    else 
				    {
				    	makeDefault();
				    }
				    mImageView.invalidate();
				    if (mImageView.mHighlightViews.size() == 1) 
				    {
				    	mCrop = mImageView.mHighlightViews.get(0);
				    	mCrop.setFocus(true);
				    }
		
				    if (mNumFaces > 1) 
				    {
						Toast t = Toast.makeText(CropImage.this, "Multi face crop help", Toast.LENGTH_SHORT);
						t.show();
				    }
				}
		    });
		}
		
    };

    public static final int NO_STORAGE_ERROR = -1;
    public static final int CANNOT_STAT_ERROR = -2;

    public static void showStorageToast(Activity activity) 
    {
    	try
    	{
    		showStorageToast(activity, calculatePicturesRemaining());
    	}
    	catch (Exception e)
    	{
    	}
    }

    public static void showStorageToast(Activity activity, int remaining) 
    {
		String noStorageText = null;
	
		if (remaining == NO_STORAGE_ERROR) 
		{
		    String state = Environment.getExternalStorageState();
		    if (state == Environment.MEDIA_CHECKING) 
		    {
		    	noStorageText = "Preparing card";
		    } 
		    else 
		    {
		    	noStorageText = "No storage card";
		    }
		} 
		else if (remaining < 1) 
		{
		    noStorageText = "Not enough space";
		}
	
		if (noStorageText != null) 
		{
		}
    }

    public static int calculatePicturesRemaining() {
	try {
	    String storageDirectory =
		Environment.getExternalStorageDirectory().toString();
	    StatFs stat = new StatFs(storageDirectory);
	    float remaining = ((float) stat.getAvailableBlocks()
		    * (float) stat.getBlockSize()) / 400000F;
	    return (int) remaining;
	    //}
	} catch (Exception ex) {
	    // if we can't stat the filesystem then we don't know how many
	    // pictures are remaining.  it might be zero but just leave it
	    // blank since we really don't know.
	    return CANNOT_STAT_ERROR;
	}
    }

   public Bitmap getResizedBitmap(Bitmap bm, int newHeight, int newWidth) {
        int width = bm.getWidth();
        int height = bm.getHeight();
        float scaleWidth = ((float) newWidth) / width;
public Bitmap getResizedBitmap(Bitmap bm, int newHeight, int newWidth) {


        // RECREATE THE NEW BITMAP
        try{
        	Bitmap resizedBitmap = Bitmap.createBitmap(bm, 0, 0, width, height, matrix, false);
        	return resizedBitmap;
        }catch(OutOfMemoryError o){
        	Bitmap resizedBitmap = Bitmap.createBitmap(bm, 0, 0, width/2, height/2, matrix, false);
        	return resizedBitmap;
        }
        }
        
 
}


class CropImageView extends ImageViewTouchBase
{
    ArrayList<HighlightView> mHighlightViews = new ArrayList<HighlightView>();
    HighlightView mMotionHighlightView = null;
    float mLastX, mLastY;
public Bitmap getResizedBitmap(Bitmap bm, int newHeight, int newWidth) {
    private Context mContext;

    @Override
    protected void onLayout(boolean changed, int left, int top, int right, int bottom) 
    {
		super.onLayout(changed, left, top, right, bottom);
		if (mBitmapDisplayed.getBitmap() != null) 
		{
		    for (HighlightView hv : mHighlightViews) 
		    {
		    	hv.mMatrix.set(getImageMatrix());
		    	hv.invalidate();
		    	if (hv.mIsFocused) 
		    	{
		    		centerBasedOnHighlightView(hv);
		    	}
		    }
		}
    }

    public CropImageView(Context context, AttributeSet attrs) 
    {
    	super(context, attrs);
    	this.mContext = context;
    }

    @Override
    protected void zoomTo(float scale, float centerX, float centerY) 
    {
    	super.zoomTo(scale, centerX, centerY);
    	for (HighlightView hv : mHighlightViews) 
    	{
    		hv.mMatrix.set(getImageMatrix());
    		hv.invalidate();
    	}
    }

    @Override
    protected void zoomIn() 
    {
		super.zoomIn();
		for (HighlightView hv : mHighlightViews) 
		{
		    hv.mMatrix.set(getImageMatrix());
		    hv.invalidate();
		}
    }

    @Override
    protected void zoomOut() 
    {
		super.zoomOut();
		for (HighlightView hv : mHighlightViews) 
		{
		    hv.mMatrix.set(getImageMatrix());
		    hv.invalidate();
		}
    }

    @Override
    protected void postTranslate(float deltaX, float deltaY) 
    {
		super.postTranslate(deltaX, deltaY);
		for (int i = 0; i < mHighlightViews.size(); i++) 
		{
		    HighlightView hv = mHighlightViews.get(i);
		    hv.mMatrix.postTranslate(deltaX, deltaY);
		    hv.invalidate();
		}
    }

    // According to the event's position, change the focus to the first
    // hitting cropping rectangle.
    private void recomputeFocus(MotionEvent event) 
    {
		for (int i = 0; i < mHighlightViews.size(); i++) 
		{
		    HighlightView hv = mHighlightViews.get(i);
		    hv.setFocus(false);
		    hv.invalidate();
		}

		for (int i = 0; i < mHighlightViews.size(); i++) 
		{
		    HighlightView hv = mHighlightViews.get(i);
		    int edge = hv.getHit(event.getX(), event.getY());
		    if (edge != HighlightView.GROW_NONE) 
		    {
				if (!hv.hasFocus()) 
				{
				    hv.setFocus(true);
				    hv.invalidate();
				}
				break;
		    }
		}
		invalidate();
    }

    @Override
    public boolean onTouchEvent(MotionEvent event) 
    {
    	CropImage cropImage = (CropImage) mContext;
		if (cropImage.mSaving)
		{
		    return false;
		}

		switch (event.getAction()) 
		{
			case MotionEvent.ACTION_DOWN:
			    if (cropImage.mWaitingToPick) 
			    {
			    	recomputeFocus(event);
			    } 
			    else 
			    {
					for (int i = 0; i < mHighlightViews.size(); i++) 
					{
					    HighlightView hv = mHighlightViews.get(i);
					    int edge = hv.getHit(event.getX(), event.getY());
					    if (edge != HighlightView.GROW_NONE) 
					    {
							mMotionEdge = edge;
							mMotionHighlightView = hv;
							mLastX = event.getX();
							mLastY = event.getY();
							mMotionHighlightView.setMode(
								(edge == HighlightView.MOVE)
								? HighlightView.ModifyMode.Move
									: HighlightView.ModifyMode.Grow);
							break;
					    }
					}
			    }
			    break;
			case MotionEvent.ACTION_UP:
			    if (cropImage.mWaitingToPick) 
			    {
					for (int i = 0; i < mHighlightViews.size(); i++) 
					{
					    HighlightView hv = mHighlightViews.get(i);
					    if (hv.hasFocus()) 
					    {
					    	cropImage.mCrop = hv;
							for (int j = 0; j < mHighlightViews.size(); j++) 
							{
							    if (j == i) 
							    {
							    	continue;
							    }
							    mHighlightViews.get(j).setHidden(true);
							}
							centerBasedOnHighlightView(hv);
							((CropImage) mContext).mWaitingToPick = false;
							return true;
					    }
					}
			    } 
			    else if (mMotionHighlightView != null) 
			    {
			    	centerBasedOnHighlightView(mMotionHighlightView);
			    	mMotionHighlightView.setMode(HighlightView.ModifyMode.None);
			    }
			    mMotionHighlightView = null;
			    break;
			case MotionEvent.ACTION_MOVE:
			    if (cropImage.mWaitingToPick) 
			    {
			    	recomputeFocus(event);
			    } 
			    else if (mMotionHighlightView != null) 
			    {
			    	mMotionHighlightView.handleMotion(mMotionEdge,
			    			event.getX() - mLastX,
			    			event.getY() - mLastY);
			    	mLastX = event.getX();
			    	mLastY = event.getY();

			    	if (true)
			    	{
					    // This section of code is optional. It has some user
					    // benefit in that moving the crop rectangle against
					    // the edge of the screen causes scrolling but it means
					    // that the crop rectangle is no longer fixed under
					    // the user's finger.
			    		ensureVisible(mMotionHighlightView);
			    	}
			    }
			    break;
		}
		switch (event.getAction()) 
		{
			case MotionEvent.ACTION_UP:
				center(true, true);
				break;
			case MotionEvent.ACTION_MOVE:
			    // if we're not zoomed then there's no point in even allowing
			    // the user to move the image around.  This call to center puts
			    // it back to the normalized location (with false meaning don't
			    // animate).
				if (getScale() == 1F) 
				{
					center(true, true);
				}
				break;
		}
		return true;
    }

    // Pan the displayed image to make sure the cropping rectangle is visible.
    private void ensureVisible(HighlightView hv) 
    {
		Rect r = hv.mDrawRect;
	
		int panDeltaX1 = Math.max(0, mLeft - r.left);
		int panDeltaX2 = Math.min(0, mRight - r.right);
	
		int panDeltaY1 = Math.max(0, mTop - r.top);
		int panDeltaY2 = Math.min(0, mBottom - r.bottom);
	
		int panDeltaX = panDeltaX1 != 0 ? panDeltaX1 : panDeltaX2;
		int panDeltaY = panDeltaY1 != 0 ? panDeltaY1 : panDeltaY2;
	
		if (panDeltaX != 0 || panDeltaY != 0) 
		{
		    panBy(panDeltaX, panDeltaY);
		}
    }

    // If the cropping rectangle's size changed significantly, change the
    // view's center and scale according to the cropping rectangle.
    private void centerBasedOnHighlightView(HighlightView hv) 
    {
		Rect drawRect = hv.mDrawRect;
	
		float width = drawRect.width();
		float height = drawRect.height();
	
		float thisWidth = getWidth();
		float thisHeight = getHeight();
	
		float z1 = thisWidth / width * .6F;
		float z2 = thisHeight / height * .6F;
	
		float zoom = Math.min(z1, z2);
		zoom = zoom * this.getScale();
		zoom = Math.max(1F, zoom);
		if ((Math.abs(zoom - getScale()) / zoom) > .1) 
		{
		    float [] coordinates = new float[] { hv.mCropRect.centerX(), hv.mCropRect.centerY()};
		    getImageMatrix().mapPoints(coordinates);

			// Disabling zoom as it causes disappearance of image
			//zoomTo(zoom, coordinates[0], coordinates[1], 300F);
		}
		ensureVisible(hv);
    }

    @Override
    protected void onDraw(Canvas canvas) 
    {
		try
		{
	    	super.onDraw(canvas);
	    	for (int i = 0; i < mHighlightViews.size(); i++) 
	    	{
	    		mHighlightViews.get(i).draw(canvas);
	    	}
		}
		catch(Exception ce)
		{
		}
    }

    public void add(HighlightView hv) 
    {
		mHighlightViews.add(hv);
		invalidate();
    }

	@Override
	protected void onMeasure(int widthM, int heightM)
	{
		super.onMeasure(widthM, heightM);
		int width = getMeasuredWidth();
		setMeasuredDimension(width, width);
	}
}
git config --global user.name "Travis CI"
# git clone --quiet --branch=apk htpps://username:authentiToken@github.com/username/phimpme-android apk > /dev/null
# replacing username with your github username and authentiToken with a personal token for your account.***
# Your token is advised to have only access to public repositories. Its only needed.
git clone --quiet --branch=apk https://$USERNAME:$API_TOKEN@github.com/$USERNAME/phimpme-android  apk > /dev/null
cp -Rf $HOME/buildApk/*
cd apk

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
        Nutriments nutriments = product.getNutriments();

        NutrientLevels nutrientLevels = product.getNutrientLevels();
        NutrimentLevel fat = nutrientLevels.getFat();
        NutrimentLevel saturatedFat = nutrientLevels.getSaturatedFat();
        NutrimentLevel sugars = nutrientLevels.getSugars();
        NutrimentLevel salt = nutrientLevels.getSalt();

        if (fat == null && salt == null && saturatedFat == null && sugars == null) {
            levelItem.add(new NutrientLevelItem(getString(R.string.txtNoData), "", "", R.drawable.error_image));
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void showVisitorBoxScore(BoxScoreValues values) {
        List<String> players = new ArrayList<>();

        for (StatLine statLine : values.getVls().getPstsg()) {
            players.add(statLine.getFn().substring(0, 1) + ". " + statLine.getLn());
        }

        playerAdapter.setData(players);
public void showHomeBoxScore(BoxScoreValues values) {
        List<String> players = new ArrayList<>();

        for (StatLine statLine : values.getHls().getPstsg()) {
            players.add(statLine.getFn().substring(0, 1) + ". " + statLine.getLn());
        }

        playerAdapter.setData(players);
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void onLocation(Location location) {
                Observation observation = getAndDownloadObservation(id);

                Intent reply = new Intent(ACTION_GET_AND_SAVE_OBSERVATION_RESULT);
                reply.putExtra(OBSERVATION_RESULT, observation);
                sendBroadcast(reply);

            } else if (action.equals(ACTION_GET_OBSERVATION)) {
public void onLocation(Location location) {
                Observation observation = observationJson == null ? null : new Observation(new BetterJSONObject(observationJson));
                
                Intent reply = new Intent(ACTION_OBSERVATION_RESULT);
                reply.putExtra(OBSERVATION_RESULT, observation);
                reply.putExtra(OBSERVATION_JSON_RESULT, observationJson != null ? observationJson.toString() : null);
                sendBroadcast(reply);
                
            } else if (action.equals(ACTION_JOIN_PROJECT)) {
                int id = intent.getExtras().getInt(PROJECT_ID);
public void onReceive(Context context, Intent intent) {

            mLoadingObservation = false;

	        Observation observation = (Observation) intent.getSerializableExtra(INaturalistService.OBSERVATION_RESULT);

            if (mObservation == null) {
                reloadObservation(null, false);
public int compare(BetterJSONObject lhs, BetterJSONObject rhs) {
            if (mReloadObs) {
                // Reload entire observation details (not just the comments/favs)
                mObservation = observation;
                mObsJson = intent.getStringExtra(INaturalistService.OBSERVATION_JSON_RESULT);
            }

            if (mReloadTaxon) {
public String key() {
    private class ObservationReceiver extends BroadcastReceiver {
		@Override
	    public void onReceive(Context context, Intent intent) {
	        Observation observation = (Observation) intent.getSerializableExtra(INaturalistService.OBSERVATION_RESULT);

            if (observation == null) {
                return;
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void createNote(final long osmQuestId, final String text)
		workerHandler.post(new Runnable() { @Override public void run()
		{
			OsmQuest q = osmQuestDB.get(osmQuestId);

			CreateNote createNote = new CreateNote();
			createNote.position = q.getMarkerLocation();
public void hideQuest(final long questId, final QuestGroup group)
			if(group == QuestGroup.OSM)
			{
				OsmQuest q = osmQuestDB.get(questId);
				q.setStatus(QuestStatus.HIDDEN);
				osmQuestDB.update(q);
				relay.onQuestRemoved(q.getId(), group);
			}
			else if(group == QuestGroup.OSM_NOTE)
			{
				OsmNoteQuest q = osmNoteQuestDB.get(questId);
				q.setStatus(QuestStatus.HIDDEN);
				osmNoteQuestDB.update(q);
				relay.onQuestRemoved(q.getId(), group);
public void retrieve(final QuestGroup group, final long questId)
			switch (group)
			{
				case OSM:
					OsmQuest osmQuest = osmQuestDB.get(questId);
					Element element = osmElementDB.get(osmQuest.getElementType(), osmQuest.getElementId());
					relay.onQuestCreated(osmQuest, group, element);
					break;
				case OSM_NOTE:
					OsmNoteQuest osmNoteQuest = osmNoteQuestDB.get(questId);
					relay.onQuestCreated(osmNoteQuest, group, null);
					break;
			}
public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle sa

			@Override public void onSuccess(Note result)
			{
				if(getActivity() != null)
				{
					inflateNoteDiscussion(result);
				}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import android.content.SharedPreferences;
import android.content.pm.PackageManager;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.v4.app.ActivityCompat;
import android.support.v4.content.ContextCompat;
import android.view.ViewGroup;
import android.widget.Button;

import com.afollestad.materialdialogs.MaterialDialog;

import java.io.IOException;
protected void OnScan() {
                        .title(R.string.action_about)
                        .content(R.string.permission_camera)
                        .neutralText(R.string.txtOk)
                        .show();
            } else {
                ActivityCompat.requestPermissions(getActivity(), new String[]{Manifest.permission.CAMERA}, Utils.MY_PERMISSIONS_REQUEST_CAMERA);
package openfoodfacts.github.scrachx.openfood.views;

import android.Manifest;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.pm.PackageManager;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.Uri;
import pl.aprilapps.easyphotopicker.DefaultCallback;
import pl.aprilapps.easyphotopicker.EasyImage;

import static org.apache.commons.lang3.StringUtils.isBlank;
import static org.apache.commons.lang3.StringUtils.isNotBlank;
import static org.apache.commons.lang3.StringUtils.isNotEmpty;

public class SaveProductOfflineActivity extends BaseActivity {

    private final String[] mUnit = new String[1];
    private final String[] mImage = new String[1];
    @BindView(R.id.imageSave) ImageView imgSave;
    @BindView(R.id.editTextName) EditText name;
    @BindView(R.id.editTextBrand) EditText brand;
    @BindView(R.id.buttonTakePicture) Button takePic;
    @BindView(R.id.buttonFromGallery) Button takeGallery;
    @BindView(R.id.buttonSaveProduct) Button save;
    private SendProduct mProduct;
    private String mBarcode;
    private OpenFoodAPIClient api;
protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_save_product_offline);

        new MaterialDialog.Builder(this)
                .title(R.string.title_info_dialog)
                .content(R.string.new_offline_info)
                .positiveText(R.string.txtOk)
                .show();

        if (ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED && ContextCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
            if (ActivityCompat.shouldShowRequestPermissionRationale(this, Manifest.permission.READ_EXTERNAL_STORAGE) || ActivityCompat.shouldShowRequestPermissionRationale(this, Manifest.permission.WRITE_EXTERNAL_STORAGE)) {
                new MaterialDialog.Builder(this)
                        .title(R.string.action_about)
                        .content(R.string.permission_storage)
                        .neutralText(R.string.txtOk)
                        .show();
            } else {
                ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.WRITE_EXTERNAL_STORAGE}, Utils.MY_PERMISSIONS_REQUEST_STORAGE);
            }
        }

protected void onCreate(Bundle savedInstanceState) {
            mProduct = new SendProduct();
            mProduct.setBarcode(mBarcode);
        }
    }
    @OnItemSelected(value = R.id.spinnerUnitWeight, callback = OnItemSelected.Callback.ITEM_SELECTED)
    protected void onUnitSelected(int pos) {
        mUnit[0] = spinnerW.getItemAtPosition(pos).toString();
    }

    @OnItemSelected(value = R.id.spinnerImages, callback = OnItemSelected.Callback.ITEM_SELECTED)
    protected void onImageSelected(int pos) {
        mImage[0] = spinnerI.getItemAtPosition(pos).toString();

        if(pos == 0) {
            if(isNotBlank(mProduct.getImgupload_front())) {
                imgSave.setVisibility(View.VISIBLE);
public void onProductSentResponse(boolean value) {

    @OnClick(R.id.buttonTakePicture)
    protected void onTakePhotoClicked() {
        EasyImage.openCamera(this, 0);
    }

    @Override
private void onPhotoReturned(File photoFile) {
    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String permissions[], @NonNull int[] grantResults) {
        switch (requestCode) {
            case Utils.MY_PERMISSIONS_REQUEST_STORAGE: {
                if (grantResults.length <= 0 || grantResults[0] != PackageManager.PERMISSION_GRANTED) {
                    new MaterialDialog.Builder(this)
                            .title(R.string.permission_title)
                            .content(R.string.permission_denied)
buildscript {
        maven { url "https://jitpack.io" }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.2.2'
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#Mon Oct 03 14:54:10 EEST 2016
VERSION_CODE=1525
public void onNewIntent(Intent intent)

      // We get this intent from CallActivity, when the App is in the background and the user has requested hangup via notification
      // In that case we don't wont to interrupt the user from what they are currently doing in the foreground, so we just finish()
      if (intent.getAction().equals(ACTION_DISCONNECTED_BACKGROUND)) {
         finish();
      }
   }
#Mon Oct 03 14:54:10 EEST 2016
VERSION_CODE=1557
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void onCreate(@Nullable Bundle savedInstanceState) {
        }

        mIdpProvider.setAuthenticationCallback(this);
        mIdpProvider.startLogin(getActivity());
    }

    @Override
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public class TextItemViewProvider
}
```

#### Step 3. You do not need to create another new class. Just add a `RecyclerView` and `List<TypeItem>` to your `Activity`, for example: 

```java
@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);
    recyclerView = (RecyclerView) findViewById(R.id.list);
    
    itemFactory = new TypeItemFactory.Builder().build();
    TypeItem textItem = itemFactory.newItem(new TextItemContent("world"));
    TypeItem imageItem = itemFactory.newItem(new ImageItemContent(R.mipmap.ic_launcher));
    TypeItem richItem = itemFactory.newItem(new RichItemContent("小艾大人赛高", R.mipmap.avatar));
    
    List<TypeItem> typeItems = new ArrayList<>(80);
    for (int i = 0; i < 20; i++) {
        typeItems.add(textItem);
        typeItems.add(imageItem);
        typeItems.add(richItem);
    }

    /* register the types before setAdapter, that's all right */ 
    ItemTypePool.register(TextItemContent.class, new TextItemViewProvider());
    ItemTypePool.register(ImageItemContent.class, new ImageItemViewProvider());
    ItemTypePool.register(RichItemContent.class, new RichItemViewProvider());

    recyclerView.setAdapter(new MultiTypeAdapter(typeItems));
}
```

    package="me.drakeet.multitype.sample">

    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
import android.support.v7.widget.RecyclerView;
import java.util.ArrayList;
import java.util.List;
import me.drakeet.multitype.TypeItem;
import me.drakeet.multitype.TypeItemFactory;
import me.drakeet.multitype.ItemTypePool;
import me.drakeet.multitype.MultiTypeAdapter;
import me.drakeet.multitype.sample.ImageItemContent;
import me.drakeet.multitype.sample.ImageItemViewProvider;
import me.drakeet.multitype.sample.R;
import me.drakeet.multitype.sample.RichItemContent;
import me.drakeet.multitype.sample.RichItemViewProvider;
import me.drakeet.multitype.sample.TextItemContent;
import me.drakeet.multitype.sample.TextItemViewProvider;

public class MainActivity extends AppCompatActivity {

    private TypeItemFactory itemFactory;
    private RecyclerView recyclerView;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        recyclerView = (RecyclerView) findViewById(R.id.list);
        // @formatter:off
        itemFactory = new TypeItemFactory.Builder().build();
        TypeItem textItem = itemFactory.newItem(new TextItemContent("world"));
        TypeItem imageItem = itemFactory.newItem(new ImageItemContent(R.mipmap.ic_launcher));
        TypeItem richItem = itemFactory.newItem(new RichItemContent("小艾大人赛高", R.mipmap.avatar));
        // @formatter:on
        List<TypeItem> typeItems = new ArrayList<>(80);
        for (int i = 0; i < 20; i++) {
            typeItems.add(textItem);
            typeItems.add(imageItem);
            typeItems.add(richItem);
        }

        /* register the types before setAdapter, that's all right */
        ItemTypePool.register(TextItemContent.class, new TextItemViewProvider());
        ItemTypePool.register(ImageItemContent.class, new ImageItemViewProvider());
        ItemTypePool.register(RichItemContent.class, new RichItemViewProvider());

        recyclerView.setAdapter(new MultiTypeAdapter(typeItems));
    }
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public final View onCreateView(LayoutInflater inflater, @Nullable ViewGroup cont
    @Override
    public void applyLocale() {
        Context context = getContext();
        Locale currentLocale = LocaleManager.getInstance().getCurrentLocale(context);
        Locale.setDefault(currentLocale);
        final Resources resources = context.getResources();
        final Configuration config = resources.getConfiguration();
        config.setLocale(currentLocale);
        context.getResources().updateConfiguration(config, null);
        // We create and destroy a new WebView here to force the internal state of WebView to know
        // about the new language. See issue #666.
        final WebView unneeded = new WebView(getContext());
private String updateLocale(Context context, final Locale locale) {
        return locale.toString();
    }

    private boolean isMirroringSystemLocale(final Context context) {
        return getPersistedLocale(context) == null;
    }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
public void handleTaskCompletion(ResultAndError<AppInstallStatus> result) {
        } else {
            // Gives user generic failure warning; even if update staging
            // failed for a specific reason like xml syntax
            if (!"".equals(result.errorMessage)) {
                String[] resouceAndMessage = result.errorMessage.split("==", 2);
                CommCareApplication._().reportNotificationMessage(NotificationMessageFactory.message(AppInstallStatus.InvalidResource, new String[]{null, resouceAndMessage[0], resouceAndMessage[1]}), true);
            }
            uiController.checkFailedUiState();
            if (proceedAutomatically) {
private FormDef loadFormFromFile(File formXmlFile) {
        try {
            fis = new FileInputStream(formXmlFile);
        } catch (FileNotFoundException e) {
            throw new RuntimeException("Error reading XForm file");
        }
        XFormAndroidInstaller.registerAndroidLevelFormParsers();
        FormDef fd = XFormExtensionUtils.getFormFromInputStream(fis);
        if (fd == null) {
            throw new RuntimeException("Error reading XForm file");
        }
        return fd;
    }
package org.commcare.tasks;

import android.content.Context;

import org.commcare.CommCareApp;
import org.commcare.CommCareApplication;
public void startPinnedNotification(Context ctx) {
        } catch (InvalidResourceException e) {
            ResourceInstallUtils.logInstallError(e,
                    "Structure error ocurred during install|");
            // Put both the resource in question and a detailed error message into one string for
            // ease of transport, which will be split out later and formatted into a user-readable
            // pinned notification
            String combinedMessage = e.resourceName + "==" + e.getMessage();

            return new ResultAndError<>(AppInstallStatus.UnknownFailure, combinedMessage);
        } catch (Exception e) {
            ResourceInstallUtils.logInstallError(e,
                    "Unknown error ocurred during install|");
public void cancelWasUserTriggered() {
        taskWasCancelledByUser = true;
    }


}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Subproject commit b9457ddef4f1f3b8cf12429746c0626f1d8897ad
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
            categoryProduct.setVisibility(View.GONE);
        }

        String labels = product.getLabels().trim();
        if (isNotEmpty(labels)) {
            labelProduct.append(bold(getString(R.string.txtLabels)));
            labelProduct.append(" ");
            for (String label : labels.split(",")) {
                labelProduct.append(label);
                labelProduct.append(", ");
            }
        } else {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import android.content.res.ColorStateList;
import android.content.res.Configuration;
import android.graphics.Color;
import android.graphics.drawable.ColorDrawable;
import android.os.Build;
import android.os.Bundle;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.design.widget.AppBarLayout;
import android.support.design.widget.CollapsingToolbarLayout;
import android.support.design.widget.NavigationView;
import android.support.v4.app.ActivityCompat;
import android.support.v4.app.Fragment;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.graphics.drawable.DrawerArrowDrawable;
import android.support.v7.widget.Toolbar;
import android.view.Menu;
import android.view.View;
import android.webkit.URLUtil;
import android.widget.ImageView;
import com.dm.wallpaper.board.services.WallpaperBoardService;
import com.dm.wallpaper.board.utils.Extras;
import com.dm.wallpaper.board.utils.ImageConfig;
import com.dm.wallpaper.board.utils.listeners.InAppBillingListener;
import com.dm.wallpaper.board.utils.listeners.SearchListener;
import com.dm.wallpaper.board.utils.listeners.WallpaperBoardListener;
    NavigationView mNavigationView;
    @BindView(R2.id.drawer_layout)
    DrawerLayout mDrawerLayout;

    private BillingProcessor mBillingProcessor;
    private ActionBarDrawerToggle mDrawerToggle;
public void initMainActivity(@Nullable Bundle savedInstanceState, boolean isLice
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_wallpaper_board);
        ButterKnife.bind(this);
        ViewHelper.setApplicationWindowColor(this);
        ViewHelper.resetNavigationBarTranslucent(this,
                getResources().getConfiguration().orientation);
        registerBroadcastReceiver();

        SoftKeyboardHelper softKeyboardHelper = new SoftKeyboardHelper(this,
public void initMainActivity(@Nullable Bundle savedInstanceState, boolean isLice
        mDonationProductsId = donationProductsId;

        Toolbar toolbar = ButterKnife.findById(this, R.id.toolbar);
        AppBarLayout appBar = ButterKnife.findById(this, R.id.appbar);
        toolbar.setTitle("");
        setSupportActionBar(toolbar);
        appBar.setExpanded(false);

        initNavigationView(toolbar);
        initNavigationViewHeader();
        initTheme();
        initInAppBilling();

        mPosition = mLastPosition = 0;
        if (savedInstanceState != null) {
            mPosition = mLastPosition = savedInstanceState.getInt("position", 0);
        }

        setFragment(getFragment(mPosition));
        checkWallpapers();

        if (Preferences.getPreferences(this).isFirstRun()) {
            if (isLicenseCheckerEnabled) {
                LicenseHelper.getLicenseChecker(this).checkLicense(mLicenseKey, salt);
                return;
            }
        }

        if (isLicenseCheckerEnabled) {
            if (!Preferences.getPreferences(this).isLicensed())
                finish();
        }
    }

protected void onDestroy() {
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        ViewHelper.disableAppBarDrag(ButterKnife.findById(this, R.id.appbar));
        return super.onCreateOptionsMenu(menu);
    }

    @Override
    public void onConfigurationChanged(Configuration newConfig) {
        super.onConfigurationChanged(newConfig);
        resetNavigationView(newConfig.orientation);
public void onBackPressed() {
            mDrawerLayout.closeDrawers();
            return;
        }
        super.onBackPressed();
    }

public void onRequestPermissionsResult(int requestCode, @NonNull String[] permis
    }

    @Override
    public void OnWallpapersChecked(@Nullable Intent intent) {
        if (intent != null) {
            int size = intent.getIntExtra(Extras.EXTRA_SIZE, 0);
            Database database = new Database(this);
            int offlineSize = database.getWallpapersCount();
public void OnWallpapersChecked(@Nullable Intent intent) {
    }

    @Override
    public void OnInAppBillingInitialized(boolean success) {
        if (!success) mBillingProcessor = null;
    }

    @Override
    public void OnInAppBillingSelected(InAppBilling product) {
        if (mBillingProcessor == null) return;
        mBillingProcessor.purchase(this, product.getProductId());
    }

    @Override
    public void OnInAppBillingConsume(String productId) {
        if (mBillingProcessor == null) return;
        if (mBillingProcessor.consumePurchase(productId)) {
            new MaterialDialog.Builder(this)
public void OnInAppBillingConsume(String productId) {
    }

    @Override
    public void OnSearchExpanded(boolean expand) {
        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        CollapsingToolbarLayout collapsingToolbar = (CollapsingToolbarLayout)
                findViewById(R.id.collapsing_toolbar);

        if (expand) {
            int color = ColorHelper.getAttributeColor(this, R.attr.search_toolbar_color);
            ViewHelper.changeSearchViewActionModeColor(this,
                    collapsingToolbar, R.attr.toolbar_color, R.attr.search_toolbar_color);
            ColorHelper.setStatusBarColor(this, color);

            int iconColor = ColorHelper.getAttributeColor(this, R.attr.search_toolbar_icon);
            toolbar.setNavigationIcon(DrawableHelper.getTintedDrawable(
                    this, R.drawable.ic_toolbar_back, iconColor));
            toolbar.setNavigationOnClickListener(view -> onBackPressed());
        } else {
            SoftKeyboardHelper.closeKeyboard(this);
            ColorHelper.setTransparentStatusBar(this, Color.TRANSPARENT);
            collapsingToolbar.setContentScrim(new ColorDrawable(
                    ColorHelper.getAttributeColor(this, R.attr.toolbar_color)));
            mDrawerToggle.setDrawerArrowDrawable(new DrawerArrowDrawable(this));
            toolbar.setNavigationOnClickListener(view ->
                    mDrawerLayout.openDrawer(GravityCompat.START));
public void onDrawerClosed(View drawerView) {
                getResources().getBoolean(R.bool.enable_donation));
        mNavigationView.setItemTextColor(colorStateList);
        mNavigationView.setItemIconTintList(colorStateList);
        mNavigationView.setNavigationItemSelectedListener(item -> {
            int id = item.getItemId();
            if (id == R.id.navigation_view_wallpapers) mPosition = 0;
public void onDrawerClosed(View drawerView) {
        });
    }

    private void initTheme() {
        getWindow().getDecorView().setBackgroundColor(
                ColorHelper.getAttributeColor(this, R.attr.main_background));
        ColorHelper.setStatusBarIconColor(this);
    }

    private void initNavigationViewHeader() {
        String imageUrl = getResources().getString(R.string.navigation_view_header);
        String titleText = getResources().getString(R.string.navigation_view_header_title);
private void initNavigationViewHeader() {
        }

        ImageLoader.getInstance().displayImage(imageUrl, new ImageViewAware(image),
                ImageConfig.getDefaultImageOptions(true), new ImageSize(720, 720), null, null);
    }

    private void initInAppBilling() {
private void checkWallpapers() {

        int size = Preferences.getPreferences(this).getAvailableWallpapersCount();
        if (size > 0) {
            OnWallpapersChecked(new Intent().putExtra(Extras.EXTRA_SIZE, size));
        }
    }

private void setFragment(Fragment fragment) {
        if (fragment == null) return;
        clearBackStack();

        FragmentTransaction ft = mFragManager.beginTransaction().replace(
                R.id.container, fragment, mFragmentTag);
        ft.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE);
        try {
            ft.commit();
        } catch (Exception e) {
private void resetToolbarLogo() {
    private void clearBackStack() {
        if (mFragManager.getBackStackEntryCount() > 0) {
            mFragManager.popBackStack(null, FragmentManager.POP_BACK_STACK_INCLUSIVE);
            OnSearchExpanded(false);
        }
    }
}
public void initMuzeiActivity(@Nullable Bundle savedInstanceState, @NonNull Clas
        ViewCompat.setNestedScrollingEnabled(mScrollView, false);
        ViewHelper.disableTranslucentNavigationBar(this);
        ColorHelper.setStatusBarColor(this,
                ColorHelper.getAttributeColor(this, R.attr.toolbar_color));
        ColorHelper.setStatusBarIconColor(this);
        ColorHelper.setNavigationBarColor(this, ColorHelper.getDarkerColor(
                ColorHelper.getAttributeColor(this, R.attr.colorAccent), 0.8f));
protected void attachBaseContext(Context newBase) {
    @Override
    public void onConfigurationChanged(Configuration newConfig) {
        super.onConfigurationChanged(newConfig);
        ViewHelper.resetNavigationBarBottomPadding(this, mScrollView,
                getResources().getConfiguration().orientation);
    }

    @Override
public void onClick(View view) {
    }

    @Override
    public void OnRefreshDurationSet(int rotateTime, boolean isMinute) {
        mRotateTime = rotateTime;
        mIsMinute = isMinute;
        initRefreshDuration();
import android.widget.TextView;

import com.danimahardhika.cafebar.CafeBar;
import com.dm.wallpaper.board.R;
import com.dm.wallpaper.board.R2;
import com.dm.wallpaper.board.adapters.WallpapersAdapter;
protected void onCreate(@Nullable Bundle savedInstanceState) {
        setContentView(R.layout.activity_wallpaper_preview);
        ButterKnife.bind(this);
        ViewHelper.setApplicationWindowColor(this);
        ViewHelper.resetNavigationBarTranslucent(this,
                getResources().getConfiguration().orientation);
        mIsEnter = true;

        Toolbar toolbar = ButterKnife.findById(this, R.id.toolbar);
        TextView toolbarTitle = ButterKnife.findById(this, R.id.toolbar_title);
        TextView toolbarSubTitle = ButterKnife.findById(this, R.id.toolbar_subtitle);
        ColorHelper.setTransparentStatusBar(this,
                ContextCompat.getColor(this, R.color.wallpaperStatusBar));
        mColor = ColorHelper.getAttributeColor(this, R.attr.colorAccent);
        mProgress.getIndeterminateDrawable().setColorFilter(mColor, PorterDuff.Mode.SRC_IN);

public void onTransitionStart(Transition transition) {
                    public void onTransitionEnd(Transition transition) {
                        if (mIsEnter) {
                            mIsEnter = false;
                            Animator.startSlideDownAnimation(WallpaperBoardPreviewActivity.this,
                                    toolbar, null);
                            loadWallpaper(mUrl);
                        }
                    }
public void onTransitionResume(Transition transition) {
    @Override
    public void onConfigurationChanged(Configuration newConfig) {
        super.onConfigurationChanged(newConfig);
        ViewHelper.resetNavigationBarTranslucent(this, newConfig.orientation);
    }

    @Override
public boolean onOptionsItemSelected(MenuItem item) {

                if (target.exists()) {
                    CafeBar.builder(this)
                            .to(findViewById(R.id.rootview))
                            .autoDismiss(false)
                            .swipeToDismiss(false)
                            .floating(true)
                            .maxLines(4)
                            .content(String.format(getResources().getString(R.string.wallpaper_download_exist),
                                    ("\"" +mName + FileHelper.IMAGE_EXTENSION+ "\"")))
                            .icon(R.drawable.ic_toolbar_download)
public void onLoadingFailed(String imageUri, View view, FailReason failReason) {

                int color = ColorHelper.getAttributeColor(
                        WallpaperBoardPreviewActivity.this, R.attr.main_background);
                FrameLayout container = (FrameLayout) findViewById(R.id.container);
                ObjectAnimator colorFade = ObjectAnimator.ofObject(
                        container, "backgroundColor", new ArgbEvaluator(),
                        Color.TRANSPARENT, color);
public void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) {
                        int color = palette.getVibrantColor(accent);
                        mColor = color;
                        int text = ColorHelper.getTitleTextColor(color);
                        mFab.setBackgroundTintList(ColorHelper.getColorStateList(
                                android.R.attr.state_pressed,
                                color, ColorHelper.getDarkerColor(color, 0.9f)));
                        OnWallpaperLoaded(text);
                    });
                }

import android.content.Context;
import android.content.Intent;
import android.graphics.PorterDuff;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.v4.content.ContextCompat;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.view.View;
import android.widget.ProgressBar;
import android.widget.TextView;

import com.dm.wallpaper.board.R;
import com.dm.wallpaper.board.R2;
import com.dm.wallpaper.board.helpers.ColorHelper;
import com.dm.wallpaper.board.utils.Extras;

import java.net.HttpURLConnection;
import java.net.URL;

import butterknife.BindView;
import butterknife.ButterKnife;
import uk.co.chrisjenx.calligraphy.CalligraphyContextWrapper;


public class WallpaperBoardSplashActivity extends AppCompatActivity {

    @BindView(R2.id.progress)
    ProgressBar mProgress;

    private Class<?> mMainActivity;
    private AsyncTask<Void, Void, Boolean> mCheckRszIo;

    @Deprecated
    public void initSplashActivity(@Nullable Bundle savedInstanceState, @NonNull Class<?> mainActivity, int duration) {
public void initSplashActivity(@Nullable Bundle savedInstanceState, @NonNull Cla
    public void initSplashActivity(@Nullable Bundle savedInstanceState, @NonNull Class<?> mainActivity) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_splash);
        ButterKnife.bind(this);
        mMainActivity = mainActivity;

        mProgress.getIndeterminateDrawable().setColorFilter(ColorHelper.getAttributeColor(
                this, R.attr.colorAccent), PorterDuff.Mode.SRC_IN);

        int color = ContextCompat.getColor(this, R.color.splashColor);
        int titleColor = ColorHelper.getTitleTextColor(color);
        TextView splashTitle = ButterKnife.findById(this, R.id.splash_title);
        splashTitle.setTextColor(ColorHelper.setColorAlpha(titleColor, 0.6f ));

        TextView splashLoading = ButterKnife.findById(this, R.id.splash_loading);
        splashLoading.setTextColor(titleColor);
        splashLoading.setText(String.format(
                getResources().getString(R.string.splash_screen_loading),
                getResources().getString(R.string.app_name)));

        checkRszIo();
    }

protected void attachBaseContext(Context newBase) {
    }

    @Override
    protected void onDestroy() {
        if (mCheckRszIo != null) mCheckRszIo.cancel(true);
        super.onDestroy();
    }

    private void checkRszIo() {
        mCheckRszIo = new AsyncTask<Void, Void, Boolean>() {

            final String rszio = "https://rsz.io/";

            @Override
            protected void onPreExecute() {
                super.onPreExecute();
                mProgress.setVisibility(View.VISIBLE);
            }

            @Override
            protected Boolean doInBackground(Void... voids) {
                while ((!isCancelled())) {
                    try {
protected Boolean doInBackground(Void... voids) {
                        int code = connection.getResponseCode();
                        return code == 200;
                    } catch (Exception e) {
                        Log.d(Extras.LOG_TAG, Log.getStackTraceString(e));
                        return false;
                    }
                }
protected Boolean doInBackground(Void... voids) {
            @Override
            protected void onPostExecute(Boolean aBoolean) {
                super.onPostExecute(aBoolean);
                WallpaperBoardActivity.sRszIoAvailable = aBoolean;
                Log.d(Extras.LOG_TAG, "rsz.io availability: " +WallpaperBoardActivity.sRszIoAvailable);
                mCheckRszIo = null;

                startActivity(new Intent(WallpaperBoardSplashActivity.this, mMainActivity));
                overridePendingTransition(android.R.anim.fade_in, android.R.anim.fade_out);
                finish();
            }
        }.execute();
    }
}
import com.dm.wallpaper.board.R;
import com.dm.wallpaper.board.R2;
import com.dm.wallpaper.board.items.Credit;
import com.dm.wallpaper.board.utils.Extras;

import java.util.List;

public View getView(int position, View view, ViewGroup viewGroup) {
                try {
                    mContext.startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(link)));
                } catch (ActivityNotFoundException e) {
                    Log.d(Extras.LOG_TAG, Log.getStackTraceString(e));
                }
            }
        });
import android.widget.LinearLayout;
import android.widget.TextView;

import com.dm.wallpaper.board.R;
import com.dm.wallpaper.board.R2;
import com.dm.wallpaper.board.activities.WallpaperBoardPreviewActivity;
import com.dm.wallpaper.board.utils.Extras;
import com.dm.wallpaper.board.utils.ImageConfig;
import com.dm.wallpaper.board.utils.listeners.WallpaperListener;
import com.dm.wallpaper.board.utils.views.WallpaperView;
import com.kogitune.activitytransition.ActivityTransitionLauncher;
import com.nostra13.universalimageloader.core.DisplayImageOptions;
import com.nostra13.universalimageloader.core.ImageLoader;
public WallpapersAdapter(@NonNull Context context, @NonNull List<Wallpaper> wall
                mContext.getResources().getDimensionPixelSize(R.dimen.default_image_padding));
        mOptions = ImageConfig.getRawDefaultImageOptions();
        mOptions.resetViewBeforeLoading(true);
        mOptions.cacheInMemory(false);
        mOptions.cacheOnDisk(true);
        mOptions.showImageForEmptyUri(failed);
        mOptions.showImageOnFail(failed);
public int getItemCount() {
        @BindView(R2.id.container)
        LinearLayout container;
        @BindView(R2.id.image)
        WallpaperView image;
        @BindView(R2.id.name)
        TextView name;
        @BindView(R2.id.author)
public void onClick(View view) {
                                    fragment instanceof FavoritesFragment ||
                                    fragment instanceof WallpaperSearchFragment) {
                                WallpaperListener listener = (WallpaperListener) fragment;
                                listener.OnWallpaperSelected(position);
                            }
                        }
                    }
public void onClick(View view) {

                mWallpapers.get(position).setFavorite(!mWallpapers.get(position).isFavorite());
                setFavorite(favorite, name.getCurrentTextColor(), position);
            }
        }

import com.dm.wallpaper.board.R;
import com.dm.wallpaper.board.activities.WallpaperBoardCrashReport;
import com.dm.wallpaper.board.utils.ImageConfig;
import com.nostra13.universalimageloader.core.ImageLoader;

import java.text.SimpleDateFormat;
public void initApplication() {
                .setFontAttrId(R.attr.fontPath)
                .build());

        if (Patterns.EMAIL_ADDRESS.matcher(getResources().getString(R.string.dev_email)).matches()) {
            mHandler = Thread.getDefaultUncaughtExceptionHandler();
            Thread.setDefaultUncaughtExceptionHandler(this::handleUncaughtException);
package com.dm.wallpaper.board.fragments;

import android.content.ActivityNotFoundException;
import android.content.Intent;
import android.content.res.Configuration;
import android.graphics.Color;
import android.net.Uri;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.v4.app.Fragment;
import android.support.v4.view.ViewCompat;
import android.support.v4.widget.NestedScrollView;
import android.support.v7.widget.CardView;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.webkit.URLUtil;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.dm.wallpaper.board.R;
import com.dm.wallpaper.board.R2;
import com.dm.wallpaper.board.fragments.dialogs.CreditsFragment;
import com.dm.wallpaper.board.fragments.dialogs.LicensesFragment;
import com.dm.wallpaper.board.helpers.ColorHelper;
import com.dm.wallpaper.board.helpers.DrawableHelper;
import com.dm.wallpaper.board.helpers.ViewHelper;
import com.dm.wallpaper.board.utils.Extras;
import com.dm.wallpaper.board.utils.ImageConfig;
import com.mikhaellopez.circularimageview.CircularImageView;
import com.nostra13.universalimageloader.core.ImageLoader;

import org.sufficientlysecure.htmltextview.HtmlTextView;

import butterknife.BindView;
import butterknife.ButterKnife;
 * limitations under the License.
 */

public class AboutFragment extends Fragment implements View.OnClickListener {

    @BindView(R2.id.scrollview)
    NestedScrollView mScrollView;
    @BindView(R2.id.card_contributors)
    CardView mCardContributors;
    @BindView(R2.id.contributors)
    LinearLayout mContributors;
    @BindView(R2.id.contributors_icon)
    ImageView mContributorsIcon;
    @BindView(R2.id.licenses)
    LinearLayout mLicenses;
    @BindView(R2.id.licenses_icon)
    ImageView mLicensesIcon;
    @BindView(R2.id.image)
    ImageView mImageView;
    @BindView(R2.id.profile)
    CircularImageView mProfile;
    @BindView(R2.id.about_desc)
    HtmlTextView mAboutDesc;
    @BindView(R2.id.email)
    TextView mEmail;
    @BindView(R2.id.link1)
    TextView mLink1;
    @BindView(R2.id.link2)
    TextView mLink2;
    @BindView(R2.id.dev_google_plus)
    TextView mDevGooglePlus;
    @BindView(R2.id.dev_github)
    TextView mDevGitHub;

    @Nullable
    @Override
public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
    @Override
    public void onActivityCreated(@Nullable Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
        ViewCompat.setNestedScrollingEnabled(mScrollView, false);
        ViewHelper.resetNavigationBarBottomPadding(getActivity(), mScrollView,
                getActivity().getResources().getConfiguration().orientation);

        initImageHeader();
        initProfileImage();
        initAbout();

        int color = ColorHelper.getAttributeColor(getActivity(), android.R.attr.textColorPrimary);

        mLicensesIcon.setImageDrawable(DrawableHelper.getTintedDrawable(
                getActivity(), R.drawable.ic_toolbar_licenses, color));

        if (getActivity().getResources().getBoolean(R.bool.show_contributors_dialog)) {
            mContributorsIcon.setImageDrawable(DrawableHelper.getTintedDrawable(
                    getActivity(), R.drawable.ic_toolbar_people, color));
            mContributors.setOnClickListener(this);
            mCardContributors.setVisibility(View.VISIBLE);
        }

        mLicenses.setOnClickListener(this);

        mEmail.setOnClickListener(this);
        mLink1.setOnClickListener(this);
        mLink2.setOnClickListener(this);
        mDevGooglePlus.setOnClickListener(this);
        mDevGitHub.setOnClickListener(this);
    }

    @Override
    public void onConfigurationChanged(Configuration newConfig) {
        super.onConfigurationChanged(newConfig);
        ViewHelper.resetNavigationBarBottomPadding(getActivity(), mScrollView,
                getActivity().getResources().getConfiguration().orientation);
    }

    @Override
    public void onClick(View view) {
        int id = view.getId();
        if (id == R.id.contributors) {
            CreditsFragment.showCreditsDialog(getActivity().getSupportFragmentManager(), Extras.TYPE_CONTRIBUTORS);
            return;
        } else if (id == R.id.licenses) {
            LicensesFragment.showLicensesDialog(getActivity().getSupportFragmentManager());
            return;
        }

        Intent intent = null;
        if (id == R.id.email) {
            try {
                final Intent email = new Intent(Intent.ACTION_SENDTO, Uri.fromParts(
                        "mailto", getActivity().getResources().getString(
                                R.string.about_email), null));
                email.putExtra(Intent.EXTRA_SUBJECT, (getActivity().getResources().getString(
                        R.string.app_name)));
                getActivity().startActivity(Intent.createChooser(email,
                        getActivity().getResources().getString(R.string.email_client)));
                return;
            }
            catch (ActivityNotFoundException e) {
                Log.d(Extras.LOG_TAG, Log.getStackTraceString(e));
            }
            return;
        } else if (id == R.id.link1) {
            intent = new Intent(Intent.ACTION_VIEW, Uri.parse(
                    getActivity().getResources().getString(R.string.about_link_1_url)));
        } else if (id == R.id.link2) {
            intent = new Intent(Intent.ACTION_VIEW, Uri.parse(
                    getActivity().getResources().getString(R.string.about_link_2_url)));
        } else if (id == R.id.dev_github) {
            intent = new Intent(Intent.ACTION_VIEW, Uri.parse(getActivity()
                    .getResources().getString(R.string.about_dashboard_dev_github_url)));
        } else if (id == R.id.dev_google_plus) {
            intent = new Intent(Intent.ACTION_VIEW, Uri.parse(getActivity()
                    .getResources().getString(R.string.about_dashboard_dev_google_plus_url)));
        }

        try {
            getActivity().startActivity(intent);
        } catch (NullPointerException | ActivityNotFoundException e) {
            Log.d(Extras.LOG_TAG, Log.getStackTraceString(e));
        }
    }

    private void initAbout() {
        String desc = getActivity().getResources().getString(R.string.about_desc);
        mAboutDesc.setHtml(desc);

        String email = getActivity().getResources().getString(R.string.about_email);
        if (email.length() == 0) mEmail.setVisibility(View.GONE);
        String link2 = getActivity().getResources().getString(R.string.about_link_2_url);
        if (link2.length() == 0) mLink2.setVisibility(View.GONE);
    }

    private void initImageHeader() {
        String url = getActivity().getString(R.string.about_image);
        if (ColorHelper.isValidColor(url)) {
            mImageView.setBackgroundColor(Color.parseColor(url));
            return;
        }

        if (!URLUtil.isValidUrl(url)) {
            url = "drawable://" + DrawableHelper.getResourceId(getActivity(), url);
        }

        ImageLoader.getInstance().displayImage(url, mImageView,
                ImageConfig.getDefaultImageOptions(true));
    }

    private void initProfileImage() {
        String url = getActivity().getResources().getString(R.string.about_profile_image);
        if (!URLUtil.isValidUrl(url)) {
            url = "drawable://" + DrawableHelper.getResourceId(getActivity(), url);
        }

        ImageLoader.getInstance().displayImage(url, mProfile,
                ImageConfig.getDefaultImageOptions(true));
    }
}
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.v4.app.Fragment;
import android.support.v4.view.ViewCompat;
import android.support.v4.widget.SwipeRefreshLayout;
import android.support.v7.widget.DefaultItemAnimator;
import android.support.v7.widget.GridLayoutManager;
import com.dm.wallpaper.board.databases.Database;
import com.dm.wallpaper.board.helpers.ViewHelper;
import com.dm.wallpaper.board.items.Wallpaper;
import com.dm.wallpaper.board.utils.Extras;
import com.dm.wallpaper.board.utils.listeners.WallpaperListener;
import com.pluscubed.recyclerfastscroll.RecyclerFastScroller;

import java.util.ArrayList;
import java.util.List;

    @BindView(R2.id.recyclerview)
    RecyclerView mRecyclerView;
    @BindView(R2.id.fastscroll)
    RecyclerFastScroller mFastScroll;
    @BindView(R2.id.swipe)
    SwipeRefreshLayout mSwipe;

public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
    @Override
    public void onActivityCreated(@Nullable Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
        ViewCompat.setNestedScrollingEnabled(mRecyclerView, false);
        ViewHelper.resetNavigationBarBottomPadding(getActivity(), mRecyclerView,
                getActivity().getResources().getConfiguration().orientation);
        mSwipe.setEnabled(false);

        mRecyclerView.setItemAnimator(new DefaultItemAnimator());
        mRecyclerView.setLayoutManager(new GridLayoutManager(getActivity(),
                getActivity().getResources().getInteger(R.integer.column_num)));
        mRecyclerView.setHasFixedSize(false);
        mFastScroll.attachRecyclerView(mRecyclerView);

        getWallpapers();
    }
public void onActivityCreated(@Nullable Bundle savedInstanceState) {
    public void onConfigurationChanged(Configuration newConfig) {
        super.onConfigurationChanged(newConfig);
        ViewHelper.resetSpanCount(getActivity(), mRecyclerView);
        ViewHelper.resetNavigationBarBottomPadding(getActivity(), mRecyclerView, newConfig.orientation);
    }

    @Override
public void onDestroy() {
    }

    @Override
    public void OnWallpaperSelected(int position) {
        if (mRecyclerView == null) return;
        if (position < 0 || position > mRecyclerView.getAdapter().getItemCount()) return;

protected Boolean doInBackground(Void... voids) {
                        wallpapers = database.getFavoriteWallpapers();
                        return true;
                    } catch (Exception e) {
                        Log.d(Extras.LOG_TAG, Log.getStackTraceString(e));
                        return false;
                    }
                }
import android.support.annotation.Nullable;
import android.support.v4.app.Fragment;
import android.support.v4.view.ViewCompat;
import android.support.v4.widget.NestedScrollView;
import android.support.v7.widget.AppCompatCheckBox;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.afollestad.materialdialogs.MaterialDialog;
import com.dm.wallpaper.board.R;
import com.dm.wallpaper.board.R2;
import com.dm.wallpaper.board.helpers.ViewHelper;
import com.dm.wallpaper.board.preferences.Preferences;
import com.dm.wallpaper.board.utils.Extras;

import java.io.File;
import java.text.DecimalFormat;
import java.text.NumberFormat;

import butterknife.BindView;
import butterknife.ButterKnife;
 * limitations under the License.
 */

public class SettingsFragment extends Fragment implements View.OnClickListener {

    @BindView(R2.id.pref_cache_clear)
    LinearLayout mCacheClear;
    @BindView(R2.id.pref_cache_size)
    TextView mCacheSize;
    @BindView(R2.id.pref_dark_theme)
    LinearLayout mDarkTheme;
    @BindView(R2.id.pref_dark_theme_check)
    AppCompatCheckBox mDarkThemeCheck;
    @BindView(R2.id.pref_walls_directory)
    TextView mWallsDirectory;
    @BindView(R2.id.scrollview)
    NestedScrollView mScrollView;

    private File mCache;

    @Nullable
    @Override
public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
    @Override
    public void onActivityCreated(@Nullable Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
        ViewCompat.setNestedScrollingEnabled(mScrollView, false);
        ViewHelper.resetNavigationBarBottomPadding(getActivity(), mScrollView,
                getActivity().getResources().getConfiguration().orientation);
        mCacheClear.setOnClickListener(this);
        mDarkTheme.setOnClickListener(this);

        if (Preferences.getPreferences(getActivity()).getWallsDirectory().length() > 0) {
            String directory = Preferences.getPreferences(
                    getActivity()).getWallsDirectory() + File.separator;
            mWallsDirectory.setText(directory);
        }

        initSettings();
    }

    @Override
    public void onConfigurationChanged(Configuration newConfig) {
        super.onConfigurationChanged(newConfig);
        ViewHelper.resetNavigationBarBottomPadding(getActivity(), mScrollView,
                getActivity().getResources().getConfiguration().orientation);
    }

    @Override
    public void onClick(View view) {
        int id = view.getId();
        if (id == R.id.pref_cache_clear) {
            new MaterialDialog.Builder(getActivity())
                    .title(R.string.pref_data_cache)
                    .content(R.string.pref_data_cache_clear_dialog)
                    .positiveText(R.string.clear)
                    .negativeText(android.R.string.cancel)
                    .onPositive((dialog, which) -> {
                        try {
                            clearCache(mCache);
                            initSettings();

                            Toast.makeText(getActivity(), getActivity()
                                            .getResources().getString(
                                            R.string.pref_data_cache_cleared),
                                    Toast.LENGTH_LONG).show();
                        } catch (Exception e) {
                            Log.d(Extras.LOG_TAG, Log.getStackTraceString(e));
                        }
                    })
                    .show();
        } else if (id == R.id.pref_dark_theme) {
            Preferences.getPreferences(getActivity()).setDarkTheme(!mDarkThemeCheck.isChecked());
            mDarkThemeCheck.setChecked(!mDarkThemeCheck.isChecked());
            getActivity().recreate();
        }
    }

    private void initSettings() {
        mCache = new File(getActivity().getCacheDir().toString());

        double cache = (double) cacheSize(mCache)/1024/1024;
        NumberFormat formatter = new DecimalFormat("#0.00");
        String cacheSize = getActivity().getResources().getString(
                R.string.pref_data_cache_size)
                +" "+ (formatter.format(cache)) + " MB";

        mCacheSize.setText(cacheSize);
        mDarkThemeCheck.setChecked(Preferences.getPreferences(getActivity()).isDarkTheme());
    }

    private void clearCache(File fileOrDirectory) {
        if (fileOrDirectory.isDirectory())
            for (File child : fileOrDirectory.listFiles())
                clearCache(child);
        fileOrDirectory.delete();
    }

    private long cacheSize(File dir) {
        if (dir.exists()) {
            long result = 0;
            File[] fileList = dir.listFiles();
            for (File aFileList : fileList) {
                if (aFileList.isDirectory()) {
                    result += cacheSize(aFileList);
                } else {
                    result += aFileList.length();
                }
            }
            return result;
        }
        return 0;
    }
}
import com.dm.wallpaper.board.helpers.SoftKeyboardHelper;
import com.dm.wallpaper.board.helpers.ViewHelper;
import com.dm.wallpaper.board.items.Wallpaper;
import com.dm.wallpaper.board.utils.Extras;
import com.dm.wallpaper.board.utils.listeners.WallpaperListener;
import com.pluscubed.recyclerfastscroll.RecyclerFastScroller;

import java.util.ArrayList;
import java.util.List;

    @BindView(R2.id.recyclerview)
    RecyclerView mRecyclerView;
    @BindView(R2.id.fastscroll)
    RecyclerFastScroller mFastScroll;
    @BindView(R2.id.swipe)
    SwipeRefreshLayout mSwipe;
    @BindView(R2.id.search_result)
public void onActivityCreated(@Nullable Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
        setHasOptionsMenu(true);
        ViewCompat.setNestedScrollingEnabled(mRecyclerView, false);
        ViewHelper.resetNavigationBarBottomPadding(getActivity(), mRecyclerView,
                getActivity().getResources().getConfiguration().orientation);
        mSwipe.setEnabled(false);

        mRecyclerView.setItemAnimator(new DefaultItemAnimator());
        mRecyclerView.setLayoutManager(new GridLayoutManager(getActivity(),
                getActivity().getResources().getInteger(R.integer.column_num)));
        mRecyclerView.setHasFixedSize(false);
        mFastScroll.attachRecyclerView(mRecyclerView);

        getWallpapers();
    }
public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
        super.onCreateOptionsMenu(menu, inflater);
        inflater.inflate(R.menu.menu_wallpaper_search, menu);
        MenuItem search = menu.findItem(R.id.menu_search);
        int color = ColorHelper.getAttributeColor(getActivity(), R.attr.search_toolbar_icon);
        search.setIcon(DrawableHelper.getTintedDrawable(getActivity(),
                R.drawable.ic_toolbar_search, color));

public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
        mSearchView.clearFocus();

        ViewHelper.changeSearchViewTextColor(mSearchView, color,
                ColorHelper.getAttributeColor(getActivity(), R.attr.search_toolbar_hint));
        View view = mSearchView.findViewById(android.support.v7.appcompat.R.id.search_plate);
        if (view != null) view.setBackgroundColor(Color.TRANSPARENT);

public boolean onQueryTextSubmit(String string) {
    public void onConfigurationChanged(Configuration newConfig) {
        super.onConfigurationChanged(newConfig);
        ViewHelper.resetSpanCount(getActivity(), mRecyclerView);
        ViewHelper.resetNavigationBarBottomPadding(getActivity(), mRecyclerView, newConfig.orientation);
    }

    @Override
public void onDestroy() {
    }

    @Override
    public void OnWallpaperSelected(int position) {
        if (mAdapter == null) return;
        if (position < 0 || position > mAdapter.getItemCount()) return;

private void filterSearch(String query) {
            }
            else mSearchResult.setVisibility(View.GONE);
        } catch (Exception e) {
            Log.d(Extras.LOG_TAG, Log.getStackTraceString(e));
        }
    }

protected Boolean doInBackground(Void... voids) {
                        wallpapers = database.getFilteredWallpapers();
                        return true;
                    } catch (Exception e) {
                        Log.d(Extras.LOG_TAG, Log.getStackTraceString(e));
                        return false;
                    }
                }
import android.support.v4.app.FragmentTransaction;
import android.support.v4.content.ContextCompat;
import android.support.v4.view.MenuItemCompat;
import android.support.v4.view.ViewCompat;
import android.support.v4.widget.SwipeRefreshLayout;
import android.support.v7.widget.DefaultItemAnimator;
import android.support.v7.widget.GridLayoutManager;
import com.dm.wallpaper.board.utils.Animator;
import com.dm.wallpaper.board.utils.Extras;
import com.dm.wallpaper.board.utils.ListUtils;
import com.dm.wallpaper.board.utils.listeners.SearchListener;
import com.dm.wallpaper.board.utils.listeners.WallpaperBoardListener;
import com.dm.wallpaper.board.utils.listeners.WallpaperListener;
import com.pluscubed.recyclerfastscroll.RecyclerFastScroller;
import com.rafakob.drawme.DrawMeButton;

import java.io.InputStream;

    @BindView(R2.id.recyclerview)
    RecyclerView mRecyclerView;
    @BindView(R2.id.fastscroll)
    RecyclerFastScroller mFastScroll;
    @BindView(R2.id.swipe)
    SwipeRefreshLayout mSwipe;
    @BindView(R2.id.progress)
public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
    @Override
    public void onActivityCreated(@Nullable Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
        ViewCompat.setNestedScrollingEnabled(mRecyclerView, false);
        ViewHelper.resetNavigationBarBottomPadding(getActivity(), mRecyclerView,
                getActivity().getResources().getConfiguration().orientation);

        mProgress.getIndeterminateDrawable().setColorFilter(ColorHelper.getAttributeColor(
                getActivity(), R.attr.colorAccent), PorterDuff.Mode.SRC_IN);

        mRecyclerView.setItemAnimator(new DefaultItemAnimator());
        mRecyclerView.setLayoutManager(new GridLayoutManager(getActivity(),
                getActivity().getResources().getInteger(R.integer.column_num)));
        mRecyclerView.setHasFixedSize(false);
        mFastScroll.attachRecyclerView(mRecyclerView);

        mSwipe.setColorSchemeColors(ColorHelper.getAttributeColor(
                getActivity(), R.attr.colorAccent));
public void onActivityCreated(@Nullable Bundle savedInstanceState) {
    public void onConfigurationChanged(Configuration newConfig) {
        super.onConfigurationChanged(newConfig);
        ViewHelper.resetSpanCount(getActivity(), mRecyclerView);
        ViewHelper.resetNavigationBarBottomPadding(getActivity(), mRecyclerView, newConfig.orientation);
    }

    @Override
public boolean onMenuItemActionExpand(MenuItem item) {

                setHasOptionsMenu(false);
                SearchListener listener = (SearchListener) getActivity();
                listener.OnSearchExpanded(true);

                FragmentTransaction ft = fm.beginTransaction()
                        .replace(R.id.container, new WallpaperSearchFragment(),
public void onDestroy() {
    }

    @Override
    public void OnWallpaperSelected(int position) {
        if (mAdapter == null) return;
        if (position < 0 || position > mAdapter.getItemCount()) return;

public void initPopupBubble() {
                Animator.startAlphaAnimation(getActivity().findViewById(R.id.popup_bubble), 200, View.GONE);
                getWallpapers(true);
            });
            Animator.startSlideDownAnimation(getActivity(), popupBubble, null);
        }
    }

protected Boolean doInBackground(Void... voids) {
                        }
                        return false;
                    } catch (Exception e) {
                        Log.d(Extras.LOG_TAG, Log.getStackTraceString(e));
                        return false;
                    }
                }
protected void onPostExecute(Boolean aBoolean) {
                    mRecyclerView.setAdapter(mAdapter);

                    WallpaperBoardListener listener = (WallpaperBoardListener) getActivity();
                    listener.OnWallpapersChecked(new Intent().putExtra(Extras.EXTRA_SIZE,
                            Preferences.getPreferences(getActivity()).getAvailableWallpapersCount()));
                } else {
                    Toast.makeText(getActivity(), R.string.connection_failed, Toast.LENGTH_LONG).show();
import com.dm.wallpaper.board.adapters.CreditsAdapter;
import com.dm.wallpaper.board.items.Credit;
import com.dm.wallpaper.board.utils.Extras;
import org.xmlpull.v1.XmlPullParser;

import java.util.ArrayList;

public class CreditsFragment extends DialogFragment {

    private static final String TAG = "com.field.guide.dialog.credits";

    private static CreditsFragment newInstance(int type) {
public static void showCreditsDialog(FragmentManager fm, int type) {
        } catch (IllegalStateException | IllegalArgumentException ignored) {}
    }

    @BindView(R2.id.listview)
    ListView mListView;

    private int mType;

    private AsyncTask<Void, Void, Boolean> mGetCredits;

    @Override
    public void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
protected Boolean doInBackground(Void... voids) {
                        }
                        return true;
                    } catch (Exception e) {
                        Log.d(Extras.LOG_TAG, Log.getStackTraceString(e));
                        return false;
                    }
                }
protected void onPostExecute(Boolean aBoolean) {
            }
        }.execute();
    }

}

public class FilterFragment extends DialogFragment {

    private boolean mIsMuzei;

    private static final String MUZEI = "muzei";
public static void showFilterDialog(FragmentManager fm, boolean isMuzei) {
        } catch (IllegalArgumentException | IllegalStateException ignored) {}
    }

    @BindView(R2.id.listview)
    ListView listView;

    @NonNull
    @Override
    public Dialog onCreateDialog(Bundle savedInstanceState) {
public void onActivityCreated(Bundle savedInstanceState) {

    @Override
    public void onDismiss(DialogInterface dialog) {
        FragmentManager fm = getActivity().getSupportFragmentManager();
        if (fm == null) return;

import com.anjlab.android.iab.v3.BillingProcessor;
import com.anjlab.android.iab.v3.SkuDetails;
import com.dm.wallpaper.board.R;
import com.dm.wallpaper.board.adapters.InAppBillingAdapter;
import com.dm.wallpaper.board.items.InAppBilling;
import com.dm.wallpaper.board.utils.Extras;
import com.dm.wallpaper.board.utils.listeners.InAppBillingListener;

/*
 * Wallpaper Board
 *

public class InAppBillingFragment extends DialogFragment {

    private static BillingProcessor mBillingProcessor;

    private static final String TAG = "com.dm.wallpaper.board.dialog.inappbilling";
public static void showInAppBillingDialog(@NonNull FragmentManager fm, BillingPr
        } catch (IllegalArgumentException | IllegalStateException ignored) {}
    }

    private ListView mInAppList;
    private ProgressBar mProgress;

    private String mKey;
    private String[] mProductsId;

    private InAppBillingAdapter mAdapter;
    private AsyncTask<Void, Void, Boolean> mLoadInAppProducts;

    @Override
    public void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
public Dialog onCreateDialog(Bundle savedInstanceState) {
                    if (mLoadInAppProducts == null) {
                        try {
                            InAppBillingListener listener = (InAppBillingListener) getActivity();
                            listener.OnInAppBillingSelected(mAdapter.getSelectedProduct());
                        } catch (Exception ignored) {}
                        dismiss();
                    }
public Dialog onCreateDialog(Bundle savedInstanceState) {
        dialog.show();
        setCancelable(false);

        mInAppList = (ListView) dialog.findViewById(R.id.inapp_list);
        mProgress = (ProgressBar) dialog.findViewById(R.id.progress);
        return dialog;
    }

protected Boolean doInBackground(Void... voids) {
                        }
                        return true;
                    } catch (Exception e) {
                        Log.d(Extras.LOG_TAG, Log.getStackTraceString(e));
                        return false;
                    }
                }
protected void onPostExecute(Boolean aBoolean) {
                mProgress.setVisibility(View.GONE);
                if (aBoolean) {
                    mAdapter = new InAppBillingAdapter(getActivity(), inAppBillings);
                    mInAppList.setAdapter(mAdapter);
                } else {
                    dismiss();
                    if (!isBillingNotReady)
protected void onPostExecute(Boolean aBoolean) {

        }.execute();
    }

}

import com.afollestad.materialdialogs.MaterialDialog;
import com.dm.wallpaper.board.R;
import com.dm.wallpaper.board.utils.Extras;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;

import butterknife.ButterKnife;

/*

public class LicensesFragment extends DialogFragment {

    private static final String TAG = "com.dm.wallpaper.board.dialog.licenses";

    private static LicensesFragment newInstance() {
public static void showLicensesDialog(FragmentManager fm) {
        } catch (IllegalStateException | IllegalArgumentException ignored) {}
    }

    private WebView mWebView;

    private AsyncTask<Void, Void, Boolean> mLoadLicenses;

    @NonNull
    @Override
    public Dialog onCreateDialog(Bundle savedInstanceState) {
public Dialog onCreateDialog(Bundle savedInstanceState) {
        MaterialDialog dialog = builder.build();
        dialog.show();

        mWebView = ButterKnife.findById(dialog, R.id.webview);
        return dialog;
    }

protected Boolean doInBackground(Void... voids) {
                        bufferedReader.close();
                        return true;
                    } catch (Exception e) {
                        Log.d(Extras.LOG_TAG, Log.getStackTraceString(e));
                        return false;
                    }
                }
protected void onPostExecute(Boolean aBoolean) {

        }.execute();
    }

}


import com.dm.wallpaper.board.R2;
import com.dm.wallpaper.board.helpers.ColorHelper;
import com.dm.wallpaper.board.helpers.DrawableHelper;
import com.dm.wallpaper.board.utils.Extras;
import com.dm.wallpaper.board.utils.listeners.RefreshDurationListener;

import butterknife.BindView;

public class RefreshDurationFragment extends DialogFragment implements View.OnClickListener {

    private static final String MINUTE = "minute";
    private static final String ROTATE_TIME = "rotate_time";
    private static final String TAG = "com.dm.wallpaper.board.dialog.refresh.duration";
public static void showRefreshDurationDialog(FragmentManager fm, int rotateTime,
        } catch (IllegalStateException | IllegalArgumentException ignored) {}
    }

    @BindView(R2.id.number_picker)
    NumberPicker mNumberPicker;
    @BindView(R2.id.minute)
    AppCompatRadioButton mMinute;
    @BindView(R2.id.hour)
    AppCompatRadioButton mHour;

    private int mRotateTime;
    private boolean mIsMinute;

    @NonNull
    @Override
    public Dialog onCreateDialog(Bundle savedInstanceState) {
public void onActivityCreated(Bundle savedInstanceState) {
    @Override
    public void onDismiss(DialogInterface dialog) {
        RefreshDurationListener listener = (RefreshDurationListener) getActivity();
        listener.OnRefreshDurationSet(mNumberPicker.getValue(), mMinute.isChecked());
        super.onDismiss(dialog);
    }

private void setDividerColor (NumberPicker picker) {
                    pf.set(picker, DrawableHelper.getTintedDrawable(
                            getActivity(), R.drawable.numberpicker_divider, color));
                } catch (Exception e) {
                    Log.d(Extras.LOG_TAG, Log.getStackTraceString(e));
                }
                break;
            }

import com.afollestad.materialdialogs.MaterialDialog;
import com.danimahardhika.cafebar.CafeBar;
import com.dm.wallpaper.board.R;
import com.dm.wallpaper.board.helpers.ColorHelper;
import com.dm.wallpaper.board.helpers.DrawableHelper;
import com.dm.wallpaper.board.helpers.FileHelper;

import java.io.File;

/*
 * Wallpaper Board
 *

public class WallpaperOptionsFragment extends DialogFragment implements View.OnClickListener {

    private static final String TAG = "com.dm.wallpaper.board.dialog.wallpaper.options";

    private static WallpaperOptionsFragment newInstance(String url, String name) {
public static void showWallpaperOptionsDialog(FragmentManager fm, String url, St
        } catch (IllegalArgumentException | IllegalStateException ignored) {}
    }

    private LinearLayout mApply;
    private LinearLayout mSave;
    private ImageView mApplyIcon;
    private ImageView mSaveIcon;

    private String mName;
    private String mUrl;

    @NonNull
    @Override
    public Dialog onCreateDialog(Bundle savedInstanceState) {
public Dialog onCreateDialog(Bundle savedInstanceState) {
        MaterialDialog dialog = builder.build();
        dialog.show();

        mApply = (LinearLayout) dialog.findViewById(R.id.apply);
        mSave = (LinearLayout) dialog.findViewById(R.id.save);
        mApplyIcon = (ImageView) dialog.findViewById(R.id.apply_icon);
        mSaveIcon = (ImageView) dialog.findViewById(R.id.save_icon);
        return dialog;
    }

public void onClick(View view) {
                if (target.exists()) {
                    Context context = getActivity();
                    CafeBar.builder(getActivity())
                            .autoDismiss(false)
                            .swipeToDismiss(false)
                            .floating(true)
                            .fitSystemWindow(true)
                            .maxLines(4)
                            .content(String.format(getResources().getString(R.string.wallpaper_download_exist),
                                    ("\"" +mName + FileHelper.IMAGE_EXTENSION+ "\"")))

import com.afollestad.materialdialogs.MaterialDialog;
import com.dm.wallpaper.board.R;
import com.dm.wallpaper.board.preferences.Preferences;

/*
 * Wallpaper Board
 *

public class WallpaperSettingsFragment extends DialogFragment implements View.OnClickListener {

    private static final String TAG = "com.dm.wallpaper.board.dialog.wallpaper.settings";

    private static WallpaperSettingsFragment newInstance() {
        return new WallpaperSettingsFragment();
    }
public static void showWallpaperSettings(FragmentManager fm) {
        } catch (IllegalStateException | IllegalArgumentException ignored) {}
    }

    private AppCompatRadioButton mEnableScrollRadio;
    private AppCompatRadioButton mDisableScrollRadio;
    private LinearLayout mEnableScroll;
    private LinearLayout mDisableScroll;

    @NonNull
    @Override
    public Dialog onCreateDialog(Bundle savedInstanceState) {
public Dialog onCreateDialog(Bundle savedInstanceState) {
        MaterialDialog dialog = builder.build();
        dialog.show();

        mEnableScrollRadio = (AppCompatRadioButton) dialog.findViewById(R.id.enable_scroll_radio);
        mDisableScrollRadio = (AppCompatRadioButton) dialog.findViewById(R.id.disable_scroll_radio);
        mEnableScroll = (LinearLayout) dialog.findViewById(R.id.enable_scroll);
        mDisableScroll = (LinearLayout) dialog.findViewById(R.id.disable_scroll);
        return dialog;
    }

private void toggleRadio() {
        mEnableScrollRadio.setChecked(scroll);
        mDisableScrollRadio.setChecked(!scroll);
    }

}
public static int setColorAlpha(@ColorInt int color, float alpha) {
        return Color.argb(alpha2, red, green, blue);
    }

    public static ColorStateList getColorStateList(int attr, @ColorInt int color, @ColorInt int color2) {
        int[][] states = new int[][] {
                new int[] {attr},
                new int[] {}
        };
        int[] colors = new int[] {
                color,
                color2
        };
        return new ColorStateList(states, colors);
    }

    private static boolean isLightToolbar(@NonNull Context context) {
        int color = getAttributeColor(context, R.attr.toolbar_color);
        int red = Color.red(color);
        int green = Color.green(color);
        int blue = Color.blue(color);

import com.dm.wallpaper.board.BuildConfig;
import com.dm.wallpaper.board.R;
import com.dm.wallpaper.board.utils.Extras;

import java.io.BufferedWriter;
import java.io.File;
public static String buildCrashLog(@NonNull Context context, @NonNull File folde

            return fileDir.toString();
        } catch (Exception | OutOfMemoryError e) {
            Log.d(Extras.LOG_TAG, Log.getStackTraceString(e));
        }
        return null;
    }
public static String getDeviceInfoForCrashReport(@NonNull Context context) {
                "\nApp Name : " +context.getResources().getString(R.string.app_name)
                + "\n"+ getDeviceInfo(context);
    }

}
public static Drawable getTintedDrawable(@NonNull Context context, @DrawableRes
            return null;
        }
    }

}
import android.support.v4.content.FileProvider;
import android.util.Log;

import com.dm.wallpaper.board.utils.Extras;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
public class FileHelper {

    public static final String IMAGE_EXTENSION = ".jpeg";

    static boolean copyFile(@NonNull File file, @NonNull File target) {
        try {
static boolean copyFile(@NonNull File file, @NonNull File target) {
            outputStream.close();
            return true;
        } catch (Exception e) {
            Log.d(Extras.LOG_TAG, Log.getStackTraceString(e));
        }
        return false;
    }
public static Uri getUriFromFile(Context context, String applicationId, File fil
        try {
            return FileProvider.getUriForFile(context, applicationId + ".fileProvider", file);
        } catch (IllegalArgumentException e) {
            Log.d(Extras.LOG_TAG, Log.getStackTraceString(e));
        }
        return null;
    }
public InAppBillingHelper(@NonNull Context context) {
    @Override
    public void onProductPurchased(String productId, TransactionDetails details) {
        InAppBillingListener listener = (InAppBillingListener) mContext;
        listener.OnInAppBillingConsume(productId);
    }

    @Override
public void onPurchaseHistoryRestored() {
    public void onBillingError(int errorCode, Throwable error) {
        if (errorCode == Constants.BILLING_ERROR_FAILED_TO_INITIALIZE_PURCHASE) {
            InAppBillingListener listener = (InAppBillingListener) mContext;
            listener.OnInAppBillingInitialized(false);
        }
    }

    @Override
    public void onBillingInitialized() {
        InAppBillingListener listener = (InAppBillingListener) mContext;
        listener.OnInAppBillingInitialized(true);
    }
}
import android.provider.Settings.Secure;
import android.support.annotation.NonNull;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.widget.Toast;

import com.afollestad.materialdialogs.MaterialDialog;
import com.dm.wallpaper.board.R;
import com.dm.wallpaper.board.preferences.Preferences;
import com.dm.wallpaper.board.utils.Extras;
import com.google.android.vending.licensing.AESObfuscator;
import com.google.android.vending.licensing.LicenseChecker;
import com.google.android.vending.licensing.LicenseCheckerCallback;
    private final Context mContext;
    private MaterialDialog mDialog;

    public static LicenseHelper getLicenseChecker(@NonNull Context context) {
        return new LicenseHelper(context);
    }
public void checkLicense(String licenseKey, byte[] salt) {
            checker.checkAccess(this);
            getDialog().show();
        } else {
            Log.d(Extras.LOG_TAG, "Unable to check license, random bytes is wrong!");
        }
    }

private void showLicenseDialog(int reason) {
                .content(message)
                .positiveText(R.string.close)
                .onPositive((dialog, which) -> {
                    OnLicenseChecked(reason);
                    dialog.dismiss();
                })
                .cancelable(false)
private void showRetryDialog() {
                .show();
    }

    private void OnLicenseChecked(int reason) {
        Preferences.getPreferences(mContext).setFirstRun(false);
        if (reason == Policy.LICENSED) {
            Preferences.getPreferences(mContext).setLicensed(true);
private int getRandomInt(int size) {
            return 0;
        }
    }

}
public static void requestStoragePermission(@NonNull Context context) {
    public static void showPermissionStorageDenied(@NonNull Context context) {
        Toast.makeText(context, R.string.permission_storage_denied, Toast.LENGTH_LONG).show();
    }

}
public static void openKeyboard(@NonNull Context context) {
        }
    }

/*
     * This code was taken from https://github.com/mikepenz/MaterialDrawer/issues/95#issuecomment-80519589
     */

import android.content.Context;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.Color;
import android.graphics.Point;
import android.graphics.drawable.ColorDrawable;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.TransitionDrawable;
import android.os.Build;
import android.support.annotation.AttrRes;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.design.widget.AppBarLayout;
import android.support.design.widget.CollapsingToolbarLayout;
import android.support.design.widget.CoordinatorLayout;
import android.support.v4.view.ViewCompat;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.GridLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.util.Log;
import android.util.TypedValue;
import android.view.Display;
import android.widget.TextView;

import com.dm.wallpaper.board.R;
import com.dm.wallpaper.board.utils.Extras;
import com.nostra13.universalimageloader.core.ImageLoader;

/*

public class ViewHelper {

    public static void resetSpanCount(@NonNull Context context, @NonNull RecyclerView recyclerView) {
        try {
            GridLayoutManager manager = (GridLayoutManager) recyclerView.getLayoutManager();
            manager.setSpanCount(context.getResources().getInteger(R.integer.column_num));
            manager.requestLayout();
        } catch (Exception e) {
            Log.d(Extras.LOG_TAG, Log.getStackTraceString(e));
        }
    }

public static void disableTranslucentNavigationBar(@NonNull Context context) {
        }
    }

    public static void resetNavigationBarBottomPadding(@NonNull Context context, @Nullable View view,
                                                       int orientation) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
            if (view != null) {
                int left = view.getPaddingLeft();
                int right = view.getPaddingRight();
                int bottom = view.getPaddingBottom();
                int top = view.getPaddingTop();
                int navBar = getNavigationBarHeight(context);

                if (bottom > navBar) bottom -= navBar;
                boolean tabletMode = context.getResources().getBoolean(R.bool.tablet_mode);

                if (tabletMode || orientation == Configuration.ORIENTATION_PORTRAIT) {
                    view.setPadding(left, top, right, (bottom + navBar));
                    return;
                }

                view.setPadding(left, top, right, bottom);
            }
        }
    }

    public static void disableAppBarDrag(@Nullable AppBarLayout appBar) {
        if (appBar != null) {
            if (ViewCompat.isLaidOut(appBar)) {
                CoordinatorLayout.LayoutParams params = (CoordinatorLayout.LayoutParams)
                        appBar.getLayoutParams();
                AppBarLayout.Behavior behavior = (AppBarLayout.Behavior) params.getBehavior();
                if (behavior != null) {
                    behavior.setDragCallback(new AppBarLayout.Behavior.DragCallback() {
                        @Override
                        public boolean canDrag(@NonNull AppBarLayout appBarLayout) {
                            return false;
                        }
                    });
                }
            }
        }
    }

    public static int getStatusBarHeight(@NonNull Context context) {
public static void setApplicationWindowColor(@NonNull Context context) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
            TypedValue typedValue = new TypedValue();
            Resources.Theme theme = context.getTheme();
            theme.resolveAttribute(R.attr.toolbar_color, typedValue, true);
            Bitmap bitmap = ImageLoader.getInstance().loadImageSync("drawable://"
                    +DrawableHelper.getResourceId(context, "icon"));
            ((AppCompatActivity) context).setTaskDescription(new ActivityManager.TaskDescription (
public static void removeSearchViewSearchIcon(@Nullable View view) {
            }
        }
    }

    public static void changeSearchViewActionModeColor(@NonNull Context context, @Nullable View view,
                                                       @AttrRes int original, @AttrRes int target) {
        if (view != null) {
            CollapsingToolbarLayout collapsingToolbar = (CollapsingToolbarLayout) view;
            int originalColor = ColorHelper.getAttributeColor(context, original);
            int targetColor = ColorHelper.getAttributeColor(context, target);

            ColorDrawable cd1 = new ColorDrawable(originalColor);
            ColorDrawable cd2 = new ColorDrawable(targetColor);

            TransitionDrawable td = new TransitionDrawable(new Drawable[]{cd1, cd2});
            collapsingToolbar.setContentScrim(td);
            td.startTransition(200);
        }
    }

}
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.view.View;
import android.widget.Toast;

import com.afollestad.materialdialogs.MaterialDialog;
import com.danimahardhika.cafebar.CafeBar;
import com.danimahardhika.cafebar.CafeBarDuration;
import com.dm.wallpaper.board.R;
import com.dm.wallpaper.board.activities.WallpaperBoardActivity;
import com.dm.wallpaper.board.preferences.Preferences;
import com.dm.wallpaper.board.utils.Extras;
import com.dm.wallpaper.board.utils.ImageConfig;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.nostra13.universalimageloader.core.assist.FailReason;
import com.nostra13.universalimageloader.core.assist.ImageSize;
protected Boolean doInBackground(Void... voids) {
                            return true;
                        }
                    } catch (Exception e) {
                        Log.d(Extras.LOG_TAG, Log.getStackTraceString(e));
                        return false;
                    }
                }
protected void onPostExecute(Boolean aBoolean) {
                super.onPostExecute(aBoolean);
                dialog.dismiss();
                if (aBoolean) {
                    if (Preferences.getPreferences(context).getWallsDirectory().length() == 0)
                        Preferences.getPreferences(context).setWallsDirectory(output.toString());

                    context.sendBroadcast(new Intent(
                            Intent.ACTION_MEDIA_SCANNER_SCAN_FILE, Uri.fromFile(
                            new File(file.toString()))));
protected void onPostExecute(Boolean aBoolean) {
        }.execute();
    }

    private static void wallpaperSaved(@NonNull Context context, @ColorInt int color, @NonNull File file) {
        String downloaded = context.getResources().getString(
                R.string.wallpaper_downloaded);
        View rootView = ((AppCompatActivity) context).getWindow().getDecorView().findViewById(R.id.rootview);

        CafeBar.Builder builder = new CafeBar.Builder(context);
        builder.to(rootView)
                .duration(CafeBarDuration.LONG.getDuration())
                .maxLines(4)
                .floating(true)
                .swipeToDismiss(false)
                .content(downloaded + " " + file.toString())
                .icon(R.drawable.ic_toolbar_download)
                .neutralText(R.string.open)
private static void wallpaperSaved(@NonNull Context context, @ColorInt int color
                    cafeBar.dismiss();
                });

        if (rootView == null) {
            builder.fitSystemWindow(true);
        }

        CafeBar cafeBar = builder.build();
public static void applyWallpaper(@NonNull Context context, @Nullable RectF rect
        String imageUri = getWallpaperUri(context, url, name + FileHelper.IMAGE_EXTENSION);

        ImageSize imageSize = getScaledSize(context, url);
        loadBitmap(context, dialog, 1, imageUri, rectF, imageSize.getWidth(), imageSize.getHeight());
    }

    private static void loadBitmap(Context context, MaterialDialog dialog, int call, String imageUri,
                                   RectF rectF, int width, int height) {
        final AsyncTask<Bitmap, Void, Boolean> setWallpaper = getWallpaperAsync(
                context, dialog, rectF, width, height);

        dialog.setOnDismissListener(dialogInterface -> {
            ImageLoader.getInstance().stop();
            setWallpaper.cancel(true);
        });

        ImageLoader.getInstance().handleSlowNetwork(true);
        ImageLoader.getInstance().loadImage(imageUri, new ImageSize(width, height),
                ImageConfig.getWallpaperOptions(), new ImageLoadingListener() {

                    @Override
public void onLoadingFailed(String imageUri, View view, FailReason failReason) {
                        if (failReason.getType() == FailReason.FailType.OUT_OF_MEMORY) {
                            if (call <= 5) {
                                double scaleFactor = 1 - (0.1 * call);
                                int scaledWidth = Double.valueOf(width * scaleFactor).intValue();
                                int scaledHeight = Double.valueOf(height * scaleFactor).intValue();

                                RectF scaledRecF = getScaledRectF(rectF, (float) scaleFactor);
                                loadBitmap(context, dialog, (call + 1), imageUri, scaledRecF, scaledWidth, scaledHeight);
                                return;
                            }
                        }
public void onLoadingCancelled(String imageUri, View view) {
    }

    private static AsyncTask<Bitmap, Void, Boolean> getWallpaperAsync(@NonNull Context context, MaterialDialog dialog,
                                                                      RectF rectF, int width, int height) {
        return new AsyncTask<Bitmap, Void, Boolean>() {

            @Override
protected Boolean doInBackground(Bitmap... bitmaps) {
                            Bitmap bitmap = bitmaps[0];

                            if (!Preferences.getPreferences(context).isScrollWallpaper() && rectF != null) {
                                bitmap = Bitmap.createBitmap(width, height, bitmaps[0].getConfig());
                                Paint paint = new Paint();
                                paint.setFilterBitmap(true);
                                paint.setAntiAlias(true);
                                paint.setDither(true);
                                Canvas canvas = new Canvas(bitmap);
                                canvas.drawBitmap(bitmaps[0], null, rectF, paint);
                            }
protected Boolean doInBackground(Bitmap... bitmaps) {
                        }
                        return false;
                    } catch (Exception | OutOfMemoryError e) {
                        Log.d(Extras.LOG_TAG, Log.getStackTraceString(e));
                        return false;
                    }
                }
protected void onPostExecute(Boolean aBoolean) {
                super.onPostExecute(aBoolean);
                dialog.dismiss();
                if (aBoolean) {
                    Toast.makeText(context, R.string.wallpaper_applied,
                            Toast.LENGTH_LONG).show();
                } else {
                    Toast.makeText(context, R.string.wallpaper_apply_failed,
                            Toast.LENGTH_LONG).show();
@JsonObject
public class WallpaperJson {

    @JsonField(name = "name")
    public String name;

    @JsonField(name = "author")
    public String author;

    @JsonField(name = "url")
    public String url;

    @JsonField(name = "thumbUrl")
    public String thumbUrl;

    @JsonField(name = "category")
    public String category;

    @JsonField(name = "Wallpapers")
package com.dm.wallpaper.board.preferences;

/*
 * Wallpaper Board
 *
 * limitations under the License.
 */

import android.content.Context;
import android.support.annotation.NonNull;

import com.dm.wallpaper.board.helpers.PreferencesHelper;

public class Preferences {

    public static PreferencesHelper getPreferences(@NonNull Context context) {
        return new PreferencesHelper(context);
    }

}
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;

import com.dm.wallpaper.board.utils.listeners.WallpaperBoardListener;

/*

    @Override
    public void onReceive(Context context, Intent intent) {
        WallpaperBoardListener listener = (WallpaperBoardListener) context;
        listener.OnWallpapersChecked(intent);
    }
}
import com.dm.wallpaper.board.items.WallpaperJson;
import com.dm.wallpaper.board.receivers.WallpaperBoardReceiver;
import com.dm.wallpaper.board.utils.Extras;

import java.io.InputStream;
import java.net.HttpURLConnection;
protected void onHandleIntent(Intent intent) {
                if (wallpapersJson == null) return;

                int size = wallpapersJson.getWallpapers.size();
                broadcastIntent.putExtra(Extras.EXTRA_SIZE, size);
                sendBroadcast(broadcastIntent);
            }
        } catch (Exception e) {
            Log.d(Extras.LOG_TAG, Log.getStackTraceString(e));
        }
    }
}
import android.view.animation.AnimationUtils;

import com.dm.wallpaper.board.R;

/*
 * Wallpaper Board
public static void startAlphaAnimation(@Nullable View view, long duration, int v
        view.startAnimation(alphaAnimation);
    }

    public static void startSlideDownAnimation(@NonNull Context context, @NonNull View view, @Nullable View view2) {
        Animation slideDown = AnimationUtils.loadAnimation(context, R.anim.slide_down_from_top);
        slideDown.setAnimationListener(new Animation.AnimationListener() {
            @Override
            public void onAnimationStart(Animation animation) {

            }

            @Override
            public void onAnimationEnd(Animation animation) {
                if (view2 != null) startAlphaAnimation(view2, 200, View.VISIBLE);
            }

            @Override
            public void onAnimationRepeat(Animation animation) {

            }
        });
        view.startAnimation(slideDown);
        view.setVisibility(View.VISIBLE);
    }

    public static void showFab(@Nullable FloatingActionButton fab) {
public static void showFab(@Nullable FloatingActionButton fab) {
        fab.animate().setDuration(200).scaleX(1).scaleY(1).alpha(1)
                .setInterpolator(new LinearOutSlowInInterpolator());
    }

}
    public static final String EXTRA_NAME = "name";
    public static final String EXTRA_AUTHOR = "author";
    public static final String EXTRA_IMAGE = "image";
    public static final String EXTRA_SIZE = "size";
    public static final String EXTRA_KEY = "key";
    public static final String EXTRA_PRODUCT_ID = "productId";
    public static final String EXTRA_TYPE = "type";

    public static final int TYPE_CONTRIBUTORS = 1;

    public static final String LOG_TAG = "WallpaperBoard";

}
import android.support.annotation.NonNull;

import com.dm.wallpaper.board.R;
import com.nostra13.universalimageloader.cache.disc.impl.UnlimitedDiskCache;
import com.nostra13.universalimageloader.core.DisplayImageOptions;
import com.nostra13.universalimageloader.core.ImageLoaderConfiguration;
public static ImageLoaderConfiguration getImageLoaderConfiguration(@NonNull Cont
        L.writeLogs(false);
        L.writeDebugLogs(false);
        return new ImageLoaderConfiguration.Builder(context)
                .diskCacheSize(200 * 1024 * 1024)
                .threadPriority(Thread.NORM_PRIORITY - 2)
                .threadPoolSize(4)
                .tasksProcessingOrder(QueueProcessingType.FIFO)
                .diskCache(new UnlimitedDiskCache(new File(
                        context.getCacheDir().toString() + "/uil-images")))
                .build();
    }

    public static DisplayImageOptions getDefaultImageOptions(boolean cacheOnDisk) {
        DisplayImageOptions.Builder options = new DisplayImageOptions.Builder();
        options.delayBeforeLoading(10)
                .resetViewBeforeLoading(true)
                .bitmapConfig(Bitmap.Config.RGB_565)
                .imageScaleType(ImageScaleType.EXACTLY)
                .displayer(new FadeInBitmapDisplayer(700))
                .cacheOnDisk(cacheOnDisk)
                .cacheInMemory(false);
        return options.build();
    }
public static ImageSize getThumbnailSize(@NonNull Context context) {
        if (quality <= 0) quality = 1;
        return new ImageSize((50 * quality), (50 * quality));
    }

}


public interface InAppBillingListener {

    void OnInAppBillingSelected(InAppBilling product);
    void OnInAppBillingInitialized(boolean success);
    void OnInAppBillingConsume(String productId);

}

public interface RefreshDurationListener {

    void OnRefreshDurationSet(int rotateTime, boolean isMinute);

}

public interface SearchListener {

    void OnSearchExpanded(boolean expand);

}

public interface WallpaperBoardListener {

    void OnWallpapersChecked(@Nullable Intent intent);

}

public interface WallpaperListener {

    void OnWallpaperSelected(int position);

}
        android:viewportHeight="24.0">
    <path
        android:fillColor="#FF000000"
        android:pathData="M21,19V5c0,-1.1 -0.9,-2 -2,-2H5c-1.1,0 -2,0.9 -2,2v14c0,1.1 0.9,2 2,2h14c1.1,0 2,-0.9 2,-2zM8.5,13.5l2.5,3.01L14.5,12l4.5,6H5l3.5,-4.5z"/>
</vector>
        android:viewportWidth="24.0"
        android:viewportHeight="24.0">
    <path
        android:fillColor="?attr/search_toolbar_icon"
        android:pathData="M19,6.41L17.59,5 12,10.59 6.41,5 5,6.41 10.59,12 5,17.59 6.41,19 12,13.41 17.59,19 19,17.59 13.41,12z"/>
</vector>
        android:layout_width="match_parent"
        android:layout_height="?attr/actionBarSize"
        android:minHeight="?attr/actionBarSize"
        android:background="?attr/toolbar_color"
        app:theme="@style/ToolbarStyle">

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="match_parent"
            android:gravity="center_vertical"
            android:textColor="?attr/toolbar_icon"
            android:singleLine="true"
            android:ellipsize="end"
            android:text="@string/muzei_settings"
            android:textSize="@dimen/text_toolbar_title"
        android:id="@+id/muzei_save"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:padding="@dimen/card_padding"
        android:orientation="horizontal"
        android:layout_alignParentBottom="true"
        android:gravity="center"
    android:layout_height="match_parent"
    android:fitsSystemWindows="true">

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        android:gravity="center"
        android:layout_centerInParent="true">

        <ImageView
            android:layout_width="@dimen/splash_screen_logo"
            android:layout_height="@dimen/splash_screen_logo"
            android:src="@drawable/ic_splash_screen" />

        <LinearLayout
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:orientation="horizontal"
            android:gravity="center_vertical"
            android:layout_marginTop="@dimen/card_padding">

            <ProgressBar
                android:id="@+id/progress"
                android:layout_width="28dp"
                android:layout_height="28dp"
                android:visibility="invisible"
                style="?android:attr/progressBarStyle"/>

            <TextView
                android:id="@+id/splash_loading"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="@dimen/card_padding"
                android:layout_marginStart="@dimen/card_padding"
                android:textSize="@dimen/text_content"
                android:textColor="?android:attr/textColorPrimary"
                fontPath="fonts/Font-Regular.ttf"/>

        </LinearLayout>

    </LinearLayout>

    <TextView
        android:id="@+id/splash_title"
    android:id="@+id/drawer_layout"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:fitsSystemWindows="true"
    tools:openDrawer="start">

    <include layout="@layout/toolbar"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"/>

    <android.support.design.widget.NavigationView
        android:id="@+id/navigation_view"
        android:layout_width="@dimen/navigation_view_width"
        android:layout_height="match_parent"
        android:layout_gravity="start"
        android:fitsSystemWindows="true"
        android:background="?attr/main_background"
        android:theme="@style/NavigationViewStyle"
        app:headerLayout="@layout/navigation_view_header"
        app:itemIconTint="@color/navigation_view_item_highlight"
<?xml version="1.0" encoding="utf-8"?>
<FrameLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    tools:ignore="MissingPrefix"
    android:id="@+id/container"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

        android:layout_height="match_parent"
        android:fitsSystemWindows="true">

        <android.support.design.widget.CoordinatorLayout
            android:id="@+id/rootview"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:fitsSystemWindows="true">

            <android.support.design.widget.FloatingActionButton
                android:id="@+id/fab"
                android:layout_width="@dimen/fab_size"
                android:layout_height="@dimen/fab_size"
                android:layout_gravity="bottom|end"
                android:layout_marginRight="20dp"
                android:layout_marginEnd="20dp"
                android:layout_marginBottom="20dp"
                android:visibility="gone"
                app:backgroundTint="?attr/colorAccent" />

        </android.support.design.widget.CoordinatorLayout>

        <android.support.v7.widget.Toolbar
            android:id="@+id/toolbar"
            android:layout_width="match_parent"
            <LinearLayout
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:paddingTop="@dimen/card_padding"
                android:paddingBottom="@dimen/card_padding"
                android:orientation="vertical">

                <TextView
                    android:layout_height="wrap_content"
                    android:gravity="center_vertical"
                    android:textColor="@android:color/white"
                    android:singleLine="true"
                    android:ellipsize="end"
                    android:textSize="@dimen/text_toolbar_title"
                    fontPath="fonts/Font-Medium.ttf"/>

                <TextView
                    android:layout_height="wrap_content"
                    android:gravity="center_vertical"
                    android:textColor="@android:color/white"
                    android:singleLine="true"
                    android:ellipsize="end"
                    android:textSize="@dimen/text_content_title"
                    fontPath="fonts/Font-Regular.ttf"/>

            </LinearLayout>
        android:visibility="gone"
        style="?android:attr/progressBarStyleLarge"/>

</FrameLayout>
<?xml version="1.0" encoding="utf-8"?>
<FrameLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    tools:ignore="MissingPrefix"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <android.support.v4.widget.NestedScrollView
        android:id="@+id/scrollview"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:clipToPadding="false">

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="vertical"
            android:padding="@dimen/content_padding"
            android:clipToPadding="false">

            <android.support.v7.widget.CardView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                app:cardBackgroundColor="?attr/card_background"
                app:cardElevation="@dimen/card_elevation"
                app:cardUseCompatPadding="true"
                app:cardCornerRadius="@dimen/card_corner_radius">

                <RelativeLayout
                    android:layout_width="match_parent"
                    android:layout_height="match_parent">

                    <ImageView
                        android:id="@+id/image"
                        android:layout_width="match_parent"
                        android:layout_height="@dimen/about_image_height"
                        android:scaleType="centerCrop" />

                    <com.mikhaellopez.circularimageview.CircularImageView
                        android:id="@+id/profile"
                        android:layout_width="@dimen/about_profile"
                        android:layout_height="@dimen/about_profile"
                        android:layout_alignBottom="@+id/image"
                        android:layout_marginBottom="-44dp"
                        android:layout_centerHorizontal="true"
                        app:civ_border_color="?attr/card_background"
                        app:civ_border_width="4dp"
                        app:civ_shadow="true"
                        app:civ_shadow_radius="10"
                        app:civ_shadow_color="#22000000"/>

                    <LinearLayout
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:orientation="vertical"
                        android:layout_below="@+id/image"
                        android:layout_marginTop="44dp">

                        <TextView
                            android:layout_width="match_parent"
                            android:layout_height="wrap_content"
                            android:layout_marginLeft="@dimen/card_padding"
                            android:layout_marginStart="@dimen/card_padding"
                            android:layout_marginRight="@dimen/card_padding"
                            android:layout_marginEnd="@dimen/card_padding"
                            android:gravity="center"
                            android:text="@string/about_title"
                            android:textColor="?android:attr/textColorPrimary"
                            android:textSize="@dimen/text_content_title"
                            fontPath="fonts/Font-Medium.ttf"/>

                        <org.sufficientlysecure.htmltextview.HtmlTextView
                            android:id="@+id/about_desc"
                            android:layout_width="match_parent"
                            android:layout_height="wrap_content"
                            android:layout_marginLeft="@dimen/card_padding"
                            android:layout_marginStart="@dimen/card_padding"
                            android:layout_marginRight="@dimen/card_padding"
                            android:layout_marginEnd="@dimen/card_padding"
                            android:layout_marginTop="2dp"
                            android:gravity="center"
                            android:textColor="?android:attr/textColorSecondary"
                            android:textSize="@dimen/text_content"
                            fontPath="fonts/Font-Regular.ttf"/>

                        <LinearLayout
                            android:layout_width="match_parent"
                            android:layout_height="wrap_content"
                            android:orientation="horizontal"
                            android:baselineAligned="false"
                            android:paddingLeft="@dimen/card_padding"
                            android:paddingStart="@dimen/card_padding"
                            android:paddingRight="@dimen/card_padding"
                            android:paddingEnd="@dimen/card_padding"
                            android:paddingTop="10dp"
                            android:paddingBottom="@dimen/card_padding"
                            android:gravity="end">

                            <TextView
                                android:id="@+id/email"
                                android:layout_width="wrap_content"
                                android:layout_height="wrap_content"
                                android:textAllCaps="true"
                                android:padding="@dimen/button_padding"
                                android:gravity="center"
                                android:text="@string/about_email_title"
                                android:textSize="@dimen/text_content"
                                android:textColor="?attr/colorAccent"
                                android:singleLine="true"
                                android:ellipsize="end"
                                android:background="?attr/selectableItemBackground"
                                android:theme="@style/AccentButtonStyle"
                                fontPath="fonts/Font-Medium.ttf"/>

                            <TextView
                                android:id="@+id/link1"
                                android:layout_width="wrap_content"
                                android:layout_height="wrap_content"
                                android:textAllCaps="true"
                                android:padding="@dimen/button_padding"
                                android:gravity="center"
                                android:text="@string/about_link_1_title"
                                android:textSize="@dimen/text_content"
                                android:textColor="?attr/colorAccent"
                                android:singleLine="true"
                                android:ellipsize="end"
                                android:background="?attr/selectableItemBackground"
                                android:theme="@style/AccentButtonStyle"
                                fontPath="fonts/Font-Medium.ttf"/>

                            <TextView
                                android:id="@+id/link2"
                                android:layout_width="wrap_content"
                                android:layout_height="wrap_content"
                                android:textAllCaps="true"
                                android:padding="@dimen/button_padding"
                                android:gravity="center"
                                android:text="@string/about_link_2_title"
                                android:textSize="@dimen/text_content"
                                android:textColor="?attr/colorAccent"
                                android:singleLine="true"
                                android:ellipsize="end"
                                android:background="?attr/selectableItemBackground"
                                android:theme="@style/AccentButtonStyle"
                                fontPath="fonts/Font-Medium.ttf"/>

                        </LinearLayout>

                    </LinearLayout>

                </RelativeLayout>

            </android.support.v7.widget.CardView>

            <android.support.v7.widget.CardView
                android:id="@+id/card_contributors"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:visibility="gone"
                app:cardBackgroundColor="?attr/card_background"
                app:cardElevation="@dimen/card_elevation"
                app:cardUseCompatPadding="true"
                app:cardCornerRadius="@dimen/card_corner_radius">

                <LinearLayout
                    android:id="@+id/contributors"
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:orientation="horizontal"
                    android:gravity="center_vertical"
                    android:padding="@dimen/card_padding"
                    android:background="?attr/selectableItemBackground"
                    android:theme="@style/ButtonStyle">

                    <ImageView
                        android:id="@+id/contributors_icon"
                        android:layout_width="28dp"
                        android:layout_height="28dp"
                        android:layout_marginRight="@dimen/card_padding"
                        android:layout_marginEnd="@dimen/card_padding"/>

                    <TextView
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:text="@string/about_contributors_title"
                        android:textSize="@dimen/text_content_title"
                        android:textColor="?android:attr/textColorPrimary"
                        android:gravity="center_vertical"
                        fontPath="fonts/Font-Regular.ttf"/>

                </LinearLayout>

            </android.support.v7.widget.CardView>

            <android.support.v7.widget.CardView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                app:cardBackgroundColor="?attr/card_background"
                app:cardElevation="@dimen/card_elevation"
                app:cardUseCompatPadding="true"
                app:cardCornerRadius="@dimen/card_corner_radius">

                <LinearLayout
                    android:id="@+id/licenses"
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:orientation="horizontal"
                    android:gravity="center_vertical"
                    android:padding="@dimen/card_padding"
                    android:background="?attr/selectableItemBackground"
                    android:theme="@style/ButtonStyle">

                    <ImageView
                        android:id="@+id/licenses_icon"
                        android:layout_width="28dp"
                        android:layout_height="28dp"
                        android:layout_marginRight="@dimen/card_padding"
                        android:layout_marginEnd="@dimen/card_padding"/>

                    <TextView
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:text="@string/about_open_source_licenses"
                        android:textSize="@dimen/text_content_title"
                        android:textColor="?android:attr/textColorPrimary"
                        android:gravity="center_vertical"
                        fontPath="fonts/Font-Regular.ttf"/>

                </LinearLayout>

            </android.support.v7.widget.CardView>

            <android.support.v7.widget.CardView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                app:cardBackgroundColor="?attr/card_background"
                app:cardElevation="@dimen/card_elevation"
                app:cardUseCompatPadding="true"
                app:cardCornerRadius="@dimen/card_corner_radius">

                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:orientation="vertical"
                    android:padding="@dimen/card_padding">

                    <TextView
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:text="@string/about_dashboard"
                        android:textSize="@dimen/text_content_title"
                        android:textColor="?android:attr/textColorPrimary"
                        fontPath="fonts/Font-Medium.ttf"/>

                    <TextView
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:layout_marginTop="6dp"
                        android:text="@string/about_dashboard_dev"
                        android:textSize="@dimen/text_content"
                        android:textColor="?android:attr/textColorPrimary"
                        fontPath="fonts/Font-Regular.ttf"/>

                    <LinearLayout
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:orientation="horizontal"
                        android:paddingTop="10dp"
                        android:gravity="end">

                        <TextView
                            android:id="@+id/dev_google_plus"
                            android:layout_width="wrap_content"
                            android:layout_height="wrap_content"
                            android:textAllCaps="true"
                            android:padding="@dimen/button_padding"
                            android:gravity="center"
                            android:text="@string/about_dashboard_dev_google_plus_title"
                            android:textSize="@dimen/text_content"
                            android:textColor="?attr/colorAccent"
                            android:singleLine="true"
                            android:ellipsize="end"
                            android:background="?attr/selectableItemBackground"
                            android:theme="@style/AccentButtonStyle"
                            fontPath="fonts/Font-Medium.ttf"/>

                        <TextView
                            android:id="@+id/dev_github"
                            android:layout_width="wrap_content"
                            android:layout_height="wrap_content"
                            android:textAllCaps="true"
                            android:padding="@dimen/button_padding"
                            android:gravity="center"
                            android:text="@string/about_dashboard_dev_github_title"
                            android:textSize="@dimen/text_content"
                            android:textColor="?attr/colorAccent"
                            android:singleLine="true"
                            android:ellipsize="end"
                            android:background="?attr/selectableItemBackground"
                            android:theme="@style/AccentButtonStyle"
                            fontPath="fonts/Font-Medium.ttf"/>

                    </LinearLayout>

                </LinearLayout>

            </android.support.v7.widget.CardView>

        </LinearLayout>

    </android.support.v4.widget.NestedScrollView>

    <View
        android:layout_width="match_parent"
<LinearLayout
    android:id="@+id/container"
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    tools:ignore="MissingPrefix"
    android:layout_height="wrap_content"
    android:layout_width="match_parent"
    android:orientation="vertical"
    android:padding="@dimen/card_padding"
    android:gravity="center_vertical"
    android:background="?attr/selectableItemBackground"
    app:theme="@style/ButtonStyle">

    <TextView
        android:id="@+id/title"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:paddingLeft="@dimen/card_padding"
        android:paddingStart="@dimen/card_padding"
        android:paddingRight="@dimen/card_padding"
        android:paddingEnd="@dimen/card_padding"
        android:textColor="?android:attr/textColorPrimary"
        android:textSize="@dimen/text_content_subtitle"
        fontPath="fonts/Font-Regular.ttf"/>
        android:id="@+id/subtitle"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:paddingLeft="@dimen/card_padding"
        android:paddingStart="@dimen/card_padding"
        android:paddingRight="@dimen/card_padding"
        android:paddingEnd="@dimen/card_padding"
        android:textColor="?android:attr/textColorSecondary"
        android:textSize="@dimen/text_content"
        fontPath="fonts/Font-Regular.ttf"/>
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    tools:ignore="MissingPrefix"
    android:id="@+id/container"
    android:paddingRight="@dimen/dialog_content_padding"
    android:paddingEnd="@dimen/dialog_content_padding"
    android:background="?attr/selectableItemBackground"
    app:theme="@style/ButtonStyle">

    <android.support.v7.widget.AppCompatCheckBox
        android:id="@+id/checkbox"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:clickable="false"
        android:background="@android:color/transparent"
        app:theme="@style/CheckBoxStyle"/>

    <TextView
        android:id="@+id/title"
        android:layout_width="0dp"
        android:layout_weight="1"
        android:layout_height="wrap_content"
        android:paddingLeft="@dimen/card_padding"
        android:paddingStart="@dimen/card_padding"
        android:textSize="@dimen/text_content_title"
        android:singleLine="true"
        android:ellipsize="end"
        android:textColor="?android:attr/textColorPrimary"
        fontPath="fonts/Font-Regular.ttf"/>

<?xml version="1.0" encoding="utf-8"?>
<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    tools:ignore="MissingPrefix"
    android:orientation="vertical"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <android.support.v4.widget.NestedScrollView
        android:id="@+id/scrollview"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:clipToPadding="false">

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="vertical">

            <LinearLayout
                android:id="@+id/pref_cache_clear"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:padding="@dimen/content_margin"
                android:orientation="vertical"
                android:background="?attr/selectableItemBackground"
                app:theme="@style/ButtonStyle">

                <TextView
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:text="@string/pref_data_cache"
                    android:textSize="@dimen/text_content_title"
                    android:textColor="?android:attr/textColorPrimary"
                    fontPath="fonts/Font-Medium.ttf"/>

                <TextView
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:text="@string/pref_data_cache_desc"
                    android:textSize="@dimen/text_content"
                    android:layout_marginTop="4dp"
                    android:textColor="?android:attr/textColorSecondary"
                    fontPath="fonts/Font-Regular.ttf"/>

                <TextView
                    android:id="@+id/pref_cache_size"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:text="@string/pref_data_cache_size"
                    android:textSize="@dimen/text_content"
                    android:layout_marginTop="8dp"
                    android:textColor="?attr/colorAccent"
                    fontPath="fonts/Font-Medium.ttf"/>

            </LinearLayout>

            <View
                android:layout_width="match_parent"
                android:layout_height="1dp"
                android:layout_marginLeft="16dp"
                android:layout_marginStart="16dp"
                android:layout_marginEnd="16dp"
                android:layout_marginRight="16dp"
                android:background="?attr/divider_list"/>

            <LinearLayout
                android:id="@+id/pref_dark_theme"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:orientation="horizontal"
                android:gravity="center_vertical"
                android:background="?attr/selectableItemBackground"
                app:theme="@style/ButtonStyle">

                <LinearLayout
                    android:layout_width="0dp"
                    android:layout_weight="1"
                    android:layout_height="wrap_content"
                    android:padding="16dp"
                    android:orientation="vertical">

                    <TextView
                        android:layout_width="wrap_content"
                        android:layout_height="wrap_content"
                        android:text="@string/pref_theme_dark"
                        android:textSize="@dimen/text_content_title"
                        android:textColor="?android:attr/textColorPrimary"
                        fontPath="fonts/Font-Medium.ttf"/>

                    <TextView
                        android:layout_width="wrap_content"
                        android:layout_height="wrap_content"
                        android:text="@string/pref_theme_dark_desc"
                        android:textSize="@dimen/text_content"
                        android:layout_marginTop="4dp"
                        android:textColor="?android:attr/textColorSecondary"
                        android:textAppearance="?android:attr/textAppearanceLarge"
                        fontPath="fonts/Font-Regular.ttf"/>

                </LinearLayout>

                <android.support.v7.widget.AppCompatCheckBox
                    android:id="@+id/pref_dark_theme_check"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:clickable="false"
                    android:background="@android:color/transparent"
                    android:layout_margin="16dp"
                    app:theme="@style/CheckBoxStyle"/>

            </LinearLayout>

            <View
                android:layout_width="match_parent"
                android:layout_height="1dp"
                android:layout_marginLeft="16dp"
                android:layout_marginStart="16dp"
                android:layout_marginEnd="16dp"
                android:layout_marginRight="16dp"
                android:background="?attr/divider_list"/>

            <LinearLayout
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:padding="16dp"
                android:orientation="vertical">

                <TextView
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:text="@string/pref_wallpaper_location"
                    android:textSize="@dimen/text_content_title"
                    android:textColor="?android:attr/textColorPrimary"
                    fontPath="fonts/Font-Medium.ttf"/>

                <TextView
                    android:id="@+id/pref_walls_directory"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:text="@string/pref_wallpaper_location_desc"
                    android:textSize="@dimen/text_content"
                    android:layout_marginTop="4dp"
                    android:textColor="?android:attr/textColorSecondary"
                    fontPath="fonts/Font-Regular.ttf"/>

            </LinearLayout>

        </LinearLayout>

    </android.support.v4.widget.NestedScrollView>

    <View
        android:layout_width="match_parent"
            android:paddingStart="@dimen/card_margin_left"
            android:paddingLeft="@dimen/card_margin_left"
            android:paddingBottom="@dimen/card_margin_bottom"
            android:clipToPadding="false"/>

    </android.support.v4.widget.SwipeRefreshLayout>

    <com.pluscubed.recyclerfastscroll.RecyclerFastScroller
        android:id="@+id/fastscroll"
        android:layout_width="wrap_content"
        android:layout_height="match_parent"
        android:layout_gravity="end"
        app:rfs_barColor="?attr/fast_scroll"
        app:rfs_handleNormalColor="?attr/fast_scroll"
        app:rfs_handlePressedColor="?attr/colorAccent"/>

    <ProgressBar
        android:id="@+id/progress"
        android:layout_width="wrap_content"
        android:orientation="vertical"
        android:foreground="?attr/selectableItemBackground"
        android:clickable="true"
        app:theme="@style/ButtonStyle">

        <com.dm.wallpaper.board.utils.views.WallpaperView
            android:id="@+id/image"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:scaleType="centerCrop" />

        <LinearLayout
            android:layout_width="match_parent"
                android:layout_width="0dp"
                android:layout_weight="1"
                android:layout_height="wrap_content"
                android:padding="@dimen/card_padding"
                android:orientation="vertical">

                <TextView
                    android:layout_height="wrap_content"
                    android:textColor="?android:attr/textColorPrimary"
                    android:textSize="@dimen/text_content"
                    android:singleLine="true"
                    android:ellipsize="end"
                    fontPath="fonts/Font-Medium.ttf"/>

                    android:layout_height="wrap_content"
                    android:textColor="?android:attr/textColorSecondary"
                    android:textSize="@dimen/text_content"
                    android:singleLine="true"
                    android:ellipsize="end"
                    fontPath="fonts/Font-Regular.ttf"/>

                android:layout_marginRight="@dimen/content_padding"
                android:layout_marginEnd="@dimen/content_padding"
                android:background="?attr/selectableItemBackgroundBorderless"
                app:theme="@style/ButtonStyle"/>

        </LinearLayout>

limitations under the License.
</pre>
<ul>
    <li>RecyclerView Fast Scroll</li>
</ul>

<pre>
Copyright (c) 2016 Daniel Ciao

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
</pre>
<ul>
    <li>DrawMe</li>
</ul>

<?xml version="1.0" encoding="utf-8"?>
<resources>

    <integer name="column_num">3</integer>

</resources>
<?xml version="1.0" encoding="utf-8"?>
<resources>

    <integer name="column_num">4</integer>

</resources>
    <dimen name="splash_screen_text">16sp</dimen>

    <!-- About header image height -->
    <dimen name="about_profile">110dp</dimen>
    <dimen name="about_image_height">180dp</dimen>

</resources>
<?xml version="1.0" encoding="utf-8"?>
<resources>

    <integer name="column_num">3</integer>

</resources>
    <!-- Card -->
    <bool name="card_use_compat_padding">false</bool>

    <bool name="tablet_mode">false</bool>

</resources>
    <dimen name="card_margin_left">4dp</dimen>
    <dimen name="card_margin_top">4dp</dimen>
    <dimen name="card_margin_bottom">4dp</dimen>
    <dimen name="card_padding_bottom">4dp</dimen>
    <dimen name="card_elevation">2.5dp</dimen>
    <dimen name="card_corner_radius">2dp</dimen>

</resources>
        <item name="android:windowAllowReturnTransitionOverlap">true</item>
        <item name="android:windowSharedElementEnterTransition">@android:transition/move</item>
        <item name="android:windowSharedElementExitTransition">@android:transition/move</item>
        <item name="android:windowDrawsSystemBarBackgrounds">true</item>
        <item name="android:statusBarColor">@android:color/transparent</item>
        <item name="windowActionModeOverlay">true</item>
        <item name="android:windowTranslucentNavigation">true</item>
    </style>

        <item name="android:windowAllowReturnTransitionOverlap">true</item>
        <item name="android:windowSharedElementEnterTransition">@android:transition/move</item>
        <item name="android:windowSharedElementExitTransition">@android:transition/move</item>
        <item name="android:windowDrawsSystemBarBackgrounds">true</item>
        <item name="android:statusBarColor">@android:color/transparent</item>
        <item name="windowActionModeOverlay">true</item>
        <item name="android:windowTranslucentNavigation">true</item>
    </style>

</resources>
    <attr name="ripple_color" format="color"/>
    <attr name="ripple_accent" format="color"/>
    <attr name="divider_list" format="color"/>
    <attr name="fast_scroll" format="color"/>

    <attr name="toolbar_color" format="color"/>
    <attr name="toolbar_accent" format="color"/>
    <attr name="toolbar_icon" format="color"/>
    <attr name="toolbar_hint" format="color"/>

    <attr name="search_toolbar_color" format="color"/>
    <attr name="search_toolbar_icon" format="color"/>
    <attr name="search_toolbar_hint" format="color"/>

</resources>
    <!-- Card -->
    <bool name="card_use_compat_padding">true</bool>

</resources>
<?xml version="1.0" encoding="utf-8"?>
<resources>

    <color name="colorPrimary">#828282</color>
    <color name="colorPrimaryDark">#E0E0E0</color>
    <color name="colorAccent">#F44336</color>

    <color name="darkColorPrimary">#FFFFFF</color>
    <color name="darkColorPrimaryDark">#121212</color>
    <color name="darkColorAccent">#F44336</color>

    <!-- Splash Screen -->
    <color name="splashColor">#F2F2F2</color>

    <!-- Toolbar -->
    <color name="toolbar">#F5F5F5</color>
    <color name="toolbarDark">#181818</color>
    <color name="toolbarIcon">#424242</color>
    <color name="toolbarIconDark">#BBFFFFFF</color>
    <color name="toolbarHintText">#44FFFFFF</color>
    <color name="toolbarHintTextDark">#44FFFFFF</color>

    <!-- Toolbar Search -->
    <color name="searchToolbar">#F5F5F5</color>
    <color name="searchToolbarDark">#181818</color>
    <color name="searchToolbarIcon">#424242</color>
    <color name="searchToolbarIconDark">#DDFFFFFF</color>
    <color name="searchToolbarHintText">#44000000</color>
    <color name="searchToolbarHintTextDark">#44FFFFFF</color>

    <!-- Popup Bubble -->
    <color name="popupBubble">#F44336</color>
    <color name="popupBubbleText">#FFFFFF</color>

    <!-- Navigation View -->
    <color name="navigationViewTitle">#FFFFFF</color>
    <color name="navigationViewTitleBack">#55000000</color>
    <color name="navigationViewText">#484848</color>
    <color name="navigationViewTextDark">#DDFFFFFF</color>
    <color name="navigationViewTextSelected">#F44336</color>
    <color name="navigationViewTextSelectedDark">#F44336</color>

    <!-- Card -->
    <color name="cardBackground">#FFFFFF</color>
    <color name="cardBackgroundDark">#181818</color>
    <color name="rippleColor">#55000000</color>
    <color name="rippleColorDark">#55FFFFFF</color>
    <color name="rippleAccent">#44F44336</color>
    <color name="rippleAccentDark">#44F44336</color>

    <!-- Attributes -->
    <color name="mainBackground">#FAFAFA</color>
    <color name="mainBackgroundDark">#000000</color>
    <color name="primaryText">#484848</color>
    <color name="primaryTextDark">#EEFFFFFF</color>
    <color name="secondaryText">#777777</color>
    <color name="secondaryTextDark">#99FFFFFF</color>
    <color name="dividerList">#EEEEEE</color>
    <color name="dividerListDark">#22FFFFFF</color>

    <color name="fastScrollTrack">#666666</color>
    <color name="fastScrollTrackDark">#BBBBBB</color>

    <!-- Favorite Wallpaper -->
    <color name="favoriteColor">#F44336</color>

    <!-- Wallpaper Preview -->
    <color name="wallpaperStatusBar">#88000000</color>
    <color name="wallpaperToolbar">#66000000</color>

</resources>
    <string name="wallpaper_scroll_disable_desc">Dashboard will apply wallpaper based on current view of wallpaper.
        Drag to left or right to adjust wallpaper. Pinch or double tap to zoom wallpaper.</string>

    <!-- Muzei -->
    <string name="minute">Minute</string>
    <string name="hour">Hour</string>
    <string name="billing_load_product_failed">Unable to load InApp Purchase products</string>

    <!-- Preferences -->
    <string name="pref_data_cache">Clear Cache</string>
    <string name="pref_data_cache_desc">Remove image cache from your storage created
        after loading cloud wallpaper thumbnails</string>
    <string name="pref_data_cache_size">Cache Size :</string>
    <string name="pref_data_cache_cleared">Cache Cleared</string>
    <string name="pref_data_cache_clear_dialog">Do you really want to clear cache?</string>

    <string name="pref_theme_dark">Dark Theme</string>
    <string name="pref_theme_dark_desc">Switch between dark or light theme</string>

    <string name="pref_wallpaper_location">Wallpaper Save Location</string>
    <string name="pref_wallpaper_location_desc">Try to download at least one wallpaper first.</string>

    <!-- Permission -->
    <string name="permission_storage_denied">Storage permission needed to save wallpaper</string>
    <string name="license_check_retry">Unable to check license, please try again in a few moments</string>

    <!-- Search -->
    <string name="search_result_empty">No result found for %!s(MISSING)</string>

    <!-- Crash Report -->
    <string name="crash_report">Crash Report</string>

    <!-- Splash screen -->
    <string name="splash_screen_title">Wallpaper Board</string>
    <string name="splash_screen_loading">Preparing %!s(MISSING) …</string>

    <!-- DrawerToggle -->
    <string name="txt_open">Open</string>
<resources>

    <dimen name="content_margin">16dp</dimen>
    <dimen name="content_padding">6dp</dimen>

    <!-- Card Global -->
    <dimen name="card_padding">14dp</dimen>
    <dimen name="card_margin_right">3dp</dimen>
    <dimen name="card_margin_left">3dp</dimen>
    <dimen name="card_margin_top">4dp</dimen>
    <dimen name="card_margin_bottom">1dp</dimen>
    <dimen name="card_padding_bottom">4dp</dimen>
    <dimen name="card_elevation">2.5dp</dimen>
    <dimen name="card_corner_radius">0dp</dimen>

    <!-- FAB -->
    <dimen name="fab_size">56dp</dimen>

    <!-- Default Image -->
    <dimen name="default_image_padding">40dp</dimen>

    <!-- Toolbar -->
    <dimen name="toolbar_shadow">8dp</dimen>

    <!-- Dialog -->
    <dimen name="dialog_content_padding">20dp</dimen>
    <dimen name="dialog_item_padding">8dp</dimen>

    <!-- Button -->
    <dimen name="button_padding">10dp</dimen>

    <!-- Text -->
    <dimen name="text_toolbar_logo">22sp</dimen>
    <dimen name="text_toolbar_title">20sp</dimen>
    <dimen name="text_content_header">18sp</dimen>
    <dimen name="text_content_title">16sp</dimen>
    <dimen name="text_content_subtitle">15sp</dimen>
    <dimen name="splash_screen_logo">96dp</dimen>
    <dimen name="splash_screen_text">14sp</dimen>

    <!-- About header image height -->
    <dimen name="about_profile">96dp</dimen>
    <dimen name="about_image_height">120dp</dimen>

</resources>
<?xml version="1.0" encoding="utf-8"?>
<resources>

    <integer name="column_num">2</integer>

</resources>
    <!-- Base Application Theme -->
    <style name="AppBaseTheme" parent="@style/Theme.AppCompat.Light.DarkActionBar">
        <item name="android:windowAnimationStyle">@null</item>
        <item name="windowActionModeOverlay">true</item>
    </style>

    <!-- Base Application Theme -->
    <style name="AppBaseThemeDark" parent="@style/Theme.AppCompat">
        <item name="android:windowAnimationStyle">@null</item>
        <item name="windowActionModeOverlay">true</item>
    </style>

    <!-- App Theme-->
    <style name="AppTheme" parent="AppBaseTheme">
        <item name="colorPrimary">@color/colorPrimary</item>
        <item name="colorPrimaryDark">@color/colorPrimaryDark</item>
        <item name="colorAccent">@color/colorAccent</item>
        <item name="windowNoTitle">true</item>
        <item name="windowActionBar">false</item>
        <item name="android:windowNoTitle">true</item>
        <item name="android:windowContentOverlay">@null</item>
        <item name="drawerArrowStyle">@style/DrawerArrowStyle</item>
        <item name="android:textColorPrimary">@color/primaryText</item>
        <item name="android:textColorSecondary">@color/secondaryText</item>

        <item name="main_background">@color/mainBackground</item>
        <item name="card_background">@color/cardBackground</item>
        <item name="ripple_color">@color/rippleColor</item>
        <item name="ripple_accent">@color/rippleAccent</item>
        <item name="divider_list">@color/dividerList</item>
        <item name="fast_scroll">@color/fastScrollTrack</item>
        <item name="toolbar_color">@color/toolbar</item>
        <item name="toolbar_accent">@color/colorAccent</item>
        <item name="toolbar_icon">@color/toolbarIcon</item>
        <item name="toolbar_hint">@color/toolbarHintText</item>
        <item name="search_toolbar_color">@color/searchToolbar</item>
        <item name="search_toolbar_icon">@color/searchToolbarIcon</item>
        <item name="search_toolbar_hint">@color/searchToolbarHintText</item>

        <item name="md_positive_color">@color/colorAccent</item>
        <item name="md_neutral_color">@color/primaryText</item>
        <item name="colorPrimary">@color/darkColorPrimary</item>
        <item name="colorPrimaryDark">@color/darkColorPrimaryDark</item>
        <item name="colorAccent">@color/darkColorAccent</item>
        <item name="windowNoTitle">true</item>
        <item name="windowActionBar">false</item>
        <item name="android:windowNoTitle">true</item>
        <item name="android:windowContentOverlay">@null</item>
        <item name="drawerArrowStyle">@style/DrawerArrowStyle</item>
        <item name="android:textColorPrimary">@color/primaryTextDark</item>
        <item name="android:textColorSecondary">@color/secondaryTextDark</item>

        <item name="main_background">@color/mainBackgroundDark</item>
        <item name="card_background">@color/cardBackgroundDark</item>
        <item name="ripple_color">@color/rippleColorDark</item>
        <item name="ripple_accent">@color/rippleAccentDark</item>
        <item name="divider_list">@color/dividerListDark</item>
        <item name="fast_scroll">@color/fastScrollTrackDark</item>
        <item name="toolbar_color">@color/toolbarDark</item>
        <item name="toolbar_accent">@color/darkColorAccent</item>
        <item name="toolbar_icon">@color/toolbarIconDark</item>
        <item name="toolbar_hint">@color/toolbarHintTextDark</item>
        <item name="search_toolbar_color">@color/searchToolbarDark</item>
        <item name="search_toolbar_icon">@color/searchToolbarIconDark</item>
        <item name="search_toolbar_hint">@color/searchToolbarHintTextDark</item>

        <item name="md_background_color">@color/cardBackgroundDark</item>
        <item name="md_positive_color">@color/darkColorAccent</item>
        <item name="android:listPreferredItemHeightSmall">48dp</item>
    </style>

    <style name="ActionModeStyle" parent="@style/Widget.AppCompat.ActionMode">
        <item name="background">?attr/toolbar_color</item>
        <item name="titleTextStyle">@style/ActionModeTitleStyle</item>
    </style>

    <style name="ActionModeTitleStyle">
        <item name="android:textColor">?attr/toolbar_icon</item>
        <item name="android:textSize">@dimen/text_toolbar_title</item>
        <item name="fontPath">fonts/Font-Medium.ttf</item>
    </style>

    <style name="ButtonStyle">
        <item name="colorControlHighlight">?attr/ripple_color</item>
    </style>

    <style name="AccentButtonStyle">
        <item name="colorControlHighlight">?attr/ripple_accent</item>
    </style>

    <style name="CheckBoxStyle">
        <item name="colorControlActivated">?attr/colorAccent</item>
    </style>

    <style name="ToolbarStyle" parent="@style/Theme.AppCompat.Light.DarkActionBar">
        <item name="colorPrimary">?attr/toolbar_color</item>
        <item name="colorAccent">?attr/toolbar_accent</item>
        <item name="colorControlNormal">?attr/toolbar_icon</item>
        <item name="actionModeStyle">@style/ActionModeStyle</item>
        <item name="actionModeCloseDrawable">@drawable/ic_toolbar_back</item>
    </style>

</resources>
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	private final int FLASH_OFF = 1;
	private final int FLASH_AUTO = 2;

	@Nullable
	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
else if (locationManager.getLastKnownLocation(LocationManager.NETWORK_PROVIDER)!
		buttonClick.setOnClickListener( new OnClickListener() {
			public void onClick(View v) {
				//progress = ProgressDialog.show(ctx, "", "");
				preview.mCamera.takePicture(shutterCallback, null, jpegCallback);
			}
		});
		camera_switch = (ImageButton)view.findViewById(R.id.switch_camera);
else if (degrees < -90 && degrees >= -180 ){
			_intent.putExtra("longtitude",lon);*/
			_intent.putExtra("scale", true);
			_intent.putExtra("activityName", "Camera2");
			startActivityForResult(_intent, 1);
			//progress.dismiss();

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import android.content.Context;
import android.content.DialogInterface;
import android.content.SharedPreferences;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Bundle;

import com.nextgis.maplib.api.ILayer;
import com.nextgis.maplib.map.MapBase;
import com.nextgis.maplib.util.SettingsConstants;
import com.nextgis.maplibui.activity.NGPreferenceActivity;
import com.nextgis.maplibui.util.ControlHelper;
protected static void deleteLayers(Activity activity) {
                    && !layer.getPath().getName().equals(MainApplication.LAYER_TRACKS))
                layer.delete();
        }
    }


Subproject commit 4987b3d0620797ffddbc70edc7637d48590b1f08
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public Bitmap transform(Bitmap source) {
                source.recycle();
            }

            Bitmap bitmap = Bitmap.createBitmap(size, size, source.getConfig());

            Canvas canvas = new Canvas(bitmap);
            Paint paint = new Paint();
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void onClick(DialogInterface dialog, int index) {
     * Toggle the visibility of arrivals in the header
     */
    private void doShowHideHeaderArrivals() {
        boolean showArrivals = Application.getPrefs()
                .getBoolean(getString(R.string.preference_key_show_header_arrivals), false);

public void onLoadFinished(Loader<Cursor> loader, Cursor c) {
                    new ContentQueryMap(c, ObaContract.Trips._ID, true, null);
            // Call back into the adapter and header and say we've finished this.
            mAdapter.setTripsForStop(map);
            mHeader.setTripsForStop(map);
        }

        @Override
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void testAGOMFetch() throws SQLException, InterruptedException,
    private Message sampleMessage(ZulipApp app, int id) throws SQLException {
        Message rtr = new Message(app);
        rtr.setSender(Person.getOrUpdate(app, "Test User",
                TESTUSER_EXAMPLE_COM, ""));
        rtr.setContent("Test message");
        rtr.setType(MessageType.PRIVATE_MESSAGE);
        rtr.setRecipient(new String[]{TESTUSER_EXAMPLE_COM});
import java.lang.reflect.Type;
import java.sql.SQLException;
import java.util.Date;
import java.util.Map;
import java.util.Queue;
import java.util.concurrent.Callable;
public Message deserialize(JsonElement json, Type typeOfT, JsonDeserializationCo
                        } else {
                            Message.ZulipDirectMessage msg = naiveGson.fromJson(json, Message.ZulipDirectMessage.class);
                            if (msg.getDisplayRecipient() != null) {
                                msg.setRecipients(msg.getDisplayRecipient().toArray(new Person[msg.getDisplayRecipient().size()]));
                            }

                            msg.setContent(Message.formatContent(msg.getFormattedContent(), ZulipApp.get()).toString());
public String getEmail() {

    public void setEmail(String email) {
        databaseHelper = new DatabaseHelper(this, email);
        this.you = Person.getOrUpdate(this, email, null, null);
    }

    public DatabaseHelper getDatabaseHelper() {
public Message(ZulipApp app, JSONObject message,
        this.setSender(Person.getOrUpdate(app,
                message.getString("sender_email"),
                message.getString("sender_full_name"),
                message.getString("avatar_url"), personCache));

        if (message.getString("type").equals("stream")) {
            this.setType(MessageType.STREAM_MESSAGE);
public Message(ZulipApp app, JSONObject message,
            for (int i = 0; i < jsonRecipients.length(); i++) {
                JSONObject obj = jsonRecipients.getJSONObject(i);
                Person person = Person.getOrUpdate(app, obj.getString("email"),
                        obj.getString("full_name"), null, personCache);
                r[i] = person;
            }
            setRecipients(recipientList(r));
public Void call() throws Exception {
                    RuntimeExceptionDao<Message, Object> messageDao = app.getDao(Message.class);

                    for (Message m : messages) {
                        Person person = Person.getOrUpdate(app, m.getSenderEmail(), m.getSenderFullName(), m.getAvatarUrl());
                        m.setSender(person);
                        Stream stream = null;
                        if (m.getType() == MessageType.STREAM_MESSAGE) {
public void setRecipients(Person[] list) {
        this.recipientsCache = list;

        try {
            Person to = ZulipApp.get().getDao(Person.class, true).queryBuilder().where().eq(Person.EMAIL_FIELD, list[0].getEmail()).queryForFirst();
            ;
            if (list.length == 1) {
                setRecipients(to.getId() + "");
                return;
            }
            Person from = ZulipApp.get().getDao(Person.class, true).queryBuilder().where().eq(Person.EMAIL_FIELD, list[1].getEmail()).queryForFirst();

            if (to == null && from != null) {
                setRecipients("" + from.getId());
            }
    @SerializedName("is_mirror_dummy")
    private boolean isMirrorDummy;

    public Person(String name, String email) {
        this.setName(name);
        this.setEmail(email);
public static Person getByEmail(Dao<Person, ?> dao, String email) {

    @SuppressWarnings("WeakerAccess")
    public static Person getOrUpdate(ZulipApp app, String email, String name,
                                     String avatarURL, Map<String, Person> personCache) {

        Person person = null;

public static Person getOrUpdate(ZulipApp app, String email, String name,

        if (person == null) {
            person = new Person(name, email, avatarURL);
            app.getDao(Person.class).create(person);
        } else {
            boolean changed = false;
public static Person getOrUpdate(ZulipApp app, String email, String name,
    }

    public static Person getOrUpdate(ZulipApp app, String email, String name,
                                     String avatarURL) {
        return getOrUpdate(app, email, name, avatarURL, null);
    }

    public static Person getById(ZulipApp app, int id) {
public void setActive(boolean active) {
        isActive = active;
    }

}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import org.commcare.dalvik.R;
import org.commcare.logging.analytics.GoogleAnalyticsFields;
import org.commcare.logging.analytics.GoogleAnalyticsUtils;
import org.commcare.utils.StorageUtils;
import org.commcare.utils.SyncDetailCalculations;
import org.javarosa.core.services.locale.Localization;
public void update(HomeCardDisplayData cardDisplayData,
                               SquareButtonViewHolder squareButtonViewHolder,
                               Context context,
                               String notificationText) {
                int numIncompleteForms = StorageUtils.getNumIncompleteForms();
                if (numIncompleteForms > 0) {
                    Spannable incompleteIndicator =
                            (activity.localize("home.forms.incomplete.indicator",
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void onClick(View v) {
            if (previousInputContentInfo != null) {
                onCommitContentInternal(previousInputContentInfo, previousFlags);
            }
        } else {
            showMarkSensitive = false;
            startingVisibility = preferences.getString("rememberedVisibility", "public");
            statusMarkSensitive = false;
            startingHideText = false;
        }

        /* If the composer is started up as a reply to another post, override the "starting" state
protected void onSaveInstanceState(Bundle outState) {
        }
        currentInputContentInfo = null;
        currentFlags = 0;
        super.onSaveInstanceState(outState);
    }

public void onClick(View v) {
        }
    }

    private File createNewImageFile() throws IOException {
        // Create an image file name
        String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss", Locale.US).format(new Date());
private void cancelReadyingMedia(QueuedMedia item) {
    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (requestCode == MEDIA_PICK_RESULT && resultCode == RESULT_OK && data != null) {
            Uri uri = data.getData();
            long mediaSize = MediaUtils.getMediaSize(getContentResolver(), uri);
            pickMedia(uri, mediaSize);
        } else if (requestCode == MEDIA_TAKE_PHOTO_RESULT && resultCode == RESULT_OK) {
            long mediaSize = MediaUtils.getMediaSize(getContentResolver(), photoUploadUri);
            pickMedia(photoUploadUri, mediaSize);
        }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void notifyCompleted(MessageSnapshot snapshot) {
    }

    private void process(MessageSnapshot snapshot) {
        if (mIsDiscard || mTask.getOrigin().getListener() == null) {
            if (FileDownloadMonitor.isValid() &&
                    snapshot.getStatus() == FileDownloadStatus.blockComplete) {
private void process(MessageSnapshot snapshot) {

    private void offer(MessageSnapshot snapshot) {
        final byte status = snapshot.getStatus();
        Assert.assertTrue(
                FileDownloadUtils.formatString("request process message %!d(MISSING), but has already over %!d(MISSING)",
                        status, parcelQueue.size()), mTask != null);

        parcelQueue.offer(snapshot);
    }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void onConfigured(@NonNull CameraCaptureSession session) {
                mCaptureSession.setRepeatingRequest(mPreviewRequestBuilder.build(),
                        mCaptureCallback, null);
            } catch (CameraAccessException e) {
                Log.e(TAG, "Failed to start camera preview.", e);
            }
        }
public void onConfigureFailed(@NonNull CameraCaptureSession session) {

        @Override
        public void onClosed(@NonNull CameraCaptureSession session) {
            mCaptureSession = null;
        }

    };
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
interface IPlayerService {
    void pause();
    void setPreferences(in ImmutablePreferenceStore preferences);
    void setQueue(in List<Song> newQueue, int newPosition);
    void changeSong(int position);
    void editQueue(in List<Song> newQueue, int newPosition);
    void queueNext(in Song song);
interface IPlayerService {
    List<Song> getQueue();
    int getQueuePosition();
    int getQueueSize();
    int getCurrentPosition();
    int getDuration();

 */
public interface PlayerController {

    /**
     * Gets error messages from the service that can be displayed on the UI
     * @return An observable stream of user-presentable error messages
import com.marverenic.music.utils.MediaStyleHelper;

import java.io.IOException;
import java.util.Collections;
import java.util.List;

import timber.log.Timber;

public class PlayerService extends Service implements MusicPlayer.OnPlaybackChangeListener {
public void onPlaybackChange() {
    public static class Stub extends IPlayerService.Stub {

        private PlayerService mService;

        public Stub(PlayerService service) {
            mService = service;
public void setQueue(List<Song> newQueue, int newPosition) throws RemoteExceptio
        }

        @Override
        public void changeSong(int position) throws RemoteException {
            if (!isMusicPlayerReady()) {
                Timber.i("PlayerService.changeSong(): Service is not ready. Dropping command");
public int getQueueSize() throws RemoteException {
        }

        @Override
        public int getCurrentPosition() throws RemoteException {
            if (!isMusicPlayerReady()) {
                return 0;
import com.marverenic.music.utils.Optional;
import com.marverenic.music.utils.Util;

import java.util.Collections;
import java.util.List;
import java.util.concurrent.TimeUnit;
private void releaseAllProperties() {
    private void initAllProperties() {
        mPlaying.setFunction(mBinding::isPlaying);
        mNowPlaying.setFunction(mBinding::getNowPlaying);
        mQueue.setFunction(mBinding::getQueue);
        mQueuePosition.setFunction(mBinding::getQueuePosition);
        mCurrentPosition.setFunction(mBinding::getCurrentPosition);
        mDuration.setFunction(mBinding::getDuration);
public void updatePlayerPreferences(ReadOnlyPreferenceStore preferenceStore) {

    @Override
    public void setQueue(List<Song> newQueue, int newPosition) {
        execute(() -> {
            try {
                mBinding.setQueue(newQueue, newPosition);
public void setQueue(List<Song> newQueue, int newPosition) {
        });
    }

    @Override
    public void clearQueue() {
        setQueue(Collections.emptyList(), 0);
public void changeSong(int newPosition) {

    @Override
    public void editQueue(List<Song> queue, int newPosition) {
        execute(() -> {
            try {
                mBinding.editQueue(queue, newPosition);
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void switchCircles() {
    @Override
    public void draw(final Canvas canvas, final MapViewImpl mapView, final boolean shadow) {

        drawInternal(canvas, mapView.getMapProjection());

        super.draw(canvas, mapView, false);
    }

    @Override
private void drawInternal(final Canvas canvas, final MapProjectionImpl projectio
            return;
        }

        // prevent content changes
        getOverlayImpl().lock();
        try {
            lazyInitializeDrawingObjects();
            canvas.setDrawFilter(setFilter);
            final int height = canvas.getHeight();
            final int width = canvas.getWidth();

            final int radius = calculateDrawingRadius(projection);
            final Point center = new Point();

            for (final CachesOverlayItemImpl item : items) {
                if (item.applyDistanceRule()) {
                    final Geopoint itemCoord = item.getCoord().getCoords();
                    final GeoPointImpl itemGeo = mapItemFactory.getGeoPointBase(itemCoord);
                    projection.toPixels(itemGeo, center);
                    if (center.x > -radius && center.y > -radius && center.x < width + radius && center.y < height + radius) {
                        // dashed circle around the waypoint
                        blockedCircle.setColor(0x66BB0000);
                        blockedCircle.setStyle(Style.STROKE);
                        canvas.drawCircle(center.x, center.y, radius, blockedCircle);

                        // filling the circle area with a transparent color
                        blockedCircle.setColor(0x44BB0000);
                        blockedCircle.setStyle(Style.FILL);
                        canvas.drawCircle(center.x, center.y, radius, blockedCircle);
                    }
                }
            }
            canvas.setDrawFilter(removeFilter);
        } finally {
            getOverlayImpl().unlock();
        }
    }

    /**
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void onItemClick(TimelineViewItem item) {
            return;
        }
        Uri uri = MatchedUri.getTimelineItemUri(
                getParamsLoaded().getTimeline().fromIsCombined(myContext, false).fromMyAccount(myContext, ma),
                item.msgId);

        String action = getIntent().getAction();
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Add this to your module's `build.gradle` file:
```gradle
dependencies {
    // ... other dependencies
    compile 'com.afollestad:aesthetic:0.4.3'
}
```

ext.versions = [
        minSdk            : 16,
        compileSdk        : 25,
        buildTools        : '25.0.3',
        publishVersion    : '0.4.3',
        publishVersionCode: 15,
        gradlePlugin      : '2.3.2',

        supportLib        : '25.3.1',

  public AestheticToolbar(Context context) {
    super(context);
    init();
  }

  public AestheticToolbar(Context context, @Nullable AttributeSet attrs) {
    super(context, attrs);
    init();
  }

  public AestheticToolbar(Context context, @Nullable AttributeSet attrs, int defStyleAttr) {
    super(context, attrs, defStyleAttr);
    init();
  }

  private void init() {
    onColorUpdated = PublishSubject.create();
  }

  private void invalidateColors(BgIconColorState state) {
public void setNavigationIcon(@Nullable Drawable icon, @ColorInt int color) {
  @Override
  protected void onAttachedToWindow() {
    super.onAttachedToWindow();
    subscription =
        Observable.combineLatest(
                Aesthetic.get().colorPrimary(),
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import android.graphics.Rect;
import android.graphics.drawable.Drawable;
import android.os.Build;
import android.support.annotation.InterpolatorRes;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
private void setVisibilityImmediately(int value) {

    private void animateClosing() {
        mClosingAnimator.cancel();
        getHandler().postDelayed(new Runnable() {
            @Override
            public void run() {
                mClosingAnimator.start();
            }
        }, CLOSING_DELAY);
    }

    private void setProgressImmediately(int progress) {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
protected void updateUI() {

        if (mToggleEncryptionMenu != null) {
            Context context = getActivity();
            if (mConversation != null && Preferences.getEncryptionEnabled(context)) {
                boolean encryption = mConversation.isEncryptionEnabled();
                mToggleEncryptionMenu
                    .setVisible(true)
                    .setEnabled(true)
                    .setChecked(encryption);
            }
            else {
                mToggleEncryptionMenu
                    .setVisible(false)
                    .setEnabled(false)
                    .setChecked(false);
            }
        }
    }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
private void setupFab() {
        fab = (FloatingActionButton) findViewById(R.id.fab);
        chatBox = (SwipeRemoveLinearLayout) findViewById(R.id.messageBoxContainer);
        chatBox.registerToSwipeEvents(this);
        fabHidder = new CountDownTimer(Constants.HIDE_FAB_AFTER_SEC * 1000, Constants.HIDE_FAB_AFTER_SEC * 1000) {
            public void onTick(long millisUntilFinished) {
            }
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;

import com.zulip.android.R;

public Dialog onCreateDialog(Bundle savedInstanceState) {
        View rootView = inflater.inflate(R.layout.list_dialog, null);
        View cameraListItem = rootView.findViewById(R.id.picture_dialog);
        View fileListItem = rootView.findViewById(R.id.pick_file_dialog);

        // if device doesn't have camera, disable camera option
        if (!getActivity().getPackageManager().hasSystemFeature(PackageManager.FEATURE_CAMERA)) {
            android:layout_height="wrap_content"
            android:contentDescription="@string/stream_private_content_desp"
            android:padding="3dp"
            android:src="@drawable/ic_action_person"
            android:tint="@color/colorTextSecondary" />
    </LinearLayout>

    <LinearLayout
            android:paddingLeft="8dp"
            android:paddingRight="4dp"
            android:paddingTop="4dp"
            android:src="@drawable/ic_add_circle_outline_black_24dp"
            android:tint="@color/colorTextSecondary" />

        <AutoCompleteTextView
            android:id="@+id/message_et"
            android:alpha="0.7"
            android:contentDescription="@string/send_content_desp"
            android:padding="4dp"
            android:src="@drawable/ic_send_24dp"
            android:tint="@color/colorTextSecondary" />

    </LinearLayout>

        android:layout_marginBottom="16dp"
        android:orientation="horizontal">
    <ImageView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_gravity="center_vertical"
        android:src="@drawable/ic_photo_camera_black_24dp"
        android:tint="?attr/colorControlNormal"
        android:alpha="0.7"/>
    <TextView
        android:layout_width="wrap_content"
        android:orientation="horizontal"
        android:layout_marginTop="8dp">
    <ImageView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_gravity="center_vertical"
        android:src="@drawable/ic_insert_drive_file_black_24dp"
        android:tint="?attr/colorControlNormal"
        android:alpha="0.7"/>
    <TextView
        android:layout_width="wrap_content"
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
        <activity android:name=".controller.IssueActivity" />
        <activity android:name=".controller.RepCallActivity" />
        <activity android:name=".controller.AboutActivity" />
        <activity android:name=".controller.TutorialActivity" />
        <activity android:name=".controller.SettingsActivity" />
        <activity android:name=".controller.LocationActivity"/>
        <activity android:name=".controller.StatsActivity"
            android:label="@string/stats_activity"/>
        <receiver
            android:name=".controller.NotifyBroadcastReceiver" />
        <receiver
protected void onCreate(@Nullable Bundle savedInstanceState) {
        setContentView(R.layout.activity_issue);
        ButterKnife.bind(this);

        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        getSupportActionBar().setTitle(mIssue.name);

        issueName.setText(mIssue.name);
        issueDescription.setText(mIssue.reason);
protected void onCreate(Bundle savedInstanceState) {
        Intent intent = getIntent();
        if (intent != null) {
            if (intent.getBooleanExtra(ALLOW_HOME_UP_KEY, false)) {
                getSupportActionBar().setDisplayHomeAsUpEnabled(true);
                allowsHomeUp = true;
            }
        }
private void returnToMain() {
        // If we came from MainActivity and return with another Intent, it will create a deep stack
        // of activities!
        if (allowsHomeUp) {
            onBackPressed();
        } else {
            Intent intent = new Intent(this, MainActivity.class);
            startActivity(intent);
private void returnToMain() {
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case android.R.id.home:
                onBackPressed();
                return true;
        }
        return super.onOptionsItemSelected(item);
protected void onCreate(Bundle savedInstanceState) {
        ButterKnife.bind(this);

        setSupportActionBar(actionBar);
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        getSupportActionBar().setHomeAsUpIndicator(R.drawable.ic_menu_white_24dp);

        if (navigationView != null) {
            setupDrawerContent(navigationView);
package org.a5calls.android.a5calls.controller;

import android.content.DialogInterface;
import android.graphics.Bitmap;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.design.widget.Snackbar;
import android.support.v4.graphics.drawable.RoundedBitmapDrawable;
import android.support.v4.graphics.drawable.RoundedBitmapDrawableFactory;
import android.support.v7.app.AlertDialog;
protected void onCreate(@Nullable Bundle savedInstanceState) {
        setContentView(R.layout.activity_rep_call);
        ButterKnife.bind(this);

        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        getSupportActionBar().setTitle(mIssue.name);

        mStatusListener = new FiveCallsApi.CallRequestListener() {
            @Override
public void onCallCount(int count) {
            public void onCallReported() {
                // Note: Skips are not reported.
                Log.d(TAG, "call reported successfully!");
                onBackPressed();
            }
        };
        FiveCallsApi controller = AppSingleton.getInstance(getApplicationContext())
protected void onResume() {
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case android.R.id.home:
                onBackPressed();
                return true;
        }
        return super.onOptionsItemSelected(item);
public void onClick(View v) {
            public void onClick(View v) {
                reportEvent("skip");
                // Since this is the last contact, just go back to the main menu if they "skip"
                onBackPressed();
            }
        });
    }
private void reportEvent(String event) {
                    .build());
        }
    }
}
protected void onCreate(@Nullable Bundle savedInstanceState) {
        setContentView(R.layout.activity_stats);
        ButterKnife.bind(this);

        getSupportActionBar().setDisplayHomeAsUpEnabled(true);

        DatabaseHelper db = AppSingleton.getInstance(this).getDatabaseHelper();
        initializeUI(db);
    <string name="snooze">Recuérdeme más tarde</string>

    <!-- Button to load more and/or inactive issues [CHAR_LIMIT=50] -->
    <string name="load_more_btn">cargar más asuntos</string>

    <!-- Stats summary shown on the home page [CHAR_LIMIT=75] -->
    <string name="your_call_count_summary">Has hecho <xliff:g id="callCount">%!$(MISSING)d</xliff:g> llamadas</string>

    <!-- Navigation link to the FAQ page [CHAR_LIMIT=25] -->
    <string name="menu_faq">FAQ</string>

    <!-- Header for the representatives / contacts list [CHAR_LIMIT=100] -->
    <string name="rep_section_prompt">Contactos para llamar a este asunto:</string>

</resources>
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void onSaveInstanceState(Bundle out) {
    protected abstract void handleActionView(Uri uri);

    /** Handles ACTION_VIEW_USERID intents: providing the user ID/JID. */
    protected abstract void handleActionViewConversation(Uri uri, Bundle args);

    private void processArguments(Bundle savedInstanceState) {
        Bundle args;
else if (ComposeMessage.ACTION_VIEW_CONVERSATION.equals(action)) {
            // view conversation - just userId provided
            else if (ComposeMessage.ACTION_VIEW_USERID.equals(action)) {
                Uri uri = args.getParcelable("data");
                handleActionViewConversation(uri, args);
            }
        }

else if (mUserJID == null) {
    }

    @Override
    protected void handleActionViewConversation(Uri uri, Bundle args) {
        mUserJID = uri.getPathSegments().get(1);
        mConversation = Conversation.loadFromUserId(getActivity(),
            mUserJID);
protected void handleActionViewConversation(Uri uri, Bundle args) {
            mUserName = mUserJID;
            mUserPhone = null;
        }
    }

    @Override
protected void handleActionView(Uri uri) {
     * Used only during activity restore.
     */
    @Override
    protected void handleActionViewConversation(Uri uri, Bundle args) {
        mGroupJID = uri.getPathSegments().get(1);
        mConversation = Conversation.loadFromUserId(getActivity(), mGroupJID);
        // unlikely, but better safe than sorry
        if (mConversation == null) {
            Log.i(TAG, "conversation for " + mGroupJID + " not found - exiting");
            getActivity().finish();
        }

        setThreadId(mConversation.getThreadId());
        mUserName = mGroupJID;
    }

    @Override
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void showLatestMessages() {
        }
    }

    public boolean scrolledToLastMessage() {
        Object object = adapter.getItem(linearLayoutManager.findLastVisibleItemPosition());
        return object instanceof Message && (((Message) object).getId() >= app.getMaxMessageId() - 2);
    }

public void onNewMessages(Message[] messages) {
        if (narrowedList != null) {
            narrowedList.onNewMessages(messages);
        }
        if (!currentList.scrolledToLastMessage())
            showSnackbarNotification(messages); //Show notification
    }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
private void applyDocumentUpdate(final ShadowDocument.Update docUpdate) {
    // TODO: it'd be nice if we could delegate our calls into mPeerManager.sendNotificationToPeers()
    //       to a background thread so as to offload the UI from JSON serialization stuff

    // First, any elements that have been disconnected from the tree, and any elements in those
    // sub-trees which have not been reconnected to the tree, should be garbage collected.
    // We do this first so that we can tag nodes as garbage by removing them from mObjectIdMapper
    // (which also unhooks them). We rely on this marking later.
    docUpdate.getGarbageElements(new Accumulator<Object>() {
      @Override
      public void store(Object element) {
        if (!mObjectIdMapper.containsObject(element)) {
          throw new IllegalStateException();
        }

        ElementInfo newElementInfo = docUpdate.getElementInfo(element);

        // Only raise onChildNodeRemoved for the root of a disconnected tree. The remainder of the
        // sub-tree is included automatically, so we don't need to send events for those.
        if (newElementInfo.parentElement == null) {
          ElementInfo oldElementInfo = mShadowDocument.getElementInfo(element);
          int parentNodeId = mObjectIdMapper.getIdForObject(oldElementInfo.parentElement);
          int nodeId = mObjectIdMapper.getIdForObject(element);
          mUpdateListeners.onChildNodeRemoved(parentNodeId, nodeId);
        }

        // All garbage elements should be unhooked.
        mObjectIdMapper.removeObject(element);
      }
    });

    // Second, remove all elements that have been reparented. Otherwise we get into trouble if we
    // transmit an event to insert under the new parent before we've transmitted an event to remove
    // it from the old parent. The removal event is ignored because the parent doesn't match the
    // listener's expectations, so we get ghost elements that are stuck and can't be exorcised.
    docUpdate.getChangedElements(new Accumulator<Object>() {
      @Override
      public void store(Object element) {
        // If this returns false then it means the element was garbage and has already been removed
        if (!mObjectIdMapper.containsObject(element)) {
          return;
        }

        final ElementInfo oldElementInfo = mShadowDocument.getElementInfo(element);
        if (oldElementInfo == null) {
          return;
        }

        final ElementInfo newElementInfo = docUpdate.getElementInfo(element);

        if (newElementInfo.parentElement != oldElementInfo.parentElement) {
          int parentNodeId = mObjectIdMapper.getIdForObject(oldElementInfo.parentElement);
          int nodeId = mObjectIdMapper.getIdForObject(element);
          mUpdateListeners.onChildNodeRemoved(parentNodeId, nodeId);
        }
      }
    });

    // Third, transmit all other changes to our listener. This includes inserting reparented
    // elements that we removed in the 2nd stage.
    docUpdate.getChangedElements(new Accumulator<Object>() {
      private final HashSet<Object> listenerInsertedElements = new HashSet<>();
public void store(Object element) {

      @Override
      public void store(Object element) {
        // If this returns false then it means the element was garbage and has already been removed
        if (!mObjectIdMapper.containsObject(element)) {
          return;
        }

public void store(Object element) {
      }
    });

    docUpdate.commit();
  }

import com.facebook.stetho.common.ListUtil;
import com.facebook.stetho.common.Util;

import javax.annotation.concurrent.Immutable;

import java.util.List;

@Immutable
public final class ElementInfo {
  public final Object element;
  public final Object parentElement;
  public final List<Object> children;

  public ElementInfo(
      Object element,
      Object parentElement,
      List<Object> children) {
    this.element = Util.throwIfNull(element);
    this.parentElement = parentElement;
public void commit() {
      mElementToInfoMap.putAll(mElementToInfoChangesMap);

      // Remove garbage elements: those that have a null parent (other than mRootElement), and
      // their entire sub-trees.
      for (Object element : mRootElementChangesSet) {
        removeSubTree(mElementToInfoMap, element);
      }

      mIsUpdating = false;
    }

    private void removeSubTree(Map<Object, ElementInfo> elementToInfoMap, Object element) {
      final ElementInfo elementInfo = elementToInfoMap.get(element);
      elementToInfoMap.remove(element);
      for (int i = 0, N = elementInfo.children.size(); i < N; ++i) {
        removeSubTree(elementToInfoMap, elementInfo.children.get(i));
      }
    }
  }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public boolean onPrepareOptionsMenu(final Menu menu) {
            menu.findItem(R.id.menu_circle_mode).setVisible(false);
            menu.findItem(R.id.menu_trail_mode).setChecked(Settings.isMapTrail());

            menu.findItem(R.id.menu_theme_mode).setVisible(tileLayer.hasThemes());

            menu.findItem(R.id.menu_as_list).setVisible(!caches.isDownloading() && caches.getVisibleItemsCount() > 0);

private void pauseTileLayer() {
        }
    }

    @Override
    protected void onResume() {
        super.onResume();
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	<uses-permission android:name="android.permission.CHANGE_WIFI_STATE"/>
	<uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/>

	<application android:label="@string/app_name"
			android:icon="@mipmap/icn_launcher"
			android:allowBackup="false"
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        android:id="@+id/pagerLayout">

        <!-- fullscreen pager for hosting the photo -->
        <android.support.v4.view.ViewPager
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:id="@+id/pager"
                android:layout_height="match_parent"
                android:id="@+id/fullscreen_photo"/>

        </android.support.v4.view.ViewPager>

        <!-- caption layout -->
        <LinearLayout
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import android.widget.TextView;
import android.widget.Toast;

import org.fossasia.susi.ai.R;
import org.fossasia.susi.ai.adapters.recyclerAdapters.ChatFeedRecyclerAdapter;
import org.fossasia.susi.ai.helper.Constant;
private void setupAdapter() {
        rvChatFeed.setHasFixedSize(false);

        chatMessageDatabaseList = realm.where(ChatMessage.class).findAllSorted("id");
        recyclerAdapter = new ChatFeedRecyclerAdapter(this, chatMessageDatabaseList, true);

        rvChatFeed.setAdapter(recyclerAdapter);
        rvChatFeed.addOnLayoutChangeListener(new View.OnLayoutChangeListener() {
import android.view.ViewGroup;

import com.bumptech.glide.Glide;
import com.github.mikephil.charting.data.Entry;
import com.github.mikephil.charting.data.PieData;
import com.github.mikephil.charting.data.PieDataSet;
//    private Activity activity;
    private String TAG = ChatFeedRecyclerAdapter.class.getSimpleName();
    private RecyclerView recyclerView;

    public ChatFeedRecyclerAdapter(@NonNull Context context, @Nullable OrderedRealmCollection<ChatMessage> data, boolean autoUpdate) {
        super(context, data, autoUpdate);
        currContext = context;
        lastMsgCount = getItemCount();
        RealmChangeListener<RealmResults> listener = new RealmChangeListener<RealmResults>() {
public void onPos(final SourceContent sourceContent, boolean b) {
                if (imageList == null || imageList.size() == 0) {
                    linkPreviewViewHolder.previewImageView.setVisibility(View.GONE);
                } else {
                    Glide.with(currContext)
                            .load(imageList.get(0))
                            .centerCrop()
                            .into(linkPreviewViewHolder.previewImageView);
                }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
protected void onResume() {
        checkGps();
    }

    protected void refreshView() {
        nearbyAsyncTask = new NearbyAsyncTask(this);
        nearbyAsyncTask.execute();
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
protected void onPostExecute(String s) {
                Folder r = new Folder();
                r.path = json.getString("path");
                r.id = json.getString("id");
                r.invalid = json.getString("invalid");
                r.deviceIds = new ArrayList<>();
                JSONArray devices = json.getJSONArray("devices");
                for (int j = 0; j < devices.length(); j++) {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import com.bezirk.middleware.proxy.api.impl.BezirkZirkEndPoint;
import com.bezirk.middleware.proxy.api.impl.ZirkId;

import java.util.Date;
import java.util.List;
import java.util.Map;

    @Override
    public void onReceive(Context context, Intent intent) {
        ZirkAction message = (ZirkAction) intent.getSerializableExtra("message");

        if (isValidRequest(message.getZirkId())) {
            switch (message.getAction()) {
 * @see Location
 */
public class RecipientSelector implements Serializable {
    private static final Gson gson;

    static {
        final GsonBuilder builder = new GsonBuilder();
 * are created and managed by the middleware.
 */
public class Alias implements Serializable {
    private final String name;
    private final byte[] hash;

 * @see StreamDescriptor
 */
public class Event extends Message {
}
 * to a small set of ad hoc events. See {@link MessageSet} for examples.
 */
public class EventSet extends MessageSet {
    private static final org.slf4j.Logger logger = LoggerFactory.getLogger(EventSet.class);
    private transient EventReceiver receiver;

 * </pre>
 */
public class IdentifiedEvent extends Event {
    private Alias alias;

    private boolean isMiddlewareUser;
 * transfer/reception.
 */
public abstract class Message implements Serializable {
    private static Gson gson;
    private String msgId;

    //defualt value
    private static final long serialVersionUID = 1L;

    static {
        final GsonBuilder gsonBuilder = new GsonBuilder();
     *     //create gson builder
     *     GsonBuilder builder = new GsonBuilder();
     *     RuntimeTypeAdapterFactory &lt;Interface&gt; interfaceAdapter = RuntimeTypeAdapterFactory.of(Interface.class);
     *     qualityAdapter.registerSubtype(Implementation1.class).registerSubtype(Implementation2.class);
     *     builder.registerTypeAdapterFactory(interfaceAdapter);
     *
     *     //set builder
 * @see StreamDescriptor
 */
public abstract class MessageSet implements Serializable {
    private final Set<String> messageClassList = new HashSet<>();
    private final String setId;

 * @see Event
 */
public class StreamDescriptor extends Message {
    /**
     * Subclass sets to <code>true</code> if the payload can be processed incrementally (e.g. a
     * music stream) or <code>false</code> if all data elements must be received before processing
 * to a small set of ad hoc streams. See {@link MessageSet} for examples.
 */
public class StreamSet extends MessageSet {
    private transient StreamReceiver receiver;

    @SafeVarargs
import java.io.Serializable;

public final class ZirkId implements Serializable {
    private final String zirkId;
    private String bezirkEventId;

import java.io.Serializable;

public abstract class Action implements Serializable {
    static final long serialVersionUID = 42L;

    public abstract BezirkAction getAction();
}
import com.bezirk.middleware.proxy.api.impl.ZirkId;

public abstract class EventAction extends ZirkAction {
    private final String serializedEvent;
    private final String messageId;
    private final String eventName;
import java.io.File;

public final class ReceiveFileStreamAction extends ZirkAction {
    private final String serializedStream;
    /**
     * Path to downloaded file.
import com.bezirk.middleware.proxy.api.impl.ZirkId;

public class RegisterZirkAction extends ZirkAction {
    private final String zirkName;

    public RegisterZirkAction(ZirkId zirkId, String zirkName) {

import java.io.Serializable;

public class SendMulticastEventAction extends EventAction implements Serializable {
    private final RecipientSelector selector;
    private boolean isIdentified = false;
    private Alias alias;

public abstract class ServiceAction extends Action {

}
import com.bezirk.middleware.proxy.api.impl.ZirkId;

public class SetLocationAction extends ZirkAction {
    private final Location location;

    public SetLocationAction(ZirkId zirkId, Location location) {
public Location getLocation() {
    }

    @Override
    public com.bezirk.middleware.core.actions.BezirkAction getAction() {
        return com.bezirk.middleware.core.actions.BezirkAction.ACTION_BEZIRK_SET_LOCATION;
    }
}

public class StartServiceAction extends ServiceAction {

    private final Config config;

    public StartServiceAction(final Config config) {
package com.bezirk.middleware.core.actions;

public class StopServiceAction extends ServiceAction {
    @Override
    public BezirkAction getAction() {
        return BezirkAction.ACTION_STOP_BEZIRK;
import java.io.File;

public abstract class StreamAction extends ZirkAction {
    private final ZirkEndPoint recipient;
    private StreamDescriptor descriptor;
    private final short streamId;
import java.lang.reflect.Type;

public class SubscriptionAction extends ZirkAction {
    private static final Gson gson;

    static {
        final GsonBuilder gsonBuilder = new GsonBuilder();
import com.bezirk.middleware.proxy.api.impl.ZirkId;

public class UnicastEventAction extends EventAction {
    private final BezirkAction action;
    private final ZirkEndPoint endpoint;
    private boolean isIdentified = false;
import org.jetbrains.annotations.NotNull;

public abstract class ZirkAction extends Action {
    private final ZirkId zirkId;

    public ZirkAction(@NotNull ZirkId zirkId) {
 * New wire message will contain the control / even ledger message to send and receive
 */
public class WireMessage implements Serializable {
    public static final Logger logger = LoggerFactory.getLogger(WireMessage.class);
    private static final String MSG_VER_STRING = "\"msgVer\":\"";
    /// if the parser type is json, to check the message version VERSION STRING
    private static final String MSG_VER = MSG_VER_STRING + BezirkVersion.getWireVersion() + "\"";
    //private String msgVer = BezirkVersion.BEZIRK_VERSION;
    // increment the wire message version in bezirk version. when there is a change in message format
    private String msgVer = BezirkVersion.getWireVersion();
import java.util.Map;

public class Config implements Serializable {
    private static final String DEFAULT_GROUP_NAME = "BEZIRK_GROUP";
    private static final String DEFAULT_APP_NAME = "Bezirk";
    private static final Level DEFAULT_LOG_LEVEL = Level.ERROR;
 * Registry Class that deals with all the maps
 */
public class PubSubBrokerRegistry implements Serializable {
    private static final Logger logger = LoggerFactory.getLogger(PubSubBrokerRegistry.class);
    /**
     * Stores the list of Registered ZirkId's of the Zirks.
     */
 */
public class DeviceInformation implements Serializable {

    /**
     *
     */
    private static final long serialVersionUID = -7659289630471500105L;

    private String deviceName;
import java.util.HashSet;
import java.util.Set;

/**
 * @author Rishabh Gulati
 */
public abstract class Zirk implements Serializable {

    /**
     *
     */
    private static final long serialVersionUID = -2130386016234942372L;
    // set of sphereID's the zirk is a part of
    private HashSet<String> sphereSet;

public final class SphereKeys implements Serializable {

    /**
     * The key used for encrypting all the sphere information
     */

public class ProxyRegistry implements Serializable {

    private final HashMap<String, String> serviceIdsMap = new HashMap<String, String>();

    public String getBezirkServiceId(final String serviceName) {
/**
 * @author Rishabh Gulati
 */
public final class MemberSphere extends com.bezirk.middleware.core.sphere.impl.Sphere implements Serializable {
    private static final long serialVersionUID = 4338578155881822594L;
    /**
     * Used to identify if the sphere was a sharable sphere of another device
/**
 * @author Rishabh Gulati
 */
public final class OwnerSphere extends com.bezirk.middleware.core.sphere.impl.Sphere implements Serializable {
    private static final long serialVersionUID = 8307802592890417699L;

    public OwnerSphere() {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Subproject commit cf1ee4a1fcb44dfd12a0bc683ef17777c3f6351d
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
private Boolean UpdatePlaetze(Document doc)
  {
    try
    {
      NodeList nodes = doc.getElementsByTagName("Parkhaus");
      for (int i = 0; i < nodes.getLength(); i++)
      {
            android:switchMinWidth="0dp"
            android:layout_marginBottom="20dp"
            android:enabled="true"
            android:text="Hintergrundsprachausgabe aktivieren"
            android:checked="true"/>
    </LinearLayout>
</RelativeLayout>
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Subproject commit 43469c4233609ace7efb7646c5b2f94cd5bb4b77
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public Locale getLocale()
		if(countryCode != null)
		{
			List<String> languages = getLanguagesByCountry().get(countryCode);
			// for countries with several official languages, the chance is higher that the user is
			// in an area in which the language he set in his preferences is spoken than not
			if(languages.size() > 1 && languages.indexOf(locale.getLanguage()) != -1)
			{
				locale = new Locale(locale.getLanguage(), countryCode);
			}
			// otherwise, use the most common one
			else if(languages.size() > 0)
			{
				locale = new Locale(languages.get(0), countryCode);
			}
		}
		return locale;
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import android.database.sqlite.SQLiteOpenHelper;

public class DatabaseHelper extends SQLiteOpenHelper {
    private static final int DB_VERSION = 2;
    private static final String DB_NAME = "pluscontacts.db";
    private static final String CREATE_OWNERS = "CREATE TABLE owners (" +
            "_id INTEGER PRIMARY KEY AUTOINCREMENT," +
            "etag TEXT," +
            "sync_circles_to_contacts INTEGER NOT NULL DEFAULT 0," + // 0
            "sync_evergreen_to_contacts INTEGER NOT NULL DEFAULT 0," + // 0
            "last_full_people_sync_time INTEGER NOT NULL DEFAULT 0);"; // timestamp
    private static final String CREATE_CIRCLES = "CREATE TABLE circles (" +
            "_id INTEGER PRIMARY KEY AUTOINCREMENT," +
            "owner_id INTEGER NOT NULL," +
            "sync_to_contacts INTEGER NOT NULL DEFAULT 0," +
            "UNIQUE (owner_id,circle_id)," +
            "FOREIGN KEY (owner_id) REFERENCES owners(_id) ON DELETE CASCADE);";
    public static final String OWNERS_TABLE = "owners";
    public static final String CIRCLES_TABLE = "circles";

public void onCreate(SQLiteDatabase db) {
    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
        if (oldVersion < 2) db.execSQL(CREATE_CIRCLES);
    }

    @Override
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
private void uploadKey(String publicKey, final ChatMember member) {

                @Override
                public void onResponse(Call<TUMCabeStatus> call, Response<TUMCabeStatus> response) {
                    Utils.log(response.body().getStatus());

                    //Remember that we are done, only if we have submitted with the member information
                    if ("ok".equals(response.body().getStatus())) {
                        if (member != null) {
                            Utils.setInternalSetting(mContext, Const.PUBLIC_KEY_UPLOADED, true);
                        }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
android {
    minSdkVersion 21
    targetSdkVersion 21
    versionCode 1
    versionName "0.0.10"
  }

  buildTypes {
package com.mypodcasts;

import android.content.Intent;
import android.os.Bundle;
import android.support.v4.widget.DrawerLayout;
public void onItemClick(AdapterView<?> parent, View view, int position, long id)
      }
    });

    new FeedsAsyncTask().execute();
  }

  @Override
private void setActionBarDrawerToggle(DrawerLayout drawerLayout, Toolbar toolbar
  }

  private class FeedsAsyncTask extends RetryableAsyncTask<Void, Void, List<Feed>> {

    public FeedsAsyncTask() {
      super(MyPodcastsActivity.this);
    }

    @Override
package com.mypodcasts.episodes;

import android.app.FragmentManager;
import android.app.ProgressDialog;
import android.os.Bundle;
protected void onCreate(Bundle savedInstanceState) {

    Feed feed = (Feed) getIntent().getSerializableExtra(Feed.class.toString());

    new FeedEpisodesAsyncTask(feed).execute();
  }

  class FeedEpisodesAsyncTask extends RetryableAsyncTask<Void, Void, Feed> {
    private final Feed feed;

    public FeedEpisodesAsyncTask(Feed feed) {
      super(EpisodeFeedsActivity.this);

      this.feed = feed;
    }

    @Override
    protected void onPreExecute() {
      progressDialog.show();
      progressDialog.setMessage(format(
          getResources().getString(R.string.loading_feed_episodes), feed.getTitle()
      ));
    }

    @Override
protected Feed doInBackground(Void... params) {

    @Override
    protected void onPostExecute(Feed feed) {
      if (progressDialog != null && progressDialog.isShowing()) {
        progressDialog.dismiss();
      }

      arguments.putSerializable(
          EpisodeList.HEADER,
package com.mypodcasts.episodes.latestepisodes;

import android.app.FragmentManager;
import android.app.ProgressDialog;
import android.os.Bundle;
  protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);

    new LatestEpisodesAsyncTask().execute();
  }

  class LatestEpisodesAsyncTask extends RetryableAsyncTask<Void, Void, List<Episode>> {
    public LatestEpisodesAsyncTask() {
      super(LatestEpisodesActivity.this);
    }

    @Override
    protected void onPreExecute() {
      progressDialog.show();
      progressDialog.setMessage(getResources().getString(R.string.loading_latest_episodes));
    }

    @Override
protected void onPreExecute() {

    @Override
    protected void onPostExecute(List<Episode> latestEpisodes) {
      if (progressDialog != null && progressDialog.isShowing()) {
        progressDialog.dismiss();
      }

      arguments.putSerializable(
          EpisodeList.HEADER,
import static org.mockito.Mockito.inOrder;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.when;
import static org.robolectric.Robolectric.buildActivity;
import static org.robolectric.RuntimeEnvironment.application;
public void itShowsAndHideProgressDialog() {
  }

  @Test
  public void itDoNotCancelProgressDialogIfItIsNotShowing() {
    when(progressDialogMock.isShowing()).thenReturn(false);

package com.mypodcasts.episodes.latestepisodes;

import android.app.FragmentManager;
import android.app.FragmentTransaction;
import android.app.ProgressDialog;
import java.util.List;

import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.assertThat;
import static org.mockito.Mockito.inOrder;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.when;
import static org.robolectric.Robolectric.buildActivity;
import static org.robolectric.RuntimeEnvironment.application;
public void itShowsAndHideProgressDialog() {
  }

  @Test
  public void itDoesNotCancelProgressDialogIfItIsNotShowing() {
    when(progressDialogMock.isShowing()).thenReturn(false);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
private void onLoadingMessageUpdated(String message) {
            return;
        }
        currentLoadingMessage = message;
        loadingMessage.setText(message);
    }

    public void onProgressUpdate(LoadTBAData.LoadProgressInfo info) {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    </facet>
    <facet type="android" name="Android">
      <configuration>
        <option name="SELECTED_BUILD_VARIANT" value="freeDebug" />
        <option name="SELECTED_TEST_ARTIFACT" value="_android_test_" />
        <option name="ASSEMBLE_TASK_NAME" value="assembleFreeDebug" />
        <option name="COMPILE_JAVA_TASK_NAME" value="compileFreeDebugSources" />
        <afterSyncTasks>
          <task>generateFreeDebugSources</task>
        </afterSyncTasks>
        <option name="ALLOW_USER_CONFIGURATION" value="false" />
        <option name="MANIFEST_FILE_RELATIVE_PATH" value="/src/main/AndroidManifest.xml" />
        <option name="RES_FOLDER_RELATIVE_PATH" value="/src/main/res" />
        <option name="RES_FOLDERS_RELATIVE_PATH" value="file://$MODULE_DIR$/src/main/res;file://$MODULE_DIR$/src/free/res" />
        <option name="ASSETS_FOLDER_RELATIVE_PATH" value="/src/main/assets" />
      </configuration>
    </facet>
  </component>
  <component name="NewModuleRootManager" LANGUAGE_LEVEL="JDK_1_7" inherit-compiler-output="false">
    <output url="file://$MODULE_DIR$/build/intermediates/classes/free/debug" />
    <output-test url="file://$MODULE_DIR$/build/intermediates/classes/test/free/debug" />
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/r/free/debug" isTestSource="false" generated="true" />
      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/aidl/free/debug" isTestSource="false" generated="true" />
      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/free/debug" isTestSource="false" generated="true" />
      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/rs/free/debug" isTestSource="false" generated="true" />
      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/apt/free/debug" isTestSource="false" generated="true" />
      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/rs/free/debug" type="java-resource" />
      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/resValues/free/debug" type="java-resource" />
      <sourceFolder url="file://$MODULE_DIR$/src/freeDebug/res" type="java-resource" />
      <sourceFolder url="file://$MODULE_DIR$/src/freeDebug/resources" type="java-resource" />
      <sourceFolder url="file://$MODULE_DIR$/src/freeDebug/assets" type="java-resource" />
      <sourceFolder url="file://$MODULE_DIR$/src/freeDebug/aidl" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/src/freeDebug/java" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/src/freeDebug/jni" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/src/freeDebug/rs" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/src/freeDebug/shaders" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/src/testFreeDebug/res" type="java-test-resource" />
      <sourceFolder url="file://$MODULE_DIR$/src/testFreeDebug/resources" type="java-test-resource" />
      <sourceFolder url="file://$MODULE_DIR$/src/testFreeDebug/assets" type="java-test-resource" />
      <sourceFolder url="file://$MODULE_DIR$/src/testFreeDebug/aidl" isTestSource="true" />
      <sourceFolder url="file://$MODULE_DIR$/src/testFreeDebug/java" isTestSource="true" />
      <sourceFolder url="file://$MODULE_DIR$/src/testFreeDebug/jni" isTestSource="true" />
      <sourceFolder url="file://$MODULE_DIR$/src/testFreeDebug/rs" isTestSource="true" />
      <sourceFolder url="file://$MODULE_DIR$/src/testFreeDebug/shaders" isTestSource="true" />
      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/r/androidTest/free/debug" isTestSource="true" generated="true" />
      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/aidl/androidTest/free/debug" isTestSource="true" generated="true" />
      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/androidTest/free/debug" isTestSource="true" generated="true" />
      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/rs/androidTest/free/debug" isTestSource="true" generated="true" />
      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/apt/androidTest/free/debug" isTestSource="true" generated="true" />
      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/rs/androidTest/free/debug" type="java-test-resource" />
      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/resValues/androidTest/free/debug" type="java-test-resource" />
      <sourceFolder url="file://$MODULE_DIR$/src/free/res" type="java-resource" />
      <sourceFolder url="file://$MODULE_DIR$/src/free/resources" type="java-resource" />
      <sourceFolder url="file://$MODULE_DIR$/src/free/assets" type="java-resource" />
      <sourceFolder url="file://$MODULE_DIR$/src/free/aidl" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/src/free/java" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/src/free/jni" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/src/free/rs" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/src/free/shaders" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/src/testFree/res" type="java-test-resource" />
      <sourceFolder url="file://$MODULE_DIR$/src/testFree/resources" type="java-test-resource" />
      <sourceFolder url="file://$MODULE_DIR$/src/testFree/assets" type="java-test-resource" />
      <sourceFolder url="file://$MODULE_DIR$/src/testFree/aidl" isTestSource="true" />
      <sourceFolder url="file://$MODULE_DIR$/src/testFree/java" isTestSource="true" />
      <sourceFolder url="file://$MODULE_DIR$/src/testFree/jni" isTestSource="true" />
      <sourceFolder url="file://$MODULE_DIR$/src/testFree/rs" isTestSource="true" />
      <sourceFolder url="file://$MODULE_DIR$/src/testFree/shaders" isTestSource="true" />
      <sourceFolder url="file://$MODULE_DIR$/src/androidTestFree/res" type="java-test-resource" />
      <sourceFolder url="file://$MODULE_DIR$/src/androidTestFree/resources" type="java-test-resource" />
      <sourceFolder url="file://$MODULE_DIR$/src/androidTestFree/assets" type="java-test-resource" />
      <sourceFolder url="file://$MODULE_DIR$/src/androidTestFree/aidl" isTestSource="true" />
      <sourceFolder url="file://$MODULE_DIR$/src/androidTestFree/java" isTestSource="true" />
      <sourceFolder url="file://$MODULE_DIR$/src/androidTestFree/jni" isTestSource="true" />
      <sourceFolder url="file://$MODULE_DIR$/src/androidTestFree/rs" isTestSource="true" />
      <sourceFolder url="file://$MODULE_DIR$/src/androidTestFree/shaders" isTestSource="true" />
      <sourceFolder url="file://$MODULE_DIR$/src/debug/res" type="java-resource" />
      <sourceFolder url="file://$MODULE_DIR$/src/debug/resources" type="java-resource" />
      <sourceFolder url="file://$MODULE_DIR$/src/debug/assets" type="java-resource" />
      <sourceFolder url="file://$MODULE_DIR$/src/test/jni" isTestSource="true" />
      <sourceFolder url="file://$MODULE_DIR$/src/test/rs" isTestSource="true" />
      <sourceFolder url="file://$MODULE_DIR$/src/test/shaders" isTestSource="true" />
      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/blame" />
      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/exploded-aar/com.android.support/animated-vector-drawable/23.2.1/jars" />
      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/exploded-aar/com.android.support/appcompat-v7/23.2.1/jars" />
      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/exploded-aar/com.android.support/cardview-v7/23.2.1/jars" />
      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/exploded-aar/com.google.android.gms/play-services/7.3.0/jars" />
      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/exploded-aar/com.nbsp/library/1.08/jars" />
      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/incremental" />
      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/manifests" />
      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/res" />
      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/rs" />
      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/symbols" />
      <excludeFolder url="file://$MODULE_DIR$/build/outputs" />
    </content>
    <orderEntry type="jdk" jdkName="Android API 23 Platform (1)" jdkType="Android SDK" />
    <orderEntry type="sourceFolder" forTests="false" />
public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle sa
            mRecyclerView.setLayoutManager(mLayoutManager);                 // Setting the layout Manager
            mRecyclerViewTrackers.setLayoutManager(mLayoutManagerTrackers);                 // Setting the layout Manager
            mRecyclerViewGeneralInfo.setLayoutManager(mLayoutManagerGeneralInfo);                 // Setting the layout Manager
        } catch (Exception e) {
            Log.e("Debug", e.toString());
        }

        // TODO: Check if this can be removed
        registerForContextMenu(mRecyclerView);
//        registerForContextMenu(mRecyclerViewTrackers);
//        registerForContextMenu(mRecyclerViewGeneralInfo);


        // Get Refresh Listener
        refreshListener = (RefreshListener) getActivity();
        mSwipeRefreshLayout = (SwipeRefreshLayout) rootView.findViewById(R.id.details_refresh_layout);
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
private void setAttributes()
                        break;
                }

                data += getRow(field != null ? field.getAlias() : "", text);
            }

Subproject commit 3bc5d1aea6341266c39af91315ed742a2f4fec40
Subproject commit 8e7ba4d068d27ec37a0ac4605c40143ca102301b
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void onTextChanged(CharSequence s, int start, int before, int after) {
        String addString;
        String beforeString = null;
        String afterString = null;
        addString = s.subSequence(start, start + Math.abs(after - before)).toString();
        if (start + (after - before) + 1 <= s.length()) {
            afterString = s.subSequence(start + Math.abs(before - after), start + Math.abs(before - after) + 1).toString();
        }
        if (start > 0) {
            beforeString = s.subSequence(start - 1, start).toString();
public void onTextChanged(CharSequence s, int start, int before, int after) {
            return;
        }
        String addString;
        addString = s.subSequence(start, start + Math.abs(after - before)).toString();
        if (addString.contains(KEY0) || addString.contains(KEY1)) {
            format((Editable) s, start);
        }
public void onTextChanged(CharSequence s, int start, int before, int after) {
        String addString;
        String beforeString = null;
        String afterString = null;
        addString = s.subSequence(start, start + Math.abs(after - before)).toString();
        if (start + (after - before) + 1 <= s.length()) {
            afterString = s.subSequence(start + Math.abs(before - after), start + Math.abs(before - after) + 1).toString();
        }
        if (start > 0) {
            beforeString = s.subSequence(start - 1, start).toString();
public void onTextChanged(CharSequence s, int start, int before, int after) {
        String addString;
        String beforeString = null;
        String afterString = null;
        addString = s.subSequence(start, start + Math.abs(after - before)).toString();
        if (start + (after - before) + 1 <= s.length()) {
            afterString = s.subSequence(start + Math.abs(before - after), start + Math.abs(before - after) + 1).toString();
        }
        if (start > 0) {
            beforeString = s.subSequence(start - 1, start).toString();
public void onTextChanged(CharSequence s, int start, int before, int after) {
        String addString;
        String beforeString = null;
        String afterString = null;
        addString = s.subSequence(start, start + Math.abs(after - before)).toString();
        if (start + (after - before) + 1 <= s.length()) {
            afterString = s.subSequence(start + Math.abs(before - after), start + Math.abs(before - after) + 1).toString();
        }
        if (start > 0) {
            beforeString = s.subSequence(start - 1, start).toString();
public void onTextChanged(CharSequence s, int start, int before, int after) {
            return;
        }
        String addString;
        addString = s.subSequence(start, start + Math.abs(after - before)).toString();
        if (addString.contains(KEY)) {
            format((Editable) s, start);
        }
public void onTextChanged(CharSequence s, int start, int before, int after) {
        String addString;
        String beforeString = null;
        String afterString = null;
        addString = s.subSequence(start, start + Math.abs(after - before)).toString();
        if (start + (after - before) + 1 <= s.length()) {
            afterString = s.subSequence(start + Math.abs(before - after), start + Math.abs(before - after) + 1).toString();
        }
        if (start > 0) {
            beforeString = s.subSequence(start - 1, start).toString();
public void onTextChanged(CharSequence s, int start, int before, int after) {
        String addString;
        String beforeString = null;
        String afterString = null;
        addString = s.subSequence(start, start + Math.abs(after - before)).toString();
        if (start + (after - before) + 1 <= s.length()) {
            afterString = s.subSequence(start + Math.abs(before - after), start + Math.abs(before - after) + 1).toString();
        }
        if (start > 0) {
            beforeString = s.subSequence(start - 1, start).toString();
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import android.webkit.WebViewClient;
import android.widget.FrameLayout;
import android.widget.LinearLayout;

import com.keenfin.easypicker.PhotoPicker;
import com.nextgis.maplib.api.IGISApplication;
public View onCreateView(
            ViewGroup container,
            Bundle savedInstanceState)
    {
        if (mLayer == null)
            getActivity().getSupportFragmentManager().popBackStack();

        getActivity().setTitle(mLayer.getName());
        setHasOptionsMenu(!isTablet());
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void onReceive(Context context, Intent intent) {
                resultsJSON = (SerializableJSONArray) intent.getSerializableExtra(INaturalistService.RESULTS);
            }

            JSONArray results = resultsJSON.getJSONArray();
            ArrayList<JSONObject> resultsArray = new ArrayList<JSONObject>();

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import android.content.Context;

import com.liulishuo.filedownloader.model.FileDownloadHeader;
import com.liulishuo.filedownloader.services.FDServiceSharedHandler;
import com.liulishuo.filedownloader.util.FileDownloadProperties;

 * separate `:filedownloader` process.
 */
public class FileDownloadServiceProxy implements IFileDownloadServiceProxy {
    private final static class HolderClass {
        private final static FileDownloadServiceProxy INSTANCE = new FileDownloadServiceProxy();
    }
private FileDownloadServiceProxy() {
                new FileDownloadServiceUIGuard();
    }

    @Override
    public boolean start(String url, String path, boolean pathAsDirectory, int callbackProgressTimes,
                         int callbackProgressMinIntervalMillis,

    /**
     * Initialize the FileDownloader.
     * <p>
     * <strong>Note:</strong> this method consumes 4~28ms in nexus 5. the most cost used for
     * loading classes.
     *
     * @see #init(Context, DownloadMgrInitialParams.InitCustomMaker)
     */
public static void init(final Context context) {
    }



    /**
     * * Initialize the FileDownloader.
     * <p>
     * <strong>Note:</strong> this method consumes 4~28ms in nexus 5. the most cost used for
     * loading classes.
     * <p>
     * This method cache {@code context} in Main-Process and FileDownloader-Process, and if the
     * {@code okHttpClientCustomMaker} is provided, FileDownloader will initialize the okHttpClient
     * in the FileDownloadService settled downed process.
     * <p/>
     * <strong>Tips:</strong> As default, you need invoke this method in {@link Application#onCreate()}
     * to make sure the {@code context} can be hold in both Main-Process and FileDownloader-Process.
     * But if you set the downloader service running in the main process, you can invoke this method
     * when you need use FileDownloader. Ref {@link FileDownloadProperties} to set the downloader
     * service running in the main process.
     *
     * @param context The context.
     * @param maker   Used to customize the download service, this value can be {@code null}.
     */
    public static void init(final Context context,
                            /**Nullable **/final DownloadMgrInitialParams.InitCustomMaker maker) {
public static void init(final Context context,

        FileDownloadHelper.holdContext(context);

        if (FileDownloadUtils.isDownloaderProcess(context)) {
            FileDownloadHelper.initializeDownloadMgrParams(maker);

            try {
                FileDownloadUtils.setMinProgressStep(FileDownloadProperties.getImpl().DOWNLOAD_MIN_PROGRESS_STEP);
                FileDownloadUtils.setMinProgressTime(FileDownloadProperties.getImpl().DOWNLOAD_MIN_PROGRESS_TIME);
            } catch (IllegalAccessException e) {
                e.printStackTrace();
            }
        }
    }


private synchronized int callback(MessageSnapshot snapShot) {
        return n;
    }

    FDServiceSeparateHandler(WeakReference<FileDownloadService> wService) {
        this.wService = wService;
        this.downloadManager = new FileDownloadMgr();

        MessageSnapshotFlow.getImpl().setReceiver(this);
    }
    private final FileDownloadMgr downloadManager;
    private final WeakReference<FileDownloadService> wService;

    FDServiceSharedHandler(WeakReference<FileDownloadService> wService) {
        this.wService = wService;
        this.downloadManager = new FileDownloadMgr();
    }

    @Override
    private final FileDownloadHelper.OutputStreamCreator mOutputStreamCreator;
    private final FileDownloadHelper.ConnectionCreator mConnectionCreator;

    public FileDownloadMgr() {

        final DownloadMgrInitialParams params = FileDownloadHelper.getDownloadMgrInitialParams();

        this.mDatabase = params.createDatabase();
        this.mThreadPool = new FileDownloadThreadPool(params.getMaxNetworkThreadCount());
        this.mOutputStreamCreator = params.createOutputStreamCreator();
import android.content.Intent;
import android.os.IBinder;

import com.liulishuo.filedownloader.util.FileDownloadProperties;

import java.lang.ref.WeakReference;

    @Override
    public void onCreate() {
        super.onCreate();
        if (FileDownloadProperties.getImpl().PROCESS_NON_SEPARATE) {
            handler = new FDServiceSharedHandler(new WeakReference<>(this));
        } else {
            handler = new FDServiceSeparateHandler(new WeakReference<>(this));
        }
    }

import com.liulishuo.filedownloader.message.MessageSnapshotFlow;
import com.liulishuo.filedownloader.message.MessageSnapshotTaker;
import com.liulishuo.filedownloader.model.FileDownloadModel;
import com.liulishuo.filedownloader.services.DownloadMgrInitialParams;
import com.liulishuo.filedownloader.services.FileDownloadDatabase;
import com.liulishuo.filedownloader.stream.FileDownloadBufferedOutputStream;
import com.liulishuo.filedownloader.stream.FileDownloadOutputStream;

    @SuppressLint("StaticFieldLeak")
    private static Context APP_CONTEXT;
    private static DownloadMgrInitialParams DOWNLOAD_MANAGER_INITIAL_PARAMS;

    public static void holdContext(final Context context) {
        APP_CONTEXT = context;
public static Context getAppContext() {
        return APP_CONTEXT;
    }

    public static void initializeDownloadMgrParams(DownloadMgrInitialParams.InitCustomMaker customMaker) {
        if (!FileDownloadUtils.isDownloaderProcess(FileDownloadHelper.getAppContext())) {
            throw new IllegalStateException(
                    FileDownloadUtils.formatString("the DownloadMgrInitialParams is only " +
                            "can be touched in the process which the download service settles on"));
        }

        DOWNLOAD_MANAGER_INITIAL_PARAMS = new DownloadMgrInitialParams(customMaker);
    }

    public static DownloadMgrInitialParams getDownloadMgrInitialParams() {
        return DOWNLOAD_MANAGER_INITIAL_PARAMS == null ?
                new DownloadMgrInitialParams(null) : DOWNLOAD_MANAGER_INITIAL_PARAMS;
    }

    public interface DatabaseCustomMaker {
        /**
         * The database is used for storing the {@link FileDownloadModel}.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
private boolean checkInput(boolean importing) {
                error(R.string.msg_no_name);
                return false;
            }

            PhoneNumberUtil util = PhoneNumberUtil.getInstance();
            CountryCode cc = (CountryCode) mCountryCode.getSelectedItem();
            if (!BuildConfig.DEBUG) {
                PhoneNumber phone;
                try {
                    phone = util.parse(mPhone.getText().toString(), cc.regionCode);
                    // autoselect correct country if user entered country code too
                    if (phone.hasCountryCode()) {
                        CountryCode ccLookup = new CountryCode();
private void startImport(ZipInputStream zip, String passphrase) {
                }
            }

            // check that uid matches phone number
            String email = uid.getEmail();
            String numberHash = MessageUtils.sha1(mPhoneNumber);
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
subprojects { project ->
            options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'
        }
    }

    // We generate a combined javadoc, no need to create javadocs for each library independently.
    if (!project.name.equals('glide')) {
        tasks.withType(Javadoc).all { enabled = false }
    }
}

task wrapper(type: Wrapper) {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import android.app.Activity;
import android.app.Fragment;
import android.app.FragmentTransaction;
import android.os.Bundle;

import com.google.firebase.FirebaseApp;
protected NetComponent getNetComponent() {
        return ( (AndroidApplication) getApplication() ).getNetComponent();
    }

}
package org.mythtv.android.presentation.view.activity.tv;

import android.app.SearchManager;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.provider.SearchRecentSuggestions;
import android.support.v17.leanback.widget.SpeechRecognitionCallback;
import android.util.Log;

import org.mythtv.android.R;
import org.mythtv.android.presentation.internal.di.HasComponent;
import org.mythtv.android.presentation.internal.di.components.DaggerMediaComponent;
private void initializeActivity( Intent intent ) {

        }

        SpeechRecognitionCallback mSpeechRecognitionCallback = () -> startActivityForResult( mSearchableFragment.getRecognizerIntent(), REQUEST_SPEECH );
        mSearchableFragment.setSpeechRecognitionCallback( mSpeechRecognitionCallback );

        Log.d( TAG, "initializeActivity : exit" );
    }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Subproject commit 38dc4b619b49af8a4c1456e8a9b33276e4b49f99
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    <ConfirmationsSetting value="0" id="Add" />
    <ConfirmationsSetting value="0" id="Remove" />
  </component>
  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_8" default="true" assert-keyword="true" jdk-15="true" project-jdk-name="1.8" project-jdk-type="JavaSDK">
    <output url="file://$PROJECT_DIR$/build/classes" />
  </component>
  <component name="ProjectType">
protected void onActivityResult(int requestCode, int resultCode, Intent data) {
                updateCurrentProject();
            }
        } else if (requestCode == 1011) {
            String user = data.getStringExtra("user");
            UsuarioController.UpdateUserProjects(user, currentProjectId);
            projeto.getMembrosProjeto().add(user);
            updateCurrentProject();
        }

    }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
        if(mState != null && product.getIngredientsText() != null) {
            SpannableStringBuilder txtIngredients = new SpannableStringBuilder(product.getIngredientsText().replace("_",""));
            txtIngredients = setSpanBoldBetweenTokens(txtIngredients, allergens);
            if(!txtIngredients.toString().substring(txtIngredients.toString().indexOf(":")).trim().isEmpty()) {
                ingredientsProduct.setText(txtIngredients);
            } else {
                ingredientsProduct.setVisibility(View.GONE);
  <string name="txtCity">Oraș și țara unde produsul a fost cumpărat:</string>
  <string name="txtStores">Magazine:</string>
  <string name="txtCountries">Țări unde produsul este comercializat:</string>
  <string name="txtIngredients">Ingrediente</string>
  <string name="txtSubstances">Substanțe care provoacă alergii sau intoleranțe:</string>
  <string name="txtAdditives">Aditivi alimentari:</string>
  <string name="txtTraces">Urme de:</string>
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
protected void onNewIntent(Intent intent) {
    }

    protected boolean handleIntent(Intent intent) {
        if (!super.handleIntent(intent))
            return false;

        if (intent != null) {
            String action = intent.getAction();
public void run() {
            // since we have the conversation list open, we're going to disable notifications
            // no need to notify the user twice
            MessagingNotification.disable();

            Intent intent = getIntent();
            if (intent != null) {
                Intent sendIntent = getIntent().getParcelableExtra(EXTRA_SEND_INTENT);
                if (sendIntent != null) {
                    // handle the share intent sent from ComposeMessage
                    processSendIntent(sendIntent);
                    // clear the intent
                    intent.removeExtra(EXTRA_SEND_INTENT);
                }
            }
        }

        updateOffline();
    }

    @Override
    protected void onPause() {
        super.onPause();
        // release message center
public void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which)
        return super.onCreateDialog(id, args);
    }

    protected boolean handleIntent(Intent intent) {
        if (intent != null) {
            String action = intent.getAction();
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import de.westnordost.streetcomplete.data.download.QuestAutoDownloadStrategy;
import de.westnordost.streetcomplete.data.download.WifiAutoDownloadStrategy;
import de.westnordost.streetcomplete.data.osm.upload.ChangesetAutoCloserReceiver;
import de.westnordost.streetcomplete.util.SphericalEarthMath;

import static android.app.PendingIntent.FLAG_CANCEL_CURRENT;

public void startPositionTracking()

	public void stopPositionTracking()
	{
		if(lostApiClient.isConnected())
		{
			LocationServices.FusedLocationApi.removeLocationUpdates(lostApiClient, this);
			lostApiClient.disconnect();
		}
	}

public void startRequest(int priority, Callback listener)

	public void stopRequest()
	{
		Handler h = new Handler(Looper.getMainLooper());
		h.post(new Runnable()
		{
			@Override public void run()
			{
				if(lostApiClient.isConnected())
				{
					LocationServices.FusedLocationApi.removeLocationUpdates(lostApiClient, SingleLocationRequest.this);
					lostApiClient.disconnect();
				}
			}
		});

	}

	@Override public void onConnected() throws SecurityException
public void stopPositionTracking()
		lastLocation = null;
		zoomedYet = false;

		if(lostApiClient.isConnected())
		{
			LocationServices.FusedLocationApi.removeLocationUpdates(lostApiClient, this);
			lostApiClient.disconnect();
		}
	}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Subproject commit aa8c9514172ab84e620fc8fc528297206fadbf88
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import javax.inject.Inject;

import io.locative.app.model.EventType;
import io.locative.app.model.Fencelog;
import io.locative.app.model.Geofences;
public Request authenticate(Route route, Response response) throws IOException {
                .add("trigger", eventToString(eventType))
                .add("timestamp", String.valueOf(new Timestamp(new Date().getTime())))
                .build();
        final Request request = new Request.Builder()
                .url(urlIncludingQuery(geofence, eventType))
                .method(fromMethod(method), method == 0 ? body : null)
                .build();
        mClient.newCall(request).enqueue(new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {
                if (mPreferences.getBoolean(Preferences.NOTIFICATION_FAIL, false)) {
                    mNotificationManager.showNotification(
                            geofence.getRelevantId(),
                            "Error when sending HTTP request."
                    );
                }
                dispatchFencelog(geofence, eventType, relevantUrl(geofence, eventType), fromMethod(method), 0);
            }

            @Override
            public void onResponse(Call call, Response response) throws IOException {
                if (mPreferences.getBoolean(Preferences.NOTIFICATION_SUCCESS, false)) {
                    final String result = response.isSuccessful() ? "Success" : "Error";
                    mNotificationManager.showNotification(
                            geofence.getRelevantId(),
                            result + " in HTTP request (" + response.code() + ")"
                    );
                }
                dispatchFencelog(
                        geofence,
                        eventType,
public void onResponse(Call call, Response response) throws IOException {
        });
    }

    void dispatchFencelog(final Geofences.Geofence geofence,
                                  final EventType eventType,
                                  final String httpUrl,
    private final WeakReference<AddEditGeofenceActivity> mTarget;

    public GeocodeHandler(AddEditGeofenceActivity target) {
        mTarget = new WeakReference<AddEditGeofenceActivity>(target);
    }

    @Override
import io.locative.app.persistent.GeofenceProvider;
import io.locative.app.utils.Constants;
import io.locative.app.utils.GeocodeHandler;

public class AddEditGeofenceActivity extends BaseActivity implements OnMapReadyCallback {

public void onMapReady(GoogleMap googleMap) {
        }

        updateRadius();

//        // Add a marker in Sydney and move the camera
//        LatLng sydney = new LatLng(-34, 151);
//        mMap.addMarker(new MarkerOptions().position(sydney).title("Marker in Sydney"));
//        mMap.moveCamera(CameraUpdateFactory.newLatLng(sydney));
    }

    @Override
public boolean onOptionsItemSelected(MenuItem item) {
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();
        if (id == R.id.action_save) {
            // Save Geofence / Add new one
            if (!mAddressIsDirty) {
                this.save(true);
public boolean onOptionsItemSelected(MenuItem item) {
        return super.onOptionsItemSelected(item);
    }

    public void save(boolean finish) {

        Log.i(Constants.LOG, "Saved #1: " + mSaved);

        if (mSaved) {
    <string name="geocoding_progress_message">Determining Location and saving…</string>
    <string name="title_activity_settings">Settings</string>
    <string name="title_activity_signup">SignupActivity</string>

    <!-- Error strings -->
    <string name="geofence_not_available">Geofence service is not available now</string>
    <string name="geofence_too_many_geofences">Your app has registered too many geofences</string>
    <string name="cancel">Cancel</string>
    <string name="fencelogs_empty">No Fencelogs available. Set up some Geofences to start logging.</string>
    <string name="notifications">Notifications</string>


    <string name="http_settings">HTTP Settings</string>
    <string name="geofence_settings">Geofence Settings</string>
    <string name="no_notifications">You have no notifications.</string>

    <!-- Drawer -->
    <string name="drawer_header_username_placeholder">Click here to log in</string>
</resources>
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import android.os.Parcel;
import android.os.Parcelable;
import android.view.View;

/**
 * The SavedState implementation to store the view's internal id to
 *
 * @author Hannes Dorfmann
 * @since 3.0
 */
public class MosbySavedState extends View.BaseSavedState {

  public static final Parcelable.Creator<MosbySavedState> CREATOR =
      new Parcelable.Creator<MosbySavedState>() {
        public MosbySavedState createFromParcel(Parcel in) {
          return new MosbySavedState(in);
        }

        public MosbySavedState[] newArray(int size) {
          return new MosbySavedState[size];
        }
      };

  private int mosbyViewId = 0;

  public MosbySavedState(Parcelable superState) {
    super(superState);
  }

  protected MosbySavedState(Parcel in) {
    super(in);
    this.mosbyViewId = in.readInt();
  }


import android.os.Parcel;
import android.os.Parcelable;
import android.view.View;

/**
 * The SavedState implementation to store the view's internal id to
 *
 * @author Hannes Dorfmann
 * @since 3.0
 */
public class MosbySavedState extends View.BaseSavedState {

  public static final Creator<MosbySavedState> CREATOR =
      new Creator<MosbySavedState>() {
        public MosbySavedState createFromParcel(Parcel in) {
          return new MosbySavedState(in);
        }

        public MosbySavedState[] newArray(int size) {
          return new MosbySavedState[size];
        }
      };

  private String mosbyViewId;

public MosbySavedState(Parcelable superState, String mosbyViewId) {
    this.mosbyViewId = mosbyViewId;
  }

  protected MosbySavedState(Parcel in) {
    super(in);
    this.mosbyViewId = in.readString();
  }


import android.os.Parcel;
import android.os.Parcelable;
import com.hannesdorfmann.mosby3.mvp.viewstate.RestorableParcelableViewState;

/**
public class MosbyViewStateSavedState extends MosbySavedState {

  public static final Parcelable.Creator<MosbyViewStateSavedState> CREATOR =
      new Parcelable.Creator<MosbyViewStateSavedState>() {
        public MosbyViewStateSavedState createFromParcel(Parcel in) {
          return new MosbyViewStateSavedState(in);
        }

        public MosbyViewStateSavedState[] newArray(int size) {
          return new MosbyViewStateSavedState[size];
        }
      };

  private RestorableParcelableViewState mosbyViewState;

  public MosbyViewStateSavedState(Parcelable superState) {
    super(superState);
  }

  protected MosbyViewStateSavedState(Parcel in) {
    super(in);
    this.mosbyViewState = in.readParcelable(RestorableParcelableViewState.class.getClassLoader());
  }

  @Override public void writeToParcel(Parcel out, int flags) {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public boolean isRedirectRequested(HttpResponse response, HttpContext context) {
                mResponseHeaders = response.getAllHeaders();

                try {
                	if (json != null) {
                        JSONObject result = json.getJSONObject(0);
                        if (result.has("errors")) {
                            // Error response
public void onNotification(String title, final String content) {
		runOnUiThread(new Runnable() {
            @Override
            public void run() {
                mSyncingStatus.setText(content);
                int visibility = View.GONE;
                if (mApp.loggedIn() && mApp.getIsSyncing() && (mObservationListAdapter.getCount() == 0)) {
                    visibility = View.GONE;
                } else {
                    visibility = mApp.getIsSyncing() ? View.VISIBLE : View.GONE;
                }
                mSyncingTopBar.setVisibility(visibility);
                mObservationListAdapter.refreshCursor();
                mObservationGridAdapter.refreshCursor();
            }
        });
	}
public Cursor query(Uri uri, String[] projection, String selection, String[] sel
            String sortOrder) {
        SQLiteQueryBuilder qb = new SQLiteQueryBuilder();
        String orderBy;
        
        switch (URI_MATCHER.match(uri)) {
        case Observation.OBSERVATIONS_URI_CODE:
            qb.setTables(Observation.TABLE_NAME);
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import android.animation.ObjectAnimator;
import android.content.Context;
import android.database.DataSetObserver;
import android.util.SparseArray;
import android.view.View;
import android.view.ViewGroup;
class WrapperAdapter implements WrapperListAdapter, ItemMainLayout.OnItemSlideListenerProxy, View.OnClickListener,
        AbsListView.OnScrollListener, ItemMainLayout.OnItemDeleteListenerProxy, Callback.OnDragDropListener,
        ItemMainLayout.OnItemScrollBackListenerProxy {
    private static final int TAG_LEFT = 3 << 24;
    private static final int TAG_RIGHT = 4 << 24;
    /* 上下文 */
    private Context mContext;
    /* 适配器 */
protected WrapperAdapter(Context context, SlideListView listView, ListAdapter ad
        mAdapter.registerDataSetObserver(mDataSetObserver);
        mListView.serAdapterDragDropListener(this);
        mItemIdTopMap = new HashMap<>();
    }

    @Override
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import org.onebusaway.android.BuildConfig;
import org.onebusaway.android.R;
import org.onebusaway.android.io.ObaAnalytics;
import org.onebusaway.android.io.elements.ObaRegion;
import org.onebusaway.android.io.elements.ObaRegionElement;
private Stops() {
        public static final String CONTENT_DIR_TYPE
                = "vnd.android.dir/" + BuildConfig.DATABASE_AUTHORITY + ".stop";

        public static Uri insertOrUpdate(Context context,
                String id,
                ContentValues values,
                boolean markAsUsed) {
            ContentResolver cr = context.getContentResolver();
            final Uri uri = Uri.withAppendedPath(CONTENT_URI, id);
            Cursor c = cr.query(uri, new String[]{USE_COUNT}, null, null,
                    null);
private void addToDB(ObaStop stop) {
        if (Application.get().getCurrentRegion() != null) {
            values.put(ObaContract.Stops.REGION_ID, Application.get().getCurrentRegion().getId());
        }
        ObaContract.Stops.insertOrUpdate(getActivity(), stop.getId(), values, true);
    }

    private static final String[] TRIPS_PROJECTION = {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void onLoadFinished(Loader<Cursor> loader, Cursor data) {
            // Two cases:

            boolean grouped = masterKeyId == lastMasterKeyId;
            boolean subGrouped = data.isFirst() || grouped && lastName.equals(name);
            // Remember for next loop
            lastName = name;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import android.net.NetworkInfo;
import android.os.Environment;
import android.preference.PreferenceManager;

import com.google.android.gms.analytics.GoogleAnalytics;
import com.google.android.gms.analytics.Tracker;
 */
public class Collect extends Application {

    static {
        PRNGFixes.apply();
    }

    // Storage paths
    public static final String ODK_ROOT = Environment.getExternalStorageDirectory()
            + File.separator + "odk";
    public static final String TMPDRAWFILE_PATH = CACHE_PATH + File.separator + "tmpDraw.jpg";
    public static final String TMPXML_PATH = CACHE_PATH + File.separator + "tmp.xml";
    public static final String LOG_PATH = ODK_ROOT + File.separator + "log";

    public static final String DEFAULT_FONTSIZE = "21";
    public static final String OFFLINE_LAYERS = ODK_ROOT + File.separator + "layers";

    // share all session cookies across all sessions...
    private CookieStore cookieStore = new BasicCookieStore();
    private ActivityLogger mActivityLogger;
    private FormController mFormController = null;
    private ExternalDataManager externalDataManager;

    private static Collect singleton = null;

    private Tracker mTracker;

    public static Collect getInstance() {
        return singleton;
    }

    public ActivityLogger getActivityLogger() {
        return mActivityLogger;
    }

    public FormController getFormController() {
        return mFormController;
    }

    public void setFormController(FormController controller) {
        mFormController = controller;
    }

    public ExternalDataManager getExternalDataManager() {
        return externalDataManager;
    }

    public void setExternalDataManager(ExternalDataManager externalDataManager) {
        this.externalDataManager = externalDataManager;
    }

    public static int getQuestionFontsize() {
        SharedPreferences settings = PreferenceManager.getDefaultSharedPreferences(Collect
                .getInstance());
public static int getQuestionFontsize() {
        return questionFontsize;
    }

    public String getVersionedAppName() {
        String versionName = "";
        try {
            versionName = getPackageManager()
                    .getPackageInfo(getPackageName(), 0)
                    .versionName;
            versionName = " " + versionName.replaceFirst("-", "\n");
        } catch (NameNotFoundException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return getString(R.string.app_name) + versionName;
    }

    public boolean isNetworkAvailable() {
        ConnectivityManager manager = (ConnectivityManager) getInstance()
                .getSystemService(Context.CONNECTIVITY_SERVICE);
        NetworkInfo currentNetworkInfo = manager.getActiveNetworkInfo();
        return currentNetworkInfo != null && currentNetworkInfo.isConnected();
    }

    /**
     * Creates required directories on the SDCard (or other external storage)
     *
public static boolean isODKTablesInstanceDataDirectory(File directory) {
        return false;
    }

    /**
     * Construct and return a session context with shared cookieStore and credsProvider so a user
     * does not have to re-enter login information.
public void onCreate() {

    /**
     * Gets the default {@link Tracker} for this {@link Application}.
     * @return tracker
     */
    synchronized public Tracker getDefaultTracker() {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
