
    private static final String TAG = "Utils";

    public static Date parseDate(String input) {
        // Example: "2013-07-22T04:03:04-04:00"
        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ");
        Date date = new Date();
        try {
            date = format.parse(input);
        } catch (ParseException e) {
            Log.e(TAG, "Date parsing error", e);
        }
        return date;
    }

    public static boolean isOnline(Context context) {
public void updateContent() {
            if (ackTime != null) {
                ackStatus.setText(getString(R.string.alarm_details_acked));
                TextView ackMessage = (TextView) getActivity().findViewById(R.id.alarm_ack_message);
                ackMessage.setText(Utils.parseDate(ackTime).toString() + " "
                                   + getString(R.string.alarm_details_acked_by) + " " + ackUser);
            } else {
                ackStatus.setText(getString(R.string.alarm_details_not_acked));
            }
public void updateContent() {
            String lastEventSeverity = cursor.getString(
                    cursor.getColumnIndexOrThrow(Contract.Alarms.LAST_EVENT_SEVERITY));
            TextView lastEvent = (TextView) getActivity().findViewById(R.id.alarm_last_event);
            lastEvent.setText("#" + lastEventId + " " + lastEventSeverity + "\n" + Utils
                    .parseDate(lastEventTimeString).toString());
        }
    }

public void updateContent(long eventId) {
            String createTimeString = cursor.getString(
                    cursor.getColumnIndexOrThrow(Contract.Events.CREATE_TIME));
            TextView timeTextView = (TextView) getActivity().findViewById(R.id.event_create_time);
            timeTextView.setText(Utils.parseDate(createTimeString).toString());

            // Log message
            String logMessage = cursor.getString(
public void updateContent(long nodeId) {
            String createdTime = cursor.getString(
                    cursor.getColumnIndexOrThrow(Contract.Nodes.CREATED_TIME));
            TextView timeView = (TextView) getActivity().findViewById(R.id.node_creation_time);
            timeView.setText(Utils.parseDate(createdTime).toString());

            String labelSource = cursor.getString(
                    cursor.getColumnIndexOrThrow(Contract.Nodes.LABEL_SOURCE));
public void updateContent(long outageId) {
                    cursor.getColumnIndexOrThrow(Contract.Outages.SERVICE_LOST_EVENT_ID));
            TextView lostServiceEvent =
                    (TextView) getActivity().findViewById(R.id.outage_lost_service_event);
            lostServiceEvent.setText(Utils.parseDate(serviceLostTime).toString()
                                     + "\n#" + serviceLostEventId);

            String serviceRegainedTime = cursor.getString(
public void updateContent(long outageId) {
            TextView regainedServiceEvent =
                    (TextView) getActivity().findViewById(R.id.outage_regained_service_event);
            if (serviceRegainedTime != null) {
                regainedServiceEvent.setText(Utils.parseDate(serviceRegainedTime).toString()
                                             + "\n#" + serviceRegainedEventId);
            } else {
                detailsLayout.removeView(regainedServiceEvent);
                TextView title = (TextView) getActivity()
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
private ProducedType parseIntersectionType() {
    }

    /*
     * qualifiedType: [packageName (. packageName)* ::] typeNameWithArguments (. typeNameWithArguments)*
     */
    private ProducedType parseQualifiedType() {
        String pkg;
        
        if (hasPackage()) {
else if(scope != null){
            }else{
                // look it up via its qualifying type or decl
                Declaration qualifyingDeclaration = qualifyingType.getDeclaration();
                if(qualifyingDeclaration instanceof FunctionOrValueInterface)
                    qualifyingDeclaration = ((FunctionOrValueInterface)qualifyingDeclaration).getUnderlyingDeclaration();
                newDeclaration = AbstractModelLoader.getDirectMember((Scope) qualifyingDeclaration, part.name);
                if(newDeclaration == null)
                    throw new ModelResolutionException("Failed to resolve inner type or declaration "+part.name+" in "+qualifyingDeclaration.getQualifiedNameString());
            }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import Techtony96.Discord.api.commands.CommandContext;
import Techtony96.Discord.api.commands.exceptions.CommandArgumentException;
import Techtony96.Discord.api.commands.exceptions.CommandException;
import Techtony96.Discord.api.commands.exceptions.CommandStateException;
import Techtony96.Discord.modules.audiostreamer.AudioStreamer;
import Techtony96.Discord.modules.audiostreamer.playlists.Playlist;
public static void PlaylistCommand(CommandContext cc) {
                return;
            }

            try {
                current.removeSong(cc.getUser(), cc.getArgument(2));
            } catch (CommandException e) {
                cc.replyWith(e.getMessage());
                return;
public void addSong(IUser requestor, String songID) throws CommandStateException
        PlaylistManager.writePlaylistFile(this);
    }

    public void removeSong(IUser requestor, String songID) throws CommandStateException, CommandPermissionException {
        if (!(ownerID.equals(requestor.getStringID()) || contributors.contains(requestor.getStringID())))
            throw new CommandPermissionException("You are not allowed to remove songs from " + this.getTitle() + ".");
        if (!songs.containsKey(songID))
            throw new CommandStateException("That song is not in this playlist!");
        songs.remove(songID);
        PlaylistManager.writePlaylistFile(this);
    }

    public void forceRemoveSong(String songID){
        songs.remove(songID);
        PlaylistManager.writePlaylistFile(this);
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void validateTaxons(File inputTaxa) throws IOException {
				}
				String[] fields = line.split(" ");
				if (fields.length > 1) {
					throw new RuntimeException("Only one per taxon id per line when validating individuals");
				}
				List<Integer> taxIds = stringsToInt(fields);
				getDao().taxonsExist(taxIds);
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void start() {
        metrics.register("jvm.memory", new MemoryUsageGaugeSet());
        metrics.register("jvm.garbage", new GarbageCollectorMetricSet());
        metrics.register("jvm.threads", new ThreadStatesGaugeSet());
        metrics.register("jvm.files", new FileDescriptorRatioGauge());
        metrics.register("jvm.buffers", new BufferPoolMetricSet(ManagementFactory.getPlatformMBeanServer()));
        metrics.register("jvm.cpu", new CpuGaugeSet());
        metrics.register("jvm.runtime", new RuntimeGaugeSet());
<h1 class="page-header">Dashboard</h1>
                <div class="col-md-4"><small><span id="MarkSweepTime"></span> ms</small></div>
            </div>
            <div class="row">
                <div class="col-md-6"><small>Scavenge count</small></div>
                <div class="col-md-4"><small><span id="Scavenge"></span></small></div>
            </div>
            <div class="row">
                <div class="col-md-6"><small>Scavenge time</small></div>
                <div class="col-md-4"><small><span id="ScavengeTime"></span> ms</small></div>
            </div>

<h4 class="modal-title">Threads dump</h4>
        drawProgressBar("#blockedRatio", (blockedCount * 100 / count), true);
    }

    function updateGC(data) {
        var marksweep = data.gauges["jvm.garbage.PS-MarkSweep.count"].value;
        var marksweepTime = data.gauges["jvm.garbage.PS-MarkSweep.time"].value;
        var scavenge = data.gauges["jvm.garbage.PS-Scavenge.count"].value;
        var scavengeTime = data.gauges["jvm.garbage.PS-Scavenge.time"].value;

        $("#MarkSweep").html(marksweep);
        $("#MarkSweepTime").html(marksweepTime);
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
private boolean hasErrorsImpl(Set<MessageContainer> visitedSinks) {
        }
        for (MessageContainer sink : findChildContainers()) {
            if (visitedSinks.contains(sink)) {
                return false;
            }

            visitedSinks.add(sink);
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
package org.sonar.css.checks.common;

import com.google.common.collect.ImmutableList;

import java.util.List;

import org.sonar.check.Priority;
import org.sonar.check.Rule;
import org.sonar.css.checks.Tags;
import org.sonar.plugins.css.api.tree.css.DeclarationTree;
import org.sonar.plugins.css.api.tree.Tree;
import org.sonar.plugins.css.api.visitors.SubscriptionVisitorCheck;
import org.sonar.squidbridge.annotations.ActivatedByDefault;
import org.sonar.squidbridge.annotations.SqaleConstantRemediation;

@Rule(
  key = "semicolon-declaration",
  name = "Each declaration should end with a semicolon",

  @Override
  public void visitNode(Tree tree) {
    if (((DeclarationTree) tree).semicolon() == null) {
      addPreciseIssue(tree, "Add a semicolon at the end of this declaration.");
    }
  }
import org.sonar.css.checks.CheckTestUtils;
import org.sonar.css.checks.verifier.CssCheckVerifier;

public class SemicolonDeclarationCheckTest {

  @Test
  public void test() {
    CssCheckVerifier.verifyCssFile(new SemicolonDeclarationCheck(), CheckTestUtils.getCommonTestFile("semicolonDeclaration.css"));
  }

}
p:empty {
p:not(.mybox) {
  color: red;
}

}

@myvar: 1px;

  /* Less */
  LESS_VARIABLE_DECLARATION,
  LESS_VARIABLE,
  LESS_VARIABLE_PREFIX,

  LESS_INTERPOLATED_IDENTIFIER,
  LESS_INTERPOLATED_IDENTIFIER_NO_WS,
  LESS_OPERATOR,
  LESS_OPERATOR_LITERAL;


  private static final String CSS_COMMENT_REGEX = "(?:" + "(?:/\\*[\\s\\S]*?\\*/)" + "|" + "(?:\\<\\!--[\\s\\S]*?--\\>)" + ")";
  private static final String LESS_COMMENT_REGEX = "(?:" + "(?:/\\*[\\s\\S]*?\\*/)" + "|" + "(?:\\<\\!--[\\s\\S]*?--\\>)" + "|" + "//[^\\n\\r]*+" + ")";
  private static final String SCSS_COMMENT_REGEX = "(?:" + "(?:/\\*[\\s\\S]*?\\*/)" + "|" + "//[^\\n\\r]*+" + ")";
public LessVariableDeclarationTree lessVariableDeclaration(LessVariableTree vari
    return new LessVariableDeclarationTreeImpl(variable, colon, value, semicolon.orNull());
  }

  public LessVariableTree lessVariable(SyntaxToken variablePrefix, IdentifierTree variable) {
    return new LessVariableTreeImpl(variablePrefix, variable);
  }
public LessMixinParametersTree lessMixinParameters(SyntaxToken openParenthesis,
    return new SeparatedList<>(parameters, separators);
  }

  public LessMixinParameterTree lessMixinParameter(LessVariableTree variable, Optional<LessMixinParameterDefaultValueTree> defaultValue) {
    return new LessMixinParameterTreeImpl(variable, null, defaultValue.orNull());
  }

  public LessMixinParameterTree lessMixinParameter(ValueTree value) {
    return new LessMixinParameterTreeImpl(null, value, null);
  }

  public LessMixinParameterDefaultValueTree lessMixinParameterDefaultValue(SyntaxToken colon, ValueTree value) {
    return new LessMixinParameterDefaultValueTreeImpl(colon, value);
  }

  public LessEscapingTree lessEscaping(SyntaxToken escapingSymbol, StringTree string) {
public LessOperatorTree lessOperator(SyntaxToken operator) {
    return new LessOperatorTreeImpl(operator);
  }

  // ---------------------------------
  // Tuple
  // ---------------------------------
public LessMixinParametersTree LESS_MIXIN_PARAMETERS() {

  public LessMixinParameterTree LESS_MIXIN_PARAMETER() {
    return b.<LessMixinParameterTree>nonterminal(LexicalGrammar.LESS_MIXIN_PARAMETER).is(
      b.firstOf(
        f.lessMixinParameter(
          LESS_VARIABLE(),
          b.optional(LESS_MIXIN_PARAMETER_DEFAULT_VALUE())),
        f.lessMixinParameter(DECLARATION_VALUE())));
  }

  public LessMixinParameterDefaultValueTree LESS_MIXIN_PARAMETER_DEFAULT_VALUE() {
    return b.<LessMixinParameterDefaultValueTree>nonterminal(LexicalGrammar.LESS_MIXIN_PARAMETER_DEFAULT_VALUE).is(
      f.lessMixinParameterDefaultValue(
        b.token(LexicalGrammar.COLON),
        DECLARATION_VALUE()));
  }

  public IdentifierTree LESS_INTERPOLATED_IDENTIFIER() {
/*
 * SonarQube CSS / SCSS / Less Analyzer
 * Copyright (C) 2013-2017 David RACODON
 * mailto: david.racodon@gmail.com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
package org.sonar.css.tree.impl.less;

import com.google.common.collect.Iterators;
import org.sonar.css.tree.impl.TreeImpl;
import org.sonar.plugins.css.api.tree.Tree;
import org.sonar.plugins.css.api.tree.css.SyntaxToken;
import org.sonar.plugins.css.api.tree.css.ValueTree;
import org.sonar.plugins.css.api.tree.less.LessMixinParameterDefaultValueTree;
import org.sonar.plugins.css.api.visitors.DoubleDispatchVisitor;

import java.util.Iterator;

public class LessMixinParameterDefaultValueTreeImpl extends TreeImpl implements LessMixinParameterDefaultValueTree {

  private final SyntaxToken colon;
  private final ValueTree value;

  public LessMixinParameterDefaultValueTreeImpl(SyntaxToken colon, ValueTree value) {
    this.colon = colon;
    this.value = value;
  }

  @Override
  public Kind getKind() {
    return Kind.LESS_MIXIN_PARAMETER_DEFAULT_VALUE;
  }

  @Override
  public Iterator<Tree> childrenIterator() {
    return Iterators.forArray(colon, value);
  }

  @Override
  public void accept(DoubleDispatchVisitor visitor) {
    visitor.visitLessMixinParameterDefaultValue(this);
  }

  @Override
  public SyntaxToken colon() {
    return colon;
  }

  @Override
  public ValueTree value() {
    return value;
  }

}
import org.sonar.css.tree.impl.TreeImpl;
import org.sonar.plugins.css.api.tree.Tree;
import org.sonar.plugins.css.api.tree.css.ValueTree;
import org.sonar.plugins.css.api.tree.less.LessMixinParameterDefaultValueTree;
import org.sonar.plugins.css.api.tree.less.LessMixinParameterTree;
import org.sonar.plugins.css.api.tree.less.LessVariableTree;
import org.sonar.plugins.css.api.visitors.DoubleDispatchVisitor;


public class LessMixinParameterTreeImpl extends TreeImpl implements LessMixinParameterTree {

  private final LessVariableTree variable;
  private final ValueTree value;
  private final LessMixinParameterDefaultValueTree defaultValue;

  public LessMixinParameterTreeImpl(@Nullable LessVariableTree variable, @Nullable ValueTree value, @Nullable LessMixinParameterDefaultValueTree defaultValue) {
    this.variable = variable;
    this.value = value;
    this.defaultValue = defaultValue;
  }

  @Override
public Kind getKind() {

  @Override
  public Iterator<Tree> childrenIterator() {
    return Iterators.forArray(variable, value, defaultValue);
  }

  @Override
public void accept(DoubleDispatchVisitor visitor) {

  @Override
  @Nullable
  public LessVariableTree variable() {
    return variable;
  }

  @Override
  @Nullable
  public ValueTree value() {
    return value;
  }

  @Override
  @Nullable
  public LessMixinParameterDefaultValueTree defaultValue() {
    return defaultValue;
  }

}
import org.sonar.plugins.css.api.tree.css.StatementBlockTree;
import org.sonar.plugins.css.api.tree.css.StyleSheetTree;
import org.sonar.plugins.css.api.tree.embedded.FileWithEmbeddedCssTree;
import org.sonar.plugins.css.api.visitors.DoubleDispatchVisitor;

import java.util.HashMap;
public void visitStatementBlock(StatementBlockTree tree) {
    leaveScope();
  }

  private void leaveScope() {
    if (currentScope != null) {
      currentScope = currentScope.outer();
import org.sonar.plugins.css.api.tree.css.StatementBlockTree;
import org.sonar.plugins.css.api.tree.css.StyleSheetTree;
import org.sonar.plugins.css.api.tree.embedded.FileWithEmbeddedCssTree;
import org.sonar.plugins.css.api.tree.less.LessVariableTree;
import org.sonar.plugins.css.api.visitors.DoubleDispatchVisitor;

import java.util.Map;
public void visitStatementBlock(StatementBlockTree tree) {
    leaveScope();
  }

  private void leaveScope() {
    if (currentScope != null) {
      currentScope = currentScope.outer();
private void enterScope(Tree tree) {
  public void visitLessVariable(LessVariableTree tree) {
    Usage.Kind usage;

    if (tree.parent().is(Tree.Kind.LESS_VARIABLE_DECLARATION)) {
      usage = Usage.Kind.DECLARATION;
    } else {
      usage = Usage.Kind.READ;
    LESS_MIXIN_GUARD_CONDITION(LessMixinGuardConditionTree.class),
    LESS_MIXIN_PARAMETERS(LessMixinParametersTree.class),
    LESS_MIXIN_PARAMETER(LessMixinParameterTree.class),
    LESS_MIXIN_PARAMETER_DEFAULT_VALUE(LessMixinParameterDefaultValueTree.class),
    LESS_ESCAPING(LessEscapingTree.class),
    LESS_OPERATOR(LessOperatorTree.class);

/*
 * SonarQube CSS / SCSS / Less Analyzer
 * Copyright (C) 2013-2017 David RACODON
 * mailto: david.racodon@gmail.com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
package org.sonar.plugins.css.api.tree.less;

import org.sonar.plugins.css.api.tree.Tree;
import org.sonar.plugins.css.api.tree.css.SyntaxToken;
import org.sonar.plugins.css.api.tree.css.ValueTree;

public interface LessMixinParameterDefaultValueTree extends Tree {

  SyntaxToken colon();

  ValueTree value();

}
public interface LessMixinParameterTree extends Tree {

  @Nullable
  LessVariableTree variable();

  @Nullable
  ValueTree value();

  @Nullable
  LessMixinParameterDefaultValueTree defaultValue();

}
public void visitLessMixinParameter(LessMixinParameterTree tree) {
    scanChildren(tree);
  }

  public void visitLessMixinParameterDefaultValue(LessMixinParameterDefaultValueTree tree) {
    scanChildren(tree);
  }

  public void visitLessEscaping(LessEscapingTree tree) {
    scanChildren(tree);
  }
public void lessMixinCall() {

    tree = checkParsed("> #outer>.inner() !important ;");
    assertThat(tree.parentCombinator()).isNotNull();
  }

  @Test
/*
 * SonarQube CSS / SCSS / Less Analyzer
 * Copyright (C) 2013-2017 David RACODON
 * mailto: david.racodon@gmail.com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
package org.sonar.css.parser.less;

import org.junit.Test;
import org.sonar.css.parser.LexicalGrammar;
import org.sonar.plugins.css.api.tree.less.LessMixinParameterDefaultValueTree;

import static org.fest.assertions.Assertions.assertThat;

public class LessMixinParameterDefaultValueTreeTest extends LessTreeTest {

  public LessMixinParameterDefaultValueTreeTest() {
    super(LexicalGrammar.LESS_MIXIN_PARAMETER_DEFAULT_VALUE);
  }

  @Test
  public void lessMixinParameterDefaultValue() {
    checkParsed(":abc");
    checkParsed(": abc");
    checkParsed(" : abc");
  }

  private LessMixinParameterDefaultValueTree checkParsed(String toParse) {
    LessMixinParameterDefaultValueTree tree = (LessMixinParameterDefaultValueTree) parser().parse(toParse);
    assertThat(tree.colon()).isNotNull();
    assertThat(tree.value()).isNotNull();
    return tree;
  }

}
public void lessMixinParameter() {
    LessMixinParameterTree tree;

    tree = checkParsed("@var");
    assertThat(tree.defaultValue()).isNull();
    assertThat(tree.value()).isNull();
    assertThat(tree.variable()).isNotNull();

    tree = checkParsed("@var: abc");
    assertThat(tree.variable()).isNotNull();
    assertThat(tree.defaultValue()).isNotNull();
    assertThat(tree.value()).isNull();

    tree = checkParsed("abc");
    assertThat(tree.variable()).isNull();
    assertThat(tree.defaultValue()).isNull();
    assertThat(tree.value()).isNotNull();
  }

  private LessMixinParameterTree checkParsed(String toParse) {
public void lessMixinParameters() {

    tree = checkParsed("(@var: blue)");
    assertThat(tree.parameters()).hasSize(1);
      tree = checkParsed("(@var: blue;)");
    assertThat(tree.parameters()).hasSize(1);

    tree = checkParsed("(@var: blue,)");
public void lessMixinParameters() {
    tree = checkParsed("(@var: blue; ...)");
    assertThat(tree.parameters()).hasSize(2);

    //FIXME: remove ';' from valuetree in this case?
    /*tree = checkParsed("(@var: blue, @myvar: blue)");
    assertThat(tree.parameters()).hasSize(2);*/
  }

  @Test
public void stylesheet() throws Exception {
    checkParsed(".background-opacity(@c, @alpha) when (iscolor(@c)) and not (@c=~\"transparent\") {\n" +
      "background: hsla(hue(@c), saturation(@c), lightness(@c), @alpha);\n" +
      "}");
  }

  private StyleSheetTree checkParsed(String toParse) {
p:empty {
p:not(.mybox) {
  color: red;
}

}

@myvar: 1px;
16,
19,
],
'project:custom/common/semicolonDeclaration.css':[
2,
],
'project:custom/common/unknown-pseudo/unknownPseudo.css':[
'project:custom/common/quotedUrl/quotedUrl.css':[
5,
],
'project:custom/common/semicolonDeclaration.css':[
34,
42,
],
13,
19,
],
'project:custom/common/semicolonDeclaration.css':[
42,
],
'project:custom/common/single-quotes/singleQuotes.css':[
26,
30,
],
'project:custom/common/semicolonDeclaration.css':[
7,
12,
13,
'project:custom/common/properties/css/background-origin.css':[
8,
],
'project:custom/common/semicolonDeclaration.css':[
17,
22,
28,
'project:custom/common/properties/css/all.css':[
7,
],
'project:custom/common/semicolonDeclaration.css':[
22,
],
'project:custom/common/starhack.css':[
'project:custom/common/properties/css/all.css':[
8,
],
'project:custom/common/semicolonDeclaration.css':[
27,
],
'project:custom/common/underscorehack.css':[
22,
25,
],
'project:custom/common/unknown-pseudo/unknownPseudo.less':[
1,
4,
389,
401,
],
'project:custom/less/obsoleteFunctions.less':[
6,
],
'project:custom/common/quotedUrl/quotedUrl.less':[
5,
],
}
7,
8,
],
'project:custom/common/formatting/declaration.less':[
6,
10,
15,
15,
],
'project:custom/less/experimentalFunctionUsage.less':[
3,
3,
13,
19,
],
'project:custom/common/text-transform-uppercase/textTransformUppercase.less':[
4,
5,
'project:custom/less/multipleVariableDeclarationsSameScope.less':[
1,
5,
],
'project:custom/less/nestedRulesets/nestedRulesets.less':[
18,
'project:custom/less/multipleVariableDeclarationsSameScope.less':[
1,
5,
],
}
9,
10,
],
'project:custom/common/stylelint-disable/stylelintDisable.less':[
3,
8,
22,
25,
],
'project:custom/common/single-quotes/singleQuotes.less':[
3,
],
'project:custom/less/multipleVariableDeclarationsSameScope.less':[
1,
5,
],
'project:custom/less/nestedRulesets/nestedRulesets.less':[
1,
'project:custom/common/properties/less/background-origin.less':[
8,
],
'project:custom/common/single-quotes/singleQuotes.less':[
5,
],
'project:custom/common/properties/less/all.less':[
7,
],
}
'project:custom/common/properties/less/all.less':[
8,
],
}
{
'project:custom/common/experimental-pseudo-usage/experimentalPseudoUsage.less':[
29,
],
'project:custom/common/unknown-pseudo/unknownPseudo.less':[
7,
18,
'project:custom/common/known-properties/knownProperties.less':[
37,
],
'project:custom/less/multipleVariableDeclarationsSameScope.less':[
8,
9,
{
'project:custom/common/formatting/delimiterSeparatedList.scss':[
73,
74,
7,
8,
],
'project:custom/common/formatting/declaration.scss':[
6,
10,
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
private void writeDeveloperError(WebView webView, Exception e, OutputStream enti
            Template error = new Template("developerError",
                    Resources.toString(Resources.getResource("templates/developerError.html"), Charsets.UTF_8));
            Map<String, Object> errorContext = Maps.newHashMap();
            errorContext.put("error", cleanErrorMessageForDisplay(e.getMessage()));
            errorContext.put("stackTrace", ExceptionUtils.getStackTrace(e));
            errorContext.put("context", StringEscapeUtils.escapeXml(jsonContext).trim());
            errorContext.put("rawContext", jsonContext);
            errorContext.put("template", webView.template().toString());
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void testGetAllVariants_conservationScore() {

        long phastCons = countConservationScore("phastCons", allVariants, s -> s > 0.5);
        assertTrue(phastCons > 0);
        System.out.println("countFunctionalScore(\"phastCons\", allVariants, s -> s > 0.5) = " + phastCons);

        checkConservationScore(new Query(ANNOT_CONSERVATION.key(), "phylop>0.5"), s -> s > 0.5, "phylop");

        checkConservationScore(new Query(ANNOT_CONSERVATION.key(), "phastCons<0.5"), s1 -> s1 < 0.5, "phastCons");

        checkConservationScore(new Query(ANNOT_CONSERVATION.key(), "gerp<=0.5"), s -> s <= 0.5, "gerp");
    }

    public void checkConservationScore(Query query, Predicate<Double> doublePredicate, String source) {
public void checkFunctionalScore(Query query, Predicate<Double> doublePredicate,
    }

    public void checkScore(Query query, Predicate<Double> doublePredicate, String source, Function<VariantAnnotation, List<Score>> mapper) {
        QueryResult<Variant> result = dbAdaptor.get(query, null);
        long expected = countScore(source, allVariants, doublePredicate, mapper);
        long actual = countScore(source, result, doublePredicate, mapper);
        assertTrue(expected > 0);
        assertEquals(expected, result.getNumResults());
        assertEquals(expected, actual);
    }
private long countFunctionalScore(String source, QueryResult<Variant> variantQue
    }

    private long countScore(String source, QueryResult<Variant> variantQueryResult, Predicate<Double> doublePredicate, Function<VariantAnnotation, List<Score>> mapper) {
        long c = 0;
        for (Variant variant : variantQueryResult.getResult()) {
            List<Score> list = mapper.apply(variant.getAnnotation());
            if (list != null) {
                for (Score score : list) {
                    if (score.getSource().equalsIgnoreCase(source)) {
                        if (doublePredicate.test(score.getScore())) {
                            c++;
                        }
                    }
                }
            }
        }
private QueryBuilder addScoreFilter(String value, QueryBuilder builder, VariantQ
    }

    /**
     * Accepts a list of filters separated with "," or ";" with the expression: {SCORE}{OPERATION}{VALUE}.
     *
     * @param value        Value to parse
     * @param builder      QueryBuilder
     * @param conservation
     * @param source
     * @return QueryBuilder
     */
    private QueryBuilder addScoreFilter(String value, QueryBuilder builder, VariantQueryParams conservation, String source) {
        final List<String> list;
        QueryOperation operation = checkOperator(value);
        list = splitValue(value, operation);

        List<DBObject> dbObjects = new ArrayList<>();
        for (String elem : list) {
            String[] score = VariantDBAdaptorUtils.splitOperator(elem);
            String scoreValue;
            String op;
            // No given score
            if (StringUtils.isEmpty(score[0])) {
                if (source == null) {
                    logger.error("Bad score filter: " + elem);
                    throw VariantQueryException.malformedParam(conservation, value);
                }
                op = score[1];
                scoreValue = score[2];
            } else {
                if (source != null) {
                    logger.error("Bad score filter: " + elem);
                    throw VariantQueryException.malformedParam(conservation, value);
                }
                source = score[0];
                op = score[1];
private QueryBuilder addScoreFilter(String value, QueryBuilder builder, VariantQ
            String key = DocumentToVariantAnnotationConverter.SCORE_FIELD_MAP.get(source);
            if (key == null) {
                // Unknown score
                throw VariantQueryException.malformedParam(conservation, value);
            }

            QueryBuilder scoreBuilder = new QueryBuilder();
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import java.io.Closeable;
import java.io.IOException;
import java.io.InputStream;
import java.util.*;
import java.util.Map.Entry;

import org.codehaus.jackson.JsonParser;
boolean retryFailedEntries(Response response, TrackingBytesArray data) {

    private String extractError(Map jsonMap) {
        Object err = jsonMap.get("error");
        String error = null;
        if (err != null) {
            // part of ES 2.0
            if (err instanceof Map) {
                Map m = ((Map) err);
                err = m.get("root_cause");
                if (err == null) {
                    error = m.get("reason").toString();
                    if (m.containsKey("caused_by")) {
                        error += ";" + ((Map) m.get("caused_by")).get("reason");
                    }
                }
                else {
                    if (err instanceof List) {
public boolean touch(String indexOrType) {
    public long count(String indexAndType, ByteSequence query) {
        return isES50 ? countInES5X(indexAndType, query) : countBeforeES5X(indexAndType, query);
    }
    
    private long countBeforeES5X(String indexAndType, ByteSequence query) {
        Response response = execute(GET, indexAndType + "/_count", query);
        Number count = (Number) parseContent(response.body(), "count");
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    public static final int DECRYPT_EXCEPTION_INVALID_SENDER = 4;
    /** Message recipient doesn't match encryption key. */
    public static final int DECRYPT_EXCEPTION_INVALID_RECIPIENT = 5;
    /** Invalid packet data. */
    public static final int DECRYPT_EXCEPTION_INVALID_DATA = 6;
    /** Message integrity check failed. */
    public static final int DECRYPT_EXCEPTION_INTEGRITY_CHECK = 7;

    private final int mCode;

import org.spongycastle.openpgp.PGPOnePassSignature;
import org.spongycastle.openpgp.PGPOnePassSignatureList;
import org.spongycastle.openpgp.PGPPrivateKey;
import org.spongycastle.openpgp.PGPPublicKey;
import org.spongycastle.openpgp.PGPPublicKeyEncryptedData;
import org.spongycastle.openpgp.PGPPublicKeyRing;
import org.spongycastle.openpgp.PGPSignature;
import static org.kontalk.crypto.DecryptException.DECRYPT_EXCEPTION_INVALID_DATA;
import static org.kontalk.crypto.DecryptException.DECRYPT_EXCEPTION_INVALID_RECIPIENT;
import static org.kontalk.crypto.DecryptException.DECRYPT_EXCEPTION_INVALID_SENDER;
import static org.kontalk.crypto.DecryptException.DECRYPT_EXCEPTION_PRIVATE_KEY_NOT_FOUND;
import static org.kontalk.crypto.DecryptException.DECRYPT_EXCEPTION_VERIFICATION_FAILED;

public void decryptText(byte[] encrypted, boolean verify,
                                    DECRYPT_EXCEPTION_INVALID_SENDER,
                                    "Sender does not match sender's key");

                            // TODO check DateTime (possibly compare it with <delay/>)
                        }

public static void decryptMessage(Context context, EndpointServer server, Compos
                            securityFlags |= Coder.SECURITY_ERROR_INVALID_RECIPIENT;
                            break;

                    }

                }
Subproject commit 3d714a2fad056be9e14ec8ba4baf0d4a207d2418
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import com.redhat.ceylon.compiler.typechecker.TypeChecker;
import com.redhat.ceylon.compiler.typechecker.context.PhasedUnit;
import com.redhat.ceylon.compiler.typechecker.tree.AnalysisMessage;
import com.redhat.ceylon.compiler.typechecker.tree.Message;
import com.redhat.ceylon.compiler.typechecker.tree.Node;
import com.redhat.ceylon.compiler.typechecker.tree.Visitor;
    
    private boolean optimize = false;
    private boolean stopOnErrors = true;
    private Writer systemOut = new OutputStreamWriter(System.out);

    protected List<AnalysisMessage> errors = new ArrayList<AnalysisMessage>();
    protected List<AnalysisMessage> unitErrors = new ArrayList<AnalysisMessage>();
    
    private final Visitor unitVisitor = new Visitor() {
        @Override
        public void visitAny(Node that) {
            for (Message err: that.getErrors()) {
                if (err instanceof AnalysisMessage) {
                    unitErrors.add((AnalysisMessage)err);
                }
            }
            super.visitAny(that);
        }
public JsCompiler optimize(boolean optimize) {
        this.optimize = optimize;
        return this;
    }
    
    public List<AnalysisMessage> listErrors() {
        return Collections.unmodifiableList(errors);
    }

    /** Compile one phased unit.
     * @return The errors found for the unit. */
    public List<AnalysisMessage> compileUnit(PhasedUnit pu) throws IOException {
        unitErrors.clear();
        pu.getCompilationUnit().visit(unitVisitor);
        if (unitErrors.isEmpty() || !stopOnErrors) {
            GenerateJsVisitor jsv = new GenerateJsVisitor(getWriter(pu),optimize);
            pu.getCompilationUnit().visit(jsv);
        }
        return unitErrors;
protected boolean stopOnError() {
    /** Compile all the phased units in the typechecker.
     * @return true is compilation was successful (0 errors/warnings), false otherwise. */
    public boolean generate() throws IOException {
        errors.clear();
        try {
            for (PhasedUnit pu: tc.getPhasedUnits().getPhasedUnits()) {
                compileUnit(pu);
                if (stopOnError()) {
                    System.err.println("Errors found. Compilation stopped.");
                    break;
                }
            }
        } finally {
            finish();
        }
protected void finish() throws IOException {
    /** Print all the errors found during compilation to the specified stream. */
    public void printErrors(PrintStream out) {
        int count = 0;
        for (AnalysisMessage err: errors) {
            Node n = err.getTreeNode();
            out.printf("error encountered [%!s(MISSING)] at %!s(MISSING) of %!s(MISSING)%!n(MISSING)",
                err.getMessage(), n.getLocation(), n.getUnit().getFilename());
            count++;
        }
        out.printf("%!d(MISSING) errors.%!n(MISSING)", count);
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
private void displaySnackbar(final Context context, long completedDownloadRefere
                    final String localUri = uriString.startsWith(FILE_SCHEME) ? uriString.substring(FILE_SCHEME.length()) : uriString;
                    final String fileExtension = MimeTypeMap.getFileExtensionFromUrl(localUri);
                    final String mimeType = MimeTypeMap.getSingleton().getMimeTypeFromExtension(fileExtension);
                    final String fileName = URLUtil.guessFileName(localUri, null, mimeType);

                    final File file = new File(localUri);
                    final Uri uriForFile = FileProvider.getUriForFile(context, BuildConfig.APPLICATION_ID + FILE_PROVIDER_EXTENSION, file);

                    final Intent openFileIntent = IntentUtils.createOpenFileIntent(uriForFile, mimeType);
                    showSnackbarForFilename(openFileIntent, context, fileName);
                }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

name="Perl5 Support (Camelcade)"
version=2.1
buildNumber=03
ideaVersion = 141-EAP-SNAPSHOT
#ideaVersion = 142-EAP-SNAPSHOT
#ideaVersion = 143-EAP-SNAPSHOT
anon_block_directive ::= identifier_expr TT2_ASSIGN !TT2_CLOSE_TAG TT2_BLOCK {pi
hash_expr ::= TT2_LEFT_BRACE hash_expr_content TT2_RIGHT_BRACE {pin=1}
private hash_expr_content ::= {hash_expr_item [TT2_COMMA]} *
private hash_expr_item ::= pair_expr {pin=2 recoverWhile=recover_hash_expr_item}
pair_expr ::= <<parseHashKey>> TT2_ASSIGN !TT2_CLOSE_TAG expr
private recover_hash_expr_item ::= !(TT2_IDENTIFIER|TT2_FORMAT|TT2_ON|TT2|OFF|TT2_RIGHT_BRACE|TT2_COMMA|TT2_HARD_NEWLINE|[TT2_MINUS]TT2_CLOSE_TAG|TT2_SEMI)

array_expr ::= TT2_LEFT_BRACKET array_expr_content TT2_RIGHT_BRACKET {pin=1}
private array_expr_content ::= (expr [TT2_COMMA]) * {recoverWhile=recover_array_content}
      <ul>
      <li>JS line comment bug in Template Toolkit templates</li>
      <li>Bug with PROCESS directive capturing parsing</li>
      </ul>
     </p>
    ]]>
<body>
# minimal TT style
[%!p(MISSING)roduct = {
     id    = 'XYZ-2000'
     desc  = 'Bogon Generator'
     price = 666
   }
%!](MISSING)

# perl style
[%!p(MISSING)roduct = {
     id    => 'XYZ-2000',
     desc  => 'Bogon Generator',
     price => 666,
   }
%!](MISSING)

Template Toolkit File
        PsiElement(TemplateToolkit2Token.{)('{')
        PsiPairExprImpl(TemplateToolkit2Element.PAIR_EXPR)
          PsiSqStringExprImpl(TemplateToolkit2Element.SQ_STRING_EXPR)
            PsiElement(TemplateToolkit2Token.STRING_CONTENT)('id')
          PsiElement(TemplateToolkit2Token.=)('=')
          PsiSqStringExprImpl(TemplateToolkit2Element.SQ_STRING_EXPR)
            PsiElement(TemplateToolkit2Token.SQ_OPEN)(''')
Template Toolkit File
            PsiElement(TemplateToolkit2Token.STRING_CONTENT)('2000')
            PsiElement(TemplateToolkit2Token.SQ_CLOSE)(''')
        PsiPairExprImpl(TemplateToolkit2Element.PAIR_EXPR)
          PsiSqStringExprImpl(TemplateToolkit2Element.SQ_STRING_EXPR)
            PsiElement(TemplateToolkit2Token.STRING_CONTENT)('desc')
          PsiElement(TemplateToolkit2Token.=)('=')
          PsiSqStringExprImpl(TemplateToolkit2Element.SQ_STRING_EXPR)
            PsiElement(TemplateToolkit2Token.SQ_OPEN)(''')
Template Toolkit File
            PsiElement(TemplateToolkit2Token.SQ_CLOSE)(''')
        PsiElement(TemplateToolkit2Token.,)(',')
        PsiPairExprImpl(TemplateToolkit2Element.PAIR_EXPR)
          PsiSqStringExprImpl(TemplateToolkit2Element.SQ_STRING_EXPR)
            PsiElement(TemplateToolkit2Token.STRING_CONTENT)('desc')
          PsiElement(TemplateToolkit2Token.=)('=>')
          PsiSqStringExprImpl(TemplateToolkit2Element.SQ_STRING_EXPR)
            PsiElement(TemplateToolkit2Token.SQ_OPEN)(''')
Template Toolkit File
        PsiElement(TemplateToolkit2Token.,)(',')
        PsiPairExprImpl(TemplateToolkit2Element.PAIR_EXPR)
          PsiSqStringExprImpl(TemplateToolkit2Element.SQ_STRING_EXPR)
            PsiElement(TemplateToolkit2Token.STRING_CONTENT)('price')
          PsiElement(TemplateToolkit2Token.=)('=>')
          PsiTermExprImpl(TemplateToolkit2Element.TERM_EXPR)
            PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('666')
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
protected ValueExprToken readString(StringExprToken.Quote quote, int startPositi
                                    for(; i < codeLength; k++){
                                        if (k < codeLength){
                                            first = code.charAt(k);
                                            if (Character.isDigit(first) || GrammarUtils.isEngLetter(first) || first == '_'){
                                                // nop
                                            } else if (complex == 0 && first == '[') {
                                                opened++;
public void testList(){
        Memory memory = includeResource("variables/list.php");
        Assert.assertEquals("success", memory.toString());
    }
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
private DateTimeOffset getDateFromString(String stringValue) {
        try {
            return new DateTimeOffset(sdf.parse(stringValue));
        } catch (ParseException e) {
            return null;
        }
    }
}
public void testPullTriggersPushWhenThereIsOperationInTable() throws Interrupted
    // // Assert.AreEqual(hijack.Requests.Count, 1); // 1 for push
    // }

    public void testPullSucceds() throws MalformedURLException, InterruptedException, ExecutionException, MobileServiceException {

        MobileServiceLocalStoreMock store = new MobileServiceLocalStoreMock();
        ServiceFilterContainer serviceFilterContainer = new ServiceFilterContainer();
public void testPullSucceds() throws MalformedURLException, InterruptedException
                                "http://myapp.com/tables/stringidtype?$filter=String%!e(MISSING)q%!((MISSING)%!w(MISSING)orld%!)(MISSING)&$top=3&$skip=5&$orderby=Id%!d(MISSING)esc&__includeDeleted=true"));
    }

    public void testPullNoSkipSucceds() throws MalformedURLException, InterruptedException, ExecutionException, MobileServiceException {

        MobileServiceLocalStoreMock store = new MobileServiceLocalStoreMock();
        ServiceFilterContainer serviceFilterContainer = new ServiceFilterContainer();
public void testPullNoSkipSucceds() throws MalformedURLException, InterruptedExc
                                "http://myapp.com/tables/stringidtype?$filter=String%!e(MISSING)q%!((MISSING)%!w(MISSING)orld%!)(MISSING)&$top=3&$skip=0&$orderby=Id%!d(MISSING)esc&__includeDeleted=true"));
    }

    public void testPullSuccedsNoTopNoOrderBy() throws MalformedURLException, InterruptedException, ExecutionException, MobileServiceException {

        MobileServiceLocalStoreMock store = new MobileServiceLocalStoreMock();
        ServiceFilterContainer serviceFilterContainer = new ServiceFilterContainer();
public void testPullSuccedsNoTopNoOrderBy() throws MalformedURLException, Interr
                                "http://myapp.com/tables/stringidtype?$filter=String%!e(MISSING)q%!((MISSING)%!w(MISSING)orld%!)(MISSING)&$top=50&$skip=0&$orderby=Id%!d(MISSING)esc&__includeDeleted=true"));
    }

    public void testIncrementalPullSucceds() throws MalformedURLException, InterruptedException, ExecutionException, MobileServiceException {

        MobileServiceLocalStoreMock store = new MobileServiceLocalStoreMock();
        ServiceFilterContainer serviceFilterContainer = new ServiceFilterContainer();
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

package org.elasticsearch.ingest.processor;

import org.elasticsearch.ingest.core.AbstractProcessor;
import org.elasticsearch.ingest.core.AbstractProcessorFactory;
import org.elasticsearch.ingest.core.IngestDocument;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Processor that allows to search for patterns in field content and replace them with corresponding string replacement.
 * Support fields of string type only, throws exception if a field is of a different type.
public String getType() {
    public static final class Factory extends AbstractProcessorFactory<GsubProcessor> {
        @Override
        public GsubProcessor doCreate(String processorTag, Map<String, Object> config) throws Exception {
            String field = ConfigurationUtils.readStringProperty(TYPE, processorTag, config, "field");
            String pattern = ConfigurationUtils.readStringProperty(TYPE, processorTag, config, "pattern");
            String replacement = ConfigurationUtils.readStringProperty(TYPE, processorTag, config, "replacement");
            Pattern searchPattern = Pattern.compile(pattern);
            return new GsubProcessor(processorTag, field, searchPattern, replacement);
        }
    }
public void testCreateNoReplacementPresent() throws Exception {
            assertThat(e.getMessage(), equalTo("[replacement] required property is missing"));
        }
    }
}
import java.util.HashMap;
import java.util.Map;

public final class GrokProcessor extends AbstractProcessor {

    public static final String TYPE = "grok";
public GrokProcessor doCreate(String processorTag, Map<String, Object> config) t
                patternBank.putAll(customPatternBank);
            }

            Grok grok = new Grok(patternBank, matchPattern);
            return new GrokProcessor(processorTag, grok, matchField);
        }

public void testCreateWithCustomPatterns() throws Exception {
        assertThat(processor.getGrok(), notNullValue());
        assertThat(processor.getGrok().match("foo!"), equalTo(true));
    }
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public static FuzzyQueryBuilder fromXContent(QueryParseContext parseContext) thr
                while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {
                    if (token == XContentParser.Token.FIELD_NAME) {
                        currentFieldName = parser.currentName();
                    } else {
                        if (TERM_FIELD.match(currentFieldName)) {
                            value = parser.objectBytes();
                        } else if (VALUE_FIELD.match(currentFieldName)) {
public static FuzzyQueryBuilder fromXContent(QueryParseContext parseContext) thr
                            throw new ParsingException(parser.getTokenLocation(),
                                    "[fuzzy] query does not support [" + currentFieldName + "]");
                        }
                    }
                }
            } else {
public void testParseFailsWithMultipleFields() throws IOException {
        e = expectThrows(ParsingException.class, () -> parseQuery(shortJson));
        assertEquals("[fuzzy] query doesn't support multiple fields, found [message1] and [message2]", e.getMessage());
    }
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
package org.projog.core.parser;

class Delimiters {
   private static final char ARGUMENT_SEPARATOR = ',';
   private static final char PREDICATE_OPENING_BRACKET = '(';
static boolean isDelimiter(int c) {
      }
   }

   static boolean isPredicateOpenBracket(String value) {
      return isMatch(value, PREDICATE_OPENING_BRACKET);
   }

   static boolean isPredicateCloseBracket(String value) {
      return isMatch(value, PREDICATE_CLOSING_BRACKET);
   }

   static boolean isListOpenBracket(String value) {
      return isMatch(value, LIST_OPENING_BRACKET);
   }

   static boolean isListOpenBracket(int c) {
      return c == LIST_OPENING_BRACKET;
   }

   static boolean isListCloseBracket(String value) {
      return isMatch(value, LIST_CLOSING_BRACKET);
   }

   static boolean isListTail(String value) {
      return isMatch(value, LIST_TAIL);
   }

   static boolean isArgumentSeperator(String value) {
      return isMatch(value, ARGUMENT_SEPARATOR);
   }

   static boolean isSentenceTerminator(String value) {
      return isMatch(value, PERIOD);
   }

   private static boolean isMatch(String input, char expected) {
      return input != null && input.length() == 1 && input.charAt(0) == expected;
   }
}
public Term parseSentence() {
         return null;
      }

      String trailingText = popValue();
      if (!isSentenceTerminator(trailingText)) {
         throw newParserException("Expected . after: " + t + " but got: " + trailingText);
      }

      return t;
private Term getTerm(int maxLevel) {
    * @param maxLevel the maximum priority/precedence/level of operands to parse - if an operand represented by the next
    * term retrieved by this method has a higher priority then it is ignored for now ({@code currentTerm} is returned
    * "as-is"}.
    * @param {@code true} if this method is being called by another method, {@code false} if it is being called recursively by itself.
    */
   private Term getTerm(final Term currentTerm, final int currentLevel, final int maxLevel, final boolean isFirst) {
      final String next = popValue();
      if (operands.postfix(next) && operands.getPostfixPriority(next) <= currentLevel) {
         Term postfixTerm = addPostfixOperand(next, currentTerm);
         return getTerm(postfixTerm, currentLevel, maxLevel, false);
      } else if (!operands.infix(next)) {
         // could be '.' if end of sentence 
         // or ',', '|', ']' or ')' if parsing list or predicate
         // or could be an error
         parser.rewind(next);
         return currentTerm;
      }

      final int level = operands.getInfixPriority(next);
      if (level > maxLevel) {
         parser.rewind(next);
         return currentTerm;
      }

private Term getTerm(final Term currentTerm, final int currentLevel, final int m
    * be thrown if does).
    */
   private Term getPossiblePrefixArgument(int currentLevel) {
      final String value = popValue();
      if (operands.prefix(value) && parser.isFollowedByTerm()) {
         if (value.equals(MINUS_SIGN) && isFollowedByNumber()) {
            return getNegativeNumber();
private Term getPossiblePrefixArgument(int currentLevel) {
         Term argument = getTerm(prefixLevel);
         return createPrefixTerm(value, argument);
      } else {
         parser.rewind(value);
         return getDiscreteTerm();
      }
   }

   private Term getNegativeNumber() {
      final String value = "-" + popValue();
      if (parser.getType() == WordType.INTEGER) {
         return toIntegerNumber(value);
      } else {
         return toDecimalFraction(value);
private Term addPostfixOperand(String postfixOperand, Term original) {
   }

   private Term getDiscreteTerm() {
      final String value = popValue();
      if (isListOpenBracket(value)) {
         return parseList();
      } else if (isPredicateOpenBracket(value)) {
         return getTermInBrackets();
      } else {
         switch (parser.getType()) {
            case ATOM:
            case QUOTED_ATOM:
            case SYMBOL:
               return getAtomOrStructure(value);
            case INTEGER:
               return toIntegerNumber(value);
            case FLOAT:
               return toDecimalFraction(value);
            case VARIABLE:
               return getVariable(value);
            case ANONYMOUS_VARIABLE:
               return AnonymousVariable.ANONYMOUS_VARIABLE;
            default:
private DecimalFraction toDecimalFraction(final String value) {
    * a newly created {@code Atom} is returned.
    */
   private Term getAtomOrStructure(String name) {
      String value = parser.isEndOfStream() ? null : peekValue();
      if (isPredicateOpenBracket(value)) {
         popValue(); //skip opening bracket
         if (isPredicateCloseBracket(peekValue())) {
            throw newParserException("No arguments specified for structure: " + name);
private Term getAtomOrStructure(String name) {
         args.add(t);

         do {
            value = popValue();
            if (isPredicateCloseBracket(value)) {
               return Structure.createStructure(name, toArray(args));
            } else if (isArgumentSeperator(value)) {
               args.add(getCommaSeparatedArgument());
            } else {
               throw newParserException("While parsing arguments of " + name + " expected ) or , but got: " + value);
            }
         } while (true);
      } else {
private Term parseList() {
      Term tail = EmptyList.EMPTY_LIST;

      while (true) {
         String value = popValue();
         if (isListCloseBracket(value)) {
            break;
         }
         parser.rewind(parser.getValue());
         Term arg = getCommaSeparatedArgument();
         args.add(arg);

         value = popValue(); // | ] or ,
         if (isListCloseBracket(value)) {
            break;
         } else if (isListTail(value)) {
            tail = getCommaSeparatedArgument();
            value = popValue();
            if (!isListCloseBracket(value)) {
               throw newParserException("Expected ] to mark end of list after tail but got: " + value);
            }
            break;
         } else if (!isArgumentSeperator(value)) {
            throw newParserException("While parsing list expected ] | or , but got: " + value);
         }
      }
      return ListFactory.createList(toArray(args), tail);
private Term getTermInBrackets() {
      // considering the priority of any surrounding terms outside the brackets)
      // we call getArgument with the highest possible priority.
      Term t = getTerm(Integer.MAX_VALUE);
      final String next = popValue();
      if (!isPredicateCloseBracket(next)) {
         throw newParserException("Expected ) but got: " + next);
      }
      return t;
   }

   private String popValue() {
      parser.next();
      return parser.getValue();
   }

   private String peekValue() {
      String value = popValue();
      parser.rewind(value);
      return value;
   }

   private boolean isFollowedByNumber() {
      String value = popValue();
      WordType et = parser.getType();
      parser.rewind(value);
      return et == WordType.INTEGER || et == WordType.FLOAT;
   }


import org.projog.core.Operands;

/** 
 * Parses an input stream into discrete 'words' that are used to represent Prolog queries and rules.
 * 
 * @see SentenceParser
 */
class WordParser {
   private final CharacterParser parser;
   private final Operands operands;
   private String value;
   private WordType type;
   private boolean rewound;

   WordParser(Reader reader, Operands operands) {
   /**
    * Move the parser forward one word.
    * 
    * @throws ParserException if there are no more words to parse (i.e. parser has reached the end of the underlying input stream)
    */
   void next() {
      if (rewound) {
void next() {
      }
   }

   /** The value that was parsed as a result of the last call to {@link #next()} */
   String getValue() {
      return value;
   }

   /** The type of the value parsed as a result of the last call to {@link #next()} */
   WordType getType() {
      return type;
   }

   /** Does the next value to be parsed represent a term (rather than a delimiter) */
boolean isEndOfStream() {
   }

   /**
    * Rewinds the parser (i.e. "pushes-back" the last parsed word). 
    * <p>
    * The last parsed value will remain after the next call to {@link #next()}
    * 
    * @param value the value to rewind
    * @throws IllegalArgumentException if already in a rewound state (i.e. have already called {@link WordParser#rewind(String)} since the last call to {@link #next()}), or {@code value} is not equal to {@link #getValue()} 
    */
   void rewind(String value) {
      if (rewound || value == null || !value.equals(this.value)) {
         throw new IllegalArgumentException("Rewound = " + rewound + " this.value = " + this.value + " value = " + value);
      }
      rewound = true;
   }
private void setSymbol(int c) {
         }
      }

      if (length > 1 && isDelimiter(sb.charAt(length - 1))) {
         parser.rewind();
         setValue(sb.toString().substring(0, length - 1), SYMBOL);
      } else {
         setValue(sb, SYMBOL);
      }
   }

   private void skipWhitespace() {
private void setValue(StringBuilder value, WordType type) {
   }

   private void setValue(String value, WordType type) {
      this.value = value;
      this.type = type;
   }
}
package org.projog.core.parser;

/** @see WordParser#getType() */
enum WordType {
   ATOM, QUOTED_ATOM, INTEGER, FLOAT, SYMBOL, VARIABLE, ANONYMOUS_VARIABLE
}
public class DelimitersTest {
   @Test
   public void testArgumentSeperator() {
      assertTrue(Delimiters.isArgumentSeperator(","));
      assertFalse(Delimiters.isArgumentSeperator(";"));
      assertFalse(Delimiters.isArgumentSeperator(" "));
      assertFalse(Delimiters.isArgumentSeperator(null));
   }

   @Test
   public void testListOpenBracket() {
      assertTrue(Delimiters.isListOpenBracket("["));
      assertFalse(Delimiters.isListOpenBracket("]"));
      assertFalse(Delimiters.isListOpenBracket("("));
      assertFalse(Delimiters.isArgumentSeperator(null));
   }

   @Test
   public void testListCloseBracket() {
      assertTrue(Delimiters.isListCloseBracket("]"));
      assertFalse(Delimiters.isListCloseBracket("["));
      assertFalse(Delimiters.isListCloseBracket(")"));
      assertFalse(Delimiters.isArgumentSeperator(null));
   }

   @Test
   public void testPredicateOpenBracket() {
      assertTrue(Delimiters.isPredicateOpenBracket("("));
      assertFalse(Delimiters.isPredicateOpenBracket(")"));
      assertFalse(Delimiters.isPredicateOpenBracket("["));
      assertFalse(Delimiters.isArgumentSeperator(null));
   }

   @Test
   public void testPredicateCloseBracket() {
      assertTrue(Delimiters.isPredicateCloseBracket(")"));
      assertFalse(Delimiters.isPredicateCloseBracket("("));
      assertFalse(Delimiters.isPredicateCloseBracket("]"));
      assertFalse(Delimiters.isArgumentSeperator(null));
   }

   @Test
   public void testListTail() {
      assertTrue(Delimiters.isListTail("|"));
      assertFalse(Delimiters.isListTail("["));
      assertFalse(Delimiters.isListTail("]"));
      assertFalse(Delimiters.isArgumentSeperator(null));
   }

   @Test
   public void testSentenceTerminator() {
      assertTrue(Delimiters.isSentenceTerminator("."));
      assertFalse(Delimiters.isSentenceTerminator("..="));
      assertFalse(Delimiters.isSentenceTerminator(","));
      assertFalse(Delimiters.isArgumentSeperator(null));
   }

   @Test
private void assertDelimiter(boolean expectedResult, char... chars) {
         assertEquals(expectedResult, Delimiters.isDelimiter(Character.toString(c)));
      }
   }
}
public void testBrackets6() {
   }

   @Test
   public void testExtraTextAfterFullStop() {
      SentenceParser sp = getSentenceParser("?- consult(\'bench.pl\'). jkhkj");
      Term t = sp.parseSentence();
public void testNonAlphanumericCharacterFollowedByPeriod() {
      assertParse("!.", "!", ".");
   }

   @Test
   public void testWhitespaceAndComments() {
      WordParser p = create("/* comment */\t %!c(MISSING)omment\n %!c(MISSING)omment\r\n\n");
public void testRewindException() {
      WordParser wp = create("a b c");
      wp.next();
      wp.next();
      assertEquals("b", wp.getValue());
      wp.rewind("b");
      wp.next();
      assertEquals("b", wp.getValue());
      wp.rewind("b");

      // check that can only rewind one word
      assertRewindException(wp, "b");
      assertRewindException(wp, "a");

      assertEquals("b", wp.getValue());
      wp.next();
      assertEquals("b", wp.getValue());
      wp.next();
      assertEquals("c", wp.getValue());

      // check that the value specified in call to rewind has to be the last value parsed
      assertRewindException(wp, "b");
      assertRewindException(wp, null);
      assertRewindException(wp, "z");

      wp.rewind("c");
      assertEquals("c", wp.getValue());
      wp.next();
      assertEquals("c", wp.getValue());
      assertTrue(wp.isEndOfStream());
      assertEquals("c", wp.getValue());
      wp.rewind("c");

      // check that can only rewind one word
      assertRewindException(wp, "c");
   }

   private void assertRewindException(WordParser wp, String value) {
      try {
         wp.rewind(value);
         fail();
      } catch (IllegalArgumentException e) {
         // expected
private void assertWordType(String syntax, String value, WordType type) {
      WordParser p = create(syntax);
      assertFalse(p.isEndOfStream());
      p.next();
      assertEquals(value, p.getValue());
      assertSame(type, p.getType());
      assertTrue(p.isEndOfStream());
   }

   private void assertParse(String sentence, String... words) {
      WordParser p = create(sentence);
      for (String w : words) {
         p.next();
         assertEquals(w, p.getValue());
         p.rewind(w);
         p.next();
         assertEquals(w, p.getValue());
      }
      assertTrue(p.isEndOfStream());
      try {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import java.lang.NumberFormatException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.text.DecimalFormat;
import java.text.ParseException;

import java.util.Arrays;
import java.util.ListIterator;
import java.util.LinkedList;
import java.util.Collection;
import java.util.Vector;

import static org.overture.ast.lex.Dialect.VDM_PP;
import org.overture.ast.assistant.definition.PDefinitionAssistant;
public String getTokenErrorDisplay(CommonToken t) {
//    throw e;
//}

private DecimalFormat decimalFormatParser = new DecimalFormat();
public static final String CML_LANG_VERSION = "CML M16";

public static char convertEscapeToChar(String escape) {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public boolean onCommand(CommandSender sender, Command command, String label, St
                    } else if (args[1].equalsIgnoreCase("check") || args[1].equalsIgnoreCase("c") ){
                        temp.checkTownBank(officer);
                    } else {
                        plugin.out(sender,"/town bank - ERROR (subcommand not recognized)");
                    }
                    break;
                default:
public boolean onCommand(CommandSender sender, Command command, String label, St
                    } else if (args[1].equalsIgnoreCase("check") || args[1].equalsIgnoreCase("c") ){
                        temp.checkTownBank(officer);
                    } else {
                        plugin.out(sender,"/town bank - ERROR (subcommand not recognized)");
                    }
                    break;
                default:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
actionbase returns[PAction action]
    : 'Skip'            { $action = new ASkipAction(); }
    | 'Stop'            { $action = new AStopAction(); }
    | 'Chaos'           { $action = new AChaosAction(); }
    | 'Div'             { $action = new ADivAction(); }
    | 'Wait' expression { $action = new AWaitAction(null, $expression.exp); }
    | ('return' expression)=>'return' expression
        {
process A =
begin

@ Div

end
			"#req", "#waiting", "abs", "all", "always", "and", "async",
			"atomic",
			/* "be", */"bool", "by", "card", "cases", "char", "class", "comp",
			"compose", "conc", "dcl", "def", "dinter", "div", "do", "dom",
			"dunion", "elems", "else", "elseif", /* "error", */"errs", "exists",
			"exists1","extends", "exit", /* "ext", */"false", "floor", "for", "forall",
			"from", "functions", "hd", "if", "in", "inds", "inmap", "instance",
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import com.google.common.collect.ImmutableList;
import org.graylog.plugins.pipelineprocessor.EvaluationContext;
import org.graylog.plugins.pipelineprocessor.ast.expressions.Expression;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
default void preprocessArgs(FunctionArgs args) {
                    args.setPreComputedValue(name, param.transform().apply(value));
                }
            } catch (Exception exception) {
                log.warn("Unable to precompute argument value for " + name, exception);
                throw exception;
            }
        }

    public TimezoneAwareFunction() {
        timeZoneParam = ParameterDescriptor
                .string(TIMEZONE, DateTimeZone.class)
                .transform(DateTimeZone::forID)
                .optional()
                .description("The timezone to apply to the date, defaults to UTC")
                .build();
import org.graylog.plugins.pipelineprocessor.ast.Pipeline;
import org.graylog.plugins.pipelineprocessor.ast.Rule;
import org.graylog.plugins.pipelineprocessor.ast.Stage;
import org.graylog.plugins.pipelineprocessor.ast.expressions.AndExpression;
import org.graylog.plugins.pipelineprocessor.ast.expressions.ArrayLiteralExpression;
import org.graylog.plugins.pipelineprocessor.ast.expressions.BinaryExpression;
import org.graylog.plugins.pipelineprocessor.parser.errors.IncompatibleIndexType;
import org.graylog.plugins.pipelineprocessor.parser.errors.IncompatibleType;
import org.graylog.plugins.pipelineprocessor.parser.errors.IncompatibleTypes;
import org.graylog.plugins.pipelineprocessor.parser.errors.MissingRequiredParam;
import org.graylog.plugins.pipelineprocessor.parser.errors.NonIndexableType;
import org.graylog.plugins.pipelineprocessor.parser.errors.OptionalParametersMustBeNamed;
public void exitFunctionCall(RuleLangParser.FunctionCallContext ctx) {
                }
            }

            final FunctionExpression expr = new FunctionExpression(
                    ctx.getStart(), new FunctionArgs(functionRegistry.resolveOrError(name), argsMap)
            );

            log.trace("FUNC: ctx {} => {}", ctx, expr);
            exprs.put(ctx, expr);
 */
package org.graylog.plugins.pipelineprocessor.parser;

import com.google.common.collect.Iterables;
import com.google.common.collect.Lists;
import com.google.common.collect.Ordering;
import org.graylog.plugins.pipelineprocessor.ast.functions.ParameterDescriptor;
import org.graylog.plugins.pipelineprocessor.functions.conversion.LongConversion;
import org.graylog.plugins.pipelineprocessor.functions.conversion.StringConversion;
import org.graylog.plugins.pipelineprocessor.functions.messages.HasField;
import org.graylog.plugins.pipelineprocessor.functions.messages.SetField;
import org.graylog.plugins.pipelineprocessor.functions.strings.RegexMatch;
import org.graylog.plugins.pipelineprocessor.parser.errors.IncompatibleArgumentType;
import org.graylog.plugins.pipelineprocessor.parser.errors.IncompatibleIndexType;
import org.graylog.plugins.pipelineprocessor.parser.errors.NonIndexableType;
import org.graylog.plugins.pipelineprocessor.parser.errors.OptionalParametersMustBeNamed;
import org.graylog.plugins.pipelineprocessor.parser.errors.UndeclaredFunction;
import org.graylog.plugins.pipelineprocessor.parser.errors.UndeclaredVariable;
import org.graylog2.plugin.Message;
import org.joda.time.DateTime;
import org.junit.After;
import org.junit.Assert;
import org.junit.BeforeClass;
public Collection evaluate(FunctionArgs args, EvaluationContext context) {
        functions.put(SetField.NAME, new SetField());
        functions.put(HasField.NAME, new HasField());
        functions.put(RegexMatch.NAME, new RegexMatch());
        functionRegistry = new FunctionRegistry(functions);
    }

public void indexedAccessWrongIndexType() {
        }
    }

    public static class CustomObject {
        private final String id;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
String RelObjectName() :
      | tk=<K_COLUMN> | tk=<K_REPLACE> | tk=<K_TRUNCATE> | tk=<K_KEY> | tk=<K_ANY>
      | tk=<K_OPEN> | tk=<K_OVER> | tk=<K_VALUES> | tk=<K_PERCENT> | tk=<K_PRIOR>
	  | tk=<K_SEPARATOR> | tk=<K_NO> | tk=<K_ACTION> | tk=<K_CASCADE> | tk=<K_END>
      )

    { return tk.image; }
public void testNestedFunctionCallIssue253() throws JSQLParserException {
    public void testEscapedBackslashIssue253() throws JSQLParserException {
        assertSqlCanBeParsedAndDeparsed("SELECT replace_regex('test', '\\\\', '\\\\\\\\')");
    }
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    init: function (async, service) {
      this._client = new $.RestClient(CONTEXTPATH + '/rest/' + service + '/', {
        cache: 30,
        cachableMethods: ["GET"],
        ajax: {
          async: false
        }
      });
      // "temporary workaround": $.RestClient has a shared `async' object in options
      this._client.opts.ajax = {dataType: 'json', async: async};
    },
    add: function (resources) {
      var current = this;
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 */
public abstract class TokenType {

    /*
     Whitespace (but not newlines) --
     Keywords, --
     Keywords with colons --
     colon : --
     open and close {}[]() --
     Punctuation --
     Initial Operators --
     Whitespace --
     Strings (with ' and " quotes) --
     Comments --
     Default -- check regex
     Null/Illegal token type
     */
    public TokenType(Pattern pattern) {
        if (!pattern.pattern().startsWith("^")) {
            throw new IllegalArgumentException("All patterns must be anchored to the start of string.");
protected Pattern getPattern() {
            } else if (m.end() == 0) {
                throw new IllegalStateException("The token parsed has length 0. " + this.getClass().getName() + " \"" + inLine + "\"");
            }
            int size = m.end() - m.start();
            return new Option<>(inLine.substring(0, size));
        }
        return new Option<>();
    }

    /**
     * Construct a token from the given matching string.
            TokenTypePairedOpenCloseColon.getInstance(),
            TokenTypePairedOpenColon.getInstance(), 
            TokenTypePairedCloseColon.getInstance(), 
            TokenTypeKeywordAggregate.getInstance(),
            TokenTypeKeyword.getInstance(),
            TokenTypeKeywordColon.getInstance(),

package edu.brown.cs.cutlass.parser.tokenizer.tokentypes;

import edu.brown.cs.cutlass.parser.tokenizer.Token;
import edu.brown.cs.cutlass.parser.tokenizer.TokenType;
import edu.brown.cs.cutlass.parser.tokenizer.styles.TokenStyle;
import edu.brown.cs.cutlass.parser.tokenizer.styles.TokenStyleComment;
 * Cutlass - Pyret IDE
 * For CSCI 0320 Spring 2014, Term Project
 */

package edu.brown.cs.cutlass.parser.tokenizer.tokentypes;

import edu.brown.cs.cutlass.parser.tokenizer.TokenType;
 */
public class TokenTypeDefault extends TokenType {

    public static TokenTypeDefault getInstance(){
        return instance;
    }
    
    private static final TokenTypeDefault instance = new TokenTypeDefault();
    
    private TokenTypeDefault(){
        super(Pattern.compile("^([a-zA-Z][a-zA-Z0-9\\-]*)"));
    }

    @Override
    public boolean toAggregate() {
        return true;
    }
    
    @Override
    public TokenStyle getStyle() {
        return TokenStyleDefault.getInstance();
    }
    
}
import edu.brown.cs.cutlass.parser.tokenizer.TokenType;
import edu.brown.cs.cutlass.parser.tokenizer.styles.TokenStyle;
import edu.brown.cs.cutlass.parser.tokenizer.styles.TokenStyleKeyword;
import java.util.regex.Pattern;

/**
public static TokenTypeKeyword getInstance() {
    private static final TokenTypeKeyword instance = new TokenTypeKeyword();

    private TokenTypeKeyword() {
        super(Pattern.compile("^((method)|(var)|(when)|(import)|(provide)|(except)|(for)|(from)|(and)|(or)|(not)|(as)|(if)|(cases)|(is))"));
    }

    @Override
    public TokenStyle getStyle() {
        return TokenStyleKeyword.getInstance();
    }

}
import edu.brown.cs.cutlass.parser.tokenizer.TokenType;
import edu.brown.cs.cutlass.parser.tokenizer.styles.TokenStyle;
import edu.brown.cs.cutlass.parser.tokenizer.styles.TokenStyleKeyword;
import java.util.regex.Pattern;

/**
public static TokenTypeKeywordAggregate getInstance() {
    private static final TokenTypeKeywordAggregate instance = new TokenTypeKeywordAggregate();

    private TokenTypeKeywordAggregate() {
        super(Pattern.compile("^((fun)|(data))"));
    }

    @Override
public boolean toAggregate() {
    public TokenStyle getStyle() {
        return TokenStyleKeyword.getInstance();
    }

}
import edu.brown.cs.cutlass.parser.tokenizer.styles.TokenStyleKeyword;
import java.util.LinkedList;
import java.util.List;
import java.util.regex.Pattern;

/**
public static TokenTypeKeywordColon getInstance() {
    private static final TokenTypeKeywordColon instance = new TokenTypeKeywordColon();

    private TokenTypeKeywordColon() {
        super(Pattern.compile("^((try)|(ask)|(otherwise)|(then)|(with)|(sharing)|(where)|(check)|(graph)|(block))"));
    }

    @Override
private TokenTypeKeywordColon() {
    public TokenStyle getStyle() {
        return TokenStyleKeyword.getInstance();
    }

}
public static TokenTypePairedCloseColon getInstance() {
    private static final TokenTypePairedCloseColon instance = new TokenTypePairedCloseColon();

    private TokenTypePairedCloseColon() {
        super(Pattern.compile("^((;)|(end)|(else))"));
    }

    @Override
import edu.brown.cs.cutlass.parser.tokenizer.styles.TokenStylePunct;
import java.util.LinkedList;
import java.util.List;
import java.util.regex.Pattern;

/**
public static TokenTypePairedOpenCloseColon getInstance() {
    private static final TokenTypePairedOpenCloseColon instance = new TokenTypePairedOpenCloseColon();

    private TokenTypePairedOpenCloseColon() {
        super(Pattern.compile("^((where)|(sharing)|(with))"));
    }

    @Override
 */
package edu.brown.cs.cutlass.parser.tokenizer.tokentypes;

import edu.brown.cs.cutlass.parser.tokenizer.Token;
import edu.brown.cs.cutlass.parser.tokenizer.TokenType;
import edu.brown.cs.cutlass.parser.tokenizer.styles.TokenStyle;
import edu.brown.cs.cutlass.parser.tokenizer.styles.TokenStylePunct;
 */
package edu.brown.cs.cutlass.parser.tokenizer.tokentypes;

import edu.brown.cs.cutlass.parser.tokenizer.Token;
import edu.brown.cs.cutlass.parser.tokenizer.TokenType;
import edu.brown.cs.cutlass.parser.tokenizer.styles.TokenStyle;
import edu.brown.cs.cutlass.parser.tokenizer.styles.TokenStyleString;
 */
package edu.brown.cs.cutlass.parser.tokenizer.tokentypes;

import edu.brown.cs.cutlass.parser.tokenizer.Token;
import edu.brown.cs.cutlass.parser.tokenizer.TokenType;
import edu.brown.cs.cutlass.parser.tokenizer.styles.TokenStyle;
import java.util.regex.Pattern;

/**
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 * and limitations under the License.
 *
 */
 package de.jcup.egradle.core.validation;

import java.util.ArrayList;
import java.util.List;
	private int maxPos;
	private List<String> data;

	public ValidationResult validate(List<String> lines){
		Validate.notNull(lines);
		this.data=new ArrayList<>(lines);
		problem = new ValidationResult();
		
		maxPos = lines.size()-1;
		for (pos=0;pos<=maxPos;pos++){
			String line = data.get(pos);
			nextLine(line);
		}
		return problem;
	}

	private void nextLine(String line) {
		/* when not where found - try if where in this line otherwise gurad close exit...*/
		if (!problem.whereFound) {
			if (line.indexOf("* Where:") != -1) {
				problem.whereFound = true;
				return;
			}
			return;
		}
		/* where was found */
		handleScriptText(line);
		handleProblemMessage(line);
	}

	private void handleProblemMessage(String line) {
		if (problem.problemType != null) {
			if (problem.problemMessage==null){
				if (line.startsWith(">")) {
					StringBuilder sb = new StringBuilder();
					sb.append(
							line.substring(1).trim());
					
					int mpos = pos+1;
					/* inspect next lines*/
					while (mpos<=maxPos){
						String nextLine = data.get(mpos);
						if (nextLine.length()==0){
							break;
						}
						sb.append("\n");
						sb.append(nextLine);
						
						int columnIdIndex = nextLine.indexOf(COLUMN_IDENTIFIER);
						if (columnIdIndex!=-1){
							/* parse column information*/
							String columnString = nextLine.substring(columnIdIndex+COLUMN_IDENTIFIER.length());
							if (columnString.endsWith(".")){
								columnString=columnString.substring(0, columnString.length()-1);
							}
							int column = converter.convertToInt(columnString,-1);
							problem.column= column;
						}
						mpos++;
						
					}
					pos=mpos;// set pointer to end of former inspection
					problem.problemMessage = sb.toString();
					
				}
			}
			return;
		}
		if (!problem.whatWentWrongFound) {
			problem.whatWentWrongFound = line.indexOf("* What went wrong") != -1;
			return;
		}
		if (problem.problemType == null) {
			for (ProblemType type: ProblemType.values()){
				if (line.startsWith(type.text)) {
					problem.problemType = type;
					break;
				}
			}
		}

		if (problem.problemMessage != null) {
			return;
		}
		
	}

	private void handleScriptText(String line) {
		if (problem.line!=-1){
			return;
		}
		if (problem.problemMessage != null) {
			return;
		}
		/* try to fetch line data*/
		if (line.indexOf("line:")==-1){
			return;
		}
		int scriptTextStart = line.indexOf('\'');
		if (scriptTextStart == -1) {
			return;
		}
		String remaining = line.substring(scriptTextStart+1);
		int scriptTextEnd = remaining.indexOf("'");
		if (scriptTextEnd == -1) {
			return;
private void handleScriptText(String line) {
		if (lineIndex == -1) {
			return;
		}
		String lineNr = remaining.substring(lineIndex+LINE2.length());
		problem.line = converter.convertToInt(lineNr.trim());
	}
}
	
	COULD_NOT_COMPILE_SCRIPT("Could not compile script"),
	
	COULD_NOT_COMPILE_SETTINGS("Could not compile settings file");

	String text;
	int column=-1;

	public boolean hasProblem(){
		boolean hasProblem = false;
		hasProblem=hasProblem || hasScriptEvaluationProblem();
		hasProblem=hasProblem || hasCompileProblem();
		return hasProblem;
		
	}
	
	boolean hasScriptEvaluationProblem() {
		return problemType == ProblemType.A_PROBLEM_OCCURRED_WHILE_EVALUATING;
	}

	public int getLine() {
		return line;
	}
public String getErrorMessage() {
		return problemMessage;
	}

	boolean hasCompileProblem() {
		return problemType == ProblemType.COULD_NOT_COMPILE_SCRIPT || problemType== ProblemType.COULD_NOT_COMPILE_SETTINGS;
	}

	public int getColumn() {
		return column;
	}
}
public void test_bugfix_157_works(){
		assertTrue(problem.hasProblem());
		assertEquals(28, problem.getLine());
		assertEquals(
				"/home/albert/dev/src/git/egradle-testcase-projects/singleproject-01-java-with-gradlewrapper/build.gradle",
				problem.getScriptPath());

	}
public void no_problem_on_evaluation_returns_in_validation_result_without_script
		/* test */
		ValidationResult problem = validatorToTest.validate(output);
		assertNotNull(problem);
		assertFalse(problem.hasScriptEvaluationProblem());
		assertTestOutputDoesNotExceedLimits();
	}

public void a_problem_on_evaluation_build__buildfile__line_1_is_is_inside_valida
		/* test */
		ValidationResult problem = validatorToTest.validate(output);
		assertNotNull(problem);
		assertTrue(problem.hasScriptEvaluationProblem());
		assertEquals(1, problem.getLine());
		assertEquals("/home/albert/dev/src/git/gradle-project-template/build.gradle", problem.getScriptPath());
		assertEquals("Cannot get property 'x' on null object", problem.getErrorMessage());
public void a_problem_on_evaluation_script__home_albert_build_gradle__line_612_i
		/* test */
		ValidationResult problem = validatorToTest.validate(output);
		assertNotNull(problem);
		assertTrue(problem.hasScriptEvaluationProblem());
		assertEquals(612, problem.getLine());
		assertEquals("home/albert/build.gradle", problem.getScriptPath());
		assertEquals("Could not get unknown property 'x' for root project 'xyz' of type org.gradle.api.Project",
public void settings_compile_error() {
		/* test */
		ValidationResult problem = validatorToTest.validate(output);
		assertNotNull(problem);
		assertTrue(problem.hasCompileProblem());
		assertEquals(7, problem.getLine());
		assertEquals("/home/albert/dev/src/git/gradle-project-template/settings.gradle", problem.getScriptPath());
		assertTrue(problem.getErrorMessage().indexOf("unexpected token: import ") != -1);
public void compile_script_error() {
		/* test */
		ValidationResult problem = validatorToTest.validate(output);
		assertNotNull(problem);
		assertTrue(problem.hasCompileProblem());
		assertEquals(7, problem.getLine());
		assertEquals("/home/albert/dev/src/git/code2doc/libraries.gradle", problem.getScriptPath());
		assertTrue(problem.getErrorMessage().indexOf("expecting ']', found 'mockito_all' ") != -1);
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import com.sleekbyte.tailor.common.MaxLengths;
import com.sleekbyte.tailor.common.Severity;
import com.sleekbyte.tailor.listeners.CommentAnalyzer;
import com.sleekbyte.tailor.listeners.FileListener;
import com.sleekbyte.tailor.listeners.MainListener;
import com.sleekbyte.tailor.output.Printer;
public static void checkSrcRoot() {
    }

    /**
     * Main runner for Tailor.
     *
     * @param args command line arguments
public static void main(String[] args) {
                exitWithMissingSourceFileError();
            }

            long numErrors = 0;
            MaxLengths maxLengths = argumentParser.parseMaxLengths();
            Severity maxSeverity = argumentParser.getMaxSeverity();

            for (String filename : filenames) {
                File inputFile = new File(filename);
                FileInputStream inputStream = new FileInputStream(inputFile);
                SwiftLexer lexer = new SwiftLexer(new ANTLRInputStream(inputStream));
                CommonTokenStream tokenStream = new CommonTokenStream(lexer);
                SwiftParser swiftParser = new SwiftParser(tokenStream);
                SwiftParser.TopLevelContext tree = swiftParser.topLevel();

                try (Printer printer = new Printer(inputFile, maxSeverity)) {
                    MainListener listener = new MainListener(printer, maxLengths, tokenStream);
                    ParseTreeWalker walker = new ParseTreeWalker();
                    walker.walk(listener, tree);
                    try (FileListener fileListener = new FileListener(printer, inputFile, maxLengths)) {
                        fileListener.verify();
                    }
                    CommentAnalyzer commentAnalyzer = new CommentAnalyzer(tokenStream, printer);
                    commentAnalyzer.analyze();
                    numErrors += printer.getNumErrorMessages();
                }
            }

            if (numErrors >= 1L) {
                // Non-zero exit status when any violation messages have Severity.ERROR, controlled by --max-severity
                System.exit(EXIT_FAILURE);
            }

        } catch (IOException e) {
            System.err.println("Source file analysis failed. Reason: " + e.getMessage());
    public static final String MAX_NAME_LENGTH_DESC = MAXIMUM + IDENTIFIER_NAME + LENGTH + IN_CHARS_DESC;
    public static final String MAX_STRUCT_LENGTH_DESC = MAXIMUM + STRUCT + LENGTH + IN_CHARS_DESC;
    public static final String MAX_SEVERITY_DESC = MAXIMUM + SEVERITY + "[" + ERROR + "|" + WARNING + "]";

}
public void close() {
        this.msgBuffer.clear();
    }

    public long getNumErrorMessages() {
        return msgBuffer.values().stream().filter(msg -> msg.getSeverity().equals(Severity.ERROR)).count();
    }
    private static final String MAX_NAME_LENGTH_OPT = "max-name-length";
    private static final String MAX_STRUCT_LENGTH_OPT = "max-struct-length";
    private static final String MAX_SEVERITY_OPT = "max-severity";
    private static final String DEFAULT_INT_ARG = "0";

    private Options options;
private void addOptions() {
        final Option maxStructLength = addArgument(MAX_STRUCT_LENGTH_OPT, Messages.MAX_STRUCT_LENGTH_DESC);
        final Option maxSeverity = addArgument(MAX_SEVERITY_OPT, Messages.MAX_SEVERITY_DESC);

        options = new Options();
        options.addOption(help);
        options.addOption(maxClassLength);
private void addOptions() {
        options.addOption(maxNameLength);
        options.addOption(maxStructLength);
        options.addOption(maxSeverity);
    }

    /**
public Severity getMaxSeverity() throws ArgumentParserException {
        }
    }

}
public void testGrammar() throws UnsupportedEncodingException {
        for (File swiftFile : swiftFiles) {
            errContent = new ByteArrayOutputStream();
            System.setErr(new PrintStream(errContent, false, Charset.defaultCharset().name()));
            String[] command = { (TEST_INPUT_DIR + swiftFile.getName()) };
            Tailor.main(command);
            assertThat(errContent.toString(Charset.defaultCharset().name()), IsEmptyString.isEmptyString());
            System.setErr(null);
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        </dependency>
        <dependency>
            <groupId>net.sourceforge.pmd</groupId>
            <artifactId>pmd</artifactId>
            <version>5.1.2</version>
            <exclusions>
                <exclusion>
                    <artifactId>asm</artifactId>
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	 */
	private static final Pattern REGEX_NAME = Pattern.compile("^[a-zA-Z_][a-zA-Z0-9_]*");
	private static final Pattern REGEX_NUMBER = Pattern.compile("^[0-9]+(\\.[0-9]+)?");
	private static final Pattern REGEX_STRING = Pattern.compile("((\").*?(?<!\\\\)(\"))|((').*?(?<!\\\\)('))",
			Pattern.DOTALL);
	private static final String PUNCTUATION = "()[]{}?:.,|=";
private Pattern getOperatorRegex() {
				regex.append("|");
			}
			regex.append(Pattern.quote(operator));
		}

		return Pattern.compile(regex.toString());
public void testPositionalArgumentAfterNamedArguments() throws PebbleException,
		assertEquals("2012/July/1", writer.toString());
	}
	
	@Test(expected=PebbleException.class)
	public void testIncorrectlyNamedArgument() throws PebbleException, IOException {
		Loader loader = new StringLoader();
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
 * Copyright 2013, 2014 Deutsche Nationalbibliothek
 *
 * Licensed under the Apache License, Version 2.0 the "License";
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.culturegraph.mf.exceptions;

import org.culturegraph.mf.stream.sink.StreamValidator;

/**
 * Thrown if data processing fails do to format errors which are
 * no structural errors but caused by invalid data. For instance,
 * encountering missing fields or an invalid field order in a record
 * can raise a validation error.
 *
 * @see StreamValidator
 *
 * @author Christoph Böhme
 *
 */
public final class ValidationException extends FormatException {

	private static final long serialVersionUID = -4446333800830109742L;

	public ValidationException(final String message) {
		super(message);
	}

	public ValidationException(final Throwable cause) {
		super(cause);
	}

	public ValidationException(final String message, final Throwable cause) {
		super(message, cause);
	}

}
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

import org.culturegraph.mf.exceptions.ValidationException;
import org.culturegraph.mf.framework.StreamReceiver;
import org.culturegraph.mf.types.Event;
import org.slf4j.Logger;

/**
 * Validates a stream of events using a list of expected stream events.
 * If the stream is invalid a {@link ValidationException} is thrown.
 *
 * @see WellformednessChecker
 * @see EventList
 * @see ValidationException
 *
 * @author Christoph Böhme
 *
 */
public final class StreamValidator implements StreamReceiver {

	private static final Logger LOG =
			LoggerFactory.getLogger(StreamValidator.class);

	private static final String UNCONSUMED_RECORDS_FOUND =
			"Unconsumed records found";

	private final EventNode eventStream;
	private final Deque<List<EventNode>> stack = new ArrayDeque<>();
	private boolean validating;
	private boolean validationFailed;

	private boolean strictRecordOrder;
	private boolean strictKeyOrder;
	private boolean strictValueOrder;
public StreamValidator(final List<Event> expectedStream) {
		this.eventStream = new EventNode(null, null);
		foldEventStream(this.eventStream, expectedStream.iterator());

		wellformednessChecker.setErrorHandler(
				msg -> { throw new ValidationException(msg); });

		resetStream();
	}

	public boolean isStrictRecordOrder() {
		return strictRecordOrder;
	}
public void setStrictValueOrder(final boolean strictValueOrder) {
	@Override
	public void startRecord(final String identifier) {
		if (validationFailed) {
			throw new ValidationException(VALIDATION_FAILED);
		}

		wellformednessChecker.startRecord(identifier);
public void startRecord(final String identifier) {
		if (!openGroups(Event.Type.START_RECORD, identifier, strictRecordOrder, false)) {
			validationFailed = true;
			logEventStream();
			throw new ValidationException(NO_RECORD_FOUND + identifier);
		}
	}

	@Override
	public void endRecord() {
		if (validationFailed) {
			throw new ValidationException(VALIDATION_FAILED);
		}

		wellformednessChecker.endRecord();

		if (!closeGroups()) {
			validationFailed = true;
			logEventStream();
			throw new ValidationException(
					NO_RECORD_FOUND + "No record matched the sequence of stream events");
		}

	}

	@Override
	public void startEntity(final String name) {
		if (validationFailed) {
			throw new ValidationException(VALIDATION_FAILED);
		}

		wellformednessChecker.startEntity(name);

		if (!openGroups(Event.Type.START_ENTITY, name, strictKeyOrder, strictValueOrder)) {
			validationFailed = true;
			logEventStream();
			throw new ValidationException(NO_ENTITY_FOUND + name);
		}
	}

	@Override
	public void endEntity() {
		if (validationFailed) {
			throw new ValidationException(VALIDATION_FAILED);
		}

		wellformednessChecker.endEntity();

		if (!closeGroups()) {
			validationFailed = true;
			logEventStream();
			throw new ValidationException(
					NO_ENTITY_FOUND + "No entity matched the sequence of stream events");
		}
	}

	@Override
	public void literal(final String name, final String value) {
		if (validationFailed) {
			throw new ValidationException(VALIDATION_FAILED);
		}

		wellformednessChecker.literal(name, value);
public void literal(final String name, final String value) {
		if (stackFrame.isEmpty()) {
			validationFailed = true;
			logEventStream();
			throw new ValidationException(NO_LITERAL_FOUND + name + "=" + value);
		}
	}

public void resetStream() {
	@Override
	public void closeStream() {
		if (validationFailed) {
			throw new ValidationException(VALIDATION_FAILED);
		}

		wellformednessChecker.closeStream();
public void closeStream() {
		} else {
			validationFailed = true;
			logEventStream();
			throw new ValidationException(UNCONSUMED_RECORDS_FOUND);
		}
	}

public void run() {
		inputReader.closeStream();

		final StreamValidator validator = new StreamValidator(resultStream.getEvents());

		final Element result = (Element) config.getElementsByTagName(RESULT_TAG).item(0);
		validator.setStrictRecordOrder(Boolean.parseBoolean(result.getAttribute(STRICT_RECORD_ORDER_ATTR)));
protected void runChild(final TestCase child, final RunNotifier notifier) {
			notifier.fireTestStarted(describeChild(child));
			try {
				child.run();
			} catch (final FormatException e) {
				notifier.fireTestFailure(new Failure(describeChild(child),
						new AssertionError(e)));
			} catch (final Throwable e) {
				notifier.fireTestFailure(new Failure(describeChild(child), e));
			} finally {
 */
package org.culturegraph.mf.stream.sink;

import org.culturegraph.mf.exceptions.ValidationException;
import org.junit.Test;

/**
 * Tests for class {@link StreamValidator}.
 */
public final class StreamValidatorTest {

	@Test(expected= ValidationException.class)
	public void shouldFailIfEndRecordEventIsMissing() {
		final EventList stream = new EventList();

		stream.startRecord("1");
		stream.endRecord();
		stream.closeStream();

		final StreamValidator validator = new StreamValidator(stream.getEvents());

		validator.startRecord("1");
		validator.closeStream();
	}

}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
types:
      good: 2016-02-28T16:41:41.090Z
      bad: 2016-13-34T27:65:65.0901Z
    format: rfc3339 # the default, so no need to specify
  If-Modified-Since:
    type: datetime
    examples:
RamlDocumentNode (Start: 11 , End: 838, On: input.raml, Source: SYObjectNode)
    KeyValueNodeImpl (Start: 11 , End: 29, On: input.raml)
        SYStringNode: "title" (Start: 11 , End: 16, On: input.raml)
        OverlayableObjectNodeImpl (Start: 18 , End: 29, On: input.raml, Source: SYStringNode)
            KeyValueNodeImpl (Start: 11 , End: 29, On: input.raml)
                StringNodeImpl: "value" (Start: -1 , End: -1)
                OverlayableStringNode: "My Date API" (Start: 18 , End: 29, On: input.raml)
    TypesNode (Start: 30 , End: 838, On: input.raml, Source: KeyValueNodeImpl)
        SYStringNode: "types" (Start: 30 , End: 35, On: input.raml)
        SYObjectNode (Start: 39 , End: 838, On: input.raml)
            TypeDeclarationField (Start: 39 , End: 169, On: input.raml, Source: KeyValueNodeImpl)
                SYStringNode: "birthday" (Start: 39 , End: 47, On: input.raml)
                TypeDeclarationNode (Start: 53 , End: 169, On: input.raml, Source: SYObjectNode)
RamlDocumentNode (Start: 11 , End: 838, On: input.raml, Source: SYObjectNode)
                            KeyValueNodeImpl (Start: -1 , End: -1)
                                StringNodeImpl: "value" (Start: -1 , End: -1)
                                OverlayableStringNode: "created" (Start: -1 , End: -1, Source: SYStringNode)
            TypeDeclarationField (Start: 616 , End: 838, On: input.raml, Source: KeyValueNodeImpl)
                SYStringNode: "If-Modified-Since" (Start: 616 , End: 633, On: input.raml)
                TypeDeclarationNode (Start: 639 , End: 838, On: input.raml, Source: SYObjectNode)
                    KeyValueNodeImpl (Start: 639 , End: 653, On: input.raml)
                        SYStringNode: "type" (Start: 639 , End: 643, On: input.raml)
                        NativeTypeExpressionNode: "datetime" (Start: 645 , End: 653, On: input.raml, Source: SYStringNode)
                    ExamplesNode (Start: 658 , End: 755, On: input.raml, Source: KeyValueNodeImpl)
                        SYStringNode: "examples" (Start: 658 , End: 666, On: input.raml)
                        SYObjectNode (Start: 674 , End: 755, On: input.raml)
                            ExampleDeclarationNode (Start: 674 , End: 709, On: input.raml, Source: KeyValueNodeImpl)
                                SYStringNode: "good" (Start: 674 , End: 678, On: input.raml)
                                SYStringNode: "Sun, 28 Feb 2016 16:41:41 GMT" (Start: 680 , End: 709, On: input.raml)
                            ExampleDeclarationNode (Start: 716 , End: 750, On: input.raml, Source: KeyValueNodeImpl)
                                SYStringNode: "bad" (Start: 716 , End: 719, On: input.raml)
                                ErrorNode: "Provided value San, 28 Feb 2016 16:41:41 GMT is not compliant with the format datetime provided in rfc2616" (Start: 721 , End: 750, On: input.raml, Source: SYStringNode)
                    FacetNode (Start: 755 , End: 770, On: input.raml, Source: KeyValueNodeImpl)
                        SYStringNode: "format" (Start: 755 , End: 761, On: input.raml)
                        SYStringNode: "rfc2616" (Start: 763 , End: 770, On: input.raml)
                    KeyValueNodeImpl (Start: -1 , End: -1)
                        StringNodeImpl: "displayName" (Start: -1 , End: -1)
                        ObjectNodeImpl (Start: -1 , End: -1)

import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;

public class DateUtils
{
    private static DateTimeFormatter hourFormatter = DateTimeFormat.forPattern("HH:mm:ss");
    private static DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("YYYY-MM-DD");
    private static DateTimeFormatter dateTimeFormatter = DateTimeFormat.forPattern("YYYY-MM-DD'T'HH:mm:ss");
    private static DateTimeFormatter dateTimeSecondFormatter = DateTimeFormat.forPattern("YYYY-MM-DD'T'HH:mm:ss.SSS'Z'");
    private static DateTimeFormatter rfc2616Formatter = DateTimeFormat.forPattern("EEE, dd MMM yyyy HH:mm:ss zzz");

    public static boolean isValidDate(String date, DateType format, String rfc)
    {
public static boolean isValidDate(String date, DateType format, String rfc)
            switch (format)
            {
            case date_only:
                dateFormatter.parseLocalDate(date);
                break;
            case time_only:
                hourFormatter.parseLocalTime(date);
                break;
            case datetime_only:
                dateTimeFormatter.parseLocalDateTime(date);
                break;
            case datetime:
                if (rfc != null && "rfc2616".equals(rfc))
public static boolean isValidDate(String date, DateType format, String rfc)
                }
                else
                {
                    dateTimeSecondFormatter.parseLocalDateTime(date);
                    break;
                }
            default:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import cgeo.geocaching.compatibility.Compatibility;
import cgeo.geocaching.geopoint.Geopoint;
import cgeo.geocaching.geopoint.GeopointFormatter;
import cgeo.geocaching.geopoint.direction.DDD;
import cgeo.geocaching.geopoint.direction.DMM;
import cgeo.geocaching.geopoint.direction.DMS;
import cgeo.geocaching.geopoint.direction.Direction;

import org.apache.commons.lang3.StringUtils;

private void updateGUI() {
            return;
        }

        Direction dir = gp.asDirection();
        bLat.setText(String.valueOf(dir.latDir));
        bLon.setText(String.valueOf(dir.lonDir));

        switch (currentFormat) {
            case Plain:
private void updateGUI() {
                tLatSep2.setText("°");
                tLonSep2.setText("°");

                DDD ddd = gp.asDDD();
                eLatDeg.setText(addZeros(ddd.latDeg, 2));
                eLatMin.setText(addZeros(ddd.latDegFrac, 5));
                eLonDeg.setText(addZeros(ddd.lonDeg, 3));
                eLonMin.setText(addZeros(ddd.lonDegFrac, 5));
                break;
            case Min: // DDD° MM.MMM
                findViewById(R.id.coordTable).setVisibility(View.VISIBLE);
private void updateGUI() {
                tLatSep3.setText("'");
                tLonSep3.setText("'");

                DMM dmm = gp.asDMM();
                eLatDeg.setText(addZeros(dmm.latDeg, 2));
                eLatMin.setText(addZeros(dmm.latMin, 2));
                eLatSec.setText(addZeros(dmm.latMinFrac, 3));
                eLonDeg.setText(addZeros(dmm.lonDeg, 3));
                eLonMin.setText(addZeros(dmm.lonMin, 2));
                eLonSec.setText(addZeros(dmm.lonMinFrac, 3));
                break;
            case Sec: // DDD° MM SS.SSS
                findViewById(R.id.coordTable).setVisibility(View.VISIBLE);
private void updateGUI() {
                tLatSep3.setText(".");
                tLonSep3.setText(".");

                DMS dms = gp.asDMS();
                eLatDeg.setText(addZeros(dms.latDeg, 2));
                eLatMin.setText(addZeros(dms.latMin, 2));
                eLatSec.setText(addZeros(dms.latSec, 2));
                eLatSub.setText(addZeros(dms.latSecFrac, 3));
                eLonDeg.setText(addZeros(dms.lonDeg, 3));
                eLonMin.setText(addZeros(dms.lonMin, 2));
                eLonSec.setText(addZeros(dms.lonSec, 2));
                eLonSub.setText(addZeros(dms.lonSecFrac, 3));
                break;
        }
    }
private boolean calc(final boolean signalError) {

        switch (currentFormat) {
            case Deg:
                gp = DDD.createGeopoint(latDir, latDeg, latDegFrac, lonDir, lonDeg, lonDegFrac);
                break;
            case Min:
                gp = DMM.createGeopoint(latDir, latDeg, latMin, latMinFrac, lonDir, lonDeg, lonMin, lonMinFrac);
                break;
            case Sec:
                gp = DMS.createGeopoint(latDir, latDeg, latMin, latSec, latSecFrac, lonDir, lonDeg, lonMin, lonSec, lonSecFrac);
                break;
            case Plain:
                // This case has been handled above
import cgeo.geocaching.ICoordinates;
import cgeo.geocaching.R;
import cgeo.geocaching.geopoint.GeopointFormatter.Format;
import cgeo.geocaching.geopoint.direction.DDD;
import cgeo.geocaching.geopoint.direction.DMM;
import cgeo.geocaching.geopoint.direction.DMS;
import cgeo.geocaching.geopoint.direction.Direction;
import cgeo.geocaching.network.Network;
import cgeo.geocaching.network.Parameters;
import cgeo.geocaching.utils.Log;
    private final double latitude;
    private final double longitude;

    private Direction direction;
    private DDD ddd;
    private DMM dmm;
    private DMS dms;

    /**
     * Creates new Geopoint with given latitude and longitude (both degree).
     *
public Geopoint(final Parcel in) {
    }

    /**
     * Get latitude in degree.
     *
     * @return latitude
public String toString()
        return format(GeopointFormatter.Format.LAT_LON_DECMINUTE);
    }

    /**
     * Converts this geopoint to value type Direction.
     *
     * @return Direction
     */
    public Direction asDirection() {
        if (direction == null) { // because geopoint is immutable we can "cache" the result
            direction = new Direction(latitude, longitude);
        }
        return direction;
    }

    /**
     * Converts this geopoint to value type DDD.
     *
     * @return
     */
    public DDD asDDD() {
        if (ddd == null) {
            ddd = new DDD(latitude, longitude);
        }
        return ddd;
    }

    /**
     * Converts this geopoint to value type DMM.
     *
     * @return
     */
    public DMM asDMM() {
        if (dmm == null) {
            dmm = new DMM(latitude, longitude);
        }
        return dmm;
    }

    /**
     * Converts this geopoint to value type DMS.
     *
     * @return
     */
    public DMS asDMS() {
        if (dms == null) {
            dms = new DMS(latitude, longitude);
        }
        return dms;
    }

    abstract public static class GeopointException
            extends RuntimeException
    {
public Geopoint createFromParcel(final Parcel in) {
        }
    };

}
package cgeo.geocaching.geopoint;

import cgeo.geocaching.geopoint.direction.DMM;
import cgeo.geocaching.geopoint.direction.DMS;

import java.util.Locale;

/**
public static String format(final Format format, final Geopoint gp)
        final double latSigned = gp.getLatitude();
        final double lonSigned = gp.getLongitude();

        DMM dmm = gp.asDMM();
        DMS dms = gp.asDMS();

        switch (format) {
            case LAT_LON_DECDEGREE:
                return String.format("%!f(MISSING) %!f(MISSING)", latSigned, lonSigned);
public static String format(final Format format, final Geopoint gp)

            case LAT_LON_DECMINUTE:
                return String.format("%!c(MISSING) %!d(MISSING)° %!f(MISSING) · %!c(MISSING) %!d(MISSING)° %!f(MISSING)",
                        dmm.latDir, dmm.latDeg, dmm.latMinRaw, dmm.lonDir, dmm.lonDeg, dmm.lonMinRaw);

            case LAT_LON_DECMINUTE_RAW:
                return String.format((Locale) null, "%!c(MISSING) %!d(MISSING)° %!f(MISSING) %!c(MISSING) %!d(MISSING)° %!f(MISSING)",
                        dmm.latDir, dmm.latDeg, dmm.latMinRaw, dmm.lonDir, dmm.lonDeg, dmm.lonMinRaw);

            case LAT_LON_DECSECOND:
                return String.format("%!c(MISSING) %!d(MISSING)° %!d(MISSING)' %!f(MISSING)\" · %!c(MISSING) %!d(MISSING)° %!d(MISSING)' %!f(MISSING)\"",
                        dms.latDir, dms.latDeg, dms.latMin, dms.latSecRaw, dms.lonDir, dms.lonDeg, dms.lonMin, dms.lonSecRaw);

            case LAT_DECDEGREE_RAW:
                return String.format((Locale) null, "%!f(MISSING)", latSigned);

            case LAT_DECMINUTE:
                return String.format("%!c(MISSING) %!d(MISSING)° %!f(MISSING)", dmm.latDir, dmm.latDeg, dmm.latMinRaw);

            case LAT_DECMINUTE_RAW:
                return String.format("%!c(MISSING) %!d(MISSING) %!f(MISSING)", dmm.latDir, dmm.latDeg, dmm.latMinRaw);

            case LON_DECDEGREE_RAW:
                return String.format((Locale) null, "%!f(MISSING)", lonSigned);

            case LON_DECMINUTE:
                return String.format("%!c(MISSING) %!d(MISSING)° %!f(MISSING)", dmm.lonDir, dmm.lonDeg, dmm.lonMinRaw);

            case LON_DECMINUTE_RAW:
                return String.format("%!c(MISSING) %!d(MISSING) %!f(MISSING)", dmm.lonDir, dmm.lonDeg, dmm.lonMinRaw);
        }

        // Keep the compiler happy even though it cannot happen
package cgeo.geocaching.geopoint.direction;

import cgeo.geocaching.geopoint.Geopoint;

import java.math.BigDecimal;
import java.math.RoundingMode;

/**
 * Value type for the DDD.DDDDD format.
 */
public final class DDD extends Direction {

    /** latitude degree value */
    public final int latDeg;
    /** fractional part of the latitude degree value */
    public final int latDegFrac;

    public final int lonDeg;
    public final int lonDegFrac;

    public DDD(final double latSigned, final double lonSigned) {
        super(latSigned, lonSigned);
        BigDecimal bdLat = BigDecimal.valueOf(latSigned).abs();
        latDeg = bdLat.intValue();
        BigDecimal bdLatFrac = bdLat.subtract(BigDecimal.valueOf(latDeg)).multiply(BD_ONEHOUNDREDTHOUSAND);
        latDegFrac = bdLatFrac.setScale(0, RoundingMode.HALF_UP).intValue();

        BigDecimal bdlon = BigDecimal.valueOf(lonSigned).abs();
        lonDeg = bdlon.intValue();
        BigDecimal bdLonFrac = bdlon.subtract(BigDecimal.valueOf(lonDeg)).multiply(BD_ONEHOUNDREDTHOUSAND);
        lonDegFrac = bdLonFrac.setScale(0, RoundingMode.HALF_UP).intValue();
    }

    public static Geopoint createGeopoint(final String latDir, final String latDeg, final String latDegFrac,
            final String lonDir, final String lonDeg, final String lonDegFrac) {
        double lat = 0.0d;
        double lon = 0.0d;
        try {
            lat = Double.parseDouble(latDeg + "." + addZeros(Integer.parseInt(latDegFrac), 5));
            lon = Double.parseDouble(lonDeg + "." + addZeros(Integer.parseInt(lonDegFrac), 5));
        } catch (NumberFormatException e) {
        }
        lat *= "S".equalsIgnoreCase(latDir) ? -1 : 1;
        lon *= "W".equalsIgnoreCase(lonDir) ? -1 : 1;
        return new Geopoint(lat, lon);
    }
}
package cgeo.geocaching.geopoint.direction;

import cgeo.geocaching.geopoint.Geopoint;

import java.math.BigDecimal;
import java.math.RoundingMode;

public final class DMM extends Direction {

    public final int latDeg;
    public final double latMinRaw;
    public final int latMin;
    public final int latMinFrac;

    public final int lonDeg;
    public final double lonMinRaw;
    public final int lonMin;
    public final int lonMinFrac;

    public DMM(final double latSigned, final double lonSigned) {
        super(latSigned, lonSigned);
        BigDecimal bdLat = BigDecimal.valueOf(latSigned).abs();
        latDeg = bdLat.intValue();
        BigDecimal bdLatMin = bdLat.subtract(BigDecimal.valueOf(latDeg)).multiply(BD_SIXTY);
        // Rounding here ...
        bdLatMin = bdLatMin.setScale(3, RoundingMode.HALF_UP);
        latMinRaw = bdLatMin.doubleValue();
        latMin = bdLatMin.intValue();
        BigDecimal bdLatMinFrac = bdLatMin.subtract(BigDecimal.valueOf(latMin)).multiply(BD_THOUSAND);
        latMinFrac = bdLatMinFrac.setScale(0, RoundingMode.HALF_UP).intValue();

        BigDecimal bdlon = BigDecimal.valueOf(lonSigned).abs();
        lonDeg = bdlon.intValue();
        BigDecimal bdLonMin = bdlon.subtract(BigDecimal.valueOf(lonDeg)).multiply(BD_SIXTY);
        // Rounding here ...
        bdLonMin = bdLonMin.setScale(3, RoundingMode.HALF_UP);
        lonMinRaw = bdLonMin.doubleValue();
        lonMin = bdLonMin.intValue();
        BigDecimal bdLonMinFrac = bdLonMin.subtract(BigDecimal.valueOf(lonMin)).multiply(BD_THOUSAND);
        lonMinFrac = bdLonMinFrac.setScale(0, RoundingMode.HALF_UP).intValue();
    }

    public static Geopoint createGeopoint(final String latDir, final String latDeg, final String latMin, final String latMinFrac,
            final String lonDir, final String lonDeg, final String lonMin, final String lonMinFrac) {
        double lat = 0.0d;
        double lon = 0.0d;
        try {
            lat = Double.parseDouble(latDeg) + Double.parseDouble(latMin + "." + addZeros(Integer.parseInt(latMinFrac), 3)) / D60;
            lon = Double.parseDouble(lonDeg) + Double.parseDouble(lonMin + "." + addZeros(Integer.parseInt(lonMinFrac), 3)) / D60;
        } catch (NumberFormatException e) {
        }
        lat *= "S".equalsIgnoreCase(latDir) ? -1 : 1;
        lon *= "W".equalsIgnoreCase(lonDir) ? -1 : 1;
        return new Geopoint(lat, lon);
    }
}
package cgeo.geocaching.geopoint.direction;

import cgeo.geocaching.geopoint.Geopoint;

import java.math.BigDecimal;
import java.math.RoundingMode;

public final class DMS extends Direction {

    public final int latDeg;
    public final int latMin;
    public final double latSecRaw;
    public final int latSec;
    public final int latSecFrac;

    public final int lonDeg;
    public final int lonMin;
    public final double lonSecRaw;
    public final int lonSec;
    public final int lonSecFrac;

    public DMS(final double latSigned, final double lonSigned) {
        super(latSigned, lonSigned);
        BigDecimal bdLat = BigDecimal.valueOf(latSigned).abs();
        latDeg = bdLat.intValue();
        BigDecimal bdLatMin = bdLat.subtract(BigDecimal.valueOf(latDeg)).multiply(BD_SIXTY);
        latMin = bdLatMin.intValue();
        BigDecimal bdLatSec = bdLatMin.subtract(BigDecimal.valueOf(latMin)).multiply(BD_SIXTY);
        // Rounding here ...
        bdLatSec = bdLatSec.setScale(3, RoundingMode.HALF_UP);
        latSecRaw = bdLatSec.doubleValue();
        latSec = bdLatSec.intValue();
        BigDecimal bdLatSecFrac = bdLatSec.subtract(BigDecimal.valueOf(latSec)).multiply(BD_THOUSAND);
        latSecFrac = bdLatSecFrac.setScale(0, RoundingMode.HALF_UP).intValue();

        BigDecimal bdlon = BigDecimal.valueOf(lonSigned).abs();
        lonDeg = bdlon.intValue();
        BigDecimal bdLonMin = bdlon.subtract(BigDecimal.valueOf(lonDeg)).multiply(BD_SIXTY);
        lonMin = bdLonMin.intValue();
        BigDecimal bdLonSec = bdLonMin.subtract(BigDecimal.valueOf(lonMin)).multiply(BD_SIXTY);
        // Rounding here ...
        bdLonSec = bdLonSec.setScale(3, RoundingMode.HALF_UP);
        lonSecRaw = bdLonSec.doubleValue();
        lonSec = bdLonSec.intValue();
        BigDecimal bdLonSecFrac = bdLonSec.subtract(BigDecimal.valueOf(lonSec)).multiply(BD_THOUSAND);
        lonSecFrac = bdLonSecFrac.setScale(0, RoundingMode.HALF_UP).intValue();
    }

    public static Geopoint createGeopoint(final String latDir, final String latDeg, final String latMin, final String latSec, final String latSecFrac,
            final String lonDir, final String lonDeg, final String lonMin, final String lonSec, final String lonSecFrac) {
        double lat = 0.0d;
        double lon = 0.0d;
        try {
            lat = Double.parseDouble(latDeg) + Double.parseDouble(latMin) / D60 + Double.parseDouble(latSec + "." + addZeros(Integer.parseInt(latSecFrac), 3)) / D3600;
            lon = Double.parseDouble(lonDeg) + Double.parseDouble(lonMin) / D60 + Double.parseDouble(lonSec + "." + addZeros(Integer.parseInt(lonSecFrac), 3)) / D3600;
        } catch (NumberFormatException e) {
        }
        lat *= "S".equalsIgnoreCase(latDir) ? -1 : 1;
        lon *= "W".equalsIgnoreCase(lonDir) ? -1 : 1;
        return new Geopoint(lat, lon);
    }
}
package cgeo.geocaching.geopoint.direction;

import org.apache.commons.lang3.StringUtils;

import java.math.BigDecimal;

public class Direction {
    /* Constant values needed for calculation */
    static final double D60 = 60.0d;
    private static final double D1000 = 1000.0d;
    static final double D3600 = 3600.0d;
    static final BigDecimal BD_SIXTY = BigDecimal.valueOf(D60);
    static final BigDecimal BD_THOUSAND = BigDecimal.valueOf(D1000);
    static final BigDecimal BD_ONEHOUNDREDTHOUSAND = BigDecimal.valueOf(100000.0d);

    /** latitude direction, 'N' or 'S' */
    public final char latDir;
    /** longitude direction, 'E' or 'W' */
    public final char lonDir;

    public Direction(final double latSigned, final double lonSigned) {
        latDir = latSigned < 0 ? 'S' : 'N';
        lonDir = lonSigned < 0 ? 'W' : 'E';
    }

    protected static String addZeros(final int value, final int len) {
        return StringUtils.leftPad(Integer.toString(value), len, '0');
    }
}
package cgeo.geocaching.geopoint;

import cgeo.geocaching.geopoint.direction.DDD;
import cgeo.geocaching.geopoint.direction.DMM;
import cgeo.geocaching.geopoint.direction.DMS;

import android.os.Bundle;
import android.test.AndroidTestCase;

import junit.framework.Assert;

public class GeopointTest extends AndroidTestCase {

    public static void testCreation() {
public static void testParcelable() {
    public static void testDDD() {
        // case 1
        final Geopoint gp1 = new Geopoint(51.3d, 13.8d);
        DDD ddd1 = gp1.asDDD();

        checkDDD(ddd1, 'N', 51, 30000, 'E', 13, 80000);

        Geopoint gp1a = DDD.createGeopoint(String.valueOf(ddd1.latDir), String.valueOf(ddd1.latDeg), String.valueOf(ddd1.latDegFrac),
                String.valueOf(ddd1.lonDir), String.valueOf(ddd1.lonDeg), String.valueOf(ddd1.lonDegFrac));

        Assert.assertTrue(gp1a.equals(gp1));

        // case 2
        final Geopoint gp2 = new Geopoint(51.34567d, 13.87654d);
        DDD ddd2 = gp2.asDDD();

        checkDDD(ddd2, 'N', 51, 34567, 'E', 13, 87654);

        Geopoint gp2a = DDD.createGeopoint(String.valueOf(ddd2.latDir), String.valueOf(ddd2.latDeg), String.valueOf(ddd2.latDegFrac),
                String.valueOf(ddd2.lonDir), String.valueOf(ddd2.lonDeg), String.valueOf(ddd2.lonDegFrac));

        Assert.assertTrue(gp2a.equals(gp2));

        // case 3
        final Geopoint gp3 = new Geopoint(51.29999833333333d, 13.8d);
        DDD ddd3 = gp3.asDDD();

        checkDDD(ddd3, 'N', 51, 30000, 'E', 13, 80000);

        Geopoint gp3a = DDD.createGeopoint(String.valueOf(ddd3.latDir), String.valueOf(ddd3.latDeg), String.valueOf(ddd3.latDegFrac),
                String.valueOf(ddd3.lonDir), String.valueOf(ddd3.lonDeg), String.valueOf(ddd3.lonDegFrac));

        checkTolerance(gp3, gp3a, 5e-5);

        // case 4
        final Geopoint gp4 = new Geopoint(51.00012d, 13.00089d);
        DDD ddd4 = gp4.asDDD();

        checkDDD(ddd4, 'N', 51, 12, 'E', 13, 89);

        Geopoint gp4a = DDD.createGeopoint(String.valueOf(ddd4.latDir), String.valueOf(ddd4.latDeg), String.valueOf(ddd4.latDegFrac),
                String.valueOf(ddd4.lonDir), String.valueOf(ddd4.lonDeg), String.valueOf(ddd4.lonDegFrac));

        checkTolerance(gp4, gp4a, 5e-5);
    }

    private static void checkDDD(DDD ddd, char latDir, int latDeg, int latDegFrac, char lonDir, int lonDeg, int lonDegFrac) {
        Assert.assertEquals(latDir, ddd.latDir);
        Assert.assertEquals(latDeg, ddd.latDeg);
        Assert.assertEquals(latDegFrac, ddd.latDegFrac);
        Assert.assertEquals(lonDir, ddd.lonDir);
        Assert.assertEquals(lonDeg, ddd.lonDeg);
        Assert.assertEquals(lonDegFrac, ddd.lonDegFrac);
    }

    private static void checkTolerance(Geopoint gp1, Geopoint gp2, double tolerance) {
private static void checkTolerance(Geopoint gp1, Geopoint gp2, double tolerance)
    public static void testDMM() {
        // case 1
        final Geopoint gp1 = new Geopoint(51.3d, 13.8d);
        DMM dmm1 = gp1.asDMM();

        checkDMM(dmm1, 'N', 51, 18, 0, 'E', 13, 48, 0);

        Geopoint gp1a = DMM.createGeopoint(String.valueOf(dmm1.latDir), String.valueOf(dmm1.latDeg), String.valueOf(dmm1.latMin), String.valueOf(dmm1.latMinFrac),
                String.valueOf(dmm1.lonDir), String.valueOf(dmm1.lonDeg), String.valueOf(dmm1.lonMin), String.valueOf(dmm1.lonMinFrac));

        Assert.assertTrue(gp1a.equals(gp1));

        // case 2
        final Geopoint gp2 = new Geopoint(51.34567d, 13.87654d);
        DMM dmm2 = gp2.asDMM();

        checkDMM(dmm2, 'N', 51, 20, 740, 'E', 13, 52, 592);

        Geopoint gp2a = DMM.createGeopoint(String.valueOf(dmm2.latDir), String.valueOf(dmm2.latDeg), String.valueOf(dmm2.latMin), String.valueOf(dmm2.latMinFrac),
                String.valueOf(dmm2.lonDir), String.valueOf(dmm2.lonDeg), String.valueOf(dmm2.lonMin), String.valueOf(dmm2.lonMinFrac));

        checkTolerance(gp2, gp2a, 5e-5);

        // case 3
        final Geopoint gp3 = new Geopoint(51.29999833333333d, 13.8d);
        DMM dmm3 = gp3.asDMM();

        checkDMM(dmm3, 'N', 51, 18, 0, 'E', 13, 48, 0);

        Geopoint gp3a = DMM.createGeopoint(String.valueOf(dmm3.latDir), String.valueOf(dmm3.latDeg), String.valueOf(dmm3.latMin), String.valueOf(dmm3.latMinFrac),
                String.valueOf(dmm3.lonDir), String.valueOf(dmm3.lonDeg), String.valueOf(dmm3.lonMin), String.valueOf(dmm3.lonMinFrac));

        checkTolerance(gp3, gp3a, 5e-5);

        // case 4
        final Geopoint gp4 = new Geopoint(51.00012d, 13.00089d);
        DMM dmm4 = gp4.asDMM();

        checkDMM(dmm4, 'N', 51, 0, 7, 'E', 13, 0, 53);

        Geopoint gp4a = DMM.createGeopoint(String.valueOf(dmm4.latDir), String.valueOf(dmm4.latDeg), String.valueOf(dmm4.latMin), String.valueOf(dmm4.latMinFrac),
                String.valueOf(dmm4.lonDir), String.valueOf(dmm4.lonDeg), String.valueOf(dmm4.lonMin), String.valueOf(dmm4.lonMinFrac));

        checkTolerance(gp4, gp4a, 5e-5);
    }

    private static void checkDMM(DMM dmm, char latDir, int latDeg, int latMin, int latMinFrac, char lonDir, int lonDeg, int lonMin, int lonMinFrac) {
        Assert.assertEquals(latDir, dmm.latDir);
        Assert.assertEquals(latDeg, dmm.latDeg);
        Assert.assertEquals(latMin, dmm.latMin);
        Assert.assertEquals(latMinFrac, dmm.latMinFrac);
        Assert.assertEquals(lonDir, dmm.lonDir);
        Assert.assertEquals(lonDeg, dmm.lonDeg);
        Assert.assertEquals(lonMin, dmm.lonMin);
        Assert.assertEquals(lonMinFrac, dmm.lonMinFrac);
    }

    public static void testDMS() {
        // case 1
        final Geopoint gp1 = new Geopoint(51.3d, 13.8d);
        DMS dms1 = gp1.asDMS();

        checkDMS(dms1, 'N', 51, 18, 0, 0, 'E', 13, 48, 0, 0);

        Geopoint gp1a = DMS.createGeopoint(String.valueOf(dms1.latDir), String.valueOf(dms1.latDeg), String.valueOf(dms1.latMin), String.valueOf(dms1.latSec), String.valueOf(dms1.latSecFrac),
                String.valueOf(dms1.lonDir), String.valueOf(dms1.lonDeg), String.valueOf(dms1.lonMin), String.valueOf(dms1.lonSec), String.valueOf(dms1.lonSecFrac));

        Assert.assertTrue(gp1a.equals(gp1));

        // case 2
        final Geopoint gp2 = new Geopoint(51.34567d, 13.87654d);
        DMS dms2 = gp2.asDMS();

        checkDMS(dms2, 'N', 51, 20, 44, 412, 'E', 13, 52, 35, 544);

        Geopoint gp2a = DMS.createGeopoint(String.valueOf(dms2.latDir), String.valueOf(dms2.latDeg), String.valueOf(dms2.latMin), String.valueOf(dms2.latSec), String.valueOf(dms2.latSecFrac),
                String.valueOf(dms2.lonDir), String.valueOf(dms2.lonDeg), String.valueOf(dms2.lonMin), String.valueOf(dms2.lonSec), String.valueOf(dms2.lonSecFrac));

        checkTolerance(gp2, gp2a, 5e-6);

        // case 3
        final Geopoint gp3 = new Geopoint(51.29999833333333d, 13.8d);
        DMS dms3 = gp3.asDMS();

        checkDMS(dms3, 'N', 51, 17, 59, 994, 'E', 13, 48, 0, 0);

        Geopoint gp3a = DMS.createGeopoint(String.valueOf(dms3.latDir), String.valueOf(dms3.latDeg), String.valueOf(dms3.latMin), String.valueOf(dms3.latSec), String.valueOf(dms3.latSecFrac),
                String.valueOf(dms3.lonDir), String.valueOf(dms3.lonDeg), String.valueOf(dms3.lonMin), String.valueOf(dms3.lonSec), String.valueOf(dms3.lonSecFrac));

        checkTolerance(gp3, gp3a, 5e-6);

        // case 4
        final Geopoint gp4 = new Geopoint(51.00012d, 13.00089d);
        DMS dms4 = gp4.asDMS();

        checkDMS(dms4, 'N', 51, 0, 0, 432, 'E', 13, 0, 3, 204);

        Geopoint gp4a = DMS.createGeopoint(String.valueOf(dms4.latDir), String.valueOf(dms4.latDeg), String.valueOf(dms4.latMin), String.valueOf(dms4.latSec), String.valueOf(dms4.latSecFrac),
                String.valueOf(dms4.lonDir), String.valueOf(dms4.lonDeg), String.valueOf(dms4.lonMin), String.valueOf(dms4.lonSec), String.valueOf(dms4.lonSecFrac));

        checkTolerance(gp4, gp4a, 5e-6);
    }

    private static void checkDMS(DMS dms, char latDir, int latDeg, int latMin, int latSec, int latSecFrac, char lonDir, int lonDeg, int lonMin, int lonSec, int lonSecFrac) {
        Assert.assertEquals(latDir, dms.latDir);
        Assert.assertEquals(latDeg, dms.latDeg);
        Assert.assertEquals(latMin, dms.latMin);
        Assert.assertEquals(latSec, dms.latSec);
        Assert.assertEquals(latSecFrac, dms.latSecFrac);
        Assert.assertEquals(lonDir, dms.lonDir);
        Assert.assertEquals(lonDeg, dms.lonDeg);
        Assert.assertEquals(lonMin, dms.lonMin);
        Assert.assertEquals(lonSec, dms.lonSec);
        Assert.assertEquals(lonSecFrac, dms.lonSecFrac);
    }

    public static void testElevation() {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	<properties>
		<target.dir>target</target.dir>
		<org.slf4j.version>1.6.1</org.slf4j.version>
        <current.year>2012</current.year>
	</properties>
	<dependencies>
		<dependency>
			<artifactId>jersey-apache-client</artifactId>
			<version>1.4</version>
		</dependency>
	</dependencies>
	<build>
		<outputDirectory>${basedir}/${target.dir}/classes</outputDirectory>
import org.w3c.dom.Document;

import de.bitzeche.video.transcoding.zencoder.job.ZencoderJob;


public interface IZencoderClient {

	/**
	 * Submits a new Zencoder Job
	 * @param job
	 * @return XML Response from zencoder
	 */
	public Document createJob(ZencoderJob job);
	
	public boolean resubmitJob(int jobId);
	public boolean resubmitJob(ZencoderJob job);

	public boolean cancelJob(int jobId);
	public boolean cancelJob(ZencoderJob job);

	public boolean deleteJob(int jobId);
	public boolean deleteJob(ZencoderJob job);
}
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.w3c.dom.Document;

import de.bitzeche.video.transcoding.zencoder.enums.ZencoderAPIVersion;
import de.bitzeche.video.transcoding.zencoder.job.ZencoderJob;

public class ZencoderClient implements IZencoderClient {

public ZencoderClient(String zencoderApiKey, ZencoderAPIVersion apiVersion) {
	}

	@Override
	public Document createJob(ZencoderJob job) {
		Document data;
		try {
			data = job.createXML();
public Document createJob(ZencoderJob job) {
					"https://app.zencoder.com/api/jobs?format=xml", data);
			String id = (String) xPath.evaluate("/api-response/job/id",
					response, XPathConstants.STRING);
			if (id != null) {
				job.setJobId(Integer.parseInt(id));
			}
			return response;
		} catch (ParserConfigurationException e) {
			LOGGER.error("Parser threw Exception", e);
		} catch (XPathExpressionException e) {
public boolean deleteJob(ZencoderJob job) {

	@Deprecated
	public boolean deleteJob(int id) {
		throw new IllegalArgumentException("Deleting jobs is not supported at the moment. Use cancel instead.");
		
//		String url = zencoderAPIBaseUrl + "jobs/" + id + "?api_key="
//				+ zencoderAPIKey;
//		LOGGER.debug("calling to delete job: {}", url);
//		WebResource webResource = httpClient.resource(url);
//		ClientResponse response = webResource.delete(ClientResponse.class);
//		int responseStatus = response.getStatus();
//		return (responseStatus == 200);
	}

	protected ClientResponse sendGetRequest(String url) {
import de.bitzeche.video.transcoding.zencoder.job.ZencoderS3AccessControlItem;
import de.bitzeche.video.transcoding.zencoder.job.ZencoderThumbnail;
import de.bitzeche.video.transcoding.zencoder.job.ZencoderWatermark;

public class ZencoderClientTest {

public void createJobAndCheckXML() {
	}

	@Test(dataProvider = "ApiVersionDS")
	public void createAndCancelJobTest(ApiVersionProvider provider) {

		ZencoderAPIVersion apiVersion = provider.getApiVersion();
		IZencoderClient client = createClient(apiVersion);
public void createAndCancelJobTest(ApiVersionProvider provider) {
		Assert.assertTrue(canceled);
	}

	@Test(dataProvider = "ApiVersionDS", dependsOnMethods = "createAndCancelJobTest")
	public void resubmitAndCancelJobTest(ApiVersionProvider provider) {

public void resubmitAndCancelJobTest(ApiVersionProvider provider) {
		Assert.assertTrue(canceled);
	}

	@Test(dataProvider = "ApiVersionDS", dependsOnMethods = "resubmitAndCancelJobTest", expectedExceptions = IllegalArgumentException.class)
	public void deleteTest(ApiVersionProvider provider) {
		ZencoderAPIVersion apiVersion = provider.getApiVersion();
		IZencoderClient client = createClient(apiVersion);
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
else if (currentCustomState == LEX_HTML)
		{
			int offset = tokenStart;
			boolean blockStart = false;
			int lastNonSpaceCharacterOffset = -1;
			for (; offset < bufferEnd; offset++)
			{
				char currentChar = buffer.charAt(offset);
else if (isOutlineOpener(buffer, offset))
				{
					break;
				}
				else if (!Character.isWhitespace(currentChar))
				{
					lastNonSpaceCharacterOffset = offset;
				}
			}

			if (offset > tokenStart)
			{
				reLexHTMLBLock(tokenStart, offset, lastNonSpaceCharacterOffset, TT2_HTML);
			}

			if (blockStart)
public void testTags()
		doTest("tags");
	}

	public void testChompMarkers()
	{
		doTest("chomp_markers");
Template Toolkit File
  PsiComment(TemplateToolkit2Token.TT2_HTML)('<html>\n<head>http://template-toolkit.org/docs/manual/Variables.html</head>\n<body>')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiSetDirectiveImpl(TemplateToolkit2Element.SET_DIRECTIVE)
    PsiAssignExprImpl(TemplateToolkit2Element.ASSIGN_EXPR)
Template Toolkit File
          PsiElement(TemplateToolkit2Token.SQ_CLOSE)(''')
        PsiElement(TemplateToolkit2Token.])(']')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiSetDirectiveImpl(TemplateToolkit2Element.SET_DIRECTIVE)
    PsiAssignExprImpl(TemplateToolkit2Element.ASSIGN_EXPR)
Template Toolkit File
            PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('4')
        PsiElement(TemplateToolkit2Token.])(']')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('# n is [ 1, 2, 3, 4 ]')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiSetDirectiveImpl(TemplateToolkit2Element.SET_DIRECTIVE)
    PsiAssignExprImpl(TemplateToolkit2Element.ASSIGN_EXPR)
Template Toolkit File
            PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('y')
        PsiElement(TemplateToolkit2Token.])(']')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('</body>\n</html>')
Template Toolkit File
  PsiComment(TemplateToolkit2Token.TT2_HTML)('<html>\n<head>http://template-toolkit.org/docs/manual/Variables.html</head>\n<body>')
  PsiAnonBlockImpl(TemplateToolkit2Element.ANON_BLOCK)
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiAnonBlockDirectiveImpl(TemplateToolkit2Element.ANON_BLOCK_DIRECTIVE)
Template Toolkit File
      PsiElement(TemplateToolkit2Token.=)('=')
      PsiElement(TemplateToolkit2Token.BLOCK)('BLOCK')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiComment(TemplateToolkit2Token.TT2_HTML)('And Caesar's spirit, ranging for revenge,')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('someval')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiComment(TemplateToolkit2Token.TT2_HTML)('With Ate by his side come hot from hell,')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiAnonBlockImpl(TemplateToolkit2Element.ANON_BLOCK)
    PsiElement(TemplateToolkit2Token.%)('%')
    PsiAnonBlockDirectiveImpl(TemplateToolkit2Element.ANON_BLOCK_DIRECTIVE)
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('julius')
      PsiElement(TemplateToolkit2Token.=)('=')
      PsiElement(TemplateToolkit2Token.BLOCK)('BLOCK')
    PsiComment(TemplateToolkit2Token.TT2_HTML)('And Caesar's spirit, ranging for revenge,')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('someval')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiComment(TemplateToolkit2Token.TT2_HTML)('With Ate by his side come hot from hell,')
    PsiElement(TemplateToolkit2Token.%)('%')
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
  PsiAnonBlockImpl(TemplateToolkit2Element.ANON_BLOCK)
    PsiElement(TemplateToolkit2Token.%)('%')
    PsiAnonBlockDirectiveImpl(TemplateToolkit2Element.ANON_BLOCK_DIRECTIVE)
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('julius')
      PsiElement(TemplateToolkit2Token.=)('=')
      PsiElement(TemplateToolkit2Token.BLOCK)('BLOCK')
    PsiComment(TemplateToolkit2Token.TT2_HTML)('And Caesar's spirit, ranging for revenge,')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('someval')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiComment(TemplateToolkit2Token.TT2_HTML)('With Ate by his side come hot from hell,')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiAnonBlockImpl(TemplateToolkit2Element.ANON_BLOCK)
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiAnonBlockDirectiveImpl(TemplateToolkit2Element.ANON_BLOCK_DIRECTIVE)
Template Toolkit File
      PsiElement(TemplateToolkit2Token.=)('=')
      PsiElement(TemplateToolkit2Token.BLOCK)('BLOCK')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiComment(TemplateToolkit2Token.TT2_HTML)('And Caesar's spirit, ranging for revenge,')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('someval')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiComment(TemplateToolkit2Token.TT2_HTML)('With Ate by his side come hot from hell,')
    PsiElement(TemplateToolkit2Token.%)('%')
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('data')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('</body>\n</html>')
Template Toolkit File
  PsiComment(TemplateToolkit2Token.TT2_HTML)('<html>\n<head>http://template-toolkit.org/docs/manual/Variables.html</head>\n<body>')
  PsiErrorElement:Unclosed block directive, missing END
    PsiAnonBlockImpl(TemplateToolkit2Element.ANON_BLOCK)
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
Template Toolkit File
        PsiElement(TemplateToolkit2Token.=)('=')
        PsiElement(TemplateToolkit2Token.BLOCK)('BLOCK')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('And Caesar's spirit, ranging for revenge,')
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
        PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('someval')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('With Ate by his side come hot from hell,\n\n</body>\n</html>')
Template Toolkit File
  PsiComment(TemplateToolkit2Token.TT2_HTML)('<html>\n<head>http://template-toolkit.org/docs/manual/Variables.html</head>\n<body>')
  PsiNamedBlockImpl(TemplateToolkit2Element.NAMED_BLOCK)
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiBlockDirectiveImpl(TemplateToolkit2Element.BLOCK_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.BLOCK)('BLOCK')
      PsiBlockNameImpl(TemplateToolkit2Element.BLOCK_NAME)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('tabrow')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiComment(TemplateToolkit2Token.TT2_HTML)('<tr>\n  <td>')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('name')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiComment(TemplateToolkit2Token.TT2_HTML)('<td>')
    PsiNamedBlockImpl(TemplateToolkit2Element.NAMED_BLOCK)
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiBlockDirectiveImpl(TemplateToolkit2Element.BLOCK_DIRECTIVE)
        PsiElement(TemplateToolkit2Token.BLOCK)('BLOCK')
        PsiBlockNameImpl(TemplateToolkit2Element.BLOCK_NAME)
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('tmpblk')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('This is OK')
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
        PsiElement(TemplateToolkit2Token.END)('END')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiComment(TemplateToolkit2Token.TT2_HTML)('<td>')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('email')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiComment(TemplateToolkit2Token.TT2_HTML)('</td>\n</tr>')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiNamedBlockImpl(TemplateToolkit2Element.NAMED_BLOCK)
    PsiElement(TemplateToolkit2Token.%)('%')
    PsiBlockDirectiveImpl(TemplateToolkit2Element.BLOCK_DIRECTIVE)
Template Toolkit File
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('name')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiComment(TemplateToolkit2Token.TT2_HTML)('<td>')
    PsiNamedBlockImpl(TemplateToolkit2Element.NAMED_BLOCK)
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiBlockDirectiveImpl(TemplateToolkit2Element.BLOCK_DIRECTIVE)
        PsiElement(TemplateToolkit2Token.BLOCK)('BLOCK')
        PsiBlockNameImpl(TemplateToolkit2Element.BLOCK_NAME)
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('tmpblk')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('This is OK')
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
        PsiElement(TemplateToolkit2Token.END)('END')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiComment(TemplateToolkit2Token.TT2_HTML)('<td>')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('email')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiComment(TemplateToolkit2Token.TT2_HTML)('</td>\n</tr>')
    PsiElement(TemplateToolkit2Token.%)('%')
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
  PsiNamedBlockImpl(TemplateToolkit2Element.NAMED_BLOCK)
    PsiElement(TemplateToolkit2Token.%)('%')
    PsiBlockDirectiveImpl(TemplateToolkit2Element.BLOCK_DIRECTIVE)
Template Toolkit File
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('name')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiComment(TemplateToolkit2Token.TT2_HTML)('<td>')
    PsiNamedBlockImpl(TemplateToolkit2Element.NAMED_BLOCK)
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiBlockDirectiveImpl(TemplateToolkit2Element.BLOCK_DIRECTIVE)
        PsiElement(TemplateToolkit2Token.BLOCK)('BLOCK')
        PsiBlockNameImpl(TemplateToolkit2Element.BLOCK_NAME)
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('tmpblk')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('This is OK')
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
        PsiElement(TemplateToolkit2Token.END)('END')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiComment(TemplateToolkit2Token.TT2_HTML)('<td>')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('email')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiComment(TemplateToolkit2Token.TT2_HTML)('</td>\n</tr>')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiNamedBlockImpl(TemplateToolkit2Element.NAMED_BLOCK)
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiBlockDirectiveImpl(TemplateToolkit2Element.BLOCK_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.BLOCK)('BLOCK')
      PsiBlockNameImpl(TemplateToolkit2Element.BLOCK_NAME)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('tabrow')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiComment(TemplateToolkit2Token.TT2_HTML)('<tr>\n  <td>')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('name')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiComment(TemplateToolkit2Token.TT2_HTML)('<td>')
    PsiNamedBlockImpl(TemplateToolkit2Element.NAMED_BLOCK)
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiBlockDirectiveImpl(TemplateToolkit2Element.BLOCK_DIRECTIVE)
        PsiElement(TemplateToolkit2Token.BLOCK)('BLOCK')
        PsiBlockNameImpl(TemplateToolkit2Element.BLOCK_NAME)
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('tmpblk')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('This is OK')
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
        PsiElement(TemplateToolkit2Token.END)('END')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiComment(TemplateToolkit2Token.TT2_HTML)('<td>')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('email')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiComment(TemplateToolkit2Token.TT2_HTML)('</td>\n</tr>')
    PsiElement(TemplateToolkit2Token.%)('%')
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
  PsiNamedBlockImpl(TemplateToolkit2Element.NAMED_BLOCK)
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiBlockDirectiveImpl(TemplateToolkit2Element.BLOCK_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.BLOCK)('BLOCK')
      PsiBlockNameImpl(TemplateToolkit2Element.BLOCK_NAME)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('tmpblk')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiComment(TemplateToolkit2Token.TT2_HTML)('This is OK')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('</body>\n</html>')
Template Toolkit File
  PsiComment(TemplateToolkit2Token.TT2_HTML)('<html>\n<head>http://template-toolkit.org/docs/manual/Variables.html</head>\n<body>')
  PsiErrorElement:Unclosed block directive, missing END
    PsiNamedBlockImpl(TemplateToolkit2Element.NAMED_BLOCK)
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
Template Toolkit File
        PsiBlockNameImpl(TemplateToolkit2Element.BLOCK_NAME)
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('tabrow')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('<tr>\n  <td>')
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
        PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('name')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('<td>')
      PsiNamedBlockImpl(TemplateToolkit2Element.NAMED_BLOCK)
        PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
        PsiBlockDirectiveImpl(TemplateToolkit2Element.BLOCK_DIRECTIVE)
          PsiElement(TemplateToolkit2Token.BLOCK)('BLOCK')
          PsiBlockNameImpl(TemplateToolkit2Element.BLOCK_NAME)
            PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('tmpblk')
        PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
        PsiComment(TemplateToolkit2Token.TT2_HTML)('This is OK')
        PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
        PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
          PsiElement(TemplateToolkit2Token.END)('END')
        PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('<td>')
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
        PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
Template Toolkit File
  PsiComment(TemplateToolkit2Token.TT2_HTML)('<html>\n<head></head>\n<body>')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiCallDirectiveImpl(TemplateToolkit2Element.CALL_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.CALL)('CALL')
Template Toolkit File
      PsiElement(TemplateToolkit2Token..)('.')
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('disconnect')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiCallDirectiveImpl(TemplateToolkit2Element.CALL_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.CALL)('CALL')
Template Toolkit File
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('page_count')
        PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiCallDirectiveImpl(TemplateToolkit2Element.CALL_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.CALL)('CALL')
Template Toolkit File
  PsiComment(TemplateToolkit2Token.TT2_HTML)('<html>\n<head>http://template-toolkit.org/docs/manual/Variables.html</head>\n<body>')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiInsertDirectiveImpl(TemplateToolkit2Element.INSERT_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.INSERT)('INSERT')
    PsiSqStringExprImpl(TemplateToolkit2Element.SQ_STRING_EXPR)
      PsiElement(TemplateToolkit2Token.STRING_CONTENT)('myfile')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiElement(TemplateToolkit2Token.-)('-')
  PsiInsertDirectiveImpl(TemplateToolkit2Element.INSERT_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.INSERT)('INSERT')
    PsiSqStringExprImpl(TemplateToolkit2Element.SQ_STRING_EXPR)
      PsiElement(TemplateToolkit2Token.STRING_CONTENT)('myfile')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiInsertDirectiveImpl(TemplateToolkit2Element.INSERT_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.INSERT)('INSERT')
    PsiSqStringExprImpl(TemplateToolkit2Element.SQ_STRING_EXPR)
      PsiElement(TemplateToolkit2Token.STRING_CONTENT)('myfile')
  PsiElement(TemplateToolkit2Token.-)('-')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiElement(TemplateToolkit2Token.-)('-')
  PsiInsertDirectiveImpl(TemplateToolkit2Element.INSERT_DIRECTIVE)
Template Toolkit File
      PsiElement(TemplateToolkit2Token.STRING_CONTENT)('myfile')
  PsiElement(TemplateToolkit2Token.-)('-')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('</body>\n</html>')
Template Toolkit File
  PsiComment(TemplateToolkit2Token.TT2_HTML)('<html>\n<head></head>\n<body>')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.GET)('GET')
    PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('somefield')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiElement(TemplateToolkit2Token.-)('-')
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.GET)('GET')
    PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('somefield')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.GET)('GET')
    PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('somefield')
  PsiElement(TemplateToolkit2Token.-)('-')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiElement(TemplateToolkit2Token.-)('-')
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
Template Toolkit File
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('somefield')
  PsiElement(TemplateToolkit2Token.-)('-')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiElement(TemplateToolkit2Token.+)('+')
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.GET)('GET')
    PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('somefield')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.GET)('GET')
    PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('somefield')
  PsiElement(TemplateToolkit2Token.+)('+')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiElement(TemplateToolkit2Token.+)('+')
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
Template Toolkit File
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('somefield')
  PsiElement(TemplateToolkit2Token.+)('+')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiElement(TemplateToolkit2Token.=)('=')
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.GET)('GET')
    PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('somefield')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.GET)('GET')
    PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('somefield')
  PsiElement(TemplateToolkit2Token.=)('=')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiElement(TemplateToolkit2Token.=)('=')
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
Template Toolkit File
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('somefield')
  PsiElement(TemplateToolkit2Token.=)('=')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiElement(TemplateToolkit2Token.~)('~')
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.GET)('GET')
    PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('somefield')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.GET)('GET')
    PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('somefield')
  PsiElement(TemplateToolkit2Token.~)('~')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiElement(TemplateToolkit2Token.~)('~')
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
Template Toolkit File
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('somefield')
  PsiElement(TemplateToolkit2Token.~)('~')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('</body>\n</html>')
Template Toolkit File
  PsiComment(TemplateToolkit2Token.TT2_HTML)('<html>\n<head>http://template-toolkit.org/docs/manual/Variables.html</head>\n<body>')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiClearDirectiveImpl(TemplateToolkit2Element.CLEAR_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.CLEAR)('CLEAR')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiClearDirectiveImpl(TemplateToolkit2Element.CLEAR_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.CLEAR)('CLEAR')
Template Toolkit File
          PsiElement(TemplateToolkit2Token..)('.')
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('condition')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('some')
      PsiElement(TemplateToolkit2Token..)('.')
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('var')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('</body>\n</html>')
Template Toolkit File
  PsiComment(TemplateToolkit2Token.TT2_HTML)('<html>\n<head>http://template-toolkit.org/docs/manual/Variables.html</head>\n<body>')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiComment(TemplateToolkit2Token.LINE_COMMENT)('#line comment in block ')
  TemplateToolkitCompositeElementImpl(TemplateToolkit2Element.EMPTY_DIRECTIVE)
    <empty list>
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiBlockCommentImpl(TemplateToolkit2Element.BLOCK_COMMENT)
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiComment(TemplateToolkit2Token.LINE_COMMENT)('#\n    this entire directive is ignored no\n    matter how many lines it wraps onto\n')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiBlockCommentImpl(TemplateToolkit2Element.BLOCK_COMMENT)
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiComment(TemplateToolkit2Token.LINE_COMMENT)('#\n    this entire directive is ignored no\n    matter how 'many lines it wraps onto\n')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiBlockCommentImpl(TemplateToolkit2Element.BLOCK_COMMENT)
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiComment(TemplateToolkit2Token.LINE_COMMENT)('# this entire\n    "directive is ignored no\n    matter how many lines it wraps onto\n')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiComment(TemplateToolkit2Token.LINE_COMMENT)('# this is a comment')
  PsiSetDirectiveImpl(TemplateToolkit2Element.SET_DIRECTIVE)
Template Toolkit File
        PsiElement(TemplateToolkit2Token.DQ_CLOSE)('"')
  PsiComment(TemplateToolkit2Token.LINE_COMMENT)('# this is')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('</body>\n</html>')
Template Toolkit File
  PsiComment(TemplateToolkit2Token.TT2_HTML)('<html>\n<head>http://template-toolkit.org/docs/manual/Variables.html</head>\n<body>')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiDebugDirectiveImpl(TemplateToolkit2Element.DEBUG_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.DEBUG)('DEBUG')
    PsiElement(TemplateToolkit2Token.on)('on')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('directive debugging is on (assuming DEBUG option is set true)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiDebugDirectiveImpl(TemplateToolkit2Element.DEBUG_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.DEBUG)('DEBUG')
    PsiElement(TemplateToolkit2Token.off)('off')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('directive debugging is off')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiDebugDirectiveImpl(TemplateToolkit2Element.DEBUG_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.DEBUG)('DEBUG')
Template Toolkit File
        PsiElement(TemplateToolkit2Token.STRING_CONTENT)('>')
        PsiElement(TemplateToolkit2Token.SQ_CLOSE)(''')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiDebugDirectiveImpl(TemplateToolkit2Element.DEBUG_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.DEBUG)('DEBUG')
    PsiElement(TemplateToolkit2Token.on)('on')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('directive debugging is on (assuming DEBUG option is set true)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiDebugDirectiveImpl(TemplateToolkit2Element.DEBUG_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.DEBUG)('DEBUG')
    PsiElement(TemplateToolkit2Token.off)('off')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('directive debugging is off')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiDebugDirectiveImpl(TemplateToolkit2Element.DEBUG_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.DEBUG)('DEBUG')
Template Toolkit File
        PsiElement(TemplateToolkit2Token.STRING_CONTENT)('-')
        PsiElement(TemplateToolkit2Token.STRING_CONTENT)('>')
        PsiElement(TemplateToolkit2Token.SQ_CLOSE)(''')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('</body>\n</html>')
Template Toolkit File
  PsiComment(TemplateToolkit2Token.TT2_HTML)('<html>\n<head>http://template-toolkit.org/docs/manual/Variables.html</head>\n<body>')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiDefaultDirectiveImpl(TemplateToolkit2Element.DEFAULT_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.DEFAULT)('DEFAULT')
Template Toolkit File
        PsiElement(TemplateToolkit2Token..)('.')
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('baz')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('</body>\n</html>')
Template Toolkit File
  PsiComment(TemplateToolkit2Token.TT2_HTML)('<html>\n<head>http://template-toolkit.org/docs/manual/Variables.html</head>\n<body>')
  PsiFilterBlockImpl(TemplateToolkit2Element.FILTER_BLOCK)
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiFilterDirectiveImpl(TemplateToolkit2Element.FILTER_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.FILTER)('FILTER')
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('html')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiComment(TemplateToolkit2Token.TT2_HTML)('HTML text may have < and > characters embedded\n   which you want converted to the correct HTML entities.')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiFilterBlockImpl(TemplateToolkit2Element.FILTER_BLOCK)
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiFilterDirectiveImpl(TemplateToolkit2Element.FILTER_DIRECTIVE)
Template Toolkit File
            PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('3')
          PsiElement(TemplateToolkit2Token.))(')')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiComment(TemplateToolkit2Token.TT2_HTML)('blah')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiFilterBlockImpl(TemplateToolkit2Element.FILTER_BLOCK)
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiFilterDirectiveImpl(TemplateToolkit2Element.FILTER_DIRECTIVE)
Template Toolkit File
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('2')
            PsiElement(TemplateToolkit2Token.))(')')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiComment(TemplateToolkit2Token.TT2_HTML)('Is there anybody out there?')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiFilterBlockImpl(TemplateToolkit2Element.FILTER_BLOCK)
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiFilterDirectiveImpl(TemplateToolkit2Element.FILTER_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.FILTER)('FILTER')
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('echo')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiComment(TemplateToolkit2Token.TT2_HTML)('Mother, should I build a wall?')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiSetDirectiveImpl(TemplateToolkit2Element.SET_DIRECTIVE)
    PsiAssignExprImpl(TemplateToolkit2Element.ASSIGN_EXPR)
Template Toolkit File
        PsiElement(TemplateToolkit2Token.STRING_CONTENT)('html')
        PsiElement(TemplateToolkit2Token.SQ_CLOSE)(''')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiFilterBlockImpl(TemplateToolkit2Element.FILTER_BLOCK)
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiFilterDirectiveImpl(TemplateToolkit2Element.FILTER_DIRECTIVE)
Template Toolkit File
        PsiElement(TemplateToolkit2Token.$)('$')
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('myfilter')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiComment(TemplateToolkit2Token.TT2_HTML)('...')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('</body>\n</html>')
Template Toolkit File
  PsiComment(TemplateToolkit2Token.TT2_HTML)('<html>\n<head></head>\n<body>')
  PsiFilterBlockImpl(TemplateToolkit2Element.FILTER_BLOCK)
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiFilterDirectiveImpl(TemplateToolkit2Element.FILTER_DIRECTIVE)
Template Toolkit File
                PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
              PsiElement(TemplateToolkit2Token.))(')')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiComment(TemplateToolkit2Token.TT2_HTML)('HTML text may have < and > characters embedded\n   which you want converted to the correct HTML entities.')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiFilterBlockImpl(TemplateToolkit2Element.FILTER_BLOCK)
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiFilterDirectiveImpl(TemplateToolkit2Element.FILTER_DIRECTIVE)
Template Toolkit File
                PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
              PsiElement(TemplateToolkit2Token.))(')')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiComment(TemplateToolkit2Token.TT2_HTML)('HTML text may have < and > characters embedded\n   which you want converted to the correct HTML entities.')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiWrapperBlockImpl(TemplateToolkit2Element.WRAPPER_BLOCK)
    PsiElement(TemplateToolkit2Token.%)('%')
    PsiWrapperDirectiveImpl(TemplateToolkit2Element.WRAPPER_DIRECTIVE)
Template Toolkit File
              PsiTermExprImpl(TemplateToolkit2Element.TERM_EXPR)
                PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
              PsiElement(TemplateToolkit2Token.))(')')
    PsiComment(TemplateToolkit2Token.TT2_HTML)('Quantum mechanics is a very interesting subject wish\n   should prove easy for the layman to fully comprehend.')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiDebugDirectiveImpl(TemplateToolkit2Element.DEBUG_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.DEBUG)('DEBUG')
Template Toolkit File
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('directive debugging is on (assuming DEBUG option is set true)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiDebugDirectiveImpl(TemplateToolkit2Element.DEBUG_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.DEBUG)('DEBUG')
    PsiElement(TemplateToolkit2Token.off)('off')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('directive debugging is off')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiDebugDirectiveImpl(TemplateToolkit2Element.DEBUG_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.DEBUG)('DEBUG')
Template Toolkit File
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('directive debugging is on (assuming DEBUG option is set true)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiDebugDirectiveImpl(TemplateToolkit2Element.DEBUG_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.DEBUG)('DEBUG')
Template Toolkit File
            PsiTermExprImpl(TemplateToolkit2Element.TERM_EXPR)
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('directive debugging is off')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiNextDirectiveImpl(TemplateToolkit2Element.NEXT_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.NEXT)('NEXT')
Template Toolkit File
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('directive debugging is on (assuming DEBUG option is set true)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiNextDirectiveImpl(TemplateToolkit2Element.NEXT_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.NEXT)('NEXT')
Template Toolkit File
            PsiTermExprImpl(TemplateToolkit2Element.TERM_EXPR)
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('directive debugging is off')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiLastDirectiveImpl(TemplateToolkit2Element.LAST_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.LAST)('LAST')
Template Toolkit File
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('directive debugging is on (assuming DEBUG option is set true)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiLastDirectiveImpl(TemplateToolkit2Element.LAST_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.LAST)('LAST')
Template Toolkit File
            PsiTermExprImpl(TemplateToolkit2Element.TERM_EXPR)
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('directive debugging is off')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiReturnDirectiveImpl(TemplateToolkit2Element.RETURN_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.RETURN)('RETURN')
Template Toolkit File
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('directive debugging is on (assuming DEBUG option is set true)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiReturnDirectiveImpl(TemplateToolkit2Element.RETURN_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.RETURN)('RETURN')
Template Toolkit File
            PsiTermExprImpl(TemplateToolkit2Element.TERM_EXPR)
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('directive debugging is off')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiStopDirectiveImpl(TemplateToolkit2Element.STOP_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.STOP)('STOP')
Template Toolkit File
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('directive debugging is on (assuming DEBUG option is set true)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiStopDirectiveImpl(TemplateToolkit2Element.STOP_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.STOP)('STOP')
Template Toolkit File
            PsiTermExprImpl(TemplateToolkit2Element.TERM_EXPR)
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('directive debugging is off')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiClearDirectiveImpl(TemplateToolkit2Element.CLEAR_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.CLEAR)('CLEAR')
Template Toolkit File
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('directive debugging is on (assuming DEBUG option is set true)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiClearDirectiveImpl(TemplateToolkit2Element.CLEAR_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.CLEAR)('CLEAR')
Template Toolkit File
            PsiTermExprImpl(TemplateToolkit2Element.TERM_EXPR)
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('directive debugging is off')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiLastDirectiveImpl(TemplateToolkit2Element.LAST_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.LAST)('LAST')
Template Toolkit File
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('directive debugging is on (assuming DEBUG option is set true)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiLastDirectiveImpl(TemplateToolkit2Element.LAST_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.LAST)('LAST')
Template Toolkit File
            PsiTermExprImpl(TemplateToolkit2Element.TERM_EXPR)
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('directive debugging is off')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiDefaultDirectiveImpl(TemplateToolkit2Element.DEFAULT_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.DEFAULT)('DEFAULT')
Template Toolkit File
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiDefaultDirectiveImpl(TemplateToolkit2Element.DEFAULT_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.DEFAULT)('DEFAULT')
Template Toolkit File
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('insert_directive')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiInsertDirectiveImpl(TemplateToolkit2Element.INSERT_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.INSERT)('INSERT')
Template Toolkit File
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiInsertDirectiveImpl(TemplateToolkit2Element.INSERT_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.INSERT)('INSERT')
Template Toolkit File
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('# file error: ABSOLUTE not set')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiInsertDirectiveImpl(TemplateToolkit2Element.INSERT_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.INSERT)('INSERT')
Template Toolkit File
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiInsertDirectiveImpl(TemplateToolkit2Element.INSERT_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.INSERT)('INSERT')
Template Toolkit File
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('# misc/legalese.txt')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiInsertDirectiveImpl(TemplateToolkit2Element.INSERT_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.INSERT)('INSERT')
Template Toolkit File
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('# en/misc/legalese.txt')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiInsertDirectiveImpl(TemplateToolkit2Element.INSERT_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.INSERT)('INSERT')
Template Toolkit File
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiInsertDirectiveImpl(TemplateToolkit2Element.INSERT_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.INSERT)('INSERT')
Template Toolkit File
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiInsertDirectiveImpl(TemplateToolkit2Element.INSERT_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.INSERT)('INSERT')
Template Toolkit File
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('# file error: ABSOLUTE not set')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiInsertDirectiveImpl(TemplateToolkit2Element.INSERT_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.INSERT)('INSERT')
Template Toolkit File
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiInsertDirectiveImpl(TemplateToolkit2Element.INSERT_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.INSERT)('INSERT')
Template Toolkit File
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('# misc/legalese.txt')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiInsertDirectiveImpl(TemplateToolkit2Element.INSERT_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.INSERT)('INSERT')
Template Toolkit File
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('# en/misc/legalese.txt')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiInsertDirectiveImpl(TemplateToolkit2Element.INSERT_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.INSERT)('INSERT')
Template Toolkit File
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('include_directive')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiIncludeDirectiveImpl(TemplateToolkit2Element.INCLUDE_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.INCLUDE)('INCLUDE')
Template Toolkit File
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiIncludeDirectiveImpl(TemplateToolkit2Element.INCLUDE_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.INCLUDE)('INCLUDE')
Template Toolkit File
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('# file error: ABSOLUTE not set')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiIncludeDirectiveImpl(TemplateToolkit2Element.INCLUDE_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.INCLUDE)('INCLUDE')
Template Toolkit File
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiIncludeDirectiveImpl(TemplateToolkit2Element.INCLUDE_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.INCLUDE)('INCLUDE')
Template Toolkit File
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('# misc/legalese.txt')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiIncludeDirectiveImpl(TemplateToolkit2Element.INCLUDE_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.INCLUDE)('INCLUDE')
Template Toolkit File
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('# en/misc/legalese.txt')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiIncludeDirectiveImpl(TemplateToolkit2Element.INCLUDE_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.INCLUDE)('INCLUDE')
Template Toolkit File
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiIncludeDirectiveImpl(TemplateToolkit2Element.INCLUDE_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.INCLUDE)('INCLUDE')
Template Toolkit File
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiIncludeDirectiveImpl(TemplateToolkit2Element.INCLUDE_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.INCLUDE)('INCLUDE')
Template Toolkit File
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('# file error: ABSOLUTE not set')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiIncludeDirectiveImpl(TemplateToolkit2Element.INCLUDE_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.INCLUDE)('INCLUDE')
Template Toolkit File
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiIncludeDirectiveImpl(TemplateToolkit2Element.INCLUDE_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.INCLUDE)('INCLUDE')
Template Toolkit File
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('# misc/legalese.txt')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiIncludeDirectiveImpl(TemplateToolkit2Element.INCLUDE_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.INCLUDE)('INCLUDE')
Template Toolkit File
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('# en/misc/legalese.txt')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiIncludeDirectiveImpl(TemplateToolkit2Element.INCLUDE_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.INCLUDE)('INCLUDE')
Template Toolkit File
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('process_directive')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiProcessDirectiveImpl(TemplateToolkit2Element.PROCESS_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.PROCESS)('PROCESS')
Template Toolkit File
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiProcessDirectiveImpl(TemplateToolkit2Element.PROCESS_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.PROCESS)('PROCESS')
Template Toolkit File
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiProcessDirectiveImpl(TemplateToolkit2Element.PROCESS_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.PROCESS)('PROCESS')
Template Toolkit File
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiProcessDirectiveImpl(TemplateToolkit2Element.PROCESS_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.PROCESS)('PROCESS')
Template Toolkit File
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('call_directive')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiCallDirectiveImpl(TemplateToolkit2Element.CALL_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.CALL)('CALL')
Template Toolkit File
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiCallDirectiveImpl(TemplateToolkit2Element.CALL_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.CALL)('CALL')
Template Toolkit File
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiCallDirectiveImpl(TemplateToolkit2Element.CALL_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.CALL)('CALL')
Template Toolkit File
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiCallDirectiveImpl(TemplateToolkit2Element.CALL_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.CALL)('CALL')
Template Toolkit File
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiCallDirectiveImpl(TemplateToolkit2Element.CALL_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.CALL)('CALL')
Template Toolkit File
            PsiTermExprImpl(TemplateToolkit2Element.TERM_EXPR)
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('throw_directive')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiThrowDirectiveImpl(TemplateToolkit2Element.THROW_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.THROW)('THROW')
Template Toolkit File
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('test text')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiThrowDirectiveImpl(TemplateToolkit2Element.THROW_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.THROW)('THROW')
Template Toolkit File
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('test text')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiThrowDirectiveImpl(TemplateToolkit2Element.THROW_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.THROW)('THROW')
Template Toolkit File
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('test text')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiThrowDirectiveImpl(TemplateToolkit2Element.THROW_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.THROW)('THROW')
Template Toolkit File
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('test text')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiThrowDirectiveImpl(TemplateToolkit2Element.THROW_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.THROW)('THROW')
Template Toolkit File
            PsiTermExprImpl(TemplateToolkit2Element.TERM_EXPR)
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('test text')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiThrowDirectiveImpl(TemplateToolkit2Element.THROW_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.THROW)('THROW')
Template Toolkit File
            PsiTermExprImpl(TemplateToolkit2Element.TERM_EXPR)
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('test text')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiThrowDirectiveImpl(TemplateToolkit2Element.THROW_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.THROW)('THROW')
Template Toolkit File
            PsiTermExprImpl(TemplateToolkit2Element.TERM_EXPR)
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('test text')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiThrowDirectiveImpl(TemplateToolkit2Element.THROW_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.THROW)('THROW')
Template Toolkit File
            PsiTermExprImpl(TemplateToolkit2Element.TERM_EXPR)
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('test text')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiThrowDirectiveImpl(TemplateToolkit2Element.THROW_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.THROW)('THROW')
Template Toolkit File
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('test text')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiThrowDirectiveImpl(TemplateToolkit2Element.THROW_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.THROW)('THROW')
Template Toolkit File
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('test text')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiThrowDirectiveImpl(TemplateToolkit2Element.THROW_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.THROW)('THROW')
Template Toolkit File
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('test text')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiThrowDirectiveImpl(TemplateToolkit2Element.THROW_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.THROW)('THROW')
Template Toolkit File
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('test text')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiThrowDirectiveImpl(TemplateToolkit2Element.THROW_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.THROW)('THROW')
Template Toolkit File
            PsiTermExprImpl(TemplateToolkit2Element.TERM_EXPR)
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('test text')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiThrowDirectiveImpl(TemplateToolkit2Element.THROW_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.THROW)('THROW')
Template Toolkit File
            PsiTermExprImpl(TemplateToolkit2Element.TERM_EXPR)
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('test text')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiThrowDirectiveImpl(TemplateToolkit2Element.THROW_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.THROW)('THROW')
Template Toolkit File
            PsiTermExprImpl(TemplateToolkit2Element.TERM_EXPR)
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('test text')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiThrowDirectiveImpl(TemplateToolkit2Element.THROW_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.THROW)('THROW')
Template Toolkit File
            PsiTermExprImpl(TemplateToolkit2Element.TERM_EXPR)
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('test text\n\nset_directive')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiSetDirectiveImpl(TemplateToolkit2Element.SET_DIRECTIVE)
    PsiAssignExprImpl(TemplateToolkit2Element.ASSIGN_EXPR)
Template Toolkit File
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiSetDirectiveImpl(TemplateToolkit2Element.SET_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.SET)('SET')
Template Toolkit File
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiSetDirectiveImpl(TemplateToolkit2Element.SET_DIRECTIVE)
    PsiAssignExprImpl(TemplateToolkit2Element.ASSIGN_EXPR)
Template Toolkit File
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiSetDirectiveImpl(TemplateToolkit2Element.SET_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.SET)('SET')
Template Toolkit File
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('get_directive')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.GET)('GET')
Template Toolkit File
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.GET)('GET')
Template Toolkit File
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.GET)('GET')
Template Toolkit File
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
Template Toolkit File
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
Template Toolkit File
            PsiTermExprImpl(TemplateToolkit2Element.TERM_EXPR)
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('</body>\n</html>')
Template Toolkit File
  PsiComment(TemplateToolkit2Token.TT2_HTML)('<html>\n<head>http://template-toolkit.org/docs/manual/Variables.html</head>\n<body>')
  PsiErrorElement:Unclosed block directive, missing END
    PsiFilterBlockImpl(TemplateToolkit2Element.FILTER_BLOCK)
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
Template Toolkit File
        PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('html')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('HTML text may have < and > characters embedded\n   which you want converted to the correct HTML entities.\n\n\n</body>\n</html>')
Template Toolkit File
  PsiComment(TemplateToolkit2Token.TT2_HTML)('<html>\n<head>http://template-toolkit.org/docs/manual/Variables.html</head>\n<body>')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiSetDirectiveImpl(TemplateToolkit2Element.SET_DIRECTIVE)
    PsiAssignExprImpl(TemplateToolkit2Element.ASSIGN_EXPR)
Template Toolkit File
          PsiElement(TemplateToolkit2Token.SQ_CLOSE)(''')
        PsiElement(TemplateToolkit2Token.])(']')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('Things:')
  PsiForeachBlockImpl(TemplateToolkit2Element.FOREACH_BLOCK)
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiForeachDirectiveImpl(TemplateToolkit2Element.FOREACH_DIRECTIVE)
Template Toolkit File
            PsiElement(TemplateToolkit2Token.DQ_CLOSE)('"')
          PsiElement(TemplateToolkit2Token.])(']')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiComment(TemplateToolkit2Token.TT2_HTML)('*')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('thing')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('Items:')
  PsiForeachBlockImpl(TemplateToolkit2Element.FOREACH_BLOCK)
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiForeachDirectiveImpl(TemplateToolkit2Element.FOREACH_DIRECTIVE)
Template Toolkit File
        PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('items')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiComment(TemplateToolkit2Token.TT2_HTML)('*')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('i')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('Stuff:')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiSetDirectiveImpl(TemplateToolkit2Element.SET_DIRECTIVE)
    PsiAssignExprImpl(TemplateToolkit2Element.ASSIGN_EXPR)
Template Toolkit File
          PsiElement(TemplateToolkit2Token.DQ_CLOSE)('"')
        PsiElement(TemplateToolkit2Token.])(']')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiForeachBlockImpl(TemplateToolkit2Element.FOREACH_BLOCK)
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiForeachDirectiveImpl(TemplateToolkit2Element.FOREACH_DIRECTIVE)
Template Toolkit File
        PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('stuff')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiComment(TemplateToolkit2Token.TT2_HTML)('*')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('s')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiForeachBlockImpl(TemplateToolkit2Element.FOREACH_BLOCK)
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiForeachDirectiveImpl(TemplateToolkit2Element.FOREACH_DIRECTIVE)
Template Toolkit File
        PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('items')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiSetDirectiveImpl(TemplateToolkit2Element.SET_DIRECTIVE)
    PsiAssignExprImpl(TemplateToolkit2Element.ASSIGN_EXPR)
Template Toolkit File
        PsiElement(TemplateToolkit2Token.,)(',')
        PsiElement(TemplateToolkit2Token.])(']')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiForeachBlockImpl(TemplateToolkit2Element.FOREACH_BLOCK)
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiForeachDirectiveImpl(TemplateToolkit2Element.FOREACH_DIRECTIVE)
Template Toolkit File
        PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('userlist')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('user')
        PsiElement(TemplateToolkit2Token..)('.')
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('id')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('user')
        PsiElement(TemplateToolkit2Token..)('.')
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('name')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiForeachBlockImpl(TemplateToolkit2Element.FOREACH_BLOCK)
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiForeachDirectiveImpl(TemplateToolkit2Element.FOREACH_DIRECTIVE)
Template Toolkit File
        PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('userlist')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('id')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('name')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiSetDirectiveImpl(TemplateToolkit2Element.SET_DIRECTIVE)
    PsiAssignExprImpl(TemplateToolkit2Element.ASSIGN_EXPR)
Template Toolkit File
        PsiElement(TemplateToolkit2Token.,)(',')
        PsiElement(TemplateToolkit2Token.})('}')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiForeachBlockImpl(TemplateToolkit2Element.FOREACH_BLOCK)
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiForeachDirectiveImpl(TemplateToolkit2Element.FOREACH_DIRECTIVE)
Template Toolkit File
        PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('users')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiComment(TemplateToolkit2Token.TT2_HTML)('*')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('u')
        PsiElement(TemplateToolkit2Token..)('.')
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('key')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiComment(TemplateToolkit2Token.TT2_HTML)(':')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('u')
        PsiElement(TemplateToolkit2Token..)('.')
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('value')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiForeachBlockImpl(TemplateToolkit2Element.FOREACH_BLOCK)
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiForeachDirectiveImpl(TemplateToolkit2Element.FOREACH_DIRECTIVE)
Template Toolkit File
        PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('userlist')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiComment(TemplateToolkit2Token.TT2_HTML)('Name:')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('user')
        PsiElement(TemplateToolkit2Token..)('.')
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('name')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiComment(TemplateToolkit2Token.TT2_HTML)('Email:')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('user')
        PsiElement(TemplateToolkit2Token..)('.')
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('email')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiForeachBlockImpl(TemplateToolkit2Element.FOREACH_BLOCK)
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiForeachDirectiveImpl(TemplateToolkit2Element.FOREACH_DIRECTIVE)
Template Toolkit File
          PsiElement(TemplateToolkit2Token..)('.')
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('reverse')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('match')
        PsiElement(TemplateToolkit2Token..)('.')
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('score')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiComment(TemplateToolkit2Token.TT2_HTML)(':')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('match')
        PsiElement(TemplateToolkit2Token..)('.')
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('url')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiForeachBlockImpl(TemplateToolkit2Element.FOREACH_BLOCK)
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiForeachDirectiveImpl(TemplateToolkit2Element.FOREACH_DIRECTIVE)
Template Toolkit File
          PsiElement(TemplateToolkit2Token.])(']')
    PsiElement(TemplateToolkit2Token.-)('-')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiComment(TemplateToolkit2Token.TT2_HTML)('<li>')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
Template Toolkit File
        PsiElement(TemplateToolkit2Token..)('.')
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('size')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiComment(TemplateToolkit2Token.TT2_HTML)(':')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('item')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiForeachBlockImpl(TemplateToolkit2Element.FOREACH_BLOCK)
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiForeachDirectiveImpl(TemplateToolkit2Element.FOREACH_DIRECTIVE)
Template Toolkit File
        PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('giter')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiForeachBlockImpl(TemplateToolkit2Element.FOREACH_BLOCK)
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiForeachDirectiveImpl(TemplateToolkit2Element.FOREACH_DIRECTIVE)
Template Toolkit File
            PsiElement(TemplateToolkit2Token..)('.')
            PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('userlist')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('user #')
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
        PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('loop')
          PsiElement(TemplateToolkit2Token..)('.')
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('count')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('in\n         group')
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
        PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('giter')
          PsiElement(TemplateToolkit2Token..)('.')
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('count')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('is\n         named')
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
        PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('user')
          PsiElement(TemplateToolkit2Token..)('.')
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('name')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
        PsiElement(TemplateToolkit2Token.END)('END')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('<html>\n<head>http://template-toolkit.org/docs/manual/Variables.html</head>\n<body>')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiSetDirectiveImpl(TemplateToolkit2Element.SET_DIRECTIVE)
    PsiAssignExprImpl(TemplateToolkit2Element.ASSIGN_EXPR)
Template Toolkit File
          PsiElement(TemplateToolkit2Token.SQ_CLOSE)(''')
        PsiElement(TemplateToolkit2Token.])(']')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('Things:')
  PsiForeachBlockImpl(TemplateToolkit2Element.FOREACH_BLOCK)
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiForeachDirectiveImpl(TemplateToolkit2Element.FOREACH_DIRECTIVE)
Template Toolkit File
            PsiElement(TemplateToolkit2Token.DQ_CLOSE)('"')
          PsiElement(TemplateToolkit2Token.])(']')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiComment(TemplateToolkit2Token.TT2_HTML)('*')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('thing')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('Items:')
  PsiForeachBlockImpl(TemplateToolkit2Element.FOREACH_BLOCK)
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiForeachDirectiveImpl(TemplateToolkit2Element.FOREACH_DIRECTIVE)
Template Toolkit File
        PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('items')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiComment(TemplateToolkit2Token.TT2_HTML)('*')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('i')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('Stuff:')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiSetDirectiveImpl(TemplateToolkit2Element.SET_DIRECTIVE)
    PsiAssignExprImpl(TemplateToolkit2Element.ASSIGN_EXPR)
Template Toolkit File
          PsiElement(TemplateToolkit2Token.DQ_CLOSE)('"')
        PsiElement(TemplateToolkit2Token.])(']')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiForeachBlockImpl(TemplateToolkit2Element.FOREACH_BLOCK)
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiForeachDirectiveImpl(TemplateToolkit2Element.FOREACH_DIRECTIVE)
Template Toolkit File
        PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('stuff')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiComment(TemplateToolkit2Token.TT2_HTML)('*')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('s')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiForeachBlockImpl(TemplateToolkit2Element.FOREACH_BLOCK)
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiForeachDirectiveImpl(TemplateToolkit2Element.FOREACH_DIRECTIVE)
Template Toolkit File
        PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('items')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiSetDirectiveImpl(TemplateToolkit2Element.SET_DIRECTIVE)
    PsiAssignExprImpl(TemplateToolkit2Element.ASSIGN_EXPR)
Template Toolkit File
        PsiElement(TemplateToolkit2Token.,)(',')
        PsiElement(TemplateToolkit2Token.])(']')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiForeachBlockImpl(TemplateToolkit2Element.FOREACH_BLOCK)
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiForeachDirectiveImpl(TemplateToolkit2Element.FOREACH_DIRECTIVE)
Template Toolkit File
        PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('userlist')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('user')
        PsiElement(TemplateToolkit2Token..)('.')
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('id')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('user')
        PsiElement(TemplateToolkit2Token..)('.')
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('name')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiForeachBlockImpl(TemplateToolkit2Element.FOREACH_BLOCK)
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiForeachDirectiveImpl(TemplateToolkit2Element.FOREACH_DIRECTIVE)
Template Toolkit File
        PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('userlist')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('id')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('name')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiSetDirectiveImpl(TemplateToolkit2Element.SET_DIRECTIVE)
    PsiAssignExprImpl(TemplateToolkit2Element.ASSIGN_EXPR)
Template Toolkit File
        PsiElement(TemplateToolkit2Token.,)(',')
        PsiElement(TemplateToolkit2Token.})('}')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiForeachBlockImpl(TemplateToolkit2Element.FOREACH_BLOCK)
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiForeachDirectiveImpl(TemplateToolkit2Element.FOREACH_DIRECTIVE)
Template Toolkit File
        PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('users')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiComment(TemplateToolkit2Token.TT2_HTML)('*')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('u')
        PsiElement(TemplateToolkit2Token..)('.')
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('key')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiComment(TemplateToolkit2Token.TT2_HTML)(':')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('u')
        PsiElement(TemplateToolkit2Token..)('.')
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('value')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiForeachBlockImpl(TemplateToolkit2Element.FOREACH_BLOCK)
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiForeachDirectiveImpl(TemplateToolkit2Element.FOREACH_DIRECTIVE)
Template Toolkit File
        PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('userlist')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiComment(TemplateToolkit2Token.TT2_HTML)('Name:')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('user')
        PsiElement(TemplateToolkit2Token..)('.')
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('name')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiComment(TemplateToolkit2Token.TT2_HTML)('Email:')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('user')
        PsiElement(TemplateToolkit2Token..)('.')
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('email')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiForeachBlockImpl(TemplateToolkit2Element.FOREACH_BLOCK)
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiForeachDirectiveImpl(TemplateToolkit2Element.FOREACH_DIRECTIVE)
Template Toolkit File
          PsiElement(TemplateToolkit2Token..)('.')
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('reverse')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('match')
        PsiElement(TemplateToolkit2Token..)('.')
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('score')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiComment(TemplateToolkit2Token.TT2_HTML)(':')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('match')
        PsiElement(TemplateToolkit2Token..)('.')
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('url')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiForeachBlockImpl(TemplateToolkit2Element.FOREACH_BLOCK)
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiForeachDirectiveImpl(TemplateToolkit2Element.FOREACH_DIRECTIVE)
Template Toolkit File
          PsiElement(TemplateToolkit2Token.])(']')
    PsiElement(TemplateToolkit2Token.-)('-')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiComment(TemplateToolkit2Token.TT2_HTML)('<li>')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
Template Toolkit File
        PsiElement(TemplateToolkit2Token..)('.')
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('size')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiComment(TemplateToolkit2Token.TT2_HTML)(':')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('item')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiForeachBlockImpl(TemplateToolkit2Element.FOREACH_BLOCK)
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiForeachDirectiveImpl(TemplateToolkit2Element.FOREACH_DIRECTIVE)
Template Toolkit File
        PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('giter')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiForeachBlockImpl(TemplateToolkit2Element.FOREACH_BLOCK)
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiForeachDirectiveImpl(TemplateToolkit2Element.FOREACH_DIRECTIVE)
Template Toolkit File
            PsiElement(TemplateToolkit2Token..)('.')
            PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('userlist')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('user #')
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
        PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('loop')
          PsiElement(TemplateToolkit2Token..)('.')
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('count')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('in\n         group')
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
        PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('giter')
          PsiElement(TemplateToolkit2Token..)('.')
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('count')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('is\n         named')
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
        PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('user')
          PsiElement(TemplateToolkit2Token..)('.')
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('name')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
        PsiElement(TemplateToolkit2Token.END)('END')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('</body>\n</html>\n\n\n</body>\n</html>')
Template Toolkit File
  PsiComment(TemplateToolkit2Token.TT2_HTML)('<html>\n<head>http://template-toolkit.org/docs/manual/Variables.html</head>\n<body>\n\nThings:')
  PsiErrorElement:Unclosed block directive, missing END
    PsiForeachBlockImpl(TemplateToolkit2Element.FOREACH_BLOCK)
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
Template Toolkit File
              PsiElement(TemplateToolkit2Token.DQ_CLOSE)('"')
            PsiElement(TemplateToolkit2Token.])(']')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('*')
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
        PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('thing')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('</body>\n</html>')
Template Toolkit File
  PsiComment(TemplateToolkit2Token.TT2_HTML)('<html>\n<head></head>\n<body>')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.GET)('GET')
    PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('foo')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.GET)('GET')
Template Toolkit File
    PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('foo')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
Template Toolkit File
      PsiElement(TemplateToolkit2Token..)('.')
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('baz')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
Template Toolkit File
      PsiElement(TemplateToolkit2Token..)('.')
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('baz')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
Template Toolkit File
            PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('10')
          PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
Template Toolkit File
        PsiElement(TemplateToolkit2Token..)('.')
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('title')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiOrExprImpl(TemplateToolkit2Element.OR_EXPR)
Template Toolkit File
      PsiTermExprImpl(TemplateToolkit2Element.TERM_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('100')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiMulExprImpl(TemplateToolkit2Element.MUL_EXPR)
Template Toolkit File
        PsiElement(TemplateToolkit2Token.STRING_CONTENT)('items')
        PsiElement(TemplateToolkit2Token.SQ_CLOSE)(''')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiTernarExprImpl(TemplateToolkit2Element.TERNAR_EXPR)
Template Toolkit File
      PsiTermExprImpl(TemplateToolkit2Element.TERM_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('6')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('# 2.5')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiMulExprImpl(TemplateToolkit2Element.MUL_EXPR)
Template Toolkit File
      PsiTermExprImpl(TemplateToolkit2Element.TERM_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('6')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('# 2')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiMulExprImpl(TemplateToolkit2Element.MUL_EXPR)
Template Toolkit File
      PsiTermExprImpl(TemplateToolkit2Element.TERM_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('6')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('# 3')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiMulExprImpl(TemplateToolkit2Element.MUL_EXPR)
Template Toolkit File
  PsiComment(TemplateToolkit2Token.TT2_HTML)('<html>\n<head>http://template-toolkit.org/docs/manual/Variables.html</head>\n<body>\n# minimal TT style')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiSetDirectiveImpl(TemplateToolkit2Element.SET_DIRECTIVE)
    PsiAssignExprImpl(TemplateToolkit2Element.ASSIGN_EXPR)
Template Toolkit File
            PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('666')
        PsiElement(TemplateToolkit2Token.})('}')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('# perl style')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiSetDirectiveImpl(TemplateToolkit2Element.SET_DIRECTIVE)
    PsiAssignExprImpl(TemplateToolkit2Element.ASSIGN_EXPR)
Template Toolkit File
        PsiElement(TemplateToolkit2Token.,)(',')
        PsiElement(TemplateToolkit2Token.})('}')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('</body>\n</html>')
Template Toolkit File
  PsiComment(TemplateToolkit2Token.TT2_HTML)('<html>\n<head>http://template-toolkit.org/docs/manual/Variables.html</head>\n<body>')
  PsiIfBlockImpl(TemplateToolkit2Element.IF_BLOCK)
    PsiIfBranchImpl(TemplateToolkit2Element.IF_BRANCH)
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
Template Toolkit File
        PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('frames')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('test words')
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiIncludeDirectiveImpl(TemplateToolkit2Element.INCLUDE_DIRECTIVE)
        PsiElement(TemplateToolkit2Token.INCLUDE)('INCLUDE')
        PsiSqStringExprImpl(TemplateToolkit2Element.SQ_STRING_EXPR)
          PsiElement(TemplateToolkit2Token.STRING_CONTENT)('frameset')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('test words')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('test words')
  PsiUnlessBlockImpl(TemplateToolkit2Element.UNLESS_BLOCK)
    PsiUnlessBranchImpl(TemplateToolkit2Element.UNLESS_BRANCH)
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
Template Toolkit File
        PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('text_mode')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('test words')
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiIncludeDirectiveImpl(TemplateToolkit2Element.INCLUDE_DIRECTIVE)
        PsiElement(TemplateToolkit2Token.INCLUDE)('INCLUDE')
        PsiSqStringExprImpl(TemplateToolkit2Element.SQ_STRING_EXPR)
          PsiElement(TemplateToolkit2Token.STRING_CONTENT)('biglogo')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('test words')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('test words')
  PsiIfBlockImpl(TemplateToolkit2Element.IF_BLOCK)
    PsiIfBranchImpl(TemplateToolkit2Element.IF_BRANCH)
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
Template Toolkit File
          PsiTermExprImpl(TemplateToolkit2Element.TERM_EXPR)
            PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('10')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('Hello')
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
        PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('name')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)(', does your mother know you're\n   using her AOL account?')
    PsiElsifBranchImpl(TemplateToolkit2Element.ELSIF_BRANCH)
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiElsifDirectiveImpl(TemplateToolkit2Element.ELSIF_DIRECTIVE)
Template Toolkit File
          PsiTermExprImpl(TemplateToolkit2Element.TERM_EXPR)
            PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('18')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('Sorry, you're not old enough to enter\n   Hello')
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
        PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('name')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)(', does your mother know you're\n   (and too dumb to lie about your age)')
    PsiElseBranchImpl(TemplateToolkit2Element.ELSE_BRANCH)
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiElseDirectiveImpl(TemplateToolkit2Element.ELSE_DIRECTIVE)
        PsiElement(TemplateToolkit2Token.ELSE)('ELSE')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('Welcome')
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
        PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('name')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('.\n   test words')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('# ridiculously contrived complex example')
  PsiIfBlockImpl(TemplateToolkit2Element.IF_BLOCK)
    PsiIfBranchImpl(TemplateToolkit2Element.IF_BRANCH)
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
Template Toolkit File
              PsiElement(TemplateToolkit2Token.STRING_CONTENT)('debug')
              PsiElement(TemplateToolkit2Token.SQ_CLOSE)(''')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('Hello')
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
        PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('name')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)(', does your mother know you're\n   I'm confused.')
    PsiElsifBranchImpl(TemplateToolkit2Element.ELSIF_BRANCH)
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiElsifDirectiveImpl(TemplateToolkit2Element.ELSIF_DIRECTIVE)
Template Toolkit File
          PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
            PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('less')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('That's more or less correct.\n   Hello')
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
        PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('name')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)(', does your mother know you're')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('</body>\n</html>')
Template Toolkit File
  PsiComment(TemplateToolkit2Token.TT2_HTML)('<html>\n<head>http://template-toolkit.org/docs/manual/Variables.html</head>\n<body>')
  PsiIfBlockImpl(TemplateToolkit2Element.IF_BLOCK)
    PsiIfBranchImpl(TemplateToolkit2Element.IF_BRANCH)
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
Template Toolkit File
          PsiTermExprImpl(TemplateToolkit2Element.TERM_EXPR)
            PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('10')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('Hello')
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
        PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('name')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)(', does your mother know you're\n   using her AOL account?')
    PsiElsifBranchImpl(TemplateToolkit2Element.ELSIF_BRANCH)
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiElsifDirectiveImpl(TemplateToolkit2Element.ELSIF_DIRECTIVE)
Template Toolkit File
          PsiTermExprImpl(TemplateToolkit2Element.TERM_EXPR)
            PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('18')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('Sorry, you're not old enough to enter\n   Hello')
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
        PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('name')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)(', does your mother know you're\n   (and too dumb to lie about your age)')
    PsiErrorElement:Unclosed block directive, missing END
      PsiElseBranchImpl(TemplateToolkit2Element.ELSE_BRANCH)
        PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
        PsiElseDirectiveImpl(TemplateToolkit2Element.ELSE_DIRECTIVE)
          PsiElement(TemplateToolkit2Token.ELSE)('ELSE')
        PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
        PsiComment(TemplateToolkit2Token.TT2_HTML)('Welcome')
        PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
        PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
          PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
            PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('name')
        PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
        PsiComment(TemplateToolkit2Token.TT2_HTML)('.\n   test words')
        PsiIfBlockImpl(TemplateToolkit2Element.IF_BLOCK)
          PsiErrorElement:Unclosed block directive, missing END
            PsiIfBranchImpl(TemplateToolkit2Element.IF_BRANCH)
Template Toolkit File
                  PsiTermExprImpl(TemplateToolkit2Element.TERM_EXPR)
                    PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('10')
              PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
              PsiComment(TemplateToolkit2Token.TT2_HTML)('Hello')
              PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
              PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
                PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
                  PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('name')
              PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
              PsiComment(TemplateToolkit2Token.TT2_HTML)(', does your mother know you're\n   using her AOL account?')
              PsiIfBlockImpl(TemplateToolkit2Element.IF_BLOCK)
                PsiErrorElement:Unclosed block directive, missing END
                  PsiIfBranchImpl(TemplateToolkit2Element.IF_BRANCH)
Template Toolkit File
                        PsiTermExprImpl(TemplateToolkit2Element.TERM_EXPR)
                          PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('10')
                    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
                    PsiComment(TemplateToolkit2Token.TT2_HTML)('Hello')
                    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
                    PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
                      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
Template Toolkit File
  PsiComment(TemplateToolkit2Token.TT2_HTML)('<html>\n<head>http://template-toolkit.org/docs/manual/Variables.html</head>\n<body>')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiIncludeDirectiveImpl(TemplateToolkit2Element.INCLUDE_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.INCLUDE)('INCLUDE')
    PsiSqStringExprImpl(TemplateToolkit2Element.SQ_STRING_EXPR)
      PsiElement(TemplateToolkit2Token.STRING_CONTENT)('header')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiSetDirectiveImpl(TemplateToolkit2Element.SET_DIRECTIVE)
    PsiAssignExprImpl(TemplateToolkit2Element.ASSIGN_EXPR)
Template Toolkit File
        PsiElement(TemplateToolkit2Token.STRING_CONTENT)('header')
        PsiElement(TemplateToolkit2Token.SQ_CLOSE)(''')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiIncludeDirectiveImpl(TemplateToolkit2Element.INCLUDE_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.INCLUDE)('INCLUDE')
    PsiSqStringExprImpl(TemplateToolkit2Element.SQ_STRING_EXPR)
      PsiElement(TemplateToolkit2Token.STRING_CONTENT)('myheader')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('# 'myheader'')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiIncludeDirectiveImpl(TemplateToolkit2Element.INCLUDE_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.INCLUDE)('INCLUDE')
    PsiVariableExprImpl(TemplateToolkit2Element.VARIABLE_EXPR)
      PsiElement(TemplateToolkit2Token.$)('$')
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('myheader')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('# 'my/misc/header'')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiIncludeDirectiveImpl(TemplateToolkit2Element.INCLUDE_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.INCLUDE)('INCLUDE')
Template Toolkit File
      PsiElement(TemplateToolkit2Token.STRING_CONTENT)('myheader')
      PsiElement(TemplateToolkit2Token.DQ_CLOSE)('"')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('# 'my/misc/header'')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiSetDirectiveImpl(TemplateToolkit2Element.SET_DIRECTIVE)
    PsiAssignExprImpl(TemplateToolkit2Element.ASSIGN_EXPR)
Template Toolkit File
        PsiElement(TemplateToolkit2Token.STRING_CONTENT)('World')
        PsiElement(TemplateToolkit2Token.SQ_CLOSE)(''')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiIncludeDirectiveImpl(TemplateToolkit2Element.INCLUDE_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.INCLUDE)('INCLUDE')
    PsiSqStringExprImpl(TemplateToolkit2Element.SQ_STRING_EXPR)
      PsiElement(TemplateToolkit2Token.STRING_CONTENT)('header')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiIncludeDirectiveImpl(TemplateToolkit2Element.INCLUDE_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.INCLUDE)('INCLUDE')
    PsiSqStringExprImpl(TemplateToolkit2Element.SQ_STRING_EXPR)
      PsiElement(TemplateToolkit2Token.STRING_CONTENT)('table')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiIncludeDirectiveImpl(TemplateToolkit2Element.INCLUDE_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.INCLUDE)('INCLUDE')
Template Toolkit File
        PsiElement(TemplateToolkit2Token.STRING_CONTENT)('Projects')
        PsiElement(TemplateToolkit2Token.DQ_CLOSE)('"')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiIncludeDirectiveImpl(TemplateToolkit2Element.INCLUDE_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.INCLUDE)('INCLUDE')
Template Toolkit File
      PsiTermExprImpl(TemplateToolkit2Element.TERM_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('2')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiSetDirectiveImpl(TemplateToolkit2Element.SET_DIRECTIVE)
    PsiAssignExprImpl(TemplateToolkit2Element.ASSIGN_EXPR)
Template Toolkit File
            PsiElement(TemplateToolkit2Token.SQ_CLOSE)(''')
        PsiElement(TemplateToolkit2Token.})('}')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiIncludeDirectiveImpl(TemplateToolkit2Element.INCLUDE_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.INCLUDE)('INCLUDE')
Template Toolkit File
        PsiElement(TemplateToolkit2Token.STRING_CONTENT)('Boz')
        PsiElement(TemplateToolkit2Token.SQ_CLOSE)(''')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('foo')
      PsiElement(TemplateToolkit2Token..)('.')
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('bar')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('# Boz')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiIncludeDirectiveImpl(TemplateToolkit2Element.INCLUDE_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.INCLUDE)('INCLUDE')
Template Toolkit File
        PsiElement(TemplateToolkit2Token.STRING_CONTENT)('Site')
        PsiElement(TemplateToolkit2Token.DQ_CLOSE)('"')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('</body>\n</html>')
Template Toolkit File
  PsiComment(TemplateToolkit2Token.TT2_HTML)('<html>\n<head>http://template-toolkit.org/docs/manual/Variables.html</head>\n<body>')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiInsertDirectiveImpl(TemplateToolkit2Element.INSERT_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.INSERT)('INSERT')
    PsiSqStringExprImpl(TemplateToolkit2Element.SQ_STRING_EXPR)
      PsiElement(TemplateToolkit2Token.STRING_CONTENT)('myfile')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiInsertDirectiveImpl(TemplateToolkit2Element.INSERT_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.INSERT)('INSERT')
    PsiSqStringExprImpl(TemplateToolkit2Element.SQ_STRING_EXPR)
      PsiElement(TemplateToolkit2Token.STRING_CONTENT)('myfile')
  PsiElement(TemplateToolkit2Token.-)('-')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiInsertDirectiveImpl(TemplateToolkit2Element.INSERT_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.INSERT)('INSERT')
    PsiSqStringExprImpl(TemplateToolkit2Element.SQ_STRING_EXPR)
      PsiElement(TemplateToolkit2Token.STRING_CONTENT)('myfile')
  PsiElement(TemplateToolkit2Token.-)('-')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiInsertDirectiveImpl(TemplateToolkit2Element.INSERT_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.INSERT)('INSERT')
    PsiSqStringExprImpl(TemplateToolkit2Element.SQ_STRING_EXPR)
      PsiElement(TemplateToolkit2Token.STRING_CONTENT)('foo')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('# looks for /here/foo then /there/foo')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiInsertDirectiveImpl(TemplateToolkit2Element.INSERT_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.INSERT)('INSERT')
Template Toolkit File
      PsiElement(TemplateToolkit2Token.STRING_CONTENT)('/')
      PsiElement(TemplateToolkit2Token.STRING_CONTENT)('passwd')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('# file error: ABSOLUTE not set')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiInsertDirectiveImpl(TemplateToolkit2Element.INSERT_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.INSERT)('INSERT')
Template Toolkit File
      PsiElement(TemplateToolkit2Token.STRING_CONTENT)('/')
      PsiElement(TemplateToolkit2Token.STRING_CONTENT)('secret')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('# file error: RELATIVE not set')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiInsertDirectiveImpl(TemplateToolkit2Element.INSERT_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.INSERT)('INSERT')
Template Toolkit File
      PsiElement(TemplateToolkit2Token.STRING_CONTENT)('.')
      PsiElement(TemplateToolkit2Token.STRING_CONTENT)('txt')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiInsertDirectiveImpl(TemplateToolkit2Element.INSERT_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.INSERT)('INSERT')
Template Toolkit File
      PsiElement(TemplateToolkit2Token.STRING_CONTENT)('stupid')
      PsiElement(TemplateToolkit2Token.SQ_CLOSE)(''')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiSetDirectiveImpl(TemplateToolkit2Element.SET_DIRECTIVE)
    PsiAssignExprImpl(TemplateToolkit2Element.ASSIGN_EXPR)
Template Toolkit File
        PsiElement(TemplateToolkit2Token.STRING_CONTENT)('txt')
        PsiElement(TemplateToolkit2Token.SQ_CLOSE)(''')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiInsertDirectiveImpl(TemplateToolkit2Element.INSERT_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.INSERT)('INSERT')
    PsiVariableExprImpl(TemplateToolkit2Element.VARIABLE_EXPR)
      PsiElement(TemplateToolkit2Token.$)('$')
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('legalese')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('# misc/legalese.txt')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiInsertDirectiveImpl(TemplateToolkit2Element.INSERT_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.INSERT)('INSERT')
Template Toolkit File
      PsiElement(TemplateToolkit2Token.STRING_CONTENT)('legalese')
      PsiElement(TemplateToolkit2Token.DQ_CLOSE)('"')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('# en/misc/legalese.txt')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiInsertDirectiveImpl(TemplateToolkit2Element.INSERT_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.INSERT)('INSERT')
Template Toolkit File
      PsiElement(TemplateToolkit2Token.STRING_CONTENT)('.')
      PsiElement(TemplateToolkit2Token.STRING_CONTENT)('txt')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('</body>\n</html>')
Template Toolkit File
  PsiComment(TemplateToolkit2Token.TT2_HTML)('<html>\n<head>http://template-toolkit.org/docs/manual/Variables.html</head>\n<body>')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiLastDirectiveImpl(TemplateToolkit2Element.LAST_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.LAST)('LAST')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiLastDirectiveImpl(TemplateToolkit2Element.LAST_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.LAST)('LAST')
Template Toolkit File
          PsiElement(TemplateToolkit2Token..)('.')
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('condition')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('some')
      PsiElement(TemplateToolkit2Token..)('.')
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('var')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiLastDirectiveImpl(TemplateToolkit2Element.LAST_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.LAST)('BREAK')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiLastDirectiveImpl(TemplateToolkit2Element.LAST_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.LAST)('BREAK')
Template Toolkit File
          PsiElement(TemplateToolkit2Token..)('.')
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('condition')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('</body>\n</html>')
Template Toolkit File
  PsiComment(TemplateToolkit2Token.TT2_HTML)('<html>\n<head>http://template-toolkit.org/docs/manual/Variables.html</head>\n<body>')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiMacroDirectiveImpl(TemplateToolkit2Element.MACRO_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.MACRO)('MACRO')
Template Toolkit File
        PsiSqStringExprImpl(TemplateToolkit2Element.SQ_STRING_EXPR)
          PsiElement(TemplateToolkit2Token.STRING_CONTENT)('header')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiMacroDirectiveImpl(TemplateToolkit2Element.MACRO_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.MACRO)('MACRO')
Template Toolkit File
                PsiElement(TemplateToolkit2Token.SQ_CLOSE)(''')
              PsiElement(TemplateToolkit2Token.))(')')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiMacroDirectiveImpl(TemplateToolkit2Element.MACRO_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.MACRO)('MACRO')
Template Toolkit File
            PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
              PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('frames')
          PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
          PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
          PsiIncludeDirectiveImpl(TemplateToolkit2Element.INCLUDE_DIRECTIVE)
            PsiElement(TemplateToolkit2Token.INCLUDE)('INCLUDE')
Template Toolkit File
              PsiElement(TemplateToolkit2Token.STRING_CONTENT)('/')
              PsiElement(TemplateToolkit2Token.STRING_CONTENT)('header')
          PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
        PsiElseBranchImpl(TemplateToolkit2Element.ELSE_BRANCH)
          PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
          PsiElseDirectiveImpl(TemplateToolkit2Element.ELSE_DIRECTIVE)
            PsiElement(TemplateToolkit2Token.ELSE)('ELSE')
          PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
          PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
          PsiIncludeDirectiveImpl(TemplateToolkit2Element.INCLUDE_DIRECTIVE)
            PsiElement(TemplateToolkit2Token.INCLUDE)('INCLUDE')
            PsiSqStringExprImpl(TemplateToolkit2Element.SQ_STRING_EXPR)
              PsiElement(TemplateToolkit2Token.STRING_CONTENT)('header')
          PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
        PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
        PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
          PsiElement(TemplateToolkit2Token.END)('END')
        PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiMacroDirectiveImpl(TemplateToolkit2Element.MACRO_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.MACRO)('MACRO')
Template Toolkit File
            PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
              PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('frames')
          PsiElement(TemplateToolkit2Token.OUTLINE_END)('\n')
          PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
          PsiIncludeDirectiveImpl(TemplateToolkit2Element.INCLUDE_DIRECTIVE)
            PsiElement(TemplateToolkit2Token.INCLUDE)('INCLUDE')
Template Toolkit File
              PsiElement(TemplateToolkit2Token.STRING_CONTENT)('/')
              PsiElement(TemplateToolkit2Token.STRING_CONTENT)('header')
          PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
        PsiElseBranchImpl(TemplateToolkit2Element.ELSE_BRANCH)
          PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
          PsiElseDirectiveImpl(TemplateToolkit2Element.ELSE_DIRECTIVE)
            PsiElement(TemplateToolkit2Token.ELSE)('ELSE')
          PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
          PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
          PsiIncludeDirectiveImpl(TemplateToolkit2Element.INCLUDE_DIRECTIVE)
            PsiElement(TemplateToolkit2Token.INCLUDE)('INCLUDE')
            PsiSqStringExprImpl(TemplateToolkit2Element.SQ_STRING_EXPR)
              PsiElement(TemplateToolkit2Token.STRING_CONTENT)('header')
          PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
        PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
        PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
          PsiElement(TemplateToolkit2Token.END)('END')
        PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiMacroDirectiveImpl(TemplateToolkit2Element.MACRO_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.MACRO)('MACRO')
Template Toolkit File
            PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
              PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('frames')
          PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
          PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
          PsiIncludeDirectiveImpl(TemplateToolkit2Element.INCLUDE_DIRECTIVE)
            PsiElement(TemplateToolkit2Token.INCLUDE)('INCLUDE')
Template Toolkit File
              PsiElement(TemplateToolkit2Token.STRING_CONTENT)('/')
              PsiElement(TemplateToolkit2Token.STRING_CONTENT)('header')
          PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
        PsiElseBranchImpl(TemplateToolkit2Element.ELSE_BRANCH)
          PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
          PsiElseDirectiveImpl(TemplateToolkit2Element.ELSE_DIRECTIVE)
            PsiElement(TemplateToolkit2Token.ELSE)('ELSE')
          PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
          PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
          PsiIncludeDirectiveImpl(TemplateToolkit2Element.INCLUDE_DIRECTIVE)
            PsiElement(TemplateToolkit2Token.INCLUDE)('INCLUDE')
            PsiSqStringExprImpl(TemplateToolkit2Element.SQ_STRING_EXPR)
              PsiElement(TemplateToolkit2Token.STRING_CONTENT)('header')
          PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
        PsiElement(TemplateToolkit2Token.%)('%')
        PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
          PsiElement(TemplateToolkit2Token.END)('END')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('</body>\n</html>')
Template Toolkit File
  PsiComment(TemplateToolkit2Token.TT2_HTML)('<html>\n<head>http://template-toolkit.org/docs/manual/Variables.html</head>\n<body>')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiMetaDirectiveImpl(TemplateToolkit2Element.META_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.META)('META')
Template Toolkit File
      PsiTermExprImpl(TemplateToolkit2Element.TERM_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_NUMBER)('1.23')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('</body>\n</html>')
Template Toolkit File
  PsiComment(TemplateToolkit2Token.TT2_HTML)('<html>\n<head></head>\n<body>')
  PsiIfBlockImpl(TemplateToolkit2Element.IF_BLOCK)
    PsiIfBranchImpl(TemplateToolkit2Element.IF_BRANCH)
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
Template Toolkit File
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiForeachBlockImpl(TemplateToolkit2Element.FOREACH_BLOCK)
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiForeachDirectiveImpl(TemplateToolkit2Element.FOREACH_DIRECTIVE)
Template Toolkit File
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiUseDirectiveImpl(TemplateToolkit2Element.USE_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.USE)('USE')
Template Toolkit File
      PsiElement(TemplateToolkit2Token..)('.')
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('end_form')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiMacroDirectiveImpl(TemplateToolkit2Element.MACRO_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.MACRO)('MACRO')
Template Toolkit File
          PsiElement(TemplateToolkit2Token.END)('END')
        PsiElement(TemplateToolkit2Token.-)('-')
        PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiTryCatchBlockImpl(TemplateToolkit2Element.TRY_CATCH_BLOCK)
    PsiTryBranchImpl(TemplateToolkit2Element.TRY_BRANCH)
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
Template Toolkit File
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiTryCatchBlockImpl(TemplateToolkit2Element.TRY_CATCH_BLOCK)
    PsiTryBranchImpl(TemplateToolkit2Element.TRY_BRANCH)
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiTryDirectiveImpl(TemplateToolkit2Element.TRY_DIRECTIVE)
        PsiElement(TemplateToolkit2Token.TRY)('TRY')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('...')
    PsiCatchBranchImpl(TemplateToolkit2Element.CATCH_BRANCH)
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiCatchDirectiveImpl(TemplateToolkit2Element.CATCH_DIRECTIVE)
Template Toolkit File
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiTryCatchBlockImpl(TemplateToolkit2Element.TRY_CATCH_BLOCK)
    PsiTryBranchImpl(TemplateToolkit2Element.TRY_BRANCH)
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiTryDirectiveImpl(TemplateToolkit2Element.TRY_DIRECTIVE)
        PsiElement(TemplateToolkit2Token.TRY)('TRY')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
        PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('foo')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiCatchBranchImpl(TemplateToolkit2Element.CATCH_BRANCH)
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiCatchDirectiveImpl(TemplateToolkit2Element.CATCH_DIRECTIVE)
Template Toolkit File
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiTryCatchBlockImpl(TemplateToolkit2Element.TRY_CATCH_BLOCK)
    PsiTryBranchImpl(TemplateToolkit2Element.TRY_BRANCH)
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiTryDirectiveImpl(TemplateToolkit2Element.TRY_DIRECTIVE)
        PsiElement(TemplateToolkit2Token.TRY)('TRY')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('...')
    PsiCatchBranchImpl(TemplateToolkit2Element.CATCH_BRANCH)
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiCatchDirectiveImpl(TemplateToolkit2Element.CATCH_DIRECTIVE)
Template Toolkit File
          PsiSqStringExprImpl(TemplateToolkit2Element.SQ_STRING_EXPR)
            PsiElement(TemplateToolkit2Token.STRING_CONTENT)('myerror')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
        PsiOrExprImpl(TemplateToolkit2Element.OR_EXPR)
Template Toolkit File
            PsiElement(TemplateToolkit2Token.STRING_CONTENT)('errors')
            PsiElement(TemplateToolkit2Token.SQ_CLOSE)(''')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('in')
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
        PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
Template Toolkit File
          PsiElement(TemplateToolkit2Token..)('.')
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('module')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)(':')
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
        PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
Template Toolkit File
                PsiElement(TemplateToolkit2Token.SQ_CLOSE)(''')
              PsiElement(TemplateToolkit2Token.))(')')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('.')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('</body>\n</html>')
Template Toolkit File
  PsiComment(TemplateToolkit2Token.TT2_HTML)('<html>\n<head>http://template-toolkit.org/docs/manual/Variables.html</head>\n<body>')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiNextDirectiveImpl(TemplateToolkit2Element.NEXT_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.NEXT)('NEXT')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiNextDirectiveImpl(TemplateToolkit2Element.NEXT_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.NEXT)('NEXT')
Template Toolkit File
          PsiElement(TemplateToolkit2Token..)('.')
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('condition')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('some')
      PsiElement(TemplateToolkit2Token..)('.')
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('var')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('</body>\n</html>')
Template Toolkit File
  PsiComment(TemplateToolkit2Token.TT2_HTML)('<html>\n<head></head>\n<body>')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('foo')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
Template Toolkit File
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('bar')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiSetDirectiveImpl(TemplateToolkit2Element.SET_DIRECTIVE)
    PsiAssignExprImpl(TemplateToolkit2Element.ASSIGN_EXPR)
Template Toolkit File
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('bar')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiEqualExprImpl(TemplateToolkit2Element.EQUAL_EXPR)
Template Toolkit File
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('bar')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiEqualExprImpl(TemplateToolkit2Element.EQUAL_EXPR)
Template Toolkit File
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('bar')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiCompareExprImpl(TemplateToolkit2Element.COMPARE_EXPR)
Template Toolkit File
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('bar')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiCompareExprImpl(TemplateToolkit2Element.COMPARE_EXPR)
Template Toolkit File
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('bar')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiCompareExprImpl(TemplateToolkit2Element.COMPARE_EXPR)
Template Toolkit File
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('bar')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiCompareExprImpl(TemplateToolkit2Element.COMPARE_EXPR)
Template Toolkit File
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('bar')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiAndExprImpl(TemplateToolkit2Element.AND_EXPR)
Template Toolkit File
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('bar')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiAndExprImpl(TemplateToolkit2Element.AND_EXPR)
Template Toolkit File
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('bar')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiAndExprImpl(TemplateToolkit2Element.AND_EXPR)
Template Toolkit File
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('bar')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiOrExprImpl(TemplateToolkit2Element.OR_EXPR)
Template Toolkit File
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('bar')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiOrExprImpl(TemplateToolkit2Element.OR_EXPR)
Template Toolkit File
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('bar')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiOrExprImpl(TemplateToolkit2Element.OR_EXPR)
Template Toolkit File
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('bar')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiUnaryExprImpl(TemplateToolkit2Element.UNARY_EXPR)
Template Toolkit File
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('bar')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiUnaryExprImpl(TemplateToolkit2Element.UNARY_EXPR)
Template Toolkit File
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('bar')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiUnaryExprImpl(TemplateToolkit2Element.UNARY_EXPR)
Template Toolkit File
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('baz')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiTernarExprImpl(TemplateToolkit2Element.TERNAR_EXPR)
Template Toolkit File
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('bar')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiAddExprImpl(TemplateToolkit2Element.ADD_EXPR)
Template Toolkit File
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('bar')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiAddExprImpl(TemplateToolkit2Element.ADD_EXPR)
Template Toolkit File
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('bar')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiMulExprImpl(TemplateToolkit2Element.MUL_EXPR)
Template Toolkit File
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('bar')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiMulExprImpl(TemplateToolkit2Element.MUL_EXPR)
Template Toolkit File
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('bar')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiMulExprImpl(TemplateToolkit2Element.MUL_EXPR)
Template Toolkit File
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('bar')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiMulExprImpl(TemplateToolkit2Element.MUL_EXPR)
Template Toolkit File
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('bar')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiMulExprImpl(TemplateToolkit2Element.MUL_EXPR)
Template Toolkit File
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('bar')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiMulExprImpl(TemplateToolkit2Element.MUL_EXPR)
Template Toolkit File
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('bar')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiMulExprImpl(TemplateToolkit2Element.MUL_EXPR)
Template Toolkit File
        PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('author')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiSetDirectiveImpl(TemplateToolkit2Element.SET_DIRECTIVE)
    PsiAssignExprImpl(TemplateToolkit2Element.ASSIGN_EXPR)
Template Toolkit File
        PsiElement(TemplateToolkit2Token.STRING_CONTENT)('author')
        PsiElement(TemplateToolkit2Token.DQ_CLOSE)('"')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiSetDirectiveImpl(TemplateToolkit2Element.SET_DIRECTIVE)
    PsiAssignExprImpl(TemplateToolkit2Element.ASSIGN_EXPR)
Template Toolkit File
        PsiElement(TemplateToolkit2Token.STRING_CONTENT)('$')
        PsiElement(TemplateToolkit2Token.STRING_CONTENT)('author')
        PsiElement(TemplateToolkit2Token.DQ_CLOSE)('"')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('</body>\n</html>')
Template Toolkit File
  PsiComment(TemplateToolkit2Token.TT2_HTML)('<html>\n<head>http://template-toolkit.org/docs/manual/Variables.html</head>\n<body>')
  PsiPerlBlockImpl(TemplateToolkit2Element.PERL_BLOCK)
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiPerlDirectiveImpl(TemplateToolkit2Element.PERL_DIRECTIVE)
Template Toolkit File
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiRawperlBlockImpl(TemplateToolkit2Element.RAWPERL_BLOCK)
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiRawperlDirectiveImpl(TemplateToolkit2Element.RAWPERL_DIRECTIVE)
Template Toolkit File
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiPerlBlockImpl(TemplateToolkit2Element.PERL_BLOCK)
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiPerlDirectiveImpl(TemplateToolkit2Element.PERL_DIRECTIVE)
Template Toolkit File
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiPerlBlockImpl(TemplateToolkit2Element.PERL_BLOCK)
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiPerlDirectiveImpl(TemplateToolkit2Element.PERL_DIRECTIVE)
Template Toolkit File
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiPerlBlockImpl(TemplateToolkit2Element.PERL_BLOCK)
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiPerlDirectiveImpl(TemplateToolkit2Element.PERL_DIRECTIVE)
Template Toolkit File
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiPerlBlockImpl(TemplateToolkit2Element.PERL_BLOCK)
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiPerlDirectiveImpl(TemplateToolkit2Element.PERL_DIRECTIVE)
Template Toolkit File
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('</body>\n</html>')
Template Toolkit File
  PsiComment(TemplateToolkit2Token.TT2_HTML)('<html>\n<head>http://template-toolkit.org/docs/manual/Variables.html</head>\n<body>')
  PsiErrorElement:Unclosed perl block, missing END
    PsiPerlBlockImpl(TemplateToolkit2Element.PERL_BLOCK)
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiPerlDirectiveImpl(TemplateToolkit2Element.PERL_DIRECTIVE)
        PsiElement(TemplateToolkit2Token.PERL)('PERL')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('print $context->include('myfile');\n   print $stash;\n   print $output;\n   print $error;\n\n\n</body>\n</html>')
Template Toolkit File
  PsiComment(TemplateToolkit2Token.TT2_HTML)('<html>\n<head></head>\n<body>')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('foo')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('foo')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiUnaryExprImpl(TemplateToolkit2Element.UNARY_EXPR)
      PsiElement(TemplateToolkit2Token.!)('!')
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('bar')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiUnaryExprImpl(TemplateToolkit2Element.UNARY_EXPR)
Template Toolkit File
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('bar')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiUnaryExprImpl(TemplateToolkit2Element.UNARY_EXPR)
      PsiElement(TemplateToolkit2Token.not)('not')
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('bar')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiMulExprImpl(TemplateToolkit2Element.MUL_EXPR)
Template Toolkit File
        PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('baz')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiMulExprImpl(TemplateToolkit2Element.MUL_EXPR)
Template Toolkit File
        PsiElement(TemplateToolkit2Token.not)('not')
        PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('baz')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiMulExprImpl(TemplateToolkit2Element.MUL_EXPR)
Template Toolkit File
        PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('baz')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiMulExprImpl(TemplateToolkit2Element.MUL_EXPR)
Template Toolkit File
        PsiElement(TemplateToolkit2Token.not)('not')
        PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('baz')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiAddExprImpl(TemplateToolkit2Element.ADD_EXPR)
Template Toolkit File
          PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
            PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('bar')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiAddExprImpl(TemplateToolkit2Element.ADD_EXPR)
Template Toolkit File
          PsiElement(TemplateToolkit2Token.!)('!')
          PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
            PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('bar')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiAddExprImpl(TemplateToolkit2Element.ADD_EXPR)
Template Toolkit File
          PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
            PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('bar')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiAddExprImpl(TemplateToolkit2Element.ADD_EXPR)
Template Toolkit File
          PsiElement(TemplateToolkit2Token.!)('!')
          PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
            PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('bar')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiCompareExprImpl(TemplateToolkit2Element.COMPARE_EXPR)
Template Toolkit File
          PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
            PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('foo')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiCompareExprImpl(TemplateToolkit2Element.COMPARE_EXPR)
Template Toolkit File
          PsiElement(TemplateToolkit2Token.!)('!')
          PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
            PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('foo')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiEqualExprImpl(TemplateToolkit2Element.EQUAL_EXPR)
Template Toolkit File
        PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('bar')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiEqualExprImpl(TemplateToolkit2Element.EQUAL_EXPR)
Template Toolkit File
        PsiElement(TemplateToolkit2Token.*)('*')
        PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('bar')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiAndExprImpl(TemplateToolkit2Element.AND_EXPR)
Template Toolkit File
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiAndExprImpl(TemplateToolkit2Element.AND_EXPR)
Template Toolkit File
            PsiTermExprImpl(TemplateToolkit2Element.TERM_EXPR)
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiOrExprImpl(TemplateToolkit2Element.OR_EXPR)
Template Toolkit File
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiOrExprImpl(TemplateToolkit2Element.OR_EXPR)
Template Toolkit File
            PsiTermExprImpl(TemplateToolkit2Element.TERM_EXPR)
              PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiTernarExprImpl(TemplateToolkit2Element.TERNAR_EXPR)
Template Toolkit File
          PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
            PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('foo')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiTernarExprImpl(TemplateToolkit2Element.TERNAR_EXPR)
Template Toolkit File
          PsiElement(TemplateToolkit2Token.!)('!')
          PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
            PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('foo')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('</body>\n</html>')
Template Toolkit File
  PsiComment(TemplateToolkit2Token.TT2_HTML)('<html>\n<head>http://template-toolkit.org/docs/manual/Variables.html</head>\n<body>')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiSetDirectiveImpl(TemplateToolkit2Element.SET_DIRECTIVE)
    PsiAssignExprImpl(TemplateToolkit2Element.ASSIGN_EXPR)
Template Toolkit File
      PsiTermExprImpl(TemplateToolkit2Element.TERM_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('10')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('foo is')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('foo')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiProcessDirectiveImpl(TemplateToolkit2Element.PROCESS_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.PROCESS)('PROCESS')
    PsiSqStringExprImpl(TemplateToolkit2Element.SQ_STRING_EXPR)
      PsiElement(TemplateToolkit2Token.STRING_CONTENT)('bar')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('foo is')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('foo')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiSetDirectiveImpl(TemplateToolkit2Element.SET_DIRECTIVE)
    PsiAssignExprImpl(TemplateToolkit2Element.ASSIGN_EXPR)
Template Toolkit File
      PsiTermExprImpl(TemplateToolkit2Element.TERM_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('10')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('foo is')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('foo')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiProcessDirectiveImpl(TemplateToolkit2Element.PROCESS_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.PROCESS)('PROCESS')
Template Toolkit File
      PsiTermExprImpl(TemplateToolkit2Element.TERM_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('20')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('foo is')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('foo')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiSetDirectiveImpl(TemplateToolkit2Element.SET_DIRECTIVE)
    PsiAssignExprImpl(TemplateToolkit2Element.ASSIGN_EXPR)
Template Toolkit File
        PsiElement(TemplateToolkit2Token.STRING_CONTENT)('header')
        PsiElement(TemplateToolkit2Token.SQ_CLOSE)(''')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiProcessDirectiveImpl(TemplateToolkit2Element.PROCESS_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.PROCESS)('PROCESS')
    PsiSqStringExprImpl(TemplateToolkit2Element.SQ_STRING_EXPR)
      PsiElement(TemplateToolkit2Token.STRING_CONTENT)('myheader')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('# 'myheader'')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiProcessDirectiveImpl(TemplateToolkit2Element.PROCESS_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.PROCESS)('PROCESS')
    PsiVariableExprImpl(TemplateToolkit2Element.VARIABLE_EXPR)
      PsiElement(TemplateToolkit2Token.$)('$')
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('myheader')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('# 'my/misc/header'')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiProcessDirectiveImpl(TemplateToolkit2Element.PROCESS_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.PROCESS)('PROCESS')
Template Toolkit File
      PsiElement(TemplateToolkit2Token.STRING_CONTENT)('/')
      PsiElement(TemplateToolkit2Token.STRING_CONTENT)('header')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('</body>\n</html>')
Template Toolkit File
  PsiComment(TemplateToolkit2Token.TT2_HTML)('<html>\n<head>http://template-toolkit.org/docs/manual/Variables.html</head>\n<body>')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiReturnDirectiveImpl(TemplateToolkit2Element.RETURN_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.RETURN)('RETURN')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiReturnDirectiveImpl(TemplateToolkit2Element.RETURN_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.RETURN)('RETURN')
Template Toolkit File
          PsiElement(TemplateToolkit2Token..)('.')
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('condition')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('some')
      PsiElement(TemplateToolkit2Token..)('.')
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('var')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('</body>\n</html>')
Template Toolkit File
  PsiComment(TemplateToolkit2Token.TT2_HTML)('<html>\n<head>http://template-toolkit.org/docs/manual/Variables.html</head>\n<body>')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiSetDirectiveImpl(TemplateToolkit2Element.SET_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.SET)('SET')
Template Toolkit File
        PsiElement(TemplateToolkit2Token.STRING_CONTENT)('World')
        PsiElement(TemplateToolkit2Token.SQ_CLOSE)(''')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiSetDirectiveImpl(TemplateToolkit2Element.SET_DIRECTIVE)
    PsiAssignExprImpl(TemplateToolkit2Element.ASSIGN_EXPR)
Template Toolkit File
        PsiElement(TemplateToolkit2Token.STRING_CONTENT)('World')
        PsiElement(TemplateToolkit2Token.SQ_CLOSE)(''')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiSetDirectiveImpl(TemplateToolkit2Element.SET_DIRECTIVE)
    PsiAssignExprImpl(TemplateToolkit2Element.ASSIGN_EXPR)
Template Toolkit File
        PsiElement(TemplateToolkit2Token.STRING_CONTENT)('Foo')
        PsiElement(TemplateToolkit2Token.SQ_CLOSE)(''')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('# literal value 'Foo'')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiSetDirectiveImpl(TemplateToolkit2Element.SET_DIRECTIVE)
    PsiAssignExprImpl(TemplateToolkit2Element.ASSIGN_EXPR)
Template Toolkit File
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('foo')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('# value of variable 'foo'')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiSetDirectiveImpl(TemplateToolkit2Element.SET_DIRECTIVE)
    PsiAssignExprImpl(TemplateToolkit2Element.ASSIGN_EXPR)
Template Toolkit File
        PsiElement(TemplateToolkit2Token.STRING_CONTENT)('100')
        PsiElement(TemplateToolkit2Token.SQ_CLOSE)(''')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('# literal value '$100'')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiSetDirectiveImpl(TemplateToolkit2Element.SET_DIRECTIVE)
    PsiAssignExprImpl(TemplateToolkit2Element.ASSIGN_EXPR)
Template Toolkit File
        PsiElement(TemplateToolkit2Token.STRING_CONTENT)('00')
        PsiElement(TemplateToolkit2Token.DQ_CLOSE)('"')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('# value "Foo: $100.00"')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiSetDirectiveImpl(TemplateToolkit2Element.SET_DIRECTIVE)
    PsiAssignExprImpl(TemplateToolkit2Element.ASSIGN_EXPR)
Template Toolkit File
        PsiElement(TemplateToolkit2Token.STRING_CONTENT)('00')
        PsiElement(TemplateToolkit2Token.DQ_CLOSE)('"')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiSetDirectiveImpl(TemplateToolkit2Element.SET_DIRECTIVE)
    PsiAssignExprImpl(TemplateToolkit2Element.ASSIGN_EXPR)
Template Toolkit File
        PsiTermExprImpl(TemplateToolkit2Element.TERM_EXPR)
          PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('7')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiSetDirectiveImpl(TemplateToolkit2Element.SET_DIRECTIVE)
    PsiAssignExprImpl(TemplateToolkit2Element.ASSIGN_EXPR)
Template Toolkit File
        PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('author')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiSetDirectiveImpl(TemplateToolkit2Element.SET_DIRECTIVE)
    PsiAssignExprImpl(TemplateToolkit2Element.ASSIGN_EXPR)
Template Toolkit File
        PsiElement(TemplateToolkit2Token.STRING_CONTENT)('author')
        PsiElement(TemplateToolkit2Token.DQ_CLOSE)('"')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('</body>\n</html>')
Template Toolkit File
  PsiComment(TemplateToolkit2Token.TT2_HTML)('<html>\n<head>http://template-toolkit.org/docs/manual/Variables.html</head>\n<body>')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiStopDirectiveImpl(TemplateToolkit2Element.STOP_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.STOP)('STOP')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiStopDirectiveImpl(TemplateToolkit2Element.STOP_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.STOP)('STOP')
Template Toolkit File
          PsiElement(TemplateToolkit2Token..)('.')
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('condition')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('some')
      PsiElement(TemplateToolkit2Token..)('.')
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('var')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('</body>\n</html>')
Template Toolkit File
  PsiComment(TemplateToolkit2Token.TT2_HTML)('<html>\n<head></head>\n<body>')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiSqStringExprImpl(TemplateToolkit2Element.SQ_STRING_EXPR)
Template Toolkit File
      PsiElement(TemplateToolkit2Token.STRING_CONTENT)(''')
      PsiElement(TemplateToolkit2Token.SQ_CLOSE)(''')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiSqStringExprImpl(TemplateToolkit2Element.SQ_STRING_EXPR)
Template Toolkit File
      PsiElement(TemplateToolkit2Token.STRING_CONTENT)('\')
      PsiElement(TemplateToolkit2Token.STRING_CONTENT)(''')
      PsiElement(TemplateToolkit2Token.SQ_CLOSE)(''')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiDqStringExprImpl(TemplateToolkit2Element.DQ_STRING_EXPR)
Template Toolkit File
      PsiElement(TemplateToolkit2Token.STRING_CONTENT)('"')
      PsiElement(TemplateToolkit2Token.DQ_CLOSE)('"')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiDqStringExprImpl(TemplateToolkit2Element.DQ_STRING_EXPR)
Template Toolkit File
      PsiElement(TemplateToolkit2Token.STRING_CONTENT)('\')
      PsiElement(TemplateToolkit2Token.STRING_CONTENT)('"')
      PsiElement(TemplateToolkit2Token.DQ_CLOSE)('"')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('</body>\n</html>')
Template Toolkit File
  PsiComment(TemplateToolkit2Token.TT2_HTML)('<html>\n<head>http://template-toolkit.org/docs/manual/Variables.html</head>\n<body>')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiSetDirectiveImpl(TemplateToolkit2Element.SET_DIRECTIVE)
    PsiAssignExprImpl(TemplateToolkit2Element.ASSIGN_EXPR)
Template Toolkit File
      PsiTermExprImpl(TemplateToolkit2Element.TERM_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('10')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiCallExprImpl(TemplateToolkit2Element.CALL_EXPR)
Template Toolkit File
          PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('20')
        PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('# received 10, 20')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiCallExprImpl(TemplateToolkit2Element.CALL_EXPR)
Template Toolkit File
          PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('30')
        PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiCallExprImpl(TemplateToolkit2Element.CALL_EXPR)
Template Toolkit File
            PsiElement(TemplateToolkit2Token.SQ_CLOSE)(''')
        PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiCallExprImpl(TemplateToolkit2Element.CALL_EXPR)
Template Toolkit File
          PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('30')
        PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiSetDirectiveImpl(TemplateToolkit2Element.SET_DIRECTIVE)
    PsiAssignExprImpl(TemplateToolkit2Element.ASSIGN_EXPR)
Template Toolkit File
        PsiElement(TemplateToolkit2Token.STRING_CONTENT)('Romeo')
        PsiElement(TemplateToolkit2Token.SQ_CLOSE)(''')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiCallExprImpl(TemplateToolkit2Element.CALL_EXPR)
Template Toolkit File
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('v')
        PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('# outputs "Romeo"\n\n</body>\n</html>')
Template Toolkit File
  PsiComment(TemplateToolkit2Token.TT2_HTML)('<html>\n<head>http://template-toolkit.org/docs/manual/Variables.html</head>\n<body>')
  PsiSwitchBlockImpl(TemplateToolkit2Element.SWITCH_BLOCK)
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiSwitchDirectiveImpl(TemplateToolkit2Element.SWITCH_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.SWITCH)('SWITCH')
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('myvar')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiCaseBlockImpl(TemplateToolkit2Element.CASE_BLOCK)
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiCaseDirectiveImpl(TemplateToolkit2Element.CASE_DIRECTIVE)
Template Toolkit File
          PsiElement(TemplateToolkit2Token.STRING_CONTENT)('value1')
          PsiElement(TemplateToolkit2Token.SQ_CLOSE)(''')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('...')
    PsiCaseBlockImpl(TemplateToolkit2Element.CASE_BLOCK)
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiCaseDirectiveImpl(TemplateToolkit2Element.CASE_DIRECTIVE)
Template Toolkit File
            PsiElement(TemplateToolkit2Token.SQ_CLOSE)(''')
          PsiElement(TemplateToolkit2Token.])(']')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('# multiple values\n       ...')
    PsiCaseBlockImpl(TemplateToolkit2Element.CASE_BLOCK)
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiCaseDirectiveImpl(TemplateToolkit2Element.CASE_DIRECTIVE)
Template Toolkit File
          PsiElement(TemplateToolkit2Token..)('.')
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('keys')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('# ditto\n       ...')
    PsiCaseBlockImpl(TemplateToolkit2Element.CASE_BLOCK)
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiCaseDirectiveImpl(TemplateToolkit2Element.CASE_DIRECTIVE)
        PsiElement(TemplateToolkit2Token.CASE)('CASE')
        PsiElement(TemplateToolkit2Token.DEFAULT)('DEFAULT')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('# default\n       ...')
    PsiCaseBlockImpl(TemplateToolkit2Element.CASE_BLOCK)
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiCaseDirectiveImpl(TemplateToolkit2Element.CASE_DIRECTIVE)
        PsiElement(TemplateToolkit2Token.CASE)('CASE')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('# default\n       ...')
    PsiCaseBlockImpl(TemplateToolkit2Element.CASE_BLOCK)
      PsiElement(TemplateToolkit2Token.%)('%')
      PsiCaseDirectiveImpl(TemplateToolkit2Element.CASE_DIRECTIVE)
Template Toolkit File
          PsiElement(TemplateToolkit2Token.STRING_CONTENT)('value1')
          PsiElement(TemplateToolkit2Token.SQ_CLOSE)(''')
      PsiComment(TemplateToolkit2Token.LINE_COMMENT)('# %!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('...')
    PsiCaseBlockImpl(TemplateToolkit2Element.CASE_BLOCK)
      PsiElement(TemplateToolkit2Token.%)('%')
      PsiCaseDirectiveImpl(TemplateToolkit2Element.CASE_DIRECTIVE)
Template Toolkit File
            PsiElement(TemplateToolkit2Token.SQ_CLOSE)(''')
          PsiElement(TemplateToolkit2Token.])(']')
      PsiComment(TemplateToolkit2Token.LINE_COMMENT)('#%!](MISSING)   # multiple values')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('...')
    PsiCaseBlockImpl(TemplateToolkit2Element.CASE_BLOCK)
      PsiElement(TemplateToolkit2Token.%)('%')
      PsiCaseDirectiveImpl(TemplateToolkit2Element.CASE_DIRECTIVE)
Template Toolkit File
          PsiElement(TemplateToolkit2Token..)('.')
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('keys')
      PsiComment(TemplateToolkit2Token.LINE_COMMENT)('# %!](MISSING)            # ditto')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('...')
    PsiCaseBlockImpl(TemplateToolkit2Element.CASE_BLOCK)
      PsiElement(TemplateToolkit2Token.%)('%')
      PsiCaseDirectiveImpl(TemplateToolkit2Element.CASE_DIRECTIVE)
        PsiElement(TemplateToolkit2Token.CASE)('CASE')
        PsiElement(TemplateToolkit2Token.DEFAULT)('DEFAULT')
      PsiComment(TemplateToolkit2Token.LINE_COMMENT)('# %!](MISSING)                        # default')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('...')
    PsiCaseBlockImpl(TemplateToolkit2Element.CASE_BLOCK)
      PsiElement(TemplateToolkit2Token.%)('%')
      PsiCaseDirectiveImpl(TemplateToolkit2Element.CASE_DIRECTIVE)
        PsiElement(TemplateToolkit2Token.CASE)('CASE')
      PsiComment(TemplateToolkit2Token.LINE_COMMENT)('# %!](MISSING)                        # default')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('...')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('</body>\n</html>')
Template Toolkit File
  PsiComment(TemplateToolkit2Token.TT2_HTML)('<html>\n<head>http://template-toolkit.org/docs/manual/Variables.html</head>\n<body>')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiTagsDirectiveImpl(TemplateToolkit2Element.TAGS_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.TAGS)('TAGS')
    PsiSqStringExprImpl(TemplateToolkit2Element.SQ_STRING_EXPR)
      PsiElement(TemplateToolkit2Token.STRING_CONTENT)('<+ +>')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiTagsDirectiveImpl(TemplateToolkit2Element.TAGS_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.TAGS)('TAGS')
    PsiSqStringExprImpl(TemplateToolkit2Element.SQ_STRING_EXPR)
      PsiElement(TemplateToolkit2Token.STRING_CONTENT)('html')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('</body>\n</html>')
Template Toolkit File
  PsiComment(TemplateToolkit2Token.TT2_HTML)('<html>\n<head>http://template-toolkit.org/docs/manual/Variables.html</head>\n<body>')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiThrowDirectiveImpl(TemplateToolkit2Element.THROW_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.THROW)('THROW')
Template Toolkit File
        PsiElement(TemplateToolkit2Token.STRING_CONTENT)('error')
        PsiElement(TemplateToolkit2Token.DQ_CLOSE)('"')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('test text')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiThrowDirectiveImpl(TemplateToolkit2Element.THROW_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.THROW)('THROW')
Template Toolkit File
        PsiElement(TemplateToolkit2Token.STRING_CONTENT)('login')
        PsiElement(TemplateToolkit2Token.SQ_CLOSE)(''')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('test text')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiThrowDirectiveImpl(TemplateToolkit2Element.THROW_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.THROW)('THROW')
Template Toolkit File
        PsiElement(TemplateToolkit2Token.STRING_CONTENT)('info')
        PsiElement(TemplateToolkit2Token.DQ_CLOSE)('"')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('test text')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiThrowDirectiveImpl(TemplateToolkit2Element.THROW_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.THROW)('THROW')
Template Toolkit File
          PsiElement(TemplateToolkit2Token.STRING_CONTENT)('Ingredients')
          PsiElement(TemplateToolkit2Token.SQ_CLOSE)(''')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('test text')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiThrowDirectiveImpl(TemplateToolkit2Element.THROW_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.THROW)('THROW')
Template Toolkit File
        PsiElement(TemplateToolkit2Token.STRING_CONTENT)('.')
        PsiElement(TemplateToolkit2Token.STRING_CONTENT)('error')
        PsiElement(TemplateToolkit2Token.DQ_CLOSE)('"')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('test text')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiThrowDirectiveImpl(TemplateToolkit2Element.THROW_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.THROW)('THROW')
Template Toolkit File
        PsiElement(TemplateToolkit2Token.STRING_CONTENT)(' ')
        PsiElement(TemplateToolkit2Token.STRING_CONTENT)('login')
        PsiElement(TemplateToolkit2Token.SQ_CLOSE)(''')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('test text')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiThrowDirectiveImpl(TemplateToolkit2Element.THROW_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.THROW)('THROW')
Template Toolkit File
        PsiElement(TemplateToolkit2Token.STRING_CONTENT)('.')
        PsiElement(TemplateToolkit2Token.STRING_CONTENT)('info')
        PsiElement(TemplateToolkit2Token.DQ_CLOSE)('"')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('test text')
  PsiElement(TemplateToolkit2Token.%)('%')
  PsiThrowDirectiveImpl(TemplateToolkit2Element.THROW_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.THROW)('THROW')
Template Toolkit File
  PsiComment(TemplateToolkit2Token.TT2_HTML)('<html>\n<head>http://template-toolkit.org/docs/manual/Variables.html</head>\n<body>')
  PsiTryCatchBlockImpl(TemplateToolkit2Element.TRY_CATCH_BLOCK)
    PsiTryBranchImpl(TemplateToolkit2Element.TRY_BRANCH)
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiTryDirectiveImpl(TemplateToolkit2Element.TRY_DIRECTIVE)
        PsiElement(TemplateToolkit2Token.TRY)('TRY')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('...blah...blah...')
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiCallDirectiveImpl(TemplateToolkit2Element.CALL_DIRECTIVE)
        PsiElement(TemplateToolkit2Token.CALL)('CALL')
        PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('somecode')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('...etc...')
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiIncludeDirectiveImpl(TemplateToolkit2Element.INCLUDE_DIRECTIVE)
        PsiElement(TemplateToolkit2Token.INCLUDE)('INCLUDE')
        PsiSqStringExprImpl(TemplateToolkit2Element.SQ_STRING_EXPR)
          PsiElement(TemplateToolkit2Token.STRING_CONTENT)('someblock')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('...and so on...')
    PsiCatchBranchImpl(TemplateToolkit2Element.CATCH_BRANCH)
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiCatchDirectiveImpl(TemplateToolkit2Element.CATCH_DIRECTIVE)
        PsiElement(TemplateToolkit2Token.CATCH)('CATCH')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('An error occurred!')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiTryCatchBlockImpl(TemplateToolkit2Element.TRY_CATCH_BLOCK)
    PsiTryBranchImpl(TemplateToolkit2Element.TRY_BRANCH)
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiTryDirectiveImpl(TemplateToolkit2Element.TRY_DIRECTIVE)
        PsiElement(TemplateToolkit2Token.TRY)('TRY')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiUseDirectiveImpl(TemplateToolkit2Element.USE_DIRECTIVE)
        PsiElement(TemplateToolkit2Token.USE)('USE')
Template Toolkit File
            PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('mydsn')
          PsiElement(TemplateToolkit2Token.))(')')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiCatchBranchImpl(TemplateToolkit2Element.CATCH_BRANCH)
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiCatchDirectiveImpl(TemplateToolkit2Element.CATCH_DIRECTIVE)
        PsiElement(TemplateToolkit2Token.CATCH)('CATCH')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('ERROR! Type:')
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
        PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('error')
          PsiElement(TemplateToolkit2Token..)('.')
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('type')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('Info:')
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
        PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('error')
          PsiElement(TemplateToolkit2Token..)('.')
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('info')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiTryCatchBlockImpl(TemplateToolkit2Element.TRY_CATCH_BLOCK)
    PsiTryBranchImpl(TemplateToolkit2Element.TRY_BRANCH)
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiTryDirectiveImpl(TemplateToolkit2Element.TRY_DIRECTIVE)
        PsiElement(TemplateToolkit2Token.TRY)('TRY')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiIncludeDirectiveImpl(TemplateToolkit2Element.INCLUDE_DIRECTIVE)
        PsiElement(TemplateToolkit2Token.INCLUDE)('INCLUDE')
        PsiSqStringExprImpl(TemplateToolkit2Element.SQ_STRING_EXPR)
          PsiElement(TemplateToolkit2Token.STRING_CONTENT)('myfile')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiUseDirectiveImpl(TemplateToolkit2Element.USE_DIRECTIVE)
        PsiElement(TemplateToolkit2Token.USE)('USE')
Template Toolkit File
            PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('mydsn')
          PsiElement(TemplateToolkit2Token.))(')')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiCallDirectiveImpl(TemplateToolkit2Element.CALL_DIRECTIVE)
        PsiElement(TemplateToolkit2Token.CALL)('CALL')
        PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('somecode')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiCatchBranchImpl(TemplateToolkit2Element.CATCH_BRANCH)
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiCatchDirectiveImpl(TemplateToolkit2Element.CATCH_DIRECTIVE)
Template Toolkit File
          PsiSqStringExprImpl(TemplateToolkit2Element.SQ_STRING_EXPR)
            PsiElement(TemplateToolkit2Token.STRING_CONTENT)('file')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('File Error!')
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
        PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('error')
          PsiElement(TemplateToolkit2Token..)('.')
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('info')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiCatchBranchImpl(TemplateToolkit2Element.CATCH_BRANCH)
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiCatchDirectiveImpl(TemplateToolkit2Element.CATCH_DIRECTIVE)
Template Toolkit File
          PsiSqStringExprImpl(TemplateToolkit2Element.SQ_STRING_EXPR)
            PsiElement(TemplateToolkit2Token.STRING_CONTENT)('DBI')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiIncludeDirectiveImpl(TemplateToolkit2Element.INCLUDE_DIRECTIVE)
        PsiElement(TemplateToolkit2Token.INCLUDE)('INCLUDE')
Template Toolkit File
          PsiElement(TemplateToolkit2Token.STRING_CONTENT)('.')
          PsiElement(TemplateToolkit2Token.STRING_CONTENT)('html')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiCatchBranchImpl(TemplateToolkit2Element.CATCH_BRANCH)
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiCatchDirectiveImpl(TemplateToolkit2Element.CATCH_DIRECTIVE)
        PsiElement(TemplateToolkit2Token.CATCH)('CATCH')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
        PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('error')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiTryCatchBlockImpl(TemplateToolkit2Element.TRY_CATCH_BLOCK)
    PsiTryBranchImpl(TemplateToolkit2Element.TRY_BRANCH)
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiTryDirectiveImpl(TemplateToolkit2Element.TRY_DIRECTIVE)
        PsiElement(TemplateToolkit2Token.TRY)('TRY')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('...')
      PsiTryCatchBlockImpl(TemplateToolkit2Element.TRY_CATCH_BLOCK)
        PsiTryBranchImpl(TemplateToolkit2Element.TRY_BRANCH)
          PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
          PsiTryDirectiveImpl(TemplateToolkit2Element.TRY_DIRECTIVE)
            PsiElement(TemplateToolkit2Token.TRY)('TRY')
          PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
          PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
          PsiIncludeDirectiveImpl(TemplateToolkit2Element.INCLUDE_DIRECTIVE)
            PsiElement(TemplateToolkit2Token.INCLUDE)('INCLUDE')
Template Toolkit File
              PsiElement(TemplateToolkit2Token..)('.')
              PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('header')
          PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
        PsiCatchBranchImpl(TemplateToolkit2Element.CATCH_BRANCH)
          PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
          PsiCatchDirectiveImpl(TemplateToolkit2Element.CATCH_DIRECTIVE)
Template Toolkit File
              PsiSqStringExprImpl(TemplateToolkit2Element.SQ_STRING_EXPR)
                PsiElement(TemplateToolkit2Token.STRING_CONTENT)('file')
          PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
          PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
          PsiIncludeDirectiveImpl(TemplateToolkit2Element.INCLUDE_DIRECTIVE)
            PsiElement(TemplateToolkit2Token.INCLUDE)('INCLUDE')
            PsiSqStringExprImpl(TemplateToolkit2Element.SQ_STRING_EXPR)
              PsiElement(TemplateToolkit2Token.STRING_CONTENT)('header')
          PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
        PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
        PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
          PsiElement(TemplateToolkit2Token.END)('END')
        PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('...')
    PsiCatchBranchImpl(TemplateToolkit2Element.CATCH_BRANCH)
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiCatchDirectiveImpl(TemplateToolkit2Element.CATCH_DIRECTIVE)
Template Toolkit File
          PsiSqStringExprImpl(TemplateToolkit2Element.SQ_STRING_EXPR)
            PsiElement(TemplateToolkit2Token.STRING_CONTENT)('DBI')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiIncludeDirectiveImpl(TemplateToolkit2Element.INCLUDE_DIRECTIVE)
        PsiElement(TemplateToolkit2Token.INCLUDE)('INCLUDE')
Template Toolkit File
          PsiElement(TemplateToolkit2Token.STRING_CONTENT)('.')
          PsiElement(TemplateToolkit2Token.STRING_CONTENT)('html')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiTryCatchBlockImpl(TemplateToolkit2Element.TRY_CATCH_BLOCK)
    PsiTryBranchImpl(TemplateToolkit2Element.TRY_BRANCH)
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiTryDirectiveImpl(TemplateToolkit2Element.TRY_DIRECTIVE)
        PsiElement(TemplateToolkit2Token.TRY)('TRY')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('...')
    PsiCatchBranchImpl(TemplateToolkit2Element.CATCH_BRANCH)
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiCatchDirectiveImpl(TemplateToolkit2Element.CATCH_DIRECTIVE)
Template Toolkit File
          PsiSqStringExprImpl(TemplateToolkit2Element.SQ_STRING_EXPR)
            PsiElement(TemplateToolkit2Token.STRING_CONTENT)('this')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('...')
    PsiCatchBranchImpl(TemplateToolkit2Element.CATCH_BRANCH)
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiCatchDirectiveImpl(TemplateToolkit2Element.CATCH_DIRECTIVE)
Template Toolkit File
          PsiSqStringExprImpl(TemplateToolkit2Element.SQ_STRING_EXPR)
            PsiElement(TemplateToolkit2Token.STRING_CONTENT)('that')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('...')
    PsiFinalBranchImpl(TemplateToolkit2Element.FINAL_BRANCH)
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiFinalDirectiveImpl(TemplateToolkit2Element.FINAL_DIRECTIVE)
        PsiElement(TemplateToolkit2Token.FINAL)('FINAL')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('All done!')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiTryCatchBlockImpl(TemplateToolkit2Element.TRY_CATCH_BLOCK)
    PsiTryBranchImpl(TemplateToolkit2Element.TRY_BRANCH)
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiTryDirectiveImpl(TemplateToolkit2Element.TRY_DIRECTIVE)
        PsiElement(TemplateToolkit2Token.TRY)('TRY')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('This gets printed')
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiThrowDirectiveImpl(TemplateToolkit2Element.THROW_DIRECTIVE)
        PsiElement(TemplateToolkit2Token.THROW)('THROW')
Template Toolkit File
            PsiElement(TemplateToolkit2Token.STRING_CONTENT)('carrots')
            PsiElement(TemplateToolkit2Token.SQ_CLOSE)(''')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('This doesn't')
    PsiCatchBranchImpl(TemplateToolkit2Element.CATCH_BRANCH)
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiCatchDirectiveImpl(TemplateToolkit2Element.CATCH_DIRECTIVE)
Template Toolkit File
          PsiSqStringExprImpl(TemplateToolkit2Element.SQ_STRING_EXPR)
            PsiElement(TemplateToolkit2Token.STRING_CONTENT)('food')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiClearDirectiveImpl(TemplateToolkit2Element.CLEAR_DIRECTIVE)
        PsiElement(TemplateToolkit2Token.CLEAR)('CLEAR')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('culinary delights:')
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
        PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('error')
          PsiElement(TemplateToolkit2Token..)('.')
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('info')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiTryCatchBlockImpl(TemplateToolkit2Element.TRY_CATCH_BLOCK)
    PsiTryBranchImpl(TemplateToolkit2Element.TRY_BRANCH)
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiTryDirectiveImpl(TemplateToolkit2Element.TRY_DIRECTIVE)
        PsiElement(TemplateToolkit2Token.TRY)('TRY')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('...')
    PsiCatchBranchImpl(TemplateToolkit2Element.CATCH_BRANCH)
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiCatchDirectiveImpl(TemplateToolkit2Element.CATCH_DIRECTIVE)
Template Toolkit File
          PsiSqStringExprImpl(TemplateToolkit2Element.SQ_STRING_EXPR)
            PsiElement(TemplateToolkit2Token.STRING_CONTENT)('myerror')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
        PsiOrExprImpl(TemplateToolkit2Element.OR_EXPR)
Template Toolkit File
            PsiElement(TemplateToolkit2Token.STRING_CONTENT)('no')
            PsiElement(TemplateToolkit2Token.SQ_CLOSE)(''')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
        PsiTernarExprImpl(TemplateToolkit2Element.TERNAR_EXPR)
Template Toolkit File
            PsiElement(TemplateToolkit2Token.STRING_CONTENT)('errors')
            PsiElement(TemplateToolkit2Token.SQ_CLOSE)(''')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('in')
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
        PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
Template Toolkit File
          PsiElement(TemplateToolkit2Token..)('.')
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('module')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)(':')
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
        PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
Template Toolkit File
                PsiElement(TemplateToolkit2Token.SQ_CLOSE)(''')
              PsiElement(TemplateToolkit2Token.))(')')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('.')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('</body>\n</html>')
Template Toolkit File
  PsiComment(TemplateToolkit2Token.TT2_HTML)('<html>\n<head>http://template-toolkit.org/docs/manual/Variables.html</head>\n<body>')
  PsiTryCatchBlockImpl(TemplateToolkit2Element.TRY_CATCH_BLOCK)
    PsiTryBranchImpl(TemplateToolkit2Element.TRY_BRANCH)
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiTryDirectiveImpl(TemplateToolkit2Element.TRY_DIRECTIVE)
        PsiElement(TemplateToolkit2Token.TRY)('TRY')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('...blah...blah...')
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiCallDirectiveImpl(TemplateToolkit2Element.CALL_DIRECTIVE)
        PsiElement(TemplateToolkit2Token.CALL)('CALL')
        PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('somecode')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('...etc...')
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiIncludeDirectiveImpl(TemplateToolkit2Element.INCLUDE_DIRECTIVE)
        PsiElement(TemplateToolkit2Token.INCLUDE)('INCLUDE')
        PsiSqStringExprImpl(TemplateToolkit2Element.SQ_STRING_EXPR)
          PsiElement(TemplateToolkit2Token.STRING_CONTENT)('someblock')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('...and so on...')
    PsiErrorElement:Unclosed block directive, missing END
      PsiCatchBranchImpl(TemplateToolkit2Element.CATCH_BRANCH)
        PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
        PsiCatchDirectiveImpl(TemplateToolkit2Element.CATCH_DIRECTIVE)
          PsiElement(TemplateToolkit2Token.CATCH)('CATCH')
        PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
        PsiComment(TemplateToolkit2Token.TT2_HTML)('An error occurred!\n\n\n\n</body>\n</html>')
Template Toolkit File
  PsiComment(TemplateToolkit2Token.TT2_HTML)('<html>\n<head>http://template-toolkit.org/docs/manual/Variables.html</head>\n<body>')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiUseDirectiveImpl(TemplateToolkit2Element.USE_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.USE)('USE')
    PsiModuleNameImpl(TemplateToolkit2Element.MODULE_NAME)
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('myplugin')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiUseDirectiveImpl(TemplateToolkit2Element.USE_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.USE)('USE')
    PsiModuleNameImpl(TemplateToolkit2Element.MODULE_NAME)
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('CGI')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('# => Template::Plugin::CGI')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiUseDirectiveImpl(TemplateToolkit2Element.USE_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.USE)('USE')
    PsiModuleNameImpl(TemplateToolkit2Element.MODULE_NAME)
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('Cgi')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('# => Template::Plugin::CGI')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiUseDirectiveImpl(TemplateToolkit2Element.USE_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.USE)('USE')
    PsiModuleNameImpl(TemplateToolkit2Element.MODULE_NAME)
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('cgi')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('# => Template::Plugin::CGI')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiUseDirectiveImpl(TemplateToolkit2Element.USE_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.USE)('USE')
    PsiModuleNameImpl(TemplateToolkit2Element.MODULE_NAME)
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('Foo')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('# look for 'Foo' then 'foo'')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiUseDirectiveImpl(TemplateToolkit2Element.USE_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.USE)('USE')
    PsiModuleNameImpl(TemplateToolkit2Element.MODULE_NAME)
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('MyPlugin')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('#  => Template::Plugin::MyPlugin')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiUseDirectiveImpl(TemplateToolkit2Element.USE_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.USE)('USE')
Template Toolkit File
        PsiElement(TemplateToolkit2Token..)('.')
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('Bar')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('#  => Template::Plugin::Foo::Bar')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiUseDirectiveImpl(TemplateToolkit2Element.USE_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.USE)('USE')
Template Toolkit File
              PsiElement(TemplateToolkit2Token.SQ_CLOSE)(''')
            PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiWhileBlockImpl(TemplateToolkit2Element.WHILE_BLOCK)
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiWhileDirectiveImpl(TemplateToolkit2Element.WHILE_DIRECTIVE)
Template Toolkit File
            PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('getline')
        PsiElement(TemplateToolkit2Token.))(')')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiComment(TemplateToolkit2Token.TT2_HTML)('<!--')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('line')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiComment(TemplateToolkit2Token.TT2_HTML)('-->')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiUseDirectiveImpl(TemplateToolkit2Element.USE_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.USE)('USE')
Template Toolkit File
        PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('123')
      PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiUseDirectiveImpl(TemplateToolkit2Element.USE_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.USE)('USE')
Template Toolkit File
          PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('1')
      PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiUseDirectiveImpl(TemplateToolkit2Element.USE_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.USE)('USE')
Template Toolkit File
          PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('3')
      PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiForeachBlockImpl(TemplateToolkit2Element.FOREACH_BLOCK)
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiForeachDirectiveImpl(TemplateToolkit2Element.FOREACH_DIRECTIVE)
Template Toolkit File
          PsiElement(TemplateToolkit2Token..)('.')
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('rows')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiComment(TemplateToolkit2Token.TT2_HTML)('<tr>')
    PsiForeachBlockImpl(TemplateToolkit2Element.FOREACH_BLOCK)
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiForeachDirectiveImpl(TemplateToolkit2Element.FOREACH_DIRECTIVE)
Template Toolkit File
          PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
            PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('row')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('<td>')
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
        PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('item')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('</td>')
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
        PsiElement(TemplateToolkit2Token.END)('END')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiComment(TemplateToolkit2Token.TT2_HTML)('</tr>')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiUseDirectiveImpl(TemplateToolkit2Element.USE_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.USE)('USE')
Template Toolkit File
          PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('5')
      PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiForeachBlockImpl(TemplateToolkit2Element.FOREACH_BLOCK)
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiForeachDirectiveImpl(TemplateToolkit2Element.FOREACH_DIRECTIVE)
Template Toolkit File
          PsiElement(TemplateToolkit2Token..)('.')
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('rows')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiComment(TemplateToolkit2Token.TT2_HTML)('...')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiUseDirectiveImpl(TemplateToolkit2Element.USE_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.USE)('USE')
Template Toolkit File
        PsiElement(TemplateToolkit2Token.SQ_CLOSE)(''')
      PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiUseDirectiveImpl(TemplateToolkit2Element.USE_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.USE)('USE')
Template Toolkit File
        PsiElement(TemplateToolkit2Token.SQ_CLOSE)(''')
      PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiCallExprImpl(TemplateToolkit2Element.CALL_EXPR)
Template Toolkit File
          PsiElement(TemplateToolkit2Token.SQ_CLOSE)(''')
        PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiCallExprImpl(TemplateToolkit2Element.CALL_EXPR)
Template Toolkit File
          PsiElement(TemplateToolkit2Token.SQ_CLOSE)(''')
        PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiUseDirectiveImpl(TemplateToolkit2Element.USE_DIRECTIVE)
    PsiElement(TemplateToolkit2Token.USE)('USE')
Template Toolkit File
          PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('1')
      PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('<a href="')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
Template Toolkit File
  PsiComment(TemplateToolkit2Token.TT2_HTML)('<html>\n<head>http://template-toolkit.org/docs/manual/Variables.html</head>\n<body>\nThis is version')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('version')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('(')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('release')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)(').\nSerial number:')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('serial_no')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('article')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('person')
      PsiElement(TemplateToolkit2Token..)('.')
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('id')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)(':')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('person')
      PsiElement(TemplateToolkit2Token..)('.')
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('name')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('<')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('person')
      PsiElement(TemplateToolkit2Token..)('.')
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('email')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('>')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('primes')
      PsiElement(TemplateToolkit2Token..)('.')
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('first')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('-')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('primes')
      PsiElement(TemplateToolkit2Token..)('.')
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('last')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)(', including')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('primes')
      PsiElement(TemplateToolkit2Token..)('.')
      PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('3')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('primes')
      PsiElement(TemplateToolkit2Token..)('.')
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('size')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('prime numbers:')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
Template Toolkit File
            PsiElement(TemplateToolkit2Token.SQ_CLOSE)(''')
          PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('wizard')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiCallExprImpl(TemplateToolkit2Element.CALL_EXPR)
Template Toolkit File
          PsiElement(TemplateToolkit2Token.SQ_CLOSE)(''')
        PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
Template Toolkit File
            PsiElement(TemplateToolkit2Token.SQ_CLOSE)(''')
          PsiElement(TemplateToolkit2Token.))(')')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('article')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('<a href="')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
Template Toolkit File
      PsiElement(TemplateToolkit2Token..)('.')
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('next')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('">Next Page</a>')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('message')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('# outputs "Hello World!"')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('_secret')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('# no output')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('thing')
      PsiElement(TemplateToolkit2Token..)('.')
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('public')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('# outputs "123"')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('thing')
      PsiElement(TemplateToolkit2Token..)('.')
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('_private')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('# no output')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiSetDirectiveImpl(TemplateToolkit2Element.SET_DIRECTIVE)
    PsiAssignExprImpl(TemplateToolkit2Element.ASSIGN_EXPR)
Template Toolkit File
        PsiElement(TemplateToolkit2Token.STRING_CONTENT)('next')
        PsiElement(TemplateToolkit2Token.SQ_CLOSE)(''')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
Template Toolkit File
        PsiElement(TemplateToolkit2Token..)('.')
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('somethign')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('# same as')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('page')
      PsiElement(TemplateToolkit2Token..)('.')
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('next')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
Template Toolkit File
      PsiElement(TemplateToolkit2Token..)('.')
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('somethign')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('# same as')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('page')
      PsiElement(TemplateToolkit2Token..)('.')
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('next')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiSetDirectiveImpl(TemplateToolkit2Element.SET_DIRECTIVE)
    PsiAssignExprImpl(TemplateToolkit2Element.ASSIGN_EXPR)
Template Toolkit File
      PsiTermExprImpl(TemplateToolkit2Element.TERM_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('666')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('The')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('product')
      PsiElement(TemplateToolkit2Token..)('.')
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('id')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('product')
      PsiElement(TemplateToolkit2Token..)('.')
      PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('desc')
  PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('costs $')
  PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
  PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
    PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
Template Toolkit File
  PsiComment(TemplateToolkit2Token.TT2_HTML)('<html>\n<head>http://template-toolkit.org/docs/manual/Variables.html</head>\n<body>')
  PsiWhileBlockImpl(TemplateToolkit2Element.WHILE_BLOCK)
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiWhileDirectiveImpl(TemplateToolkit2Element.WHILE_DIRECTIVE)
Template Toolkit File
        PsiTermExprImpl(TemplateToolkit2Element.TERM_EXPR)
          PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('100')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiComment(TemplateToolkit2Token.TT2_HTML)('...')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiSetDirectiveImpl(TemplateToolkit2Element.SET_DIRECTIVE)
      PsiAssignExprImpl(TemplateToolkit2Element.ASSIGN_EXPR)
Template Toolkit File
        PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
          PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('calculate_new_total')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiWhileBlockImpl(TemplateToolkit2Element.WHILE_BLOCK)
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiWhileDirectiveImpl(TemplateToolkit2Element.WHILE_DIRECTIVE)
Template Toolkit File
            PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('get_next_user_record')
        PsiElement(TemplateToolkit2Token.))(')')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiGetDirectiveImpl(TemplateToolkit2Element.GET_DIRECTIVE)
      PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('user')
        PsiElement(TemplateToolkit2Token..)('.')
        PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('name')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('</body>\n</html>')
Template Toolkit File
  PsiComment(TemplateToolkit2Token.TT2_HTML)('<html>\n<head>http://template-toolkit.org/docs/manual/Variables.html</head>\n<body>')
  PsiErrorElement:Unclosed block directive, missing END
    PsiWhileBlockImpl(TemplateToolkit2Element.WHILE_BLOCK)
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
Template Toolkit File
          PsiTermExprImpl(TemplateToolkit2Element.TERM_EXPR)
            PsiElement(TemplateToolkit2Token.TT2_NUMBER_SIMPLE)('100')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('...')
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
      PsiSetDirectiveImpl(TemplateToolkit2Element.SET_DIRECTIVE)
        PsiAssignExprImpl(TemplateToolkit2Element.ASSIGN_EXPR)
Template Toolkit File
          PsiIdentifierExprImpl(TemplateToolkit2Element.IDENTIFIER_EXPR)
            PsiElement(TemplateToolkit2Token.TT2_IDENTIFIER)('calculate_new_total')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('</body>\n</html>')
Template Toolkit File
  PsiComment(TemplateToolkit2Token.TT2_HTML)('<html>\n<head>http://template-toolkit.org/docs/manual/Variables.html</head>\n<body>')
  PsiWrapperBlockImpl(TemplateToolkit2Element.WRAPPER_BLOCK)
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiWrapperDirectiveImpl(TemplateToolkit2Element.WRAPPER_DIRECTIVE)
Template Toolkit File
          PsiElement(TemplateToolkit2Token.STRING_CONTENT)('Mechanics')
          PsiElement(TemplateToolkit2Token.SQ_CLOSE)(''')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiComment(TemplateToolkit2Token.TT2_HTML)('Quantum mechanics is a very interesting subject wish\n   should prove easy for the layman to fully comprehend.')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiWrapperBlockImpl(TemplateToolkit2Element.WRAPPER_BLOCK)
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiWrapperDirectiveImpl(TemplateToolkit2Element.WRAPPER_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.WRAPPER)('WRAPPER')
      PsiSqStringExprImpl(TemplateToolkit2Element.SQ_STRING_EXPR)
        PsiElement(TemplateToolkit2Token.STRING_CONTENT)('section')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
    PsiComment(TemplateToolkit2Token.TT2_HTML)('Quantum mechanics is a very interesting subject wish\n   should prove easy for the layman to fully comprehend.')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiWrapperBlockImpl(TemplateToolkit2Element.WRAPPER_BLOCK)
    PsiElement(TemplateToolkit2Token.%)('%')
    PsiWrapperDirectiveImpl(TemplateToolkit2Element.WRAPPER_DIRECTIVE)
Template Toolkit File
          PsiElement(TemplateToolkit2Token.STRING_CONTENT)(' ')
          PsiElement(TemplateToolkit2Token.STRING_CONTENT)('Mechanics')
          PsiElement(TemplateToolkit2Token.SQ_CLOSE)(''')
    PsiComment(TemplateToolkit2Token.TT2_HTML)('Quantum mechanics is a very interesting subject wish\n   should prove easy for the layman to fully comprehend.')
    PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
    PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
  PsiWrapperBlockImpl(TemplateToolkit2Element.WRAPPER_BLOCK)
    PsiElement(TemplateToolkit2Token.%)('%')
    PsiWrapperDirectiveImpl(TemplateToolkit2Element.WRAPPER_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.WRAPPER)('WRAPPER')
      PsiSqStringExprImpl(TemplateToolkit2Element.SQ_STRING_EXPR)
        PsiElement(TemplateToolkit2Token.STRING_CONTENT)('section')
    PsiComment(TemplateToolkit2Token.TT2_HTML)('Quantum mechanics is a very interesting subject wish\n   should prove easy for the layman to fully comprehend.')
    PsiElement(TemplateToolkit2Token.%)('%')
    PsiEndDirectiveImpl(TemplateToolkit2Element.END_DIRECTIVE)
      PsiElement(TemplateToolkit2Token.END)('END')
  PsiComment(TemplateToolkit2Token.TT2_HTML)('</body>\n</html>')
Template Toolkit File
  PsiComment(TemplateToolkit2Token.TT2_HTML)('<html>\n<head>http://template-toolkit.org/docs/manual/Variables.html</head>\n<body>')
  PsiErrorElement:Unclosed block directive, missing END
    PsiWrapperBlockImpl(TemplateToolkit2Element.WRAPPER_BLOCK)
      PsiElement(TemplateToolkit2Token.[%!)(MISSING)('[%!'(MISSING))
Template Toolkit File
            PsiElement(TemplateToolkit2Token.STRING_CONTENT)('Mechanics')
            PsiElement(TemplateToolkit2Token.SQ_CLOSE)(''')
      PsiElement(TemplateToolkit2Token.%!](MISSING))('%!](MISSING)')
      PsiComment(TemplateToolkit2Token.TT2_HTML)('Quantum mechanics is a very interesting subject wish\n   should prove easy for the layman to fully comprehend.\n\n\n</body>\n</html>')
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public ToParentBlockJoinQuery build() throws IOException {
            }

            if (innerHits != null) {
                InnerHitsContext.NestedInnerHits nestedInnerHits = new InnerHitsContext.NestedInnerHits(innerHits.v2(), getInnerQuery(), null, getParentObjectMapper(), nestedObjectMapper);
                String name = innerHits.v1() != null ? innerHits.v1() : path;
                parseContext.addInnerHits(name, nestedInnerHits);
            }
import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
import static org.elasticsearch.index.query.FilterBuilders.hasChildFilter;
import static org.elasticsearch.index.query.FilterBuilders.nestedFilter;
import static org.elasticsearch.index.query.QueryBuilders.*;
import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.*;
import static org.hamcrest.Matchers.*;
public void testSimpleNested() throws Exception {
                        .setQuery(nestedQuery("comments", matchQuery("comments.message", "elephant")))
                        .addInnerHit("comment", new InnerHitsBuilder.InnerHit().setPath("comments").setQuery(matchQuery("comments.message", "elephant"))).request(),
                client().prepareSearch("articles")
                        .setQuery(nestedQuery("comments", matchQuery("comments.message", "elephant")).innerHit(new QueryInnerHitBuilder().setName("comment"))).request()
        };
        for (SearchRequest searchRequest : searchRequests) {
            SearchResponse response = client().search(searchRequest).actionGet();
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
else if (counter == 0)
        if(counter == 1 && crlfCounter > 0) {
        	return new String(crlfBuffer,0,crlfCounter,"UTF-8");
        } else {
        	return new String(lineBuffer,0,counter,"UTF-8");
        }
        
    }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public Geopoint(final Parcel in) {
     */
    public Geopoint(final String latDir, final String latDeg, final String latDegFrac,
                    final String lonDir, final String lonDeg, final String lonDegFrac) {
        latitude = Double.parseDouble(latDeg + "." + addZeros(Integer.parseInt(latDegFrac), 5)) *
                getLatSign(latDir);
        longitude = Double.parseDouble(lonDeg + "." + addZeros(Integer.parseInt(lonDegFrac), 5)) *
                getLonSign(lonDir);
    }

    /**
public Geopoint(final String latDir, final String latDeg, final String latDegFra
     */
    public Geopoint(final String latDir, final String latDeg, final String latMin, final String latMinFrac,
                    final String lonDir, final String lonDeg, final String lonMin, final String lonMinFrac) {
        latitude = (Double.parseDouble(latDeg) + Double.parseDouble(latMin + "." + addZeros(Integer.parseInt(latMinFrac), 3)) / 60) *
                (getLatSign(latDir));
        longitude = (Double.parseDouble(lonDeg) + Double.parseDouble(lonMin + "." + addZeros(Integer.parseInt(lonMinFrac), 3)) / 60) *
                (getLonSign(lonDir));
    }

    /**
public Geopoint(final String latDir, final String latDeg, final String latMin, f
     */
    public Geopoint(final String latDir, final String latDeg, final String latMin, final String latSec, final String latSecFrac,
                    final String lonDir, final String lonDeg, final String lonMin, final String lonSec, final String lonSecFrac) {
        latitude = (Double.parseDouble(latDeg) + Double.parseDouble(latMin) / 60 + Double.parseDouble(latSec + "." + addZeros(Integer.parseInt(latSecFrac), 3)) / 3600) *
                (getLatSign(latDir));
        longitude = (Double.parseDouble(lonDeg) + Double.parseDouble(lonMin) / 60 + Double.parseDouble(lonSec + "." + addZeros(Integer.parseInt(lonSecFrac), 3)) / 3600) *
                (getLonSign(lonDir));
    }

    /**
private static double getSecRaw(final double deg) {
        return (Math.abs(deg) * 3600) %!;(MISSING)
    }

    private static String addZeros(final int value, final int len) {
        return StringUtils.leftPad(Integer.toString(value), len, '0');
    }

    private static int getLonSign(final String lonDir) {
        return "W".equalsIgnoreCase(lonDir) ? -1 : 1;
    }

    private static int getLatSign(final String latDir) {
        return "S".equalsIgnoreCase(latDir) ? -1 : 1;
    }

}
package cgeo.geocaching.geopoint;

import junit.framework.Assert;

import android.os.Bundle;
import android.test.AndroidTestCase;

public class GeopointTest extends AndroidTestCase {

    public static void testCreation() {
public static void testElevation() {
        assertEquals(125.663703918457, (new Geopoint(48.0, 2.0)).getElevation(), 0.1);
    }

}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import com.google.gson.JsonParseException;
import com.jaspersoft.android.sdk.network.entity.execution.ErrorDescriptor;
import com.jaspersoft.android.sdk.network.entity.type.GsonFactory;

import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;

import retrofit.Response;

/**
 * Wrapper around exceptions which could pop up during request processing.
 * Motivation behind class was to incapsulate 3-d party errors in generic interface.
 * @since 2.0
 */
public class HttpException extends Exception {

    static HttpException httpError(Response response) {
        return httpError(response.raw());
    }

    static HttpException httpError(com.squareup.okhttp.Response response) {
        String message = response.code() + " " + response.message();
        return new HttpException(message, response, null);
    }

    private final com.squareup.okhttp.Response response;

    HttpException(String message, com.squareup.okhttp.Response response, Throwable exception) {
        super(message, exception);
        this.response = response;
    }

    // HTTP status code.
    public int code() {
        return response.code();
    }

    // HTTP status message.
    public String message() {
        return response.message();
    }

    public ErrorDescriptor getDescriptor() throws IOException {
        Gson gson = GsonFactory.create();
        InputStream stream = response.body().byteStream();
        InputStreamReader reader = new InputStreamReader(stream);
        try {
            return gson.fromJson(reader, ErrorDescriptor.class);
        } catch (JsonParseException ex) {
            return null;
        }
    }

    public String urlString() {
        return response.request().urlString();
    }

}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

package org.elasticsearch.common.geo.builders;

import com.spatial4j.core.shape.jts.JtsGeometry;
import com.vividsolutions.jts.geom.Geometry;
import org.elasticsearch.ElasticsearchIllegalArgumentException;
import org.elasticsearch.ElasticsearchParseException;
import org.elasticsearch.common.logging.ESLogger;
import org.elasticsearch.common.xcontent.XContentParser;
import org.elasticsearch.common.xcontent.json.JsonXContent;

import com.spatial4j.core.context.jts.JtsSpatialContext;
import com.spatial4j.core.shape.Shape;
import com.vividsolutions.jts.geom.Coordinate;
import com.vividsolutions.jts.geom.GeometryFactory;
import java.io.IOException;
import java.util.*;

protected static int intersections(double dateline, Edge[] edges) {
                    if (Double.compare(p1.x, dateline) == Double.compare(edges[i].next.next.coordinate.x, dateline)) {
                        // Ignore the ear
                        continue;
                    } else if (p2.x == dateline) {
                        // Ignore Linesegment on dateline
                        continue;
                    }
                }
                edges[i].intersection(position);
import org.elasticsearch.test.ElasticsearchTestCase;
import org.junit.Test;

import static org.elasticsearch.test.hamcrest.ElasticsearchGeoAssertions.assertMultiLineString;
import static org.elasticsearch.test.hamcrest.ElasticsearchGeoAssertions.assertMultiPolygon;
/**
 * Tests for {@link ShapeBuilder}
 */
public void testDateline() {

         assertMultiPolygon(shape);
     }
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        <script type="text/javascript">

            // Values from bean
            var diskUsage = JSON.parse('#{superAdminStateBean.diskSpaceUsageStats}');
            var usersStats = JSON.parse('#{superAdminStateBean.usersStats}');
            var docsStats = JSON.parse('#{superAdminStateBean.docsStats}');
            var productsStats = JSON.parse('#{superAdminStateBean.productsStats}');
            var partsStats = JSON.parse('#{superAdminStateBean.partsStats}');

            // Charts
            // ----------------------- DISK USAGE
        <script type="text/javascript">

            // Values from bean
            var diskUsage = JSON.parse('#{adminStateBean.diskSpaceUsageStats}');
            var usersCount = parseInt('#{adminStateBean.usersCount}');
            var documentsCount = parseInt('#{adminStateBean.documentsCount}');
            var productsCount = parseInt('#{adminStateBean.productsCount}');
            var partsCount = parseInt('#{adminStateBean.partsCount}');
            var cod = JSON.parse('#{adminStateBean.checkedOutDocumentsStats}');
            var cop = JSON.parse('#{adminStateBean.checkedOutPartsStats}');
            var usersInWorkspace = JSON.parse('#{adminStateBean.usersInWorkspace}');
            var usersStats = JSON.parse('#{adminStateBean.usersStats}');

            // Charts
            // ----------------------- DISK USAGE
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void parseUTF8FileWithBOM() throws Exception {
    parseFile("UTF8WithBOM.pas", "utf-8");
  }

}
unit ComplexArray;

interface

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
END : 'annis:END';
QUOTE : '"';
NEWLINE : '\n';
COMMENT : '#' ~('\n')+ -> skip;
ID: [a-zA-Z\_\-*?]+;
TXT : (.)+?;

innervalue: ~(QUOTE)+;
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
call_directive ::= TT2_CALL expr [directive_postfix] {pin=1}
get_directive ::= [TT2_GET] expr [directive_postfix]

set_directive ::= [TT2_SET] <<parseSetElement>> + [directive_postfix]
private parse_set_element ::= identifier_expr TT2_ASSIGN !TT2_CLOSE_TAG expr

default_directive ::= TT2_DEFAULT assign_expr + [directive_postfix] {pin=1}

      </ul></li>
      </ul>
     </p>
     <!--<p>Fixes:-->
      <!--<ul>-->
      <!--</ul>-->
     <!--</p>-->
    ]]>
    </change-notes>

public void testTags()
		doTest("tags");
	}

	public void testIssue1262()
	{
		doTest("issue1262");
	}

	public void testChompMarkers()
	{
		doTest("chomp_markers");
public void testMultiDirectiveBlocks()
		doTest("multi_directives_blocks");
	}

}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
private boolean peekClassElement() {
      case SEMI_COLON:
        return true;
      default:
        return false;
    }
  }

private ParseTree parseMethodDeclaration(boolean allowStatic) {
    SourcePosition start = getTreeStartLocation();
    boolean isStatic = allowStatic && eatOpt(TokenType.STATIC) != null;
    boolean isGenerator = eatOpt(TokenType.STAR) != null;
    if (peekId()) {
      IdentifierToken name = eatIdOrKeywordAsId();
      return parseFunctionTail(
          start, name, isStatic, isGenerator,
public void testClass3() {
        "}\n");
  }

  public void testSuper1() {
    mode = LanguageMode.ECMASCRIPT6;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public static Value reflectionRunTest(Value obj, Value name)
						{
							throw e;
						}
						return ClassInterpreter.getInstance().evaluate("Error`throw(\""+e.getMessage().replaceAll("\"", "\\\\\"").replaceAll("\'", "\\\'").replaceAll("\\\\", "\\\\\\\\")+"\")", mainContext);
					}
				}
			}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
package com.petpet.c3po.api;

import java.io.InputStream;
import java.util.List;
import java.util.Map;

/**
 * An interface for a meta data gatherer. The implementing class could be a
 * filesystem gatherer or some specific repository gatherer.
   *          the desired number of records.
   * @return
   */
  List<InputStream> getNext(int count);

}
package com.petpet.c3po.adaptor.fits;

import java.io.IOException;
import java.io.InputStream;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import com.petpet.c3po.adaptor.AbstractAdaptor;
import com.petpet.c3po.common.Constants;
import com.petpet.c3po.datamodel.Element;
import com.petpet.c3po.datamodel.MetadataRecord;

public class FITSAdaptor extends AbstractAdaptor {

  private static final Logger LOG = LoggerFactory.getLogger(FITSAdaptor.class);

  private InputStream metadata;

  private Digester digester;

public Element getElement() {
      DigesterContext context = new DigesterContext(this.getController().getPersistence().getCache(),
          this.getPreProcessingRules());
      this.digester.push(context);
      context = (DigesterContext) this.digester.parse(this.metadata);
      final Element element = this.postProcess(context);

      return element;
public Element getElement() {
      LOG.error("An exception occurred while parsing {}: {}", this.metadata, e.getMessage());
    } finally {
      try {
        this.metadata.close();
      } catch (IOException ioe) {
        LOG.error("An exception occurred while closing {}: {}", this.metadata, ioe.getMessage());
      }
private Element postProcess(DigesterContext context) {

  @Override
  public void run() {
    InputStream next = this.getController().getNext();

    while (next != null) {
      try {
public void run() {
          this.getController().getPersistence().insert(Constants.TBL_ELEMENTS, element.getDocument());

        } else {
          LOG.warn("No element could be extracted for file {}", metadata);
          // potentially move file to some place for further investigation.
        }

      } catch (Exception e) {
        // save thread from dying due to processing error...
        LOG.warn("An exception occurred for file '{}': {}", metadata, e.getMessage());
        // e.printStackTrace();
      }

package com.petpet.c3po.controller;

import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import com.petpet.c3po.api.dao.PersistenceLayer;
import com.petpet.c3po.common.Constants;
import com.petpet.c3po.datamodel.ActionLog;
import com.petpet.c3po.gatherer.FileSystemGatherer;
import com.petpet.c3po.utils.ActionLogHelper;

public PersistenceLayer getPersistence() {
    return this.persistence;
  }

  public synchronized InputStream getNext() {
    List<InputStream> next = this.gatherer.getNext(1);
    InputStream result = null;

    if (!next.isEmpty()) {
      result = next.get(0);
import java.io.FileFilter;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import com.petpet.c3po.api.MetaDataGatherer;
import com.petpet.c3po.common.Constants;

public class FileSystemGatherer implements MetaDataGatherer {

public long getRemaining() {
    return this.remaining;
  }

  public List<InputStream> getNext(int nr) {
    List<InputStream> next = new ArrayList<InputStream>();

    if (nr <= 0) {
      return next;
public long getRemaining() {
      try {
        nr--;
        this.remaining--;
        next.add(new FileInputStream(this.files.get(pointer++)));
      } catch (FileNotFoundException e) {
        LOG.warn("File '{}' not found: {}", this.files.get(this.pointer), e.getMessage());
      }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    Unix {
        @Override
        Function<String, DateTime> getFunction(String format, DateTimeZone timezone, Locale locale) {
            return (date) -> new DateTime((long)(Float.parseFloat(date) * 1000), timezone);
        }
    },
    UnixMs {
public void testParseUnix() {
        assertThat(DateFormat.Unix.getFunction(null, DateTimeZone.UTC, null).apply("1000.5").getMillis(), equalTo(1000500L));
    }

    public void testParseISO8601() {
        assertThat(DateFormat.Iso8601.getFunction(null, DateTimeZone.UTC, null).apply("2001-01-01T00:00:00-0800").getMillis(),
                equalTo(978336000000L));
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import org.neo4j.cypher.internal.compiler.v2_2.helpers.LRUCache
import org.neo4j.cypher.internal.compiler.v2_2.parser.{CypherParser, ParserMonitor}
import org.neo4j.cypher.internal.compiler.v2_2.planner._
import org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.rewriter.LogicalPlanRewriter
import org.neo4j.cypher.internal.compiler.v2_2.planner.logical.{DefaultQueryPlanner, CachedMetricsFactory, SimpleMetricsFactory}
import org.neo4j.cypher.internal.compiler.v2_2.spi.PlanContext
import org.neo4j.cypher.internal.compiler.v2_2.tracing.rewriters.{RewriterStepSequencer, PlainRewriterStepSequencer}
import org.neo4j.graphdb.GraphDatabaseService
import org.neo4j.helpers.Clock

object CypherCompilerFactory {
  }
}

case class CypherCompiler(parser: CypherParser,
                          semanticChecker: SemanticChecker,
                          executionPlanBuilder: ExecutionPlanBuilder,
case class CypherCompiler(parser: CypherParser,
                          cacheMonitor: CypherCacheFlushingMonitor[CacheAccessor[Statement, ExecutionPlan]],
                          monitors: Monitors) {

  def planQuery(queryText: String, context: PlanContext, offset: Option[InputPosition] = None): (ExecutionPlan, Map[String, Any]) =
    planPreparedQuery(prepareQuery(queryText, queryText, offset), context)

  def prepareQuery(preparsedQueryText: String, rawQueryText: String, offset: Option[InputPosition] = None): PreparedQuery = {
    val parsedStatement = parser.parse(preparsedQueryText, offset)

    val mkException = new SyntaxExceptionCreator(rawQueryText, offset)
    val cleanedStatement: Statement = parsedStatement.endoRewrite(inSequence(normalizeReturnClauses(mkException), normalizeWithClauses(mkException)))
    val originalSemanticState = semanticChecker.check(preparsedQueryText, cleanedStatement, mkException)

 */
package org.neo4j.cypher.internal.compiler.v2_2

class SyntaxExceptionCreator(queryText: String, preParserOffset: Option[InputPosition]) extends ((String, InputPosition) => CypherException) {
  override def apply(message: String, position: InputPosition): CypherException = {
    val adjustedPosition = position.withOffset(preParserOffset)
    new SyntaxException(s"$message ($adjustedPosition)", queryText, adjustedPosition.offset)
  }
}
trait Base extends Parser {
    ) memoMismatches) ~~> (_.reduce(_ + '`' + _))
  }

  def parseOrThrow[T](input: String, initialOffset: Option[InputPosition], rule: Rule1[Seq[T]], monitor: Option[ParserMonitor[T]]): T = {
    monitor.foreach(_.startParsing(input))
    val parsingResults = ReportingParseRunner(rule).run(input)
    parsingResults.result match {
trait Base extends Parser {
          }

          val bufferPosition = BufferPosition(error.getInputBuffer, error.getStartIndex)
          val position = bufferPosition.withOffset(initialOffset)
          throw new SyntaxException(s"$message ($position)", input, position.offset)
        }

        throw new ThisShouldNotHappenError("cleishm", "Parsing failed but no parse errors were provided")
class CypherParser(monitor: ParserMonitor[ast.Statement]) extends Parser


  @throws(classOf[SyntaxException])
  def parse(queryText: String, offset: Option[InputPosition] = None): ast.Statement =
    parseOrThrow(queryText, offset, CypherParser.Statements, Some(monitor))
}

object CypherParser extends Parser with Statement with Expressions {
class StatementConvertersTest extends CypherFunSuite with LogicalPlanningTestSup

  def buildPlannerQuery(query: String, cleanStatement: Boolean = true): UnionQuery = {
    val ast = parser.parse(query.replace("\r\n", "\n"))
    val mkException = new SyntaxExceptionCreator(query, Some(pos))
    val cleanedStatement: Statement =
      if (cleanStatement)
        ast.endoRewrite(inSequence(normalizeReturnClauses(mkException), normalizeWithClauses(mkException)))
class ExpandStarTest extends CypherFunSuite with AstConstructionTestSupport {
  }

  private def assertRewrite(originalQuery: String, expectedQuery: String) {
    val mkException = new SyntaxExceptionCreator(originalQuery, Some(pos))
    val original = parser.parse(originalQuery).endoRewrite(inSequence(normalizeReturnClauses(mkException), normalizeWithClauses(mkException)))
    val expected = parser.parse(expectedQuery).endoRewrite(inSequence(normalizeReturnClauses(mkException), normalizeWithClauses(mkException)))

package org.neo4j.cypher.internal.compiler.v2_2.ast.rewriters

import org.neo4j.cypher.internal.commons.CypherFunSuite
import org.neo4j.cypher.internal.compiler.v2_2.planner.{AstRewritingTestSupport, CantHandleQueryException}
import org.neo4j.cypher.internal.compiler.v2_2.{SyntaxExceptionCreator, SemanticState, inSequence}
import org.neo4j.helpers.Platforms

class InlineProjectionsTest extends CypherFunSuite with AstRewritingTestSupport {
class InlineProjectionsTest extends CypherFunSuite with AstRewritingTestSupport

  private def ast(queryText: String) = {
    val parsed = parser.parse(queryText)
    val mkException = new SyntaxExceptionCreator(queryText, Some(pos))
    val normalized = parsed.endoRewrite(inSequence(normalizeReturnClauses(mkException), normalizeWithClauses(mkException)))
    val checkResult = normalized.semanticCheck(SemanticState.clean)
    normalized.endoRewrite(inSequence(expandStar(checkResult.state)))
package org.neo4j.cypher.internal.compiler.v2_2.ast.rewriters

import org.neo4j.cypher.internal.commons.CypherFunSuite
import org.neo4j.cypher.internal.compiler.v2_2.ast.AstConstructionTestSupport
import org.neo4j.cypher.internal.compiler.v2_2.{SyntaxExceptionCreator, inSequence}

class IsolateAggregationTest extends CypherFunSuite with RewriteTest with AstConstructionTestSupport {
  val rewriterUnderTest = isolateAggregation
class IsolateAggregationTest extends CypherFunSuite with RewriteTest with AstCon
  }

  override protected def parseForRewriting(queryText: String) = {
    val mkException = new SyntaxExceptionCreator(queryText, Some(pos))
    super.parseForRewriting(queryText).endoRewrite(inSequence(normalizeReturnClauses(mkException), normalizeWithClauses(mkException)))
  }
}
package org.neo4j.cypher.internal.compiler.v2_2.ast.rewriters

import org.neo4j.cypher.internal.commons.CypherFunSuite
import org.neo4j.cypher.internal.compiler.v2_2._
import org.neo4j.cypher.internal.compiler.v2_2.ast.{AstConstructionTestSupport, ASTAnnotationMap, Identifier, Statement}
import org.neo4j.cypher.internal.compiler.v2_2.helpers.StatementHelper._
import org.neo4j.cypher.internal.compiler.v2_2.parser.ParserFixture.parser
import org.neo4j.cypher.internal.compiler.v2_2.planner.SemanticTable
class NamespacerTest extends CypherFunSuite with AstConstructionTestSupport {

  private def parseAndRewrite(queryText: String): Statement = {
    val parsedAst = parser.parse(queryText)
    val mkException = new SyntaxExceptionCreator(queryText, Some(pos))
    val cleanedAst = parsedAst.endoRewrite(inSequence(normalizeReturnClauses(mkException), normalizeWithClauses(mkException)))
    val (rewrittenAst, _, _) = astRewriter.rewrite(queryText, cleanedAst, cleanedAst.semanticState)
    rewrittenAst
package org.neo4j.cypher.internal.compiler.v2_2.ast.rewriters
import org.neo4j.cypher.internal.commons.CypherFunSuite
import org.neo4j.cypher.internal.compiler.v2_2._
import org.neo4j.cypher.internal.compiler.v2_2.ast._
import org.neo4j.cypher.internal.compiler.v2_2.symbols._

class NormalizeReturnClausesTest extends CypherFunSuite with RewriteTest with AstConstructionTestSupport {
  val mkException = new SyntaxExceptionCreator("<Query>", Some(pos))
  val rewriterUnderTest: Rewriter = normalizeReturnClauses(mkException)

  test("alias RETURN clause items") {
import org.neo4j.cypher.internal.compiler.v2_2._
import org.neo4j.cypher.internal.compiler.v2_2.ast.AstConstructionTestSupport

class NormalizeWithClausesTest extends CypherFunSuite with RewriteTest with AstConstructionTestSupport {
  val mkException = new SyntaxExceptionCreator("<Query>", Some(pos))
  val rewriterUnderTest: Rewriter = normalizeWithClauses(mkException)

  test("ensure identifiers are aliased") {
class ProjectFreshSortExpressionsTest extends CypherFunSuite with RewriteTest wi

  private def ast(queryText: String) = {
    val parsed = parseForRewriting(queryText)
    val mkException = new SyntaxExceptionCreator(queryText, Some(pos))
    val normalized = parsed.endoRewrite(inSequence(normalizeReturnClauses(mkException), normalizeWithClauses(mkException)))
    val checkResult = normalized.semanticCheck(SemanticState.clean)
    normalized.endoRewrite(inSequence(expandStar(checkResult.state)))
package org.neo4j.cypher.internal.compiler.v2_2.ast.rewriters
import org.neo4j.cypher.internal.commons.CypherFunSuite
import org.neo4j.cypher.internal.compiler.v2_2.ast._
import org.neo4j.cypher.internal.compiler.v2_2.planner.AstRewritingTestSupport
import org.neo4j.cypher.internal.compiler.v2_2.{SemanticState, SyntaxExceptionCreator, inSequence}
import org.neo4j.graphdb.Direction

class ProjectNamedPathsTest extends CypherFunSuite with AstRewritingTestSupport {
class ProjectNamedPathsTest extends CypherFunSuite with AstRewritingTestSupport

  private def ast(queryText: String) = {
    val parsed = parser.parse(queryText)
    val mkException = new SyntaxExceptionCreator(queryText, Some(pos))
    val normalized = parsed.endoRewrite(inSequence(normalizeReturnClauses(mkException), normalizeWithClauses(mkException)))
    val checkResult = normalized.semanticCheck(SemanticState.clean)
    normalized.endoRewrite(inSequence(expandStar(checkResult.state)))
trait RewriteTest {
  protected def assertRewrite(originalQuery: String, expectedQuery: String) {
    val original = parseForRewriting(originalQuery)
    val expected = parseForRewriting(expectedQuery)
    val mkException = new SyntaxExceptionCreator(originalQuery, Some(DummyPosition(0)))
    semanticChecker.check(originalQuery, original, mkException)

    val result = rewrite(original)
import org.neo4j.cypher.internal.compiler.v2_2.parser.{CypherParser, ParserMonit
import org.neo4j.cypher.internal.compiler.v2_2.planner.execution.PipeExecutionBuilderContext
import org.neo4j.cypher.internal.compiler.v2_2.planner.logical.Metrics._
import org.neo4j.cypher.internal.compiler.v2_2.planner.logical._
import org.neo4j.cypher.internal.compiler.v2_2.planner.logical.greedy.{GreedyPlanTable, expandsOrJoins, expandsOnly, GreedyQueryGraphSolver}
import org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans._
import org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.rewriter.LogicalPlanRewriter
import org.neo4j.cypher.internal.compiler.v2_2.planner.logical.steps.LogicalPlanProducer
import org.neo4j.cypher.internal.compiler.v2_2.spi.{GraphStatistics, PlanContext}
import org.neo4j.cypher.internal.compiler.v2_2.tracing.rewriters.{ValidatingRewriterStepSequencer, RewriterStepSequencer}
import org.neo4j.graphdb.Direction
import org.neo4j.helpers.Clock

trait LogicalPlanningTestSupport extends CypherTestSupport with AstConstructionT

  def produceLogicalPlan(queryText: String)(implicit planner: CostBasedPipeBuilder, planContext: PlanContext): LogicalPlan = {
    val parsedStatement = parser.parse(queryText)
    val mkException = new SyntaxExceptionCreator(queryText, Some(pos))
    val semanticState = semanticChecker.check(queryText, parsedStatement, mkException)
    val (rewrittenStatement, _, postConditions) = astRewriter.rewrite(queryText, parsedStatement, semanticState)
    CostBasedPipeBuilder.rewriteStatement(rewrittenStatement, semanticState.scopeTree, SemanticTable(types = semanticState.typeTable), rewriterSequencer, semanticChecker, postConditions, monitors.newMonitor[AstRewritingMonitor]()) match {
trait LogicalPlanningTestSupport2 extends CypherTestSupport with AstConstruction

    def planFor(queryString: String): SemanticPlan = {
      val parsedStatement = parser.parse(queryString)
      val mkException = new SyntaxExceptionCreator(queryString, Some(pos))
      val cleanedStatement: Statement = parsedStatement.endoRewrite(inSequence(normalizeReturnClauses(mkException), normalizeWithClauses(mkException)))
      val semanticState = semanticChecker.check(queryString, cleanedStatement, mkException)
      val (rewrittenStatement, _, postConditions) = astRewriter.rewrite(queryString, cleanedStatement, semanticState)
trait LogicalPlanningTestSupport2 extends CypherTestSupport with AstConstruction

    def getLogicalPlanFor(queryString: String): (LogicalPlan, SemanticTable) = {
      val parsedStatement = parser.parse(queryString)
      val mkException = new SyntaxExceptionCreator(queryString, Some(pos))
      val semanticState = semanticChecker.check(queryString, parsedStatement, mkException)
      val (rewrittenStatement, _, postConditions) = astRewriter.rewrite(queryString, parsedStatement, semanticState)

trait QueryGraphProducer extends MockitoSugar {
  def producePlannerQueryForPattern(query: String): (PlannerQuery, SemanticTable) = {
    val q = query + " RETURN 1 AS Result"
    val ast = parser.parse(q)
    val mkException = new SyntaxExceptionCreator(query, Some(pos))
    val semanticChecker = new SemanticChecker(mock[SemanticCheckMonitor])
    val cleanedStatement: Statement = ast.endoRewrite(inSequence(normalizeReturnClauses(mkException), normalizeWithClauses(mkException)))
    val semanticState = semanticChecker.check(query, cleanedStatement, mkException)
trait CompatibilityFor2_2 {
  implicit val indexSearchMonitor = kernelMonitors.newMonitor(classOf[IndexSearchMonitor])

  def produceParsedQuery(statementAsText: String, rawStatement: String, offset: InputPosition) = new ParsedQuery {
    val preparedQueryForV_2_2 = Try(compiler.prepareQuery(statementAsText, rawStatement, Some(offset)))

    def isPeriodicCommit = preparedQueryForV_2_2.map(_.isPeriodicCommit).getOrElse(false)

package org.neo4j.cypher

import org.neo4j.graphdb.QueryExecutionException
import collection.JavaConverters._

class SemanticErrorAcceptanceTest extends ExecutionEngineFunSuite {

class SemanticErrorAcceptanceTest extends ExecutionEngineFunSuite {

  }

  def executeAndEnsureError(query: String, expected: String) {
    import org.neo4j.cypher.internal.compiler.v2_2.commands.expressions.StringHelper._

class CypherCompilerPerformanceTest extends GraphDatabaseFunSuite {

  def plan(query: String): (Double, Double) = {
    val compiler = createCurrentCompiler
    val (prepareTime, preparedQuery) = measure(compiler.prepareQuery(query, query))
    val (planTime, _) = graph.inTx {
      measure(compiler.executionPlanBuilder.build(planContext, preparedQuery))
    }
package org.neo4j.cypher.internal.compiler.v2_2

import org.neo4j.cypher.GraphDatabaseTestSupport
import org.neo4j.cypher.internal.commons.CypherFunSuite
import org.neo4j.cypher.internal.compatibility.{WrappedMonitors, StringInfoLogger}
import org.neo4j.cypher.internal.compiler.v2_2.executionplan.ExecutionPlan
import org.neo4j.cypher.internal.compiler.v2_2.tracing.rewriters.RewriterStepSequencer
import org.neo4j.graphdb.factory.GraphDatabaseSettings
import org.neo4j.helpers.{Clock, FrozenClock}
import org.neo4j.kernel.impl.util.StringLogger.DEV_NULL
import org.neo4j.kernel.impl.util.TestLogger.LogCall
import org.neo4j.kernel.impl.util.{StringLogger, TestLogger}
import org.neo4j.cypher.internal.compiler.v2_2.ast.Statement

import scala.collection.Map

class CypherCompilerAstCacheAcceptanceTest extends CypherFunSuite with GraphData
    val compiler = createCompiler(queryPlanTTL = 0, clock = clock, logger = logger)
    compiler.monitors.addMonitorListener(counter)
    val query: String = "match (n:Person:Dog) return n"
    val statement = compiler.prepareQuery(query, query).statement

    createLabeledNode("Dog")
    (0 until 50).foreach { _ => createLabeledNode("Person") }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import org.lisoft.lsml.model.item.Internal;
import org.lisoft.lsml.model.item.Item;
import org.lisoft.lsml.model.item.Weapon;
import org.lisoft.lsml.model.loadout.EquipException;
import org.lisoft.lsml.model.loadout.EquipResult;
import org.lisoft.lsml.model.loadout.Loadout;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponent;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponentOmniMech;
import org.lisoft.lsml.util.CommandStack.Command;

/**
import org.lisoft.lsml.model.item.HeatSink;
import org.lisoft.lsml.model.item.Internal;
import org.lisoft.lsml.model.item.Item;
import org.lisoft.lsml.model.loadout.DefaultLoadoutFactory;
import org.lisoft.lsml.model.loadout.EquipException;
import org.lisoft.lsml.model.loadout.EquipResult;
import org.lisoft.lsml.model.loadout.EquipResult.EquipResultType;
import org.lisoft.lsml.model.loadout.Loadout;
import org.lisoft.lsml.model.loadout.LoadoutStandard;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponent;
import org.lisoft.lsml.util.CommandStack;
import org.lisoft.lsml.util.CommandStack.Command;

import org.lisoft.lsml.model.chassi.Location;
import org.lisoft.lsml.model.item.Engine;
import org.lisoft.lsml.model.item.HeatSink;
import org.lisoft.lsml.model.loadout.EquipException;
import org.lisoft.lsml.model.loadout.LoadoutStandard;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponentStandard;
import org.lisoft.lsml.util.CommandStack.CompositeCommand;

/**
import org.lisoft.lsml.model.chassi.ArmourSide;
import org.lisoft.lsml.model.chassi.Location;
import org.lisoft.lsml.model.item.EngineType;
import org.lisoft.lsml.model.loadout.Loadout;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponent;
import org.lisoft.lsml.model.upgrades.ArmourUpgrade;
import org.lisoft.lsml.util.CommandStack.Command;
import org.lisoft.lsml.util.CommandStack.CompositeCommand;
import org.lisoft.lsml.model.item.EngineType;
import org.lisoft.lsml.model.item.Internal;
import org.lisoft.lsml.model.item.Item;
import org.lisoft.lsml.model.loadout.Loadout;
import org.lisoft.lsml.model.loadout.LoadoutStandard;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponent;
import org.lisoft.lsml.util.CommandStack.Command;

/**
import org.lisoft.lsml.model.datacache.OmniPodDB;
import org.lisoft.lsml.model.datacache.StockLoadoutDB;
import org.lisoft.lsml.model.item.Item;
import org.lisoft.lsml.model.loadout.EquipException;
import org.lisoft.lsml.model.loadout.EquipResult;
import org.lisoft.lsml.model.loadout.Loadout;
import org.lisoft.lsml.model.loadout.LoadoutOmniMech;
import org.lisoft.lsml.model.loadout.LoadoutStandard;
import org.lisoft.lsml.model.loadout.StockLoadout;
import org.lisoft.lsml.model.loadout.StockLoadout.StockComponent.ActuatorState;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponent;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponentOmniMech;

/**
 * This operation loads a 'mechs stock {@link LoadoutStandard}.
public void buildCommand() throws EquipException {

            if (loadout instanceof LoadoutOmniMech) {
                final LoadoutOmniMech loadoutOmniMech = (LoadoutOmniMech) loadout;

                final OmniPod omnipod;
                if (stockComponent.getOmniPod() != null) {
                    omnipod = OmniPodDB.lookup(stockComponent.getOmniPod());
                }
                else {
                    omnipod = OmniPodDB.lookupOriginal(loadoutOmniMech.getChassis(), location);
                }

                final ConfiguredComponentOmniMech omniComponent = loadoutOmniMech.getComponent(location);

                addOp(new CmdSetOmniPod(messageBuffer, loadoutOmniMech, omniComponent, omnipod));

                final ActuatorState actuatorState = stockComponent.getActuatorState();
                if (actuatorState != null) {
import org.lisoft.lsml.model.item.HeatSink;
import org.lisoft.lsml.model.item.Internal;
import org.lisoft.lsml.model.item.Item;
import org.lisoft.lsml.model.loadout.Loadout;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponent;
import org.lisoft.lsml.util.CommandStack.Command;

/**
import org.lisoft.lsml.model.item.Ammunition;
import org.lisoft.lsml.model.item.Item;
import org.lisoft.lsml.model.item.Weapon;
import org.lisoft.lsml.model.loadout.EquipException;
import org.lisoft.lsml.model.loadout.Loadout;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponent;
import org.lisoft.lsml.util.CommandStack.Command;
import org.lisoft.lsml.util.CommandStack.CompositeCommand;

import org.lisoft.lsml.messages.MessageDelivery;
import org.lisoft.lsml.messages.MessageXBar;
import org.lisoft.lsml.model.chassi.ArmourSide;
import org.lisoft.lsml.model.loadout.EquipException;
import org.lisoft.lsml.model.loadout.EquipResult;
import org.lisoft.lsml.model.loadout.EquipResult.EquipResultType;
import org.lisoft.lsml.model.loadout.Loadout;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponent;
import org.lisoft.lsml.util.CommandStack.Command;

/**
import org.lisoft.lsml.messages.MessageXBar;
import org.lisoft.lsml.model.chassi.ArmourSide;
import org.lisoft.lsml.model.chassi.Location;
import org.lisoft.lsml.model.loadout.Loadout;
import org.lisoft.lsml.model.loadout.LoadoutStandard;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponent;
import org.lisoft.lsml.util.CommandStack.Command;
import org.lisoft.lsml.util.CommandStack.CompositeCommand;

import org.lisoft.lsml.model.item.Ammunition;
import org.lisoft.lsml.model.item.Item;
import org.lisoft.lsml.model.item.MissileWeapon;
import org.lisoft.lsml.model.loadout.EquipException;
import org.lisoft.lsml.model.loadout.EquipResult;
import org.lisoft.lsml.model.loadout.EquipResult.EquipResultType;
import org.lisoft.lsml.model.loadout.Loadout;
import org.lisoft.lsml.model.loadout.LoadoutStandard;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponent;
import org.lisoft.lsml.model.upgrades.GuidanceUpgrade;
import org.lisoft.lsml.model.upgrades.Upgrades;
import org.lisoft.lsml.model.upgrades.UpgradesMutable;
import org.lisoft.lsml.messages.UpgradesMessage.ChangeMsg;
import org.lisoft.lsml.model.item.HeatSink;
import org.lisoft.lsml.model.item.Item;
import org.lisoft.lsml.model.loadout.EquipException;
import org.lisoft.lsml.model.loadout.LoadoutStandard;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponent;
import org.lisoft.lsml.model.upgrades.HeatSinkUpgrade;
import org.lisoft.lsml.model.upgrades.UpgradesMutable;
import org.lisoft.lsml.util.CommandStack.Command;

import org.lisoft.lsml.messages.MessageDelivery;
import org.lisoft.lsml.model.chassi.ArmourSide;
import org.lisoft.lsml.model.loadout.Loadout;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponent;

/**
 * This operation sets the maximum amount of armour possible on a mech with a given ratio between front and back.
import org.lisoft.lsml.model.chassi.OmniPod;
import org.lisoft.lsml.model.item.Item;
import org.lisoft.lsml.model.item.JumpJet;
import org.lisoft.lsml.model.loadout.EquipException;
import org.lisoft.lsml.model.loadout.LoadoutOmniMech;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponent;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponentOmniMech;
import org.lisoft.lsml.util.CommandStack;
import org.lisoft.lsml.util.CommandStack.Command;
import org.lisoft.lsml.util.CommandStack.CompositeCommand;

import org.lisoft.lsml.messages.MessageDelivery;
import org.lisoft.lsml.model.chassi.ArmourSide;
import org.lisoft.lsml.model.loadout.Loadout;
import org.lisoft.lsml.model.loadout.LoadoutStandard;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponent;
import org.lisoft.lsml.util.CommandStack.CompositeCommand;

/**
import org.lisoft.lsml.model.item.HeatSink;
import org.lisoft.lsml.model.item.Internal;
import org.lisoft.lsml.model.item.Item;
import org.lisoft.lsml.model.loadout.EquipException;
import org.lisoft.lsml.model.loadout.Loadout;
import org.lisoft.lsml.model.loadout.LoadoutStandard;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponent;
import org.lisoft.lsml.util.CommandStack.CompositeCommand;

/**
import org.lisoft.lsml.messages.MessageDelivery;
import org.lisoft.lsml.model.datacache.ItemDB;
import org.lisoft.lsml.model.item.Item;
import org.lisoft.lsml.model.loadout.EquipException;
import org.lisoft.lsml.model.loadout.EquipResult;
import org.lisoft.lsml.model.loadout.EquipResult.EquipResultType;
import org.lisoft.lsml.model.loadout.Loadout;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponentOmniMech;
import org.lisoft.lsml.util.CommandStack.Command;

/**
package org.lisoft.lsml.command;

import org.lisoft.lsml.messages.MessageDelivery;
import org.lisoft.lsml.model.loadout.EquipResult;
import org.lisoft.lsml.model.loadout.EquipResult.EquipResultType;
import org.lisoft.lsml.model.loadout.Loadout;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponent;
import org.lisoft.lsml.model.upgrades.UpgradesMutable;
import org.lisoft.lsml.util.CommandStack.Command;

//@formatter:on
package org.lisoft.lsml.messages;

import org.lisoft.lsml.model.loadout.Loadout;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponent;

public class ArmourMessage implements Message {
    public enum Type {
package org.lisoft.lsml.messages;

import org.lisoft.lsml.model.item.Item;
import org.lisoft.lsml.model.loadout.Loadout;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponent;

/**
 * This message is sent when an item is added to or removed from the loadout.
//@formatter:on
package org.lisoft.lsml.messages;

import org.lisoft.lsml.model.loadout.Loadout;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponent;

public class OmniPodMessage implements Message {
    public final ConfiguredComponent component;
package org.lisoft.lsml.model;

import org.lisoft.lsml.model.chassi.Location;
import org.lisoft.lsml.model.loadout.Loadout;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponent;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponentOmniMech;

/**
 * This class handles distribution of dynamic slots from Ferro Fibrous armour and Endo Steel internal structure.
else if (aLoadout instanceof LoadoutOmniMech) {
                    return false;

                for (Entry<Location, OmniPod> entry : pods.get().entrySet()) {
                    loadoutOmniMech.getComponent(entry.getKey()).setOmniPod(entry.getValue());
                }

                return true;
package org.lisoft.lsml.model.chassi;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import org.lisoft.lsml.model.datacache.OmniPodDB;
import org.lisoft.lsml.model.item.Engine;
public MovementProfile getMovementProfileMin() {
     * @return The set of {@link Modifier} for the stock selection of {@link OmniPod}s.
     */
    public Collection<Modifier> getStockModifiers() {
        final List<Modifier> ans = new ArrayList<>();
        for (final Location location : Location.values()) {
            final OmniPod omniPod = OmniPodDB.lookupOriginal(this, location);
            ans.addAll(omniPod.getQuirks());
        }
        return ans;
    }

    @Override
public boolean isAllowed(Item aItem) {

        for (final Location location : Location.values()) {
            final List<Collection<Modifier>> group = new ArrayList<>();

            if (getComponent(location).hasFixedOmniPod()) {
                group.add(OmniPodDB.lookupOriginal(this, location).getQuirks());
            }
            else {
                for (final OmniPod omniPod : OmniPodDB.lookup(this, location)) {
public boolean isCompatible(ChassisOmniMech aChassis) {
        return aChassis.getSeriesName().toUpperCase().equals(series);
    }

    /**
     * Tests if this {@link OmniPod} is the stock/original {@link OmniPod} on a given {@link Chassis}.
     *
     * @param aChassisBase
     *            The {@link Chassis} to test.
     * @return <code>true</code> if this {@link OmniPod} is original on the given {@link Chassis}.
     */
    public boolean isOriginalForChassis(Chassis aChassisBase) {
        // Handle variations without a proper variation tag for now.
        final String name = aChassisBase.getMwoName().toUpperCase();
        return chassis.equals(name) || chassis.equals(name.substring(0, name.length() - 1));
    }

    @Override
    public String toString() {
        return getChassisName();

/**
 * Determines {@link OmniPod}s for a {@link LoadoutOmniMech} so that the given requirements on hard points is met.
 * 
 * @author Emily Björk
 */
public class OmniPodSelector {

        /**
         * Creates a root partial selection to start searching for. Also defines the constraints.
         * 
         * @param aAllowedPods
         *            The pods that are allowed to be selected (preferably (but not necessarily) pruned from pods that
         *            do not affect the constraints).
private PartialSelection(PartialSelection aPrevious, int aLocation, int aPod) {
            allowedPods = aPrevious.allowedPods;

            currentState = new HashMap<>(aPrevious.currentState);
            Location key = LOCATION_ORDER[location];
            if (aPrevious.location == location) {
                // Change pod
                OmniPod oldPod = currentState.get(key);
                OmniPod newPod = allowedPods.get(key).get(pod);
                remainingEnergy = aPrevious.remainingEnergy - newPod.getHardPointCount(HardPointType.ENERGY)
                        + oldPod.getHardPointCount(HardPointType.ENERGY);
                remainingMissile = aPrevious.remainingMissile - newPod.getHardPointCount(HardPointType.MISSILE)
private PartialSelection(PartialSelection aPrevious, int aLocation, int aPod) {
            }
            else {
                // Add new pod
                OmniPod newPod = allowedPods.get(key).get(pod);
                remainingEnergy = aPrevious.remainingEnergy - newPod.getHardPointCount(HardPointType.ENERGY);
                remainingMissile = aPrevious.remainingMissile - newPod.getHardPointCount(HardPointType.MISSILE);
                remainingBallistic = aPrevious.remainingBallistic - newPod.getHardPointCount(HardPointType.BALLISTIC);
private PartialSelection(PartialSelection aPrevious, int aLocation, int aPod) {
        }

        @Override
        public boolean reject() {
            int maxPossibleEnergy = 0;
            int maxPossibleMissile = 0;
public boolean reject() {
            int maxPossibleEcm = 0;

            for (int remLoc = location + 1; remLoc < LOCATION_ORDER.length; ++remLoc) {
                List<OmniPod> allowed = allowedPods.get(LOCATION_ORDER[remLoc]);
                int localMaxPossibleEnergy = 0;
                int localMaxPossibleMissile = 0;
                int localMaxPossibleBallistic = 0;
                int localMaxPossibleJumpJet = 0;
                int localMaxPossibleEcm = 0;

                for (OmniPod omniPod : allowed) {
                    localMaxPossibleBallistic = max(localMaxPossibleBallistic,
                            omniPod.getHardPointCount(HardPointType.BALLISTIC));
                    localMaxPossibleEnergy = max(localMaxPossibleEnergy,
public boolean reject() {
                    maxPossibleJumpJet < remainingJumpJet || //
                    maxPossibleEcm < remainingECM;
        }

        @Override
        public boolean accept() {
            return remainingBallistic <= 0 && //
                    remainingMissile <= 0 && //
                    remainingEnergy <= 0 && //
                    remainingJumpJet <= 0 && //
                    remainingECM <= 0;
        }

        @Override
        public Optional<PartialSelection> first() {
            int newLocation = location;
            int newPod = 0;
            List<OmniPod> allowed = null;
            do {
                newLocation = newLocation + 1;
                if (newLocation >= LOCATION_ORDER.length) {
                    return Optional.empty();
                }
                allowed = allowedPods.get(LOCATION_ORDER[newLocation]);
            } while (allowed.isEmpty());
            return Optional.of(new PartialSelection(this, newLocation, newPod));
        }

        @Override
        public Optional<PartialSelection> next() {
            List<OmniPod> allowed = allowedPods.get(LOCATION_ORDER[location]);
            int newPod = pod + 1;
            if (newPod < allowed.size()) {
                return Optional.of(new PartialSelection(this, location, newPod));
            }
            return Optional.empty();
        }
    }

    private final BackTrackingSolver<PartialSelection> solver = new BackTrackingSolver<>();

    public Optional<Map<Location, OmniPod>> selectPods(ChassisOmniMech aChassis, int aWantedEnergy, int aWantedMissile,
            int aWantedBallistic, int aWantedJumpJet, boolean aWantEcm) {

        Map<Location, List<OmniPod>> allowedPods = new HashMap<>();
        for (Location location : Location.values()) {
            allowedPods.put(location, OmniPodDB.lookup(aChassis, location));
        }

        // Discount hard points in the CT
        OmniPod ct = OmniPodDB.lookupOriginal(aChassis, Location.CenterTorso);
        int energy = aWantedEnergy - ct.getHardPointCount(HardPointType.ENERGY);
        int missile = aWantedMissile - ct.getHardPointCount(HardPointType.MISSILE);
        int ballistic = aWantedBallistic - ct.getHardPointCount(HardPointType.BALLISTIC);
        int jumpJet = aWantedJumpJet - aChassis.getFixedJumpJets();
        boolean ecm = ct.getHardPointCount(HardPointType.ECM) > 0 ? false : aWantEcm;

        PartialSelection root = new PartialSelection(allowedPods, energy, missile, ballistic, jumpJet, ecm);
        Optional<PartialSelection> ans = solver.solveOne(root);
        if (ans.isPresent()) {
            return Optional.of(ans.get().currentState);
        }
else if (moduleID == 4048) { // ENHANCED NARC - LTD (Clan Only)
                        items.addAll(stockComponent.getItems());
                        armourFront = isRear ? stockComponent.getArmourFront() : armourFront;
                        armourBack = isRear ? armourBack : stockComponent.getArmourBack();
                        omniPod = stockComponent.getOmniPod();
                        it.remove();
                        break;
                    }
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

import org.lisoft.lsml.model.chassi.ChassisOmniMech;
import org.lisoft.lsml.model.chassi.Location;
import org.lisoft.lsml.model.chassi.OmniPod;

/**
 * This class acts as a database for all {@link OmniPod}s.
    private static final Map<String, List<OmniPod>> series2pod;
    private static final Map<Integer, OmniPod> id2pod;

    /**
     * A decision has been made to rely on static initializers for *DB classes. The motivation is that all items are
     * immutable, and this is the only way that allows providing global item constants such as ItemDB.AMS.
        id2pod = new TreeMap<>();

        for (final OmniPod omniPod : dataCache.getOmniPods()) {

            final String series = omniPod.getChassisSeries();

            List<OmniPod> list = series2pod.get(canonize(series));

            id2pod.put(omniPod.getMwoId(), omniPod);
        }
    }

    /**
public static OmniPod lookup(int aId) {
        return ans;
    }

    /**
     * @param aChassis
     *            The chassis to get the pods for.
     * @return A {@List} of the {@link OmniPod}s that are "original" to the given chassis.
     */
    public static List<OmniPod> lookupOriginal(ChassisOmniMech aChassis) {
        final List<OmniPod> ans = new ArrayList<>();
        for (final Location location : Location.values()) {
            ans.add(OmniPodDB.lookupOriginal(aChassis, location));
        }
        return ans;
    }

    /**
     * @param aChassis
     *            The chassis to get the pod for.
     * @param aLocation
     *            The location to get the pod for.
     * @return The {@link OmniPod}s that is "original" to the given chassis and {@link Location}.
     */
    public static OmniPod lookupOriginal(ChassisOmniMech aChassis, Location aLocation) {
        for (final OmniPod omniPod : lookup(aChassis.getSeriesName(), aLocation)) {
            if (omniPod.isOriginalForChassis(aChassis)) {
                return omniPod;
            }
        }
        throw new IllegalArgumentException("There exists no original omnipod for " + aChassis + " at " + aLocation);
    }

    private static String canonize(String aKey) {
        return aKey.toUpperCase();
    }
}
package org.lisoft.lsml.model.datacache;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;


/**
 * A database class that holds descriptions of all stock loadouts.
 * 
 * @author Emily Björk
 */
public class StockLoadoutDB {
    private static final Map<Chassis, StockLoadout> stockloadouts;

    /**
     * Will find the stock loadout matching the given {@link ChassisStandard}.
     * 
     * @param aChassis
     *            The {@link ChassisStandard} to get the stock loadout for.
     * @return A {@link StockLoadout} description of the stock loadout.
     */
    public static StockLoadout lookup(Chassis aChassis) {
        StockLoadout ans = stockloadouts.get(aChassis);
        if (null == ans) {
            throw new IllegalArgumentException("No stock loadouts found for: " + aChassis);
        }
        return ans;
    }

    /**
     * A decision has been made to rely on static initializers for *DB classes. The motivation is that all items are
     * immutable, and this is the only way that allows providing global item constans such as ItemDB.AMS.
     */
public static StockLoadout lookup(Chassis aChassis) {
        try {
            dataCache = DataCache.getInstance();
        }
        catch (IOException e) {
            throw new RuntimeException(e); // Promote to unchecked. This is a critical failure.
        }

        stockloadouts = new HashMap<>();
        for (StockLoadout loadout : dataCache.getStockLoadouts()) {
            stockloadouts.put(loadout.getChassis(), loadout);
        }
    }
}
import org.lisoft.lsml.model.export.garage.CompatibilityHelper;
import org.lisoft.lsml.model.item.HeatSink;
import org.lisoft.lsml.model.item.Item;
import org.lisoft.lsml.model.loadout.DefaultLoadoutFactory;
import org.lisoft.lsml.model.loadout.Loadout;
import org.lisoft.lsml.model.loadout.LoadoutStandard;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponentStandard;
import org.lisoft.lsml.model.modifiers.MechEfficiencyType;
import org.lisoft.lsml.model.upgrades.ArmourUpgrade;
import org.lisoft.lsml.model.upgrades.GuidanceUpgrade;
import org.lisoft.lsml.model.datacache.UpgradeDB;
import org.lisoft.lsml.model.item.HeatSink;
import org.lisoft.lsml.model.item.Item;
import org.lisoft.lsml.model.loadout.DefaultLoadoutFactory;
import org.lisoft.lsml.model.loadout.Loadout;
import org.lisoft.lsml.model.loadout.LoadoutStandard;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponentStandard;
import org.lisoft.lsml.model.modifiers.MechEfficiencyType;
import org.lisoft.lsml.model.upgrades.ArmourUpgrade;
import org.lisoft.lsml.model.upgrades.GuidanceUpgrade;
import org.lisoft.lsml.model.item.Internal;
import org.lisoft.lsml.model.item.Item;
import org.lisoft.lsml.model.item.PilotModule;
import org.lisoft.lsml.model.loadout.DefaultLoadoutFactory;
import org.lisoft.lsml.model.loadout.Loadout;
import org.lisoft.lsml.model.loadout.LoadoutBuilder;
import org.lisoft.lsml.model.loadout.LoadoutBuilder.ErrorReportingCallback;
import org.lisoft.lsml.model.loadout.LoadoutOmniMech;
import org.lisoft.lsml.model.loadout.LoadoutStandard;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponent;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponentOmniMech;
import org.lisoft.lsml.model.upgrades.ArmourUpgrade;
import org.lisoft.lsml.model.upgrades.GuidanceUpgrade;
import org.lisoft.lsml.model.upgrades.HeatSinkUpgrade;
import org.lisoft.lsml.model.item.Internal;
import org.lisoft.lsml.model.item.Item;
import org.lisoft.lsml.model.item.Weapon;
import org.lisoft.lsml.model.loadout.Loadout;
import org.lisoft.lsml.model.loadout.LoadoutOmniMech;
import org.lisoft.lsml.model.loadout.LoadoutStandard;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponent;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponentOmniMech;
import org.lisoft.lsml.model.upgrades.Upgrade;
import org.lisoft.lsml.model.upgrades.Upgrades;

import org.lisoft.lsml.model.datacache.OmniPodDB;
import org.lisoft.lsml.model.item.Internal;
import org.lisoft.lsml.model.item.Item;
import org.lisoft.lsml.model.loadout.Loadout;
import org.lisoft.lsml.model.loadout.LoadoutBuilder;
import org.lisoft.lsml.model.loadout.LoadoutOmniMech;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponent;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponentOmniMech;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponentStandard;

import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.converters.MarshallingContext;
private void parseV2(HierarchicalStreamReader aReader, UnmarshallingContext aCon
            LoadoutOmniMech omniMech = ((LoadoutOmniMech) loadout);
            if (!omniMech.getComponent(partType).getInternalComponent().hasFixedOmniPod()) {
                OmniPod omnipod = OmniPodDB.lookup(Integer.parseInt(aReader.getAttribute("omnipod")));
                omniMech.getComponent(partType).setOmniPod(omnipod);
            }
        }

import org.lisoft.lsml.model.datacache.ChassisDB;
import org.lisoft.lsml.model.datacache.UpgradeDB;
import org.lisoft.lsml.model.item.PilotModule;
import org.lisoft.lsml.model.loadout.DefaultLoadoutFactory;
import org.lisoft.lsml.model.loadout.Loadout;
import org.lisoft.lsml.model.loadout.LoadoutBuilder;
import org.lisoft.lsml.model.loadout.LoadoutBuilder.ErrorReportingCallback;
import org.lisoft.lsml.model.loadout.LoadoutOmniMech;
import org.lisoft.lsml.model.loadout.LoadoutStandard;
import org.lisoft.lsml.model.loadout.WeaponGroups;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponent;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponentStandard;
import org.lisoft.lsml.model.modifiers.Efficiencies;
import org.lisoft.lsml.model.upgrades.GuidanceUpgrade;
import org.lisoft.lsml.model.upgrades.Upgrades;
import org.lisoft.lsml.model.export.garage.UpgradesConverter;
import org.lisoft.lsml.model.item.Item;
import org.lisoft.lsml.model.loadout.LoadoutBuilder.ErrorReportingCallback;
import org.lisoft.lsml.model.loadout.LoadoutOmniMech;
import org.lisoft.lsml.model.loadout.LoadoutStandard;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponentStandard;

import com.thoughtworks.xstream.XStream;

import org.lisoft.lsml.model.chassi.HardPointType;
import org.lisoft.lsml.model.chassi.Location;
import org.lisoft.lsml.model.datacache.ModifiersDB;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponent;
import org.lisoft.lsml.model.modifiers.Attribute;
import org.lisoft.lsml.model.modifiers.Modifier;

 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
//@formatter:on
package org.lisoft.lsml.model.loadout.component;

import java.util.ArrayList;
import java.util.Collection;
import org.lisoft.lsml.model.item.HeatSink;
import org.lisoft.lsml.model.item.Internal;
import org.lisoft.lsml.model.item.Item;
import org.lisoft.lsml.model.loadout.EquipResult;
import org.lisoft.lsml.model.loadout.EquipResult.EquipResultType;
import org.lisoft.lsml.model.loadout.Loadout;
import org.lisoft.lsml.model.loadout.LoadoutStandard;
import org.lisoft.lsml.model.modifiers.Attribute;
import org.lisoft.lsml.model.modifiers.Modifier;
import org.lisoft.lsml.model.modifiers.ModifierDescription;
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
//@formatter:on
package org.lisoft.lsml.model.loadout.component;

import java.util.ArrayList;
import java.util.Collection;
import org.lisoft.lsml.model.item.HeatSink;
import org.lisoft.lsml.model.item.Item;
import org.lisoft.lsml.model.item.Weapon;
import org.lisoft.lsml.model.loadout.EquipResult;
import org.lisoft.lsml.model.loadout.EquipResult.EquipResultType;
import org.lisoft.lsml.model.loadout.LoadoutOmniMech;

/**
 * This class models a configured {@link OmniPod} on an {@link LoadoutOmniMech}.
 * 
 * @author Emily Björk
 */
public class ConfiguredComponentOmniMech extends ConfiguredComponent {
    private OmniPod omniPod;
    private final Map<Item, Boolean> toggleStates = new HashMap<>();

    public ConfiguredComponentOmniMech(ComponentOmniMech aComponentOmniMech, boolean aManualArmour, OmniPod aOmniPod) {
        super(aComponentOmniMech, aManualArmour);
        setOmniPod(aOmniPod);
    }

    public ConfiguredComponentOmniMech(ConfiguredComponentOmniMech aConfiguredOmnipod) {
        super(aConfiguredOmnipod);
        setOmniPod(aConfiguredOmnipod.omniPod);
        toggleStates.putAll(aConfiguredOmnipod.toggleStates);
    }

    @Override
    public ComponentOmniMech getInternalComponent() {
        return (ComponentOmniMech) super.getInternalComponent();
    }

    @Override
    public int getHardPointCount(HardPointType aHardpointType) {
        return omniPod.getHardPointCount(aHardpointType);
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = super.hashCode();
        result = prime * result + ((omniPod == null) ? 0 : omniPod.hashCode());
        result = prime * result + ((toggleStates == null) ? 0 : toggleStates.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (!super.equals(obj))
            return false;
        if (getClass() != obj.getClass())
            return false;
        ConfiguredComponentOmniMech other = (ConfiguredComponentOmniMech) obj;
        if (omniPod != other.omniPod)
            return false;
        if (!toggleStates.equals(other.toggleStates))
            return false;
        return true;
    }

    @Override
    public Collection<HardPoint> getHardPoints() {
        return omniPod.getHardPoints();
    }

    @Override
    public List<Item> getItemsFixed() {
        List<Item> fixed = new ArrayList<>(getInternalComponent().getFixedItems());
        fixed.addAll(getOmniPod().getFixedItems());

        Boolean laa = toggleStates.get(ItemDB.LAA);
        if (laa != null && laa == true)
            fixed.add(ItemDB.LAA);
        Boolean ha = toggleStates.get(ItemDB.HA);
        if (ha != null && ha == true)
            fixed.add(ItemDB.HA);
        return fixed;
    }

public OmniPod getOmniPod() {
    }

    @Override
    public EquipResult canEquip(Item aItem) {
        EquipResult superResult = super.canEquip(aItem);
        if (superResult != EquipResult.SUCCESS) {
            return superResult;
        }

        int slotComp = 0;
        if (aItem instanceof Weapon && ((Weapon) aItem).isLargeBore()) {
            if (getToggleState(ItemDB.HA))
                slotComp++;
            if (getToggleState(ItemDB.LAA))
                slotComp++;
        }

        if (getSlotsFree() + slotComp < aItem.getSlots()) {
            return EquipResult.make(getInternalComponent().getLocation(), EquipResultType.NotEnoughSlots);
        }
        return EquipResult.SUCCESS;
    }

    @Override
    public int getSlotsUsed() {
        int slots = 0;
        int engineHsSlots = 0;
        int numHs = 0;
        int hsSize = 0;
        for (Item item : getItemsFixed()) {
            slots += item.getSlots();
            if (item instanceof Engine) {
                engineHsSlots = ((Engine) item).getNumHeatsinkSlots();
else if (item instanceof HeatSink) {
                numHs++;
            }
        }
        for (Item item : getItemsEquipped()) {
            slots += item.getSlots();
            if (item instanceof Engine) {
                engineHsSlots = ((Engine) item).getNumHeatsinkSlots();
else if (item instanceof HeatSink) {
    }

    /**
     * Checks local conditions if the given item can be toggled on. The loadout must have enough free slots and tonnage
     * globally too which is up to the caller to make sure.
     * 
     * @param aItem
     *            The item to try to enable.
     * @return <code>true</code> if the item can be toggled on.
     */
    public EquipResult canToggleOn(Item aItem) {
        if (!toggleStates.containsKey(aItem)) {
            return EquipResult.make(getInternalComponent().getLocation(), EquipResultType.NotToggleable);
        }

        if (getSlotsFree() < 1)
            return EquipResult.make(getInternalComponent().getLocation(), EquipResultType.NotEnoughSlots);

        boolean removeHALAA = false;

        for (Item item : getItemsEquipped()) {
            if (item instanceof Weapon && ((Weapon) item).isLargeBore()) {
                removeHALAA = true;
                break;
            }
        }

        if (!removeHALAA) {
            for (Item item : getInternalComponent().getFixedItems()) {
                if (item instanceof Weapon && ((Weapon) item).isLargeBore()) {
                    removeHALAA = true;
                    break;
                }
            }
        }

        if (removeHALAA) {
            return EquipResult.make(getInternalComponent().getLocation(), EquipResultType.LargeBoreWeaponPresent);
        }

        if (aItem == ItemDB.HA) {
            if (!toggleStates.get(ItemDB.LAA)) // HA can only be enabled if LAA is enabled
                return EquipResult.make(EquipResultType.LaaBeforeHa);
        }
        return EquipResult.SUCCESS; // This can only be LAA, which can always be enabled if there is at least one free
                                    // slot locally and globally
    }

    /**
     * @param aItem
     *            The item to get the toggle state for.
     * @return <code>true</code> if the given item is toggled on. Returns <code>false</code> for items that are not
     *         toggleable.
     */
    public boolean getToggleState(Item aItem) {
        Boolean ans = toggleStates.get(aItem);
        return ans == null ? false : ans;
    }

    /**
     * Sets the toggle state of the item without any questions asked. The caller must verify that the toggle will result
     * in a valid loadout.
     * 
     * @param aItem
     *            The item to toggle. If this is not a toggleable item, an {@link IllegalArgumentException} will be
     *            thrown.
     * @param aNewState
     *            The new state of the toggle.
     */
    public void setToggleState(Item aItem, boolean aNewState) {
        if (!toggleStates.containsKey(aItem))
            throw new IllegalArgumentException("Not a toggleable item: " + aItem);
        toggleStates.put(aItem, aNewState);
    }

    /**
     * @param aOmniPod
     *            The {@link OmniPod} to set for this component.
     */
    public void setOmniPod(OmniPod aOmniPod) {
        if (null == aOmniPod)
            throw new NullPointerException("aOmniPod must not be null.");
        omniPod = aOmniPod;

        // Well, I assume that the toggleable internals are only ever defined in the omnipods and the only fixed items
        // ever defined in the omnipods.
        toggleStates.clear();
        for (Item item : omniPod.getToggleableItems()) {
            toggleStates.put(item, true); // Default enabled
        }
    }

    @Override
    public boolean hasMissileBayDoors() {
        return getOmniPod().hasMissileBayDoors();
    }

}
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
//@formatter:on
package org.lisoft.lsml.model.loadout.component;

import java.util.Collection;
import java.util.List;
import org.lisoft.lsml.model.item.Engine;
import org.lisoft.lsml.model.item.HeatSink;
import org.lisoft.lsml.model.item.Item;
import org.lisoft.lsml.model.loadout.EquipResult;
import org.lisoft.lsml.model.loadout.EquipResult.EquipResultType;
import org.lisoft.lsml.model.loadout.LoadoutStandard;

/**
 * This class implements {@link ConfiguredComponent} for {@link LoadoutStandard}.
 * 
 * @author Emily Björk
 */
public class ConfiguredComponentStandard extends ConfiguredComponent {
public ConfiguredComponentStandard(ConfiguredComponentStandard aComponent) {

    @Override
    public EquipResult canEquip(Item aItem) {
        EquipResult superResult = super.canEquip(aItem);
        if (superResult != EquipResult.SUCCESS) {
            return superResult;
        }
public EquipResult canEquip(Item aItem) {
            return EquipResult.SUCCESS;
        }

        if (aItem == ItemDB.CASE && getItemsEquipped().contains(ItemDB.CASE))
            return EquipResult.make(getInternalComponent().getLocation(), EquipResultType.ComponentAlreadyHasCase);

        int engineHsDiscount = 0;
        if (aItem instanceof Engine) {
            Engine engine = (Engine) aItem;
            int heatsinks = 0;
            HeatSink hsType = null;
            for (Item item : getItemsEquipped()) {
                if (item instanceof HeatSink) {
                    heatsinks++;
                    hsType = (HeatSink) item;
public int getHardPointCount(HardPointType aHardpointType) {
    }

    @Override
    public List<Item> getItemsFixed() {
        return getInternalComponent().getFixedItems();
    }

    @Override
    public ComponentStandard getInternalComponent() {
        return (ComponentStandard) super.getInternalComponent();
    }

    @Override
//@formatter:on
package org.lisoft.lsml.model.loadout;

import org.lisoft.lsml.command.CmdDistributeArmour;
import org.lisoft.lsml.command.CmdLoadStock;
import org.lisoft.lsml.model.chassi.ArmourSide;
import org.lisoft.lsml.model.chassi.ChassisStandard;
import org.lisoft.lsml.model.chassi.ComponentStandard;
import org.lisoft.lsml.model.chassi.Location;
import org.lisoft.lsml.model.datacache.ItemDB;
import org.lisoft.lsml.model.datacache.OmniPodDB;
import org.lisoft.lsml.model.datacache.UpgradeDB;
import org.lisoft.lsml.model.item.Faction;
import org.lisoft.lsml.model.item.Item;
import org.lisoft.lsml.model.item.PilotModule;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponent;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponentOmniMech;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponentStandard;
import org.lisoft.lsml.model.modifiers.Efficiencies;
import org.lisoft.lsml.model.modifiers.MechEfficiencyType;
import org.lisoft.lsml.model.upgrades.Upgrades;
public Loadout produceClone(Loadout aSource) {
            if (srcCmpnt instanceof ConfiguredComponentOmniMech) {
                final ConfiguredComponentOmniMech omniSourceComponent = (ConfiguredComponentOmniMech) srcCmpnt;
                final ConfiguredComponentOmniMech omniTargetComponent = (ConfiguredComponentOmniMech) tgtCmpnt;
                omniTargetComponent.setOmniPod(omniSourceComponent.getOmniPod());

                matchToggleState(omniTargetComponent, omniSourceComponent, ItemDB.HA);
                matchToggleState(omniTargetComponent, omniSourceComponent, ItemDB.LAA);
else if (aChassis instanceof ChassisOmniMech) {

            final ConfiguredComponentOmniMech[] components = new ConfiguredComponentOmniMech[Location.values().length];
            for (final Location location : Location.values()) {
                components[location.ordinal()] = new ConfiguredComponentOmniMech(chassis.getComponent(location), false,
                        OmniPodDB.lookupOriginal(chassis, location));
            }
            return new LoadoutOmniMech(components, chassis, upgrades, new WeaponGroups());
        }
import org.lisoft.lsml.model.item.ModuleSlot;
import org.lisoft.lsml.model.item.PilotModule;
import org.lisoft.lsml.model.loadout.EquipResult.EquipResultType;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponent;
import org.lisoft.lsml.model.modifiers.Efficiencies;
import org.lisoft.lsml.model.modifiers.Modifier;
import org.lisoft.lsml.model.upgrades.Upgrades;
import org.lisoft.lsml.model.chassi.OmniPodSet;
import org.lisoft.lsml.model.item.Engine;
import org.lisoft.lsml.model.item.ModuleSlot;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponentOmniMech;
import org.lisoft.lsml.model.modifiers.Modifier;
import org.lisoft.lsml.model.upgrades.Upgrades;
import org.lisoft.lsml.util.CommandStack.Command;
public int hashCode() {
     */
    public void setOmniPod(OmniPod aOmniPod) {
        final ConfiguredComponentOmniMech component = getComponent(aOmniPod.getLocation());
        component.setOmniPod(aOmniPod);
    }
}
import org.lisoft.lsml.model.item.Engine;
import org.lisoft.lsml.model.item.Item;
import org.lisoft.lsml.model.item.ModuleSlot;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponent;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponentStandard;
import org.lisoft.lsml.model.modifiers.Modifier;
import org.lisoft.lsml.model.upgrades.UpgradesMutable;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.lisoft.lsml.model.chassi.Chassis;
import org.lisoft.lsml.model.chassi.Location;
public Location getLocation() {
        }

        /**
         * @return The omnipod to use for this component or 0 if default/none.
         */
        public Integer getOmniPod() {
            return omniPod;
        }

        @Override

import org.lisoft.lsml.math.probability.BinomialDistribution;
import org.lisoft.lsml.model.item.Item;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponent;

/**
 * This {@link ItemMetric} calculates statistically how much damage the given item takes per 1 damage to the component
import java.util.List;

import org.lisoft.lsml.model.item.Item;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponent;

/**
 * This {@link ItemMetric} calculates the probability that the given item will be critically hit at least once by a
import java.util.List;

import org.lisoft.lsml.model.item.Item;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponent;

/**
 * This class calculates the statistical effective HP of an {@link Item} when it is equipped on a
import org.lisoft.lsml.model.datacache.ItemDB;
import org.lisoft.lsml.model.item.Engine;
import org.lisoft.lsml.model.item.Item;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponent;
import org.lisoft.lsml.model.metrics.CriticalStrikeProbability;
import org.lisoft.lsml.model.modifiers.Modifier;

import org.lisoft.lsml.model.item.Faction;
import org.lisoft.lsml.model.item.Item;
import org.lisoft.lsml.model.item.MissileWeapon;
import org.lisoft.lsml.model.loadout.Loadout;
import org.lisoft.lsml.model.loadout.LoadoutStandard;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponent;

import com.thoughtworks.xstream.annotations.XStreamAsAttribute;

import org.lisoft.lsml.model.item.HeatSink;
import org.lisoft.lsml.model.item.Internal;
import org.lisoft.lsml.model.item.Item;
import org.lisoft.lsml.model.loadout.EquipResult;
import org.lisoft.lsml.model.loadout.Loadout;
import org.lisoft.lsml.model.loadout.LoadoutStandard;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponent;
import org.lisoft.lsml.util.CommandStack;
import org.lisoft.lsml.view_fx.LiSongMechLab;
import org.lisoft.lsml.view_fx.Settings;
import org.lisoft.lsml.model.chassi.Location;
import org.lisoft.lsml.model.datacache.EnvironmentDB;
import org.lisoft.lsml.model.environment.Environment;
import org.lisoft.lsml.model.loadout.Loadout;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponent;
import org.lisoft.lsml.model.modifiers.MechEfficiencyType;
import org.lisoft.lsml.model.modifiers.Modifier;
import org.lisoft.lsml.model.modifiers.ModifierDescription;
import java.util.Collection;

import org.lisoft.lsml.model.item.Item;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponent;
import org.lisoft.lsml.model.metrics.CriticalStrikeProbability;
import org.lisoft.lsml.model.metrics.ItemEffectiveHP;
import org.lisoft.lsml.model.metrics.helpers.ComponentDestructionSimulator;
import org.lisoft.lsml.model.datacache.ItemDB;
import org.lisoft.lsml.model.datacache.OmniPodDB;
import org.lisoft.lsml.model.item.Item;
import org.lisoft.lsml.model.loadout.EquipResult;
import org.lisoft.lsml.model.loadout.LoadoutOmniMech;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponent;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponentOmniMech;
import org.lisoft.lsml.util.CommandStack;
import org.lisoft.lsml.view_fx.LiSongMechLab;
import org.lisoft.lsml.view_fx.Settings;
import org.lisoft.lsml.model.item.HeatSink;
import org.lisoft.lsml.model.item.Internal;
import org.lisoft.lsml.model.item.Item;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponent;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponentOmniMech;

import javafx.collections.ObservableListBase;


import org.lisoft.lsml.model.chassi.HardPointType;
import org.lisoft.lsml.model.chassi.Location;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponent;
import org.lisoft.lsml.view_fx.style.HardPointFormatter;
import org.lisoft.lsml.view_fx.style.StyleManager;

import org.lisoft.lsml.messages.MessageReceiver;
import org.lisoft.lsml.messages.MessageXBar;
import org.lisoft.lsml.model.chassi.ArmourSide;
import org.lisoft.lsml.model.loadout.Loadout;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponent;
import org.lisoft.lsml.util.CommandStack;

import javafx.beans.property.BooleanProperty;
import org.lisoft.lsml.model.datacache.UpgradeDB;
import org.lisoft.lsml.model.item.Faction;
import org.lisoft.lsml.model.item.Item;
import org.lisoft.lsml.model.loadout.Loadout;
import org.lisoft.lsml.model.loadout.LoadoutOmniMech;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponent;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponentOmniMech;
import org.lisoft.lsml.model.modifiers.Efficiencies;
import org.lisoft.lsml.model.modifiers.MechEfficiencyType;
import org.lisoft.lsml.model.upgrades.ArmourUpgrade;
import org.lisoft.lsml.model.item.Item;
import org.lisoft.lsml.model.item.TargetingComputer;
import org.lisoft.lsml.model.item.Weapon;
import org.lisoft.lsml.model.loadout.Loadout;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponent;
import org.lisoft.lsml.model.metrics.TopSpeed;
import org.lisoft.lsml.model.modifiers.Modifier;
import org.lisoft.lsml.view_fx.loadout.component.ComponentItemToolTip;
import org.lisoft.lsml.model.item.EnergyWeapon;
import org.lisoft.lsml.model.item.MissileWeapon;
import org.lisoft.lsml.model.item.Weapon;
import org.lisoft.lsml.model.loadout.Loadout;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponent;
import org.lisoft.lsml.model.metrics.TopSpeed;
import org.lisoft.lsml.model.modifiers.MechEfficiencyType;
import org.lisoft.lsml.model.modifiers.Modifier;

import org.lisoft.lsml.model.item.Internal;
import org.lisoft.lsml.model.item.Item;
import org.lisoft.lsml.model.item.Weapon;
import org.lisoft.lsml.model.loadout.EquipException;
import org.lisoft.lsml.model.loadout.EquipResult;
import org.lisoft.lsml.model.loadout.EquipResult.EquipResultType;
import org.lisoft.lsml.model.loadout.Loadout;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponent;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponentOmniMech;
import org.lisoft.lsml.model.upgrades.Upgrades;
import org.mockito.InOrder;
import org.mockito.Mock;
import org.lisoft.lsml.model.item.HeatSink;
import org.lisoft.lsml.model.item.Internal;
import org.lisoft.lsml.model.item.Item;
import org.lisoft.lsml.model.loadout.DefaultLoadoutFactory;
import org.lisoft.lsml.model.loadout.EquipException;
import org.lisoft.lsml.model.loadout.EquipResult;
import org.lisoft.lsml.model.loadout.EquipResult.EquipResultType;
import org.lisoft.lsml.model.loadout.Loadout;
import org.lisoft.lsml.model.loadout.LoadoutStandard;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponentStandard;
import org.lisoft.lsml.util.CommandStack;
import org.lisoft.lsml.util.ListArrayUtils;
import org.mockito.InOrder;
import org.lisoft.lsml.model.datacache.ChassisDB;
import org.lisoft.lsml.model.datacache.ItemDB;
import org.lisoft.lsml.model.export.Base64LoadoutCoder;
import org.lisoft.lsml.model.loadout.DefaultLoadoutFactory;
import org.lisoft.lsml.model.loadout.Loadout;
import org.lisoft.lsml.model.loadout.LoadoutStandard;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponent;
import org.lisoft.lsml.util.CommandStack;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.lisoft.lsml.model.chassi.Location;
import org.lisoft.lsml.model.datacache.ChassisDB;
import org.lisoft.lsml.model.datacache.ItemDB;
import org.lisoft.lsml.model.loadout.DefaultLoadoutFactory;
import org.lisoft.lsml.model.loadout.Loadout;
import org.lisoft.lsml.model.loadout.LoadoutOmniMech;
import org.lisoft.lsml.model.loadout.LoadoutStandard;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponent;
import org.lisoft.lsml.util.CommandStack;

import junitparams.JUnitParamsRunner;
import org.lisoft.lsml.model.item.EngineType;
import org.lisoft.lsml.model.item.Internal;
import org.lisoft.lsml.model.item.Item;
import org.lisoft.lsml.model.loadout.EquipException;
import org.lisoft.lsml.model.loadout.Loadout;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponent;
import org.lisoft.lsml.model.upgrades.HeatSinkUpgrade;
import org.lisoft.lsml.model.upgrades.Upgrades;
import org.mockito.InOrder;
import org.lisoft.lsml.model.chassi.ArmourSide;
import org.lisoft.lsml.model.chassi.Location;
import org.lisoft.lsml.model.datacache.ChassisDB;
import org.lisoft.lsml.model.loadout.DefaultLoadoutFactory;
import org.lisoft.lsml.model.loadout.Loadout;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponent;
import org.lisoft.lsml.util.CommandStack;
import org.lisoft.lsml.util.CommandStack.Command;
import org.mockito.Mock;
import org.lisoft.lsml.model.chassi.ArmourSide;
import org.lisoft.lsml.model.chassi.Location;
import org.lisoft.lsml.model.helpers.MockLoadoutContainer;
import org.lisoft.lsml.model.loadout.EquipException;
import org.lisoft.lsml.model.loadout.EquipResult;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponent;
import org.lisoft.lsml.util.CommandStack.Command;
import org.mockito.InOrder;
import org.mockito.Mock;
import org.lisoft.lsml.model.export.Base64LoadoutCoder;
import org.lisoft.lsml.model.item.HeatSink;
import org.lisoft.lsml.model.item.Item;
import org.lisoft.lsml.model.loadout.EquipResult;
import org.lisoft.lsml.model.loadout.EquipResult.EquipResultType;
import org.lisoft.lsml.model.loadout.LoadoutStandard;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponentStandard;
import org.lisoft.lsml.model.upgrades.HeatSinkUpgrade;
import org.lisoft.lsml.model.upgrades.UpgradesMutable;
import org.mockito.Mockito;
import org.lisoft.lsml.model.chassi.ArmourSide;
import org.lisoft.lsml.model.chassi.Location;
import org.lisoft.lsml.model.helpers.MockLoadoutContainer;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponent;
import org.lisoft.lsml.util.CommandStack;
import org.mockito.ArgumentCaptor;
import org.mockito.InOrder;
import org.junit.runner.RunWith;
import org.lisoft.lsml.messages.MessageDelivery;
import org.lisoft.lsml.model.datacache.ChassisDB;
import org.lisoft.lsml.model.loadout.DefaultLoadoutFactory;
import org.lisoft.lsml.model.loadout.Loadout;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponent;
import org.lisoft.lsml.util.CommandStack;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.lisoft.lsml.model.datacache.ChassisDB;
import org.lisoft.lsml.model.datacache.UpgradeDB;
import org.lisoft.lsml.model.export.Base64LoadoutCoder;
import org.lisoft.lsml.model.loadout.DefaultLoadoutFactory;
import org.lisoft.lsml.model.loadout.Loadout;
import org.lisoft.lsml.model.loadout.LoadoutOmniMech;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponent;
import org.lisoft.lsml.util.CommandStack;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.lisoft.lsml.model.chassi.ChassisStandard;
import org.lisoft.lsml.model.datacache.ChassisDB;
import org.lisoft.lsml.model.datacache.UpgradeDB;
import org.lisoft.lsml.model.loadout.DefaultLoadoutFactory;
import org.lisoft.lsml.model.loadout.LoadoutOmniMech;
import org.lisoft.lsml.model.loadout.LoadoutStandard;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponent;
import org.lisoft.lsml.util.CommandStack;

public class CmdStripLoadoutTest {
import org.lisoft.lsml.model.chassi.Location;
import org.lisoft.lsml.model.datacache.ItemDB;
import org.lisoft.lsml.model.item.Item;
import org.lisoft.lsml.model.loadout.EquipException;
import org.lisoft.lsml.model.loadout.EquipResult;
import org.lisoft.lsml.model.loadout.EquipResult.EquipResultType;
import org.lisoft.lsml.model.loadout.Loadout;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponentOmniMech;
import org.mockito.InOrder;

@SuppressWarnings("javadoc")
import org.junit.runner.RunWith;
import org.lisoft.lsml.model.chassi.ComponentOmniMech;
import org.lisoft.lsml.model.chassi.Location;
import org.lisoft.lsml.model.loadout.LoadoutOmniMech;
import org.lisoft.lsml.model.loadout.LoadoutStandard;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponentOmniMech;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponentStandard;
import org.lisoft.lsml.model.upgrades.ArmourUpgrade;
import org.lisoft.lsml.model.upgrades.StructureUpgrade;
import org.lisoft.lsml.model.upgrades.UpgradesMutable;
import java.util.Map;

import org.junit.Before;
import org.junit.Test;
import org.lisoft.lsml.model.datacache.ChassisDB;
import org.lisoft.lsml.model.datacache.ItemDB;
public final void testGetFixedStructureType() {
        assertSame(structureType, makeDefaultCUT().getFixedStructureType());
    }

    @Test
    public final void testGetMovementProfiles() {
        final ChassisOmniMech mech = (ChassisOmniMech) ChassisDB.lookup("kfx-prime");
public final void testGetMovementProfiles() {
        assertTrue(baseProfile.getTorsoYawSpeed(null) < baseProfile.getTorsoYawSpeed(stock));
        assertTrue(baseProfile.getTorsoYawMax(null) < baseProfile.getTorsoYawMax(stock));

        assertTrue(baseProfile.getTorsoYawSpeed(null) < min.getTorsoYawSpeed(null));
        assertTrue(baseProfile.getTorsoYawSpeed(null) < max.getTorsoYawSpeed(null));
    }

    @Test

/**
 * Test suite for the {@link OmniPodSelector} class.
 * 
 * @author Emily Björk
 *
 */

    @Test
    public void testSelectPods() {
        ChassisOmniMech hbr_a = (ChassisOmniMech) ChassisDB.lookup("HBR-A");
        ChassisOmniMech hbr_b = (ChassisOmniMech) ChassisDB.lookup("HBR-B");
        ChassisOmniMech hbr_prime = (ChassisOmniMech) ChassisDB.lookup("HBR-PRIME");

        OmniPodSelector cut = new OmniPodSelector();
        Optional<Map<Location, OmniPod>> ans = cut.selectPods(hbr_a, 7, 2, 0, 0, true);

        // Should only exist one solution:
        // RA-Prime, RT-B, HD-A, LT-Prime, LA-A
        assertTrue(ans.isPresent());
        Map<Location, OmniPod> pods = ans.get();
        assertSame(OmniPodDB.lookupOriginal(hbr_prime, Location.RightArm), pods.get(Location.RightArm));
        assertSame(OmniPodDB.lookupOriginal(hbr_b, Location.RightTorso), pods.get(Location.RightTorso));
        assertSame(OmniPodDB.lookupOriginal(hbr_a, Location.Head), pods.get(Location.Head));
        assertSame(OmniPodDB.lookupOriginal(hbr_prime, Location.LeftTorso), pods.get(Location.LeftTorso));
        assertSame(OmniPodDB.lookupOriginal(hbr_a, Location.LeftArm), pods.get(Location.LeftArm));
    }

    @Test
    public void testSelectPods_OmniJJ() {
        ChassisOmniMech tbr_s = (ChassisOmniMech) ChassisDB.lookup("TBR-S");
        ChassisOmniMech tbr_prime = (ChassisOmniMech) ChassisDB.lookup("TBR-PRIME");

        OmniPodSelector cut = new OmniPodSelector();
        Optional<Map<Location, OmniPod>> ans = cut.selectPods(tbr_prime, 0, 0, 0, 4, false);

        // Expected solution:
        // RT/LT-S
        assertTrue(ans.isPresent());
        Map<Location, OmniPod> pods = ans.get();
        assertSame(OmniPodDB.lookupOriginal(tbr_s, Location.RightTorso), pods.get(Location.RightTorso));
        assertSame(OmniPodDB.lookupOriginal(tbr_s, Location.LeftTorso), pods.get(Location.LeftTorso));
    }

    @Test
    public void testSelectPods_NoSolution() {
        ChassisOmniMech adr_prime = (ChassisOmniMech) ChassisDB.lookup("ADR-PRIME");

        OmniPodSelector cut = new OmniPodSelector();
        Optional<Map<Location, OmniPod>> ans = cut.selectPods(adr_prime, 5, 0, 2, 0, false);

        assertFalse(ans.isPresent());
    }

    /**
     * Test that jump jets that are satisfied through the chassis (as opposed to the omni mech) are accounted properly.
     */
    @Test
    public void testSelectPods_NonOmniJJ() {
        ChassisOmniMech shc_a = (ChassisOmniMech) ChassisDB.lookup("SHC-A");
        ChassisOmniMech shc_b = (ChassisOmniMech) ChassisDB.lookup("SHC-B");
        ChassisOmniMech shc_p = (ChassisOmniMech) ChassisDB.lookup("SHC-P");
        ChassisOmniMech shc_prime = (ChassisOmniMech) ChassisDB.lookup("SHC-PRIME");

        OmniPodSelector cut = new OmniPodSelector();
        Optional<Map<Location, OmniPod>> ans = cut.selectPods(shc_prime, 0, 2, 3, 6, true);

        // Expected solution:
        // RA-B, RT-A, LT-B, LA-P
        assertTrue(ans.isPresent());
        Map<Location, OmniPod> pods = ans.get();
        assertSame(OmniPodDB.lookupOriginal(shc_b, Location.RightArm), pods.get(Location.RightArm));
        assertSame(OmniPodDB.lookupOriginal(shc_a, Location.RightTorso), pods.get(Location.RightTorso));
        assertSame(OmniPodDB.lookupOriginal(shc_b, Location.LeftTorso), pods.get(Location.LeftTorso));
        assertSame(OmniPodDB.lookupOriginal(shc_p, Location.LeftArm), pods.get(Location.LeftArm));
    }

    /**
     * Test that hard points in the CT are counted towards the required values.
     */
    @Test
    public void testSelectPods_CTHardPointCounted() {
        ChassisOmniMech ifr_a = (ChassisOmniMech) ChassisDB.lookup("IFR-A");
        ChassisOmniMech ifr_d = (ChassisOmniMech) ChassisDB.lookup("IFR-D");
        ChassisOmniMech ifr_prime = (ChassisOmniMech) ChassisDB.lookup("IFR-PRIME");

        OmniPodSelector cut = new OmniPodSelector();
        Optional<Map<Location, OmniPod>> ans = cut.selectPods(ifr_a, 5, 0, 0, 0, false);

        // Expected solution:
        // RA-D, LA-Prime
        assertTrue(ans.isPresent());
        Map<Location, OmniPod> pods = ans.get();
        assertSame(OmniPodDB.lookupOriginal(ifr_d, Location.RightArm), pods.get(Location.RightArm));
        assertSame(OmniPodDB.lookupOriginal(ifr_prime, Location.LeftArm), pods.get(Location.LeftArm));
    }
}
public void testIsCompatible() {
    }

    @Test
    public void testIsOriginalForChassis() {
        series = "TIMBER WOLF";
        chassisName = "TBR-PRIME";

        final ChassisOmniMech chassisP = Mockito.mock(ChassisOmniMech.class);
        Mockito.when(chassisP.getSeriesName()).thenReturn(series.toLowerCase());
        Mockito.when(chassisP.getName()).thenReturn(series.toLowerCase() + " tBR-PRIME");
        Mockito.when(chassisP.getNameShort()).thenReturn("TBR-PRImE");
        Mockito.when(chassisP.getMwoName()).thenReturn("TBR-PRImE");

        final ChassisOmniMech chassisPI = Mockito.mock(ChassisOmniMech.class);
        Mockito.when(chassisPI.getSeriesName()).thenReturn(series.toLowerCase());
        Mockito.when(chassisPI.getName()).thenReturn(series.toLowerCase() + " TBR-PRIME(I)");
        Mockito.when(chassisPI.getNameShort()).thenReturn("TBR-PRiME");
        Mockito.when(chassisPI.getMwoName()).thenReturn("TBR-PRImEI");

        final ChassisOmniMech chassisPG = Mockito.mock(ChassisOmniMech.class);
        Mockito.when(chassisPG.getSeriesName()).thenReturn(series.toLowerCase());
        Mockito.when(chassisPG.getName()).thenReturn(series.toLowerCase() + " TBR-PRIME(G)");
        Mockito.when(chassisPG.getNameShort()).thenReturn("TBr-PRIME(G)");
        Mockito.when(chassisPG.getMwoName()).thenReturn("TBR-PRImEg");

        final ChassisOmniMech chassisC = Mockito.mock(ChassisOmniMech.class);
        Mockito.when(chassisC.getSeriesName()).thenReturn(series.toLowerCase());
        Mockito.when(chassisC.getName()).thenReturn(series.toLowerCase() + " TBR-C");
        Mockito.when(chassisC.getNameShort()).thenReturn("TBr-c");
        Mockito.when(chassisC.getMwoName()).thenReturn("TBR-c)");

        assertTrue(makeCUT().isOriginalForChassis(chassisP));
        assertTrue(makeCUT().isOriginalForChassis(chassisPI));
        assertTrue(makeCUT().isOriginalForChassis(chassisPG));
        assertFalse(makeCUT().isOriginalForChassis(chassisC));
    }

    @Test
    public void testToString() {
        assertEquals(chassisName.toUpperCase(), makeCUT().toString());
    }
import org.lisoft.lsml.model.item.Equipment;
import org.lisoft.lsml.model.item.Item;
import org.lisoft.lsml.model.item.PilotModule;
import org.lisoft.lsml.model.loadout.DefaultLoadoutFactory;
import org.lisoft.lsml.model.loadout.Loadout;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponent;

/**
 * This class is used for generating the frequency tables that are used for the Huffman coding in the loadout coders.
import org.lisoft.lsml.model.chassi.Location;
import org.lisoft.lsml.model.chassi.MovementProfile;
import org.lisoft.lsml.model.item.Internal;
import org.lisoft.lsml.model.loadout.Loadout;
import org.lisoft.lsml.model.loadout.LoadoutStandard;
import org.lisoft.lsml.model.loadout.WeaponGroups;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponent;
import org.lisoft.lsml.model.modifiers.Efficiencies;
import org.lisoft.lsml.model.upgrades.ArmourUpgrade;
import org.lisoft.lsml.model.upgrades.HeatSinkUpgrade;
import org.lisoft.lsml.messages.MessageXBar;
import org.lisoft.lsml.model.chassi.HardPointType;
import org.lisoft.lsml.model.datacache.ItemDB;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponent;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
//@formatter:on
package org.lisoft.lsml.model.loadout.component;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotEquals;
import org.lisoft.lsml.model.datacache.ItemDB;
import org.lisoft.lsml.model.item.Internal;
import org.lisoft.lsml.model.item.Item;
import org.lisoft.lsml.model.loadout.EquipResult;
import org.lisoft.lsml.model.loadout.EquipResult.EquipResultType;
import org.lisoft.lsml.util.ListArrayUtils;

public void testCanEquip_NoHardpoint() {
    }

    @Test
    public final void testCopyCtor_ToggleStateNotLinked() {
        togglables.add(ItemDB.LAA);
        final ConfiguredComponentOmniMech cut = makeDefaultCUT();
public final void testEquals_OmniPods() {
        final ConfiguredComponentOmniMech cut2 = makeDefaultCUT();
        final OmniPod pod1 = mock(OmniPod.class);
        final OmniPod pod2 = mock(OmniPod.class);
        cut.setOmniPod(pod1);
        cut2.setOmniPod(pod2);

        assertNotEquals(cut, cut2);
    }
public final void testGetOmniPod() throws Exception {
    }

    @Test
    public final void testGetSlotsUsedFree_DynamicSlots() {
        when(omniInternal.getDynamicArmourSlots()).thenReturn(2);
        when(omniInternal.getDynamicStructureSlots()).thenReturn(3);
public final void testHasMissileBayDoors() throws Exception {
        assertEquals(missileBayDoors, makeDefaultCUT().hasMissileBayDoors());
    }

    // TODO: Test togglestate handling and fixeditems

    @Test
    public final void testSetGetOmniPod() throws Exception {
        final ConfiguredComponentOmniMech cut = makeDefaultCUT();
        final OmniPod omniPod2 = mock(OmniPod.class);

        cut.setOmniPod(omniPod2);
        assertSame(omniPod2, cut.getOmniPod());
    }

    @Test(expected = NullPointerException.class)
    public final void testSetOmniPod_Null() throws Exception {
        makeDefaultCUT().setOmniPod(null);
    }

    @Override
    protected ConfiguredComponentOmniMech makeDefaultCUT() {
        when(internal.getLocation()).thenReturn(location);
        when(internal.getSlots()).thenReturn(slots);
        when(internal.getFixedItemSlots()).thenReturn(internalFixedSlots);
protected ConfiguredComponentOmniMech makeDefaultCUT() {
            when(omniPod.getToggleableItems()).thenReturn(togglables);
            when(omniPod.getFixedItems()).thenReturn(omniPodFixed);
        }
        return new ConfiguredComponentOmniMech(omniInternal, manualArmour, omniPod);
    }
}
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
//@formatter:on
package org.lisoft.lsml.model.loadout.component;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import org.lisoft.lsml.model.item.Engine;
import org.lisoft.lsml.model.item.HeatSink;
import org.lisoft.lsml.model.item.Item;
import org.lisoft.lsml.model.loadout.EquipResult;
import org.lisoft.lsml.model.loadout.EquipResult.EquipResultType;
import org.lisoft.lsml.util.ListArrayUtils;

 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
//@formatter:on
package org.lisoft.lsml.model.loadout.component;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import org.lisoft.lsml.model.item.Engine;
import org.lisoft.lsml.model.item.HeatSink;
import org.lisoft.lsml.model.item.Item;
import org.lisoft.lsml.model.loadout.EquipResult;
import org.lisoft.lsml.model.loadout.EquipResult.EquipResultType;
import org.lisoft.lsml.util.ListArrayUtils;
import org.mockito.Mockito;
public void testProduceClone_OmniPods() {
            final List<OmniPod> possiblePods = new ArrayList<>(OmniPodDB.lookup(loadout.getChassis(), loc));
            final OmniPod newPod = possiblePods.get(podId %!p(MISSING)ossiblePods.size());
            podId++;
            loadout.getComponent(loc).setOmniPod(newPod);
        }

        final Loadout clone = cut.produceClone(loadout);
import org.lisoft.lsml.model.item.Engine;
import org.lisoft.lsml.model.item.ModuleSlot;
import org.lisoft.lsml.model.loadout.EquipResult.EquipResultType;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponentOmniMech;
import org.lisoft.lsml.model.modifiers.MechEfficiencyType;
import org.lisoft.lsml.model.modifiers.Modifier;
import org.lisoft.lsml.model.upgrades.Upgrades;
public final void testEquals_Components() throws Exception {

        final CommandStack stack = new CommandStack(0);
        stack.pushAndApply(new CmdSetOmniPod(null, cut, cut.getComponent(Location.LeftArm),
                OmniPodDB.lookupOriginal((ChassisOmniMech) ChassisDB.lookup("DWF-B"), Location.LeftArm)));

        assertNotEquals(cut, cut1);
    }
import org.lisoft.lsml.model.item.Item;
import org.lisoft.lsml.model.item.JumpJet;
import org.lisoft.lsml.model.loadout.EquipResult.EquipResultType;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponentStandard;
import org.lisoft.lsml.model.modifiers.Modifier;
import org.lisoft.lsml.model.upgrades.UpgradesMutable;
import org.mockito.Mockito;
import org.lisoft.lsml.model.item.JumpJet;
import org.lisoft.lsml.model.item.Weapon;
import org.lisoft.lsml.model.loadout.EquipResult.EquipResultType;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponent;
import org.lisoft.lsml.model.upgrades.ArmourUpgrade;
import org.lisoft.lsml.model.upgrades.GuidanceUpgrade;
import org.lisoft.lsml.model.upgrades.HeatSinkUpgrade;
import org.junit.runner.RunWith;
import org.lisoft.lsml.model.item.Internal;
import org.lisoft.lsml.model.item.Item;
import org.lisoft.lsml.model.loadout.Loadout;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponent;
import org.lisoft.lsml.model.upgrades.Upgrades;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.junit.runner.RunWith;
import org.lisoft.lsml.model.item.Internal;
import org.lisoft.lsml.model.item.Item;
import org.lisoft.lsml.model.loadout.Loadout;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponent;
import org.lisoft.lsml.model.upgrades.Upgrades;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.lisoft.lsml.model.item.Engine;
import org.lisoft.lsml.model.item.HeatSource;
import org.lisoft.lsml.model.item.Weapon;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponent;

public class HeatOverTimeTest {
    private MessageXBar xBar;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.lisoft.lsml.model.item.Item;
import org.lisoft.lsml.model.loadout.Loadout;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponent;
import org.lisoft.lsml.model.upgrades.Upgrades;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.lisoft.lsml.model.chassi.ComponentStandard;
import org.lisoft.lsml.model.datacache.ItemDB;
import org.lisoft.lsml.model.item.Item;
import org.lisoft.lsml.model.loadout.component.ConfiguredComponent;
import org.lisoft.lsml.model.metrics.CriticalStrikeProbability;
import org.mockito.Mockito;


[ATLAS AS7-D(F)]=lsml://rAAD50RAFFISXhxAFFJEGY375AQzwNm8WQkAgI0=
[STALKER STK-3F]=lsml://rAAALy4yDjISSBYyDjIu2jgiVLEEBT8AllRBAdo4JQ==
[STALKER STK-3H]=lsml://rAAAMC4yDjISSBYyDjIuvbAiWIICn4BLEEBvbAk=
[MISERY]=lsml://rAAASzY0FD4SUBo0FD422SwAIQQFPxViADp1Ado=
[VICTOR VTR-9B]=lsml://rAAAWR4oFCgSPB4oFCgejUfffIqKfQKlR5gio7U=
[VICTOR VTR-9K]=lsml://rBAAWCQuFCgSRB4uFCgkiE6d8RUQn0CpUefIIqM6dQ==
[VICTOR VTR-9S]=lsml://rAAAWh4iECgSOBYiECgejUfffIqKfQKlRLgio7U=
[ATLAS AS7-D(F)]=lsml://rQAD50RAFFISXhxAFFJEuipmxNhITziZMJhcTJswWVP55EmEyYTYKQ==
[STALKER STK-3F]=lsml://rQAALy4yDjISSBYyDjIuuipmzMtKbwjTpohMmCRKZMJ400QmTGZaU3gp
[STALKER STK-3H]=lsml://rQAAMC4yDjISSBYyDjIuuipmxZcxN4J00QmTBIlMmE6aITJhZcxN4A==
[MISERY]=lsml://rQAASzY0FD4SUBo0FD42uipmzME6ZMmTRRCZMEiYxYTJrLBMmMwU
[VICTOR VTR-9B]=lsml://rQAAWR4oFCgSPB4oFCgeuipmyQE0884m6QUuTJunpEmITdJmCg==
[VICTOR VTR-9K]=lsml://rQAAWCQuFCgSRB4uFCgkvqmbFgsskhN0iYUuTJunpEmSiE3SL14p
[VICTOR VTR-9S]=lsml://rQAAWh4iECgSOBYiECgeuipmyQE0884m6QUuTJunpE8Qm6TMFA==
[EXECUTIONER EXE-C(L)]=lsml://rgFXQCgUUBJKEigUUEAC6yz0WefT0O8fvH7x+AlPSU87aefy6p6Onnt5DeQz1bI=
[MAULER MAL-MX90]=lsml://rgFGIB4KKBIuEB4KKCDne6/ep3rMydZ3HCmsXFMUtuYFZ3HCmsXFMUtydg==
[BATTLEMASTER BLR-3S]=lsml://rgCWLjYQMhJOFDYQMi7ne6/ep3rMS1x44YU1jY2Oww2GzSwwwww3DhTchjY2Oww2yA==
[MISERY]=lsml://rgBLNjQUPhJQGjQUPjbne6/ep3rMjG4cMMMMORYYbWh5OzCYQwyxYYbGNg==
[AWESOME AWS-8V]=lsml://rgAfMDAUQhI8JjAUQjDne6/ep3rMyVhhhhhhwVhhsHcePFdhhhhhhhydhhsMNg==
[AWESOME AWS-8T]=lsml://rgAeMDAUQhI8JjAUQjDne6/ep3rMhydhhhhhwVhhsHcePFdhhhhwVhhuTsg=
[AWESOME AWS-8R]=lsml://rgAPMDAUQhI8JjAUQjDne6/ep3rMhydhhhhhhwVhhsHcePFdhhhhhhwVhhsMNg==
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
package io.confluent.kafka.schemaregistry.client.rest;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.confluent.kafka.schemaregistry.client.rest.entities.Config;
import io.confluent.kafka.schemaregistry.client.rest.entities.ErrorMessage;
          UPDATE_CONFIG_RESPONSE_TYPE_REFERENCE =
          new TypeReference<ConfigUpdateRequest>() {
          };
  private static ObjectMapper jsonDeserializer = new ObjectMapper();

  public static final Map<String, String> DEFAULT_REQUEST_PROPERTIES;
public RestService(String baseUrlConfig) {
        return null;
      } else {
        InputStream es = connection.getErrorStream();
        ErrorMessage errorMessage = jsonDeserializer.readValue(es, ErrorMessage.class);
        es.close();
        throw new RestClientException(errorMessage.getMessage(), responseCode,
                errorMessage.getErrorCode());
  public static final int OPERATION_TIMEOUT_ERROR_CODE = 50002;
  public static final int REQUEST_FORWARDING_FAILED_ERROR_CODE = 50003;
  public static final int UNKNOWN_MASTER_ERROR_CODE = 50004;

  public static RestException subjectNotFoundException() {
    return new RestNotFoundException(SUBJECT_NOT_FOUND_MESSAGE, SUBJECT_NOT_FOUND_ERROR_CODE);
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public static BigInteger decodeToBigInteger(byte[] buf, int pos, int length)
            throws IndexOutOfBoundsException {
        char[] digits = new char[length];
        int start = 0;
        for (int i = pos; i < pos + (length / 2) + (length %!)(MISSING); i++) {
            digits[start++] = (char)(((buf[i] & 0xf0) >> 4) + 48);
            digits[start++] = (char)((buf[i] & 0x0f) + 48);
        }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


private static boolean tuple_recoverer_0_0(PsiBuilder builder_, int level_) {
  //   | ( q_atom '(' top_types ')')
  //   | binary_type
  //   | q_var
  //   | ('[' top_type (',' '...')? ']')
  //   | ('{' top_types? '}')
  //   | ('#' q_atom '{' field_types? '}')
public static boolean type(PsiBuilder builder_, int level_) {
    if (!result_) result_ = type_7(builder_, level_ + 1);
    if (!result_) result_ = type_8(builder_, level_ + 1);
    if (!result_) result_ = type_9(builder_, level_ + 1);
    if (result_) {
      marker_.done(ERL_TYPE);
    }
private static boolean type_4_0(PsiBuilder builder_, int level_) {
    return result_;
  }

  // ('[' top_type (',' '...')? ']')
  private static boolean type_7(PsiBuilder builder_, int level_) {
    if (!recursion_guard_(builder_, level_, "type_7")) return false;
    return type_7_0(builder_, level_ + 1);
  }

  // '[' top_type (',' '...')? ']'
  private static boolean type_7_0(PsiBuilder builder_, int level_) {
    if (!recursion_guard_(builder_, level_, "type_7_0")) return false;
    boolean result_ = false;
    Marker marker_ = builder_.mark();
    result_ = consumeToken(builder_, ERL_BRACKET_LEFT);
    result_ = result_ && top_type(builder_, level_ + 1);
    result_ = result_ && type_7_0_2(builder_, level_ + 1);
    result_ = result_ && consumeToken(builder_, ERL_BRACKET_RIGHT);
    if (!result_) {
      marker_.rollbackTo();
private static boolean type_7_0(PsiBuilder builder_, int level_) {
  }

  // (',' '...')?
  private static boolean type_7_0_2(PsiBuilder builder_, int level_) {
    if (!recursion_guard_(builder_, level_, "type_7_0_2")) return false;
    type_7_0_2_0(builder_, level_ + 1);
    return true;
  }

  // (',' '...')
  private static boolean type_7_0_2_0(PsiBuilder builder_, int level_) {
    if (!recursion_guard_(builder_, level_, "type_7_0_2_0")) return false;
    return type_7_0_2_0_0(builder_, level_ + 1);
  }

  // ',' '...'
  private static boolean type_7_0_2_0_0(PsiBuilder builder_, int level_) {
    if (!recursion_guard_(builder_, level_, "type_7_0_2_0_0")) return false;
    boolean result_ = false;
    Marker marker_ = builder_.mark();
    result_ = consumeToken(builder_, ERL_COMMA);
private static boolean type_7_0_2_0_0(PsiBuilder builder_, int level_) {
  }

  // ('{' top_types? '}')
  private static boolean type_8(PsiBuilder builder_, int level_) {
    if (!recursion_guard_(builder_, level_, "type_8")) return false;
    return type_8_0(builder_, level_ + 1);
  }

  // '{' top_types? '}'
  private static boolean type_8_0(PsiBuilder builder_, int level_) {
    if (!recursion_guard_(builder_, level_, "type_8_0")) return false;
    boolean result_ = false;
    Marker marker_ = builder_.mark();
    result_ = consumeToken(builder_, ERL_CURLY_LEFT);
    result_ = result_ && type_8_0_1(builder_, level_ + 1);
    result_ = result_ && consumeToken(builder_, ERL_CURLY_RIGHT);
    if (!result_) {
      marker_.rollbackTo();
private static boolean type_8_0(PsiBuilder builder_, int level_) {
  }

  // top_types?
  private static boolean type_8_0_1(PsiBuilder builder_, int level_) {
    if (!recursion_guard_(builder_, level_, "type_8_0_1")) return false;
    top_types(builder_, level_ + 1);
    return true;
  }

  // ('#' q_atom '{' field_types? '}')
  private static boolean type_9(PsiBuilder builder_, int level_) {
    if (!recursion_guard_(builder_, level_, "type_9")) return false;
    return type_9_0(builder_, level_ + 1);
  }

  // '#' q_atom '{' field_types? '}'
  private static boolean type_9_0(PsiBuilder builder_, int level_) {
    if (!recursion_guard_(builder_, level_, "type_9_0")) return false;
    boolean result_ = false;
    Marker marker_ = builder_.mark();
    result_ = consumeToken(builder_, ERL_RADIX);
    result_ = result_ && q_atom(builder_, level_ + 1);
    result_ = result_ && consumeToken(builder_, ERL_CURLY_LEFT);
    result_ = result_ && type_9_0_3(builder_, level_ + 1);
    result_ = result_ && consumeToken(builder_, ERL_CURLY_RIGHT);
    if (!result_) {
      marker_.rollbackTo();
private static boolean type_9_0(PsiBuilder builder_, int level_) {
  }

  // field_types?
  private static boolean type_9_0_3(PsiBuilder builder_, int level_) {
    if (!recursion_guard_(builder_, level_, "type_9_0_3")) return false;
    field_types(builder_, level_ + 1);
    return true;
  }
type ::=
  | ( q_atom '(' top_types ')')
  | binary_type
  | q_var
  | ('[' top_type (',' '...')? ']')
  | ('{' top_types? '}')
  | ('#' q_atom '{' field_types? '}')
public ErlangParserTest() {
  public void test74()                { doTest(true, false); }
  public void testErrors()            { doTest(true, true); }
  public void test51()                { doTest(true, false); } // performance

  protected void doTest(boolean checkResult, boolean suppressErrors) {
//    OVERWRITE_TESTDATA = true;
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
@echo off

SETLOCAL

if NOT DEFINED JAVA_HOME goto err

for %I in ("%!S(MISSING)CRIPT_DIR%!.(MISSING)") do set ES_HOME=%~dpfI

TITLE Elasticsearch Plugin Manager ${project.version}

SET HOSTNAME=%!C(MISSING)OMPUTERNAME%!
(MISSING)
"%!J(MISSING)AVA_HOME%!\(MISSING)bin\java" -client -Des.path.home="%!E(MISSING)S_HOME%!"(MISSING) -cp "%!E(MISSING)S_HOME%!/(MISSING)lib/*;" "org.elasticsearch.plugins.PluginManagerCliParser" %!(BADWIDTH)%!
(MISSING)goto finally


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
instruction                     ::= IDENTIFIER       instruction_extra { pin = 1
text                            ::= ( ARGUMENT special_expr ? ) +


private argument_group          ::= expr_list_bracket | expr_list_brace | expr_list_paren
private argument_expr           ::= ( special_expr * ( ARGUMENT | instruction ) special_expr * ) * { pin(".*") = 2 }
private special_expr            ::= SPECIAL | COLON | COMMA | LINE_BREAK | CRLF
private instruction_extra       ::= ASTERISK ? argument_group *

private meta expr_list_bracket  ::= LBRACKET <<sequence argument_expr special_expr>> ? RBRACKET { pin(".*") = 1 }
private meta expr_list_brace    ::= LBRACE   <<sequence argument_expr special_expr>> ? RBRACE   { pin(".*") = 1 }
/* The following code was generated by JFlex 1.4.3 on 17.11.15 15:40 */

package mobi.hsz.idea.latex.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.WHITE_SPACE;
import static mobi.hsz.idea.latex.psi.LatexTypes.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 17.11.15 15:40 from the specification file
 * <tt>/home/hsz/Projects/idea-latex/src/mobi/hsz/idea/latex/lexer/Latex.flex</tt>
 */
public class LatexLexer implements FlexLexer {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    <groupId>com.rythmengine</groupId>
    <artifactId>rythm</artifactId>
    <packaging>jar</packaging>
    <version>1.0.0-20121128</version>

    <name>Rythm Template Engine</name>
    <description>Rythm Template Engine</description>
        <pathelement location="${lib}/pat-1.5.3.jar"/>
        <pathelement location="${lib}/org.eclipse.jdt.core-3.7.1.v_B76_R37x.jar"/>
        <pathelement location="${lib}/commons-lang3-3.1.jar"/>
        <pathelement location="${lib}/rythm-1.0.0-20121128.jar"/>
    </path>

    <target name="init">
 */
public class RythmEngine {

    public static final String version = "1.0.0-20121128";
    public static String pluginVersion = "";

    Rythm.ReloadMethod reloadMethod = Rythm.ReloadMethod.RESTART;
public String a() {
    protected Class<?>[] buildInParserClasses() {
        // InvokeTagParse must be put in front of ExpressionParser as the later's matching pattern covers the former
        // BraceParser must be put in front of ElseIfParser
        return new Class<?>[]{AssignParser.class, BreakParser.class, BraceParser.class, ContinueParser.class,
                CommentParser.class, DebugParser.class, EscapeParser.class, ElseForParser.class, ElseIfParser.class, BraceParser.class,
                InvokeParser.class, InvokeTagParser.class, ExpressionParser.class, ForEachParser.class, IfParser.class,
                ImportParser.class, NoSIMParser.class, RawParser.class, ReturnParser.class, SimpleParser.class,
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        <li>SUPER methods now resolved properly even if invoked on unknown variable, fixes #534</li>
        <li>Here-doc reference should work fine after converting string to here-doc, fixes #541</li>
        <li>Removed redundant indetion of eval and do blocks on re-formatting, fixes #523</li>
        <li>POD is now properly treated as statement, fixes #522</li>
        <li>Package names auto-completion now works in qw expression, fixes #540</li>
        <li>foreach compound live template now has default values which prevents formatting bugs on inserting, fixes #519</li>
        <li>Recursive inheritance inspection is absolutely redundant, disabled, fixes #517</li>
        <li>Local re-declarations of built-in variables are not marked as unused anymore (like <code>$/</code>), fixes #533</li>
        <li>Removed empty prototype from generated constructor, fixes #537</li>
      </ul>
      </p>

import com.intellij.psi.tree.TokenSet;
import com.perl5.lang.perl.idea.formatter.settings.PerlCodeStyleSettings;
import com.perl5.lang.perl.lexer.PerlElementTypes;
import com.perl5.lang.perl.psi.impl.PerlHeredocElementImpl;
import com.perl5.lang.perl.psi.references.PerlHeredocReference;
import org.jetbrains.annotations.NotNull;
			HEREDOC,
			HEREDOC_QX,
			HEREDOC_QQ,
			POD
	);

	/**
private static boolean shouldCreateBlockFor(ASTNode node)
	protected List<Block> buildChildren()
	{
		if (mySubBlocks == null)
			mySubBlocks = buildSubBlocks();

		// fixme what is re-creation for?
		return new ArrayList<Block>(mySubBlocks);
private namespace_item ::=
        | statement
        | block_compound  // put it after statement to handle anon hashes before it.
        | annotation
        | POD
     )

nyi_statement ::= OPERATOR_HELLIP
named_block ::= BLOCK_NAME block

if_compound ::= [PACKAGE_CORE_IDENTIFIER] RESERVED_IF conditional_block if_compound_elsif * [unconditional_block]  {pin=2}
unless_compound ::= [PACKAGE_CORE_IDENTIFIER] RESERVED_UNLESS conditional_block if_compound_elsif * [unconditional_block]  {pin=2}
private if_compound_elsif ::= [PACKAGE_CORE_IDENTIFIER] RESERVED_ELSIF conditional_block  {pin=2}
unconditional_block ::= [PACKAGE_CORE_IDENTIFIER] RESERVED_ELSE block {pin=2}

conditional_block ::= condition_statement block {pin=1 name="Conditional block"}
condition_statement ::= LEFT_PAREN condition_statement_expr RIGHT_PAREN {pin=1 name="Condition"}
default_compound ::= [PACKAGE_CORE_IDENTIFIER] RESERVED_DEFAULT block {pin=2}
while_compound ::= [PACKAGE_CORE_IDENTIFIER] RESERVED_WHILE conditional_block_while [continue_block]  {pin=2}
until_compound ::= [PACKAGE_CORE_IDENTIFIER] RESERVED_UNTIL conditional_block [continue_block]  {pin=2}

continue_block ::= [PACKAGE_CORE_IDENTIFIER] RESERVED_CONTINUE block {pin=2}

private block_compound ::= block [continue_block]

private statement_body ::=
    | no_statements
    | sub_declaration
    | normal_statement
    | <<parseBadCharacters>> // this is kinda hack to handle bad characters we have
    {recoverWhile=recover_statement}

private normal_statement ::= expr [<<parseStatementModifier>>] {pin=1}
public static boolean parseRegexContent(PsiBuilder b, int l, boolean isExtended)
	 **/
	public static boolean parseBadCharacters(PsiBuilder b, int l)
	{
		if (!b.eof() && b.getTokenType() == TokenType.BAD_CHARACTER)
		{
			PsiBuilder.Marker m = b.mark();

			while (b.getTokenType() == TokenType.BAD_CHARACTER)
			{
				b.advanceLexer();
			}
			m.error("Unexpected token");
			return true;
		}
		return false;
	}

	public static boolean parseIncompleteAnnotation(PsiBuilder b, int l)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public static void grammar(LexerfulGrammarBuilder b) {
        b.rule(END_COMMA).is(b.optional(COMMA));
		b.rule(END_SEMIC).is(b.optional(SEMIC));

        b.rule(KEYWORD).is(
                AND,
                CASE,
                CLASS,
                DEFAULT,
                DEFINE,
                ELSE,
                ELSIF,
                IF,
                IN,
                IMPORT,
                INHERITS,
                NODE,
                OR,
                UNDEF,
                UNLESS);
    }

    /**
public static void expressions(LexerfulGrammarBuilder b){
        b.rule(ASSIGNMENT_EXPRESSION).is(BOOL_EXPRESSION, b.zeroOrMore(EQUALS, BOOL_EXPRESSION)).skipIfOneChild();

        b.rule(ATOM).is(b.firstOf(
                HASH_ARRAY_ACCESS,
                b.sequence(LPAREN, ASSIGNMENT_EXPRESSION, RPAREN),
                SELECTOR,
                REGULAR_EXPRESSION_LITERAL,
public static void expressions(LexerfulGrammarBuilder b){
				NUMBER,
                NAME,
                TRUE, FALSE,
                VARIABLE,
                ARRAY,
                HASH_ARRAY_ACCESSES,
                RESOURCE_REF,
                UNDEF));

public class ResourceSpec extends GrammarSpec {
		assertThat(p).matches('::apache::mod { \'expires\': }')
	}

	def "resource with before attribute"(){
		expect:
		assertThat(p).matches('''file { 'expires.conf':
									before  => File[$::apache::mod_dir],
								  }''')
	}

	def "handle multiple resource bodies"(){
public class SelectorSpec extends GrammarSpec {
								 root    => 0,
								}''')
	}
}
class FunctionSpec extends GrammarSpec {
        expect:
        assertThat(p).matches('include $my_classes')
    }
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Char=\u9| \uA | \uD | [\u20-\uD7FF] | [\uE000-\uFFFD] | [\u10000-\u10FFFF]
"<" / {S}? {IntegerLiteral}               {return XQueryTypes.LT_CHAR;}
"<" / {S}? {DecimalLiteral}               {return XQueryTypes.LT_CHAR;}
"<" / {S}? {DoubleLiteral}                {return XQueryTypes.LT_CHAR;}
"<="                                      {return XQueryTypes.LE_CHARS;}
">="                                      {return XQueryTypes.GE_CHARS;}
"<"                                       {pushState(START_TAG); return XQueryTypes.LT_CHAR;}
Char=\u9| \uA | \uD | [\u20-\uD7FF] | [\uE000-\uFFFD] | [\u10000-\u10FFFF]
}

<START_TAG> {
{S}                                       {return XQueryTypes.S;}
{NCName}                                  {return XQueryTypes.NCNAME;}
":"                                       {return XQueryTypes.COLON;}
"="                                       {return XQueryTypes.EQUAL;}
Char=\u9| \uA | \uD | [\u20-\uD7FF] | [\uE000-\uFFFD] | [\u10000-\u10FFFF]
}

<END_TAG> {
{S}                                       {return XQueryTypes.S;}
{NCName}                                  {return XQueryTypes.NCNAME;}
":"                                       {return XQueryTypes.COLON;}
">"                                       {popState(); return XQueryTypes.GT_CHAR;}

public void testImportModuleWithoutPrefix() throws Exception {
                ";", ";"
        });
    }
}
public void testProcessingInstruction() throws Exception {
        doTest(true);
    }

    @Override
    protected String getTestDataPath() {
        return "src/test/testData/org/intellij/xquery";

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public Keyword keyword() {

    @Override
    protected String patternStr() {
        return "^(%!s(MISSING)%!s(MISSING)((?@())))";
    }

    @Override
    public IParser create(IContext ctx) {
        return new ParserBase(ctx) {
            @Override
            public TextBuilder go() {
                Regex r = reg(dialect());
                if (!r.search(remain())) {
                    raiseParseException("Error parsing @get call. Correct usage: @get(\"myVal\")");
                }
                step(r.stringMatched().length()); // remain: @get("name")...
                String s = r.stringMatched(2); // s: ("name")
                s = s.substring(1); // s: "name")
protected void output() {
        };
    }

    public static void main(String[] args) {
//        String s = "@get(\"var\":A.b())";
//        GetParser ap = new GetParser();
//        Regex r = ap.reg(new Rythm());
//        System.out.println(r);
//        if (r.search(s)) {
//            System.out.println("m: " + r.stringMatched());
//            System.out.println("1: " + r.stringMatched(1));
//            System.out.println("2: " + r.stringMatched(2));
//            System.out.println("3: " + r.stringMatched(3));
//            System.out.println("4: " + r.stringMatched(4));
//            System.out.println("5: " + r.stringMatched(5));
//        }
        Regex r = new Regex("(((?@\"\")|(?@'')|[a-zA-Z_][\\w_]+)(\\s*[:=,]\\s*('.'|(?@\"\")|[a-zA-Z_][a-zA-Z0-9_\\.]*(?@())*(?@[])*(?@())*(\\.[a-zA-Z][a-zA-Z0-9_\\.]*(?@())*(?@[])*(?@())*)*))?)");
        String s = "(\"sammyRoute\", \"#/\")";
        s = s.substring(1); // s: "name")
        System.out.println(s);
        s = s.substring(0, s.length() - 1); // s: "name"
        System.out.println(s);
        if (r.search(s)) {
            System.out.println("1 " + r.stringMatched(1));
            System.out.println("2 " + r.stringMatched(2));
            System.out.println("4 " + r.stringMatched(4));
        }
    }

}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
DQ_STRING = "\"" ([^\"]|"\\\\"|"\\\"" )* "\""?
SQ_STRING = "\'" ([^\']|"\\\\"|"\\\'" )* "\'"?
XQ_STRING = "\`" ([^\`]|"\\\\"|"\\\`" )* "\`"?

QUOTE_LIKE_SUFFIX= ("'" {QUALIFIED_IDENTIFIER} ? )?
CORE_PREFIX = "CORE::"?

PERL_VERSION_CHUNK = [0-9][0-9_]*
      <li>Formatter bugfixes. Please, don't hesitate to report improperly formatted code.</li>
      <li>Suppressed lexing of <code>&~</code> as non-existing internal variable. <a href="https://github.com/Camelcade/Perl5-IDEA/issues/1449">#1449</a></li>
      <li>Resolve of dereference chain if comment is inside it, <a href="https://github.com/Camelcade/Perl5-IDEA/issues/1483">#1483</a></li>
      </ul>
     </p>
    ]]>
protected String getTestDataPath() {
    return "testData/parser/perl";
  }

  public void testParenthesizedPrintArguments() {doTest();}

  public void testClassAccessorSubDeclaration() {doTest();}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>

		<!-- The version of the Jetty webapp container to use. -->
		<jetty.version>9.0.6.v20130930</jetty.version>
		
		<!-- Exclude the third-party JavaScript files from static analysis via SonarQube. -->
		<sonar.exclusions>
			src/main/webapp/WEB-INF/resources/js/vendor/*
		</sonar.exclusions>
						<configuration>
							<destFile>${sonar.jacoco.itReportPath}</destFile>
							<append>true</append>
						</configuration>
					</execution>
				</executions>
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import java.util.Map;

import soot.baf.DoubleWordType;
import soot.jimple.IdentityStmt;
import soot.jimple.Stmt;
import soot.options.Options;
else if (field.hasTag("LongConstantValueTag")){
                }
                else if (field.hasTag("FloatConstantValueTag")){
                    fieldString += " = ";
                    float val = ((FloatConstantValueTag)field.getTag("FloatConstantValueTag")).getFloatValue();
                    fieldString += val;
                }
                else if (field.hasTag("DoubleConstantValueTag")){
                    fieldString += " = ";
                    double val = ((DoubleConstantValueTag)field.getTag("DoubleConstantValueTag")).getDoubleValue();
                    fieldString += val;
                }
                if (field.hasTag("SyntheticTag") || Modifier.isSynthetic(field.getModifiers())){
                    fieldString +=" .synthetic";
public void print(PrintWriter out)
        for (String s : code)
            out.println(s);
    }

}

public IncInst newIncInst(Local aLocal, Constant aConstant)
  }
  
    public LookupSwitchInst newLookupSwitchInst(Unit defaultTarget, 
                             List lookupValues, List targets)
    {
        return new BLookupSwitchInst(defaultTarget, lookupValues, targets);
    }
else if (i.getConstant() instanceof DoubleConstant)
                    else if(v.value == 1)
                        emit("dconst_1");
                    else {
                        String s = v.toString();
                        
                        if(s.equals("#Infinity"))
                            s="+DoubleInfinity";
                        
                        if(s.equals("#-Infinity"))
                            s="-DoubleInfinity";
                        
                        if(s.equals("#NaN"))
                            s="+DoubleNaN";
                        
                        emit("ldc2_w " + s);
                    }
                }
else if(v.value == 1)
                    else if(v.value == 2)
                        emit("fconst_2");
                    else {
                        String s = v.toString();
                        
                        if(s.equals("#InfinityF"))
                            s="+FloatInfinity";
                        if(s.equals("#-InfinityF"))
                            s="-FloatInfinity";
                        
                        if(s.equals("#NaNF"))
                            s="+FloatNaN";
                        
                        emit("ldc " + s);
                    }
                }
public void caseLookupSwitchInst(LookupSwitchInst i)
            {
                emit("lookupswitch");

                List lookupValues = i.getLookupValues();
                List<Unit> targets = i.getTargets();

                for(int j = 0; j < lookupValues.size(); j++)
import java.util.*;

import soot.*;

public interface LookupSwitchInst extends Inst
{

    public void setLookupValue(int index, int value);
    public int getLookupValue(int index);
    public List getLookupValues();
    public void setLookupValues(List values);
    
    public int getTargetCount();
    public Unit getTarget(int index);
public void caseLookupSwitchStmt(LookupSwitchStmt s)
                emitValue(s.getKey());
                emit("lookupswitch", -1);

                List lookupValues = s.getLookupValues();
                List<Unit> targets = s.getTargets();

                for(int i = 0; i < lookupValues.size(); i++)
public void caseDoubleConstant(DoubleConstant v)
                else if(v.value == 1)
                    emit("dconst_1", 2);
                else {
                    String s = v.toString();
                    
                    if(s.equals("#Infinity"))
                        s="+DoubleInfinity";
                    
                    if(s.equals("#-Infinity"))
                        s="-DoubleInfinity";
                    
                    if(s.equals("#NaN"))
                        s="+DoubleNaN";
                        
                    emit("ldc2_w " + s, 2);
                }
            }
else if(v.value == 1)
                else if(v.value == 2)
                    emit("fconst_2", 1);
                else {
                    String s = v.toString();
                    
                    if(s.equals("#InfinityF"))
                        s="+FloatInfinity";
                    if(s.equals("#-InfinityF"))
                        s="-FloatInfinity";
                        
                    if(s.equals("#NaNF"))
                        s="+FloatNaN";
                    
                    emit("ldc " + s, 1);
                }
            }


            public void caseInstanceFieldRef(InstanceFieldRef v)
            {
                emitValue(v.getBase());
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public List<CmlParserError> getErrors() {

private PAction stm2action(PStm stm)
{
	return new AStmAction((stm!=null?stm.getLocation():null),stm);
}

private PStm action2stm(PAction action)
{
	return new AActionStm((action!=null?action.getLocation():null),null,action);
}


processDefinition returns[AProcessDefinition def]

process returns[PProcess proc]
@after { $proc.setLocation(extractLexLocation($start, $stop)); }
    : process0 processSuffix?
        {
            $proc = $process0.proc;
            PProcess suffix = $processSuffix.suffix;
            if (suffix != null) {
                if (suffix instanceof AStartDeadlineProcess)
                    ((AStartDeadlineProcess)suffix).setLeft($proc);
                else if (suffix instanceof AEndDeadlineProcess)
process returns[PProcess proc]
                suffix.setLocation(extractLexLocation($start,$processSuffix.stop));
                $proc = suffix;
            }
        }
    | processReplicated
        {
            $proc = $processReplicated.proc;
actionList returns[List<PAction> actions]
    ;

action returns[PAction action]
    : action0 actionSuffix?
        {
            $action = $action0.action;
            PAction suffix = $actionSuffix.suffix;
            if (suffix != null) {
                if (suffix instanceof AStartDeadlineAction)
                    ((AStartDeadlineAction)suffix).setLeft($action);
                else if (suffix instanceof AEndDeadlineAction)
action returns[PAction action]
                suffix.setLocation(extractLexLocation($start,$actionSuffix.stop));
                $action = suffix;
            }
        }
    | actionReplicated  {$actionReplicated.action.setLocation(extractLexLocation($start,$actionReplicated.stop));$action = $actionReplicated.action; }
    ;

leadingIdAction returns[PAction action]
        {
            CmlLexNameToken name = new CmlLexNameToken("", $id.getText(), extractLexLocation($start));
            $action = new AReferenceAction(null, name, new ArrayList<PExp>());
			//in case of a channel renaming action; then the location must be set here else only the outer action will have a location set
			$action.setLocation(extractLexLocation($start,$id));
        }
        ( renamingExpr
            // action call plus rename
functionDefinition returns[SFunctionDefinition def]
                $def = $expl.tail;
                if ( !$IDENTIFIER.getText().equals($def.getName().getName()) ) {
                    //fixes bug 172
			         String msg = "Mismatch in function definition.  Signature has " + $IDENTIFIER.getText() + ", definition has " + $def.getName().getName();
			         errors.add(new CmlParserError(msg, new RecognitionException(), sourceFileName, $IDENTIFIER));

                }
            } else {
operationDef returns[SOperationDefinition def]
                // FIXME --- check that the IDENTIFIERs match and
                // throw a MismatchedTokenException (if that's the
                // right exception)
				if(!$id.getText().equals($secondId.getText()))
				{
					 //relates to bug 172
			         String msg = "Mismatch in operation definition.  Signature has " + $id.getText() + ", definition has " + $secondId.getText();
			         errors.add(new CmlParserError(msg, new RecognitionException(), sourceFileName, $secondId));
				}

                AActionStm bodyWrapper = new AActionStm();
				bodyWrapper.setAction($operationBody.body);
				bodyWrapper.setLocation($operationBody.body.getLocation());
               
                AExplicitOperationDefinition opdef =
                    AstFactory.newAExplicitOperationDefinition(
                        new CmlLexNameToken("", $id.getText(), extractLexLocation($id)),
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
static boolean kindsig(PsiBuilder builder_, int level_) {
  // "\\case" altslist
  //                | '\' apat+ "->" exp
  //                | "let" decls "in" exp
  //                | "if" exp "then" exp "else" exp
  //                | "case" exp "of" altslist
  //                | "do" open stmts close
  //                | "mdo" open stmts close
private static boolean lexp_2(PsiBuilder builder_, int level_) {
    return result_ || pinned_;
  }

  // "if" exp "then" exp "else" exp
  private static boolean lexp_3(PsiBuilder builder_, int level_) {
    if (!recursion_guard_(builder_, level_, "lexp_3")) return false;
    boolean result_;
private static boolean lexp_3(PsiBuilder builder_, int level_) {
    result_ = consumeToken(builder_, IF);
    result_ = result_ && exp(builder_, level_ + 1);
    pinned_ = result_; // pin = 2
    result_ = result_ && report_error_(builder_, consumeToken(builder_, THEN));
    result_ = pinned_ && report_error_(builder_, exp(builder_, level_ + 1)) && result_;
    result_ = pinned_ && report_error_(builder_, consumeToken(builder_, ELSE)) && result_;
    result_ = pinned_ && exp(builder_, level_ + 1) && result_;
    exit_section_(builder_, level_, marker_, null, result_, pinned_, null);
    return result_ || pinned_;
  }

  // "case" exp "of" altslist
  private static boolean lexp_4(PsiBuilder builder_, int level_) {
    if (!recursion_guard_(builder_, level_, "lexp_4")) return false;
  @Nullable
  HaskellOqtycon getOqtycon();

  @NotNull
  List<HaskellQtycls> getQtyclsList();

  @NotNull
  List<HaskellTypee> getTypeeList();

public interface HaskellDefaultdecl extends PsiElement {

  @NotNull
  List<HaskellTypee> getTypeeList();

  @Nullable
  PsiElement getLparen();
  @Nullable
  HaskellOqtycon getOqtycon();

  @NotNull
  List<HaskellQtycls> getQtyclsList();

  @Nullable
  HaskellTypee getTypee();
  @Nullable
  HaskellNewconstr getNewconstr();

  @NotNull
  List<HaskellQtycls> getQtyclsList();

  @Nullable
  HaskellTycon getTycon();
public HaskellOqtycon getOqtycon() {
  }

  @Override
  @NotNull
  public List<HaskellQtycls> getQtyclsList() {
    return PsiTreeUtil.getChildrenOfTypeAsList(this, HaskellQtycls.class);
  }

  @Override
public void accept(@NotNull PsiElementVisitor visitor) {
  }

  @Override
  @NotNull
  public List<HaskellTypee> getTypeeList() {
    return PsiTreeUtil.getChildrenOfTypeAsList(this, HaskellTypee.class);
  }

  @Override
public HaskellOqtycon getOqtycon() {
  }

  @Override
  @NotNull
  public List<HaskellQtycls> getQtyclsList() {
    return PsiTreeUtil.getChildrenOfTypeAsList(this, HaskellQtycls.class);
  }

  @Override
public HaskellNewconstr getNewconstr() {
  }

  @Override
  @NotNull
  public List<HaskellQtycls> getQtyclsList() {
    return PsiTreeUtil.getChildrenOfTypeAsList(this, HaskellQtycls.class);
  }

  @Override
private infixexp ::= '-'* lexp [qop infixexp]
private lexp ::= "\\case" altslist
               | '\' apat+ "->" exp
               | "let" decls "in" exp
               | "if" exp "then" exp "else" exp
               | "case" exp "of" altslist
               | "do" open stmts close
               | "mdo" open stmts close
public HaskellLexerTest() {
    public void testLayout00014()       { doTest(true, true); }
    public void testLayout00015()       { doTest(true, true); }
    public void testLayout00016()       { doTest(true, true); }
    public void testComment00001()      { doTest(true, true); }
    public void testComment00002()      { doTest(true, true); }
    public void testComment00003()      { doTest(true, true); }
public HaskellParserTest() {
    public void testLayout00014()       { doTest(true, true); }
    public void testLayout00015()       { doTest(true, true); }
    public void testLayout00016()       { doTest(true, true); }
    public void testComment00001()      { doTest(true, true); }
    public void testComment00002()      { doTest(true, true); }
    public void testComment00003()      { doTest(true, true); }
protected Lexer createLexer() {
    public void testLayout00014()       { doTest(true, true); }
    public void testLayout00015()       { doTest(true, true); }
    public void testLayout00016()       { doTest(true, true); }
    public void testComment00001()      { doTest(true, true); }
    public void testComment00002()      { doTest(true, true); }
    public void testComment00003()      { doTest(true, true); }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	ADMIN_COMMAND_ERROR("admin_cmd_error", "&eError for input string: &6%!c(MISSING)md%!&(MISSING)e. Use /" + EchoPet.getPluginInstance().adminCmdString + " for help"),
	COMMAND_ERROR("cmd_error", "&eError for input string: &6%!c(MISSING)md%!&(MISSING)e. Use /" + EchoPet.getPluginInstance().cmdString + " for help."),
	IN_GAME_ONLY("in_game_only", "&6%!c(MISSING)md%!&(MISSING)ecan only be used in-game."),
	
	DIMENSION_CHANGE("dimension_change", "&eDimension change initiated. Warping space and time to retrieve your Pet..."),
	AUTOSAVE_PET_LOAD("autosave_pet_load", "&eYour last active pet (&6%!p(MISSING)etname%!&(MISSING)e) now follows close behind you."),
public static UnorganisedPetData formPetFromArgs(EchoPet ec, CommandSender sende
			String[] split = s.split(";");
			if (split[0].contains(":")) {
				String[] splitt = split[0].split(":");
				petString = splitt[0].toLowerCase();
				dataString = splitt[1];
				name = split[1];
public static UnorganisedPetData formPetFromArgs(EchoPet ec, CommandSender sende
			}
			else if (split[1].contains(":")) {
				String[] splitt = split[1].split(":");
				petString = split[0].toLowerCase();
				name = splitt[0];
				dataString = splitt[1];
else if (split[1].contains(":")) {
		}
		else if (s.contains(":")) {
			String[] split = s.split(":");
			petString = split[0].toLowerCase();
			dataString = split[1];
			if (!dataString.contains(",")) {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
<dependency>
    <groupId>com.bladejava</groupId>
    <artifactId>blade-kit</artifactId>
    <version>1.4.0-alpha</version>
</dependency>
```

<dependency>
    <groupId>com.bladejava</groupId>
    <artifactId>blade-core</artifactId>
    <version>1.7.0-beta</version>
</dependency>
```

<dependency>
    <groupId>com.bladejava</groupId>
    <artifactId>blade-embed-jetty</artifactId>
    <version>0.0.8</version>
</dependency>
```

<dependency>
    <groupId>com.bladejava</groupId>
    <artifactId>blade-template-jetbrick</artifactId>
    <version>0.0.7</version>
</dependency>
```

Grab via `Maven`：
<dependency>
	<groupId>com.bladejava</groupId>
	<artifactId>blade-core</artifactId>
	<version>1.7.0-beta</version>
</dependency>
<dependency>
	<groupId>com.bladejava</groupId>
	<artifactId>blade-embed-jetty</artifactId>
	<version>0.0.8</version>
</dependency>
```
or `Gradle`:
```sh
compile 'com.bladejava:blade-core:1.7.0-beta'
compile 'com.bladejava:blade-embed-jetty:0.0.8'
```

Create `Main` method like this：
Blade 是一款轻量级的MVC框架, 重新定义JavaWeb开发,它拥有简洁
<dependency>
	<groupId>com.bladejava</groupId>
	<artifactId>blade-core</artifactId>
	<version>1.7.0-beta</version>
</dependency>
<dependency>
	<groupId>com.bladejava</groupId>
	<artifactId>blade-embed-jetty</artifactId>
	<version>0.0.8</version>
</dependency>
```

或者  `Gradle`:

```sh
compile 'com.bladejava:blade-core:1.7.0-beta'
compile 'com.bladejava:blade-embed-jetty:0.0.8'
```

编写 `Main`函数：
# Blade 更新日志

### v1.6.7
	1. 支持自定义filter, servlet
	2. 支持websocket
		</dependency>
				
		<dependency>
			<groupId>com.bladejava</groupId>
			<artifactId>blade-kit</artifactId>
			<version>${blade-kit.version}</version>
		</dependency>
 * Blade Core Class
 *
 * @author <a href="mailto:biezhi.me@gmail.com" target="_blank">biezhi</a>
 * @since 1.6.6
 */
public final class Blade {

public Response cookie(Cookie cookie) {

	@Override
	public Response cookie(String name, String value) {
		return cookie(name, value);
	}

	@Override
public void handle(Request request, Response response, Route route) throws Excep
				}
			}
		} catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e){
			throw new BladeException(e.getMessage());
		} catch (Exception e){
			throw e;
		}
<?xml version="1.0"?>
<project
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"
	xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>com.bladejava</groupId>
		<artifactId>blade</artifactId>
		<version>1.0</version>
	</parent>
	
	<artifactId>blade-embed-jetty</artifactId>
	<version>${blade-embed-jetty.version}</version>
	<name>blade-embed-jetty</name>
		
	<dependencies>

		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
		</dependency>

		<dependency>
			<groupId>com.bladejava</groupId>
			<artifactId>blade-core</artifactId>
			<version>${blade-core.version}</version>
		</dependency>

		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>${servlet.version}</version>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>org.eclipse.jetty</groupId>
			<artifactId>jetty-server</artifactId>
			<version>${jetty.version}</version>
		</dependency>
		<dependency>
			<groupId>org.eclipse.jetty</groupId>
			<artifactId>jetty-webapp</artifactId>
			<version>${jetty.version}</version>
		</dependency>

	</dependencies>

</project>

import static com.blade.Blade.$;

public class EmbedJettyServer implements EmbedServer {

	private static final Logger LOGGER = LoggerFactory.getLogger(EmbedJettyServer.class);
public EmbedJettyServer() {
		if(DynamicContext.isJarContext()){
			URL url = EmbedJettyServer.class.getResource("/");
			this.classPath = url.getPath();
//			if(null == url){
//				String urlStr = EmbedJettyServer.class.getResource("").getPath();
//				int pos = urlStr.indexOf("jar!/");
//				if(pos != -1){
//					String jarPath = new File(urlStr.substring(5, pos + 2)).getParent();
//					this.classPath = new File(jarPath).getParent() + File.separator + $().configuration().getClassPath();
//
//				}
//			}
			LOGGER.info("add classpath: {}", classPath);
		}

import java.io.*;
import java.net.URL;
import java.net.URLDecoder;
import java.util.Map;
import java.util.Properties;

public Config() {
    
	public Config load(Properties props) {
        Assert.notNull(props, "properties not null");
        for (String key : props.stringPropertyNames()) {
            String value = props.getProperty(key);
            config.put(key, value);
        }
	<name>blade</name>
	<url>https://github.com/biezhi/blade</url>

	<licenses>
        <license>
            <name>The Apache Software License, Version 2.0</name>
            <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
        </license>
    </licenses>

    <developers>
        <developer>
            <name>biezhi</name>
            <email>biezhi.me@gmail.com</email>
        </developer>
    </developers>

    <scm>
        <connection>scm:git@github.com:biezhi/blade.git</connection>
        <developerConnection>scm:git@github.com:biezhi/blade.git</developerConnection>
        <url>git@github.com:biezhi/blade.git</url>
    </scm>
	
    <repositories>
        <repository>
            <id>oss-snapshots</id>
            <url>https://oss.sonatype.org/content/repositories/snapshots</url>
		<mockito.version>2.0.2-beta</mockito.version>
		<slf4j-api.version>1.7.21</slf4j-api.version>
		<slf4j-log4j12.version>1.7.21</slf4j-log4j12.version>
		<blade-core.version>1.7.0-beta</blade-core.version>
		<blade-kit.version>1.4.0-beta</blade-kit.version>
		<blade-aop.version>1.0.0</blade-aop.version>
		<blade-embed-jetty.version>0.0.7</blade-embed-jetty.version>
		<jetty.version>9.2.12.v20150709</jetty.version>
	</properties>

        </plugins>
    </build>

    <profiles>
        <profile>
            <id>release</id>
            <distributionManagement>
                <snapshotRepository>
                    <id>oss</id>
                    <url>https://oss.sonatype.org/content/repositories/snapshots/</url>
                </snapshotRepository>
                <repository>
                    <id>oss</id>
                    <url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>
                </repository>
            </distributionManagement>
            <build>
                <plugins>
                    <!--  Source  -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-source-plugin</artifactId>
                        <version>2.4</version>
                        <executions>
                            <execution>
                                <phase>package</phase>
                                <goals>
                                    <goal>jar-no-fork</goal>
                                </goals>
                            </execution>
                        </executions>
                        <configuration>
                            <testFailureIgnore>true</testFailureIgnore>
                        </configuration>
                    </plugin>
                    <!--  Javadoc  -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-javadoc-plugin</artifactId>
                        <version>2.10.2</version>
                        <configuration>
                            <charset>UTF-8</charset>
                            <docencoding>UTF-8</docencoding>
                        </configuration>
                        <executions>
                            <execution>
                                <phase>package</phase>
                                <goals>
                                    <goal>jar</goal>
                                </goals>
                                <configuration>
                                    <additionalparam>-Xdoclint:none</additionalparam>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <!--  Gpg Signature  -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-gpg-plugin</artifactId>
                        <version>1.6</version>
                        <executions>
                            <execution>
                                <id>sign-artifacts</id>
                                <phase>verify</phase>
                                <goals>
                                    <goal>sign</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

</project>
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import org.doremus.ontology.CIDOC;
import org.doremus.ontology.FRBROO;
import org.doremus.ontology.MUS;

import java.net.URISyntaxException;
import java.util.ArrayList;
public M42_PerformedExpressionCreation(String note, Record record, F28_Expressio
  }

  private void parseNote(String note) {
    Pattern p1 = Pattern.compile(noteRegex1);
    Matcher m1 = p1.matcher(note);

private void parseNote(String note) {
        if (parts.length > 0) place = parts[0].trim();
        String post = parts.length > 1 ? parts[1].trim() : "";

        Pattern pC = Pattern.compile("sous la direction d['eu] ?(.+)");
        Matcher mC = pC.matcher(post);
        if (mC.find()) {
          conductor = mC.group(1);
private void parseNote(String note) {
          while (mI.find()) {
            String interpreter = mI.group(1),
              role = mI.group(2);
            for (String intpt : interpreter.split("(,| et) "))
              addRole(intpt, role);
          }
        }

private void parseNote(String note) {

  private void addRole(String actor, String role) {
    actor = actor.trim();
    if(actor.isEmpty()) return;

    RDFNode actorRes;
    if (actor.equals("compositeur") || actor.equals("le compositeur")) {
private void addRole(String actor, String role) {
    }

    role = role.trim();
    if (role.equals("conducteur"))
      M28.addProperty(MUS.U35_foresees_function_of_type, model.createLiteral("conducteur", "fr"));
    else M28.addProperty(MUS.U1_used_medium_of_performance, slem.lemmatize(role).get(0), "fr");

  }

  public Resource getExpression() {
public PF22_SelfContainedExpression(Record record, String identifier, PF28_Expre
    super(record, identifier);
    this.resource.addProperty(RDF.type, FRBROO.F22_Self_Contained_Expression);
    this.resource.addProperty(DCTerms.identifier, identifier);
    this.resource.addProperty(OWL.sameAs, model.createResource("http://digital.philharmoniedeparis.fr/doc/CIMU/"+identifier));

    this.f28 = f28;
    this.slem = Converter.stanfordLemmatizer;
public PF22_SelfContainedExpression(Record record, String identifier, PF28_Expre
        parseOpus(catalog);
        continue;
      }
      for(String c : catalog.split(" ; "))
        parseCatalog(c);
    }

private void parseCatalog(String catalog) {
    if (catalogParts.length > 1) {
      catalogName = catalogParts[0].trim();
      catalogNum = catalogParts[1].trim();
    } else if(catalog.matches("^([a-zA-Z]+)(\\d+.*)$")){
      Matcher m = Pattern.compile("^([a-zA-Z]+)(\\d+.*)$").matcher(catalog);
      m.find();
      catalogName = m.group(1).trim();
public Resource makeCastingDetail(String name, int quantity, boolean solo, Strin
    if (name.equals("contrebasses")) name = "contrebasse";
//    System.out.println(name + " --> " + slem.lemmatize(name));
    // singularize
    name = String.join(" ", slem.lemmatize(name));


    Resource M23CastingDetail = model.createResource(uri)
public PF22_SelfContainedExpression addPremiere(PM42_PerformedExpressionCreation
    return this;
  }

}
private void parseNote(String note) {

  }

  private static String cleanString(String note, String group) {
    if (note == null) return null;
    if (group == null || group.isEmpty()) return note;
private Role makeRole(String actor, String role) {
    if (role == null) return makeRole(actor, (String) null);
    role = role.trim();

    if (!role.equals("conducteur")) role = slem.lemmatize(role).toString();
    return new Role(actor, role, this.model);
  }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
package org.projog.core.parser;

class Delimiters {
   private static final char ARGUMENT_SEPARATOR = ',';
   private static final char PREDICATE_OPENING_BRACKET = '(';
static boolean isDelimiter(int c) {
      }
   }

   static boolean isPredicateOpenBracket(String value) {
      return isMatch(value, PREDICATE_OPENING_BRACKET);
   }

   static boolean isPredicateCloseBracket(String value) {
      return isMatch(value, PREDICATE_CLOSING_BRACKET);
   }

   static boolean isListOpenBracket(String value) {
      return isMatch(value, LIST_OPENING_BRACKET);
   }

   static boolean isListOpenBracket(int c) {
      return c == LIST_OPENING_BRACKET;
   }

   static boolean isListCloseBracket(String value) {
      return isMatch(value, LIST_CLOSING_BRACKET);
   }

   static boolean isListTail(String value) {
      return isMatch(value, LIST_TAIL);
   }

   static boolean isArgumentSeperator(String value) {
      return isMatch(value, ARGUMENT_SEPARATOR);
   }

   static boolean isSentenceTerminator(String value) {
      return isMatch(value, PERIOD);
   }

   private static boolean isMatch(String input, char expected) {
      return input != null && input.length() == 1 && input.charAt(0) == expected;
   }
}
public Term parseSentence() {
         return null;
      }

      String trailingText = popValue();
      if (!isSentenceTerminator(trailingText)) {
         throw newParserException("Expected . after: " + t + " but got: " + trailingText);
      }

      return t;
private Term getTerm(int maxLevel) {
    * @param maxLevel the maximum priority/precedence/level of operands to parse - if an operand represented by the next
    * term retrieved by this method has a higher priority then it is ignored for now ({@code currentTerm} is returned
    * "as-is"}.
    * @param {@code true} if this method is being called by another method, {@code false} if it is being called recursively by itself.
    */
   private Term getTerm(final Term currentTerm, final int currentLevel, final int maxLevel, final boolean isFirst) {
      final String next = popValue();
      if (operands.postfix(next) && operands.getPostfixPriority(next) <= currentLevel) {
         Term postfixTerm = addPostfixOperand(next, currentTerm);
         return getTerm(postfixTerm, currentLevel, maxLevel, false);
      } else if (!operands.infix(next)) {
         // could be '.' if end of sentence 
         // or ',', '|', ']' or ')' if parsing list or predicate
         // or could be an error
         parser.rewind(next);
         return currentTerm;
      }

      final int level = operands.getInfixPriority(next);
      if (level > maxLevel) {
         parser.rewind(next);
         return currentTerm;
      }

private Term getTerm(final Term currentTerm, final int currentLevel, final int m
    * be thrown if does).
    */
   private Term getPossiblePrefixArgument(int currentLevel) {
      final String value = popValue();
      if (operands.prefix(value) && parser.isFollowedByTerm()) {
         if (value.equals(MINUS_SIGN) && isFollowedByNumber()) {
            return getNegativeNumber();
private Term getPossiblePrefixArgument(int currentLevel) {
         Term argument = getTerm(prefixLevel);
         return createPrefixTerm(value, argument);
      } else {
         parser.rewind(value);
         return getDiscreteTerm();
      }
   }

   private Term getNegativeNumber() {
      final String value = "-" + popValue();
      if (parser.getType() == WordType.INTEGER) {
         return toIntegerNumber(value);
      } else {
         return toDecimalFraction(value);
private Term addPostfixOperand(String postfixOperand, Term original) {
   }

   private Term getDiscreteTerm() {
      final String value = popValue();
      if (isListOpenBracket(value)) {
         return parseList();
      } else if (isPredicateOpenBracket(value)) {
         return getTermInBrackets();
      } else {
         switch (parser.getType()) {
            case ATOM:
            case QUOTED_ATOM:
            case SYMBOL:
               return getAtomOrStructure(value);
            case INTEGER:
               return toIntegerNumber(value);
            case FLOAT:
               return toDecimalFraction(value);
            case VARIABLE:
               return getVariable(value);
            case ANONYMOUS_VARIABLE:
               return AnonymousVariable.ANONYMOUS_VARIABLE;
            default:
private DecimalFraction toDecimalFraction(final String value) {
    * a newly created {@code Atom} is returned.
    */
   private Term getAtomOrStructure(String name) {
      String value = parser.isEndOfStream() ? null : peekValue();
      if (isPredicateOpenBracket(value)) {
         popValue(); //skip opening bracket
         if (isPredicateCloseBracket(peekValue())) {
            throw newParserException("No arguments specified for structure: " + name);
private Term getAtomOrStructure(String name) {
         args.add(t);

         do {
            value = popValue();
            if (isPredicateCloseBracket(value)) {
               return Structure.createStructure(name, toArray(args));
            } else if (isArgumentSeperator(value)) {
               args.add(getCommaSeparatedArgument());
            } else {
               throw newParserException("While parsing arguments of " + name + " expected ) or , but got: " + value);
            }
         } while (true);
      } else {
private Term parseList() {
      Term tail = EmptyList.EMPTY_LIST;

      while (true) {
         String value = popValue();
         if (isListCloseBracket(value)) {
            break;
         }
         parser.rewind(parser.getValue());
         Term arg = getCommaSeparatedArgument();
         args.add(arg);

         value = popValue(); // | ] or ,
         if (isListCloseBracket(value)) {
            break;
         } else if (isListTail(value)) {
            tail = getCommaSeparatedArgument();
            value = popValue();
            if (!isListCloseBracket(value)) {
               throw newParserException("Expected ] to mark end of list after tail but got: " + value);
            }
            break;
         } else if (!isArgumentSeperator(value)) {
            throw newParserException("While parsing list expected ] | or , but got: " + value);
         }
      }
      return ListFactory.createList(toArray(args), tail);
private Term getTermInBrackets() {
      // considering the priority of any surrounding terms outside the brackets)
      // we call getArgument with the highest possible priority.
      Term t = getTerm(Integer.MAX_VALUE);
      final String next = popValue();
      if (!isPredicateCloseBracket(next)) {
         throw newParserException("Expected ) but got: " + next);
      }
      return t;
   }

   private String popValue() {
      parser.next();
      return parser.getValue();
   }

   private String peekValue() {
      String value = popValue();
      parser.rewind(value);
      return value;
   }

   private boolean isFollowedByNumber() {
      String value = popValue();
      WordType et = parser.getType();
      parser.rewind(value);
      return et == WordType.INTEGER || et == WordType.FLOAT;
   }


import org.projog.core.Operands;

/** 
 * Parses an input stream into discrete 'words' that are used to represent Prolog queries and rules.
 * 
 * @see SentenceParser
 */
class WordParser {
   private final CharacterParser parser;
   private final Operands operands;
   private String value;
   private WordType type;
   private boolean rewound;

   WordParser(Reader reader, Operands operands) {
   /**
    * Move the parser forward one word.
    * 
    * @throws ParserException if there are no more words to parse (i.e. parser has reached the end of the underlying input stream)
    */
   void next() {
      if (rewound) {
void next() {
      }
   }

   /** The value that was parsed as a result of the last call to {@link #next()} */
   String getValue() {
      return value;
   }

   /** The type of the value parsed as a result of the last call to {@link #next()} */
   WordType getType() {
      return type;
   }

   /** Does the next value to be parsed represent a term (rather than a delimiter) */
boolean isEndOfStream() {
   }

   /**
    * Rewinds the parser (i.e. "pushes-back" the last parsed word). 
    * <p>
    * The last parsed value will remain after the next call to {@link #next()}
    * 
    * @param value the value to rewind
    * @throws IllegalArgumentException if already in a rewound state (i.e. have already called {@link WordParser#rewind(String)} since the last call to {@link #next()}), or {@code value} is not equal to {@link #getValue()} 
    */
   void rewind(String value) {
      if (rewound || value == null || !value.equals(this.value)) {
         throw new IllegalArgumentException("Rewound = " + rewound + " this.value = " + this.value + " value = " + value);
      }
      rewound = true;
   }
private void setSymbol(int c) {
         }
      }

      if (length > 1 && isDelimiter(sb.charAt(length - 1))) {
         parser.rewind();
         setValue(sb.toString().substring(0, length - 1), SYMBOL);
      } else {
         setValue(sb, SYMBOL);
      }
   }

   private void skipWhitespace() {
private void setValue(StringBuilder value, WordType type) {
   }

   private void setValue(String value, WordType type) {
      this.value = value;
      this.type = type;
   }
}
package org.projog.core.parser;

/** @see WordParser#getType() */
enum WordType {
   ATOM, QUOTED_ATOM, INTEGER, FLOAT, SYMBOL, VARIABLE, ANONYMOUS_VARIABLE
}
public class DelimitersTest {
   @Test
   public void testArgumentSeperator() {
      assertTrue(Delimiters.isArgumentSeperator(","));
      assertFalse(Delimiters.isArgumentSeperator(";"));
      assertFalse(Delimiters.isArgumentSeperator(" "));
      assertFalse(Delimiters.isArgumentSeperator(null));
   }

   @Test
   public void testListOpenBracket() {
      assertTrue(Delimiters.isListOpenBracket("["));
      assertFalse(Delimiters.isListOpenBracket("]"));
      assertFalse(Delimiters.isListOpenBracket("("));
      assertFalse(Delimiters.isArgumentSeperator(null));
   }

   @Test
   public void testListCloseBracket() {
      assertTrue(Delimiters.isListCloseBracket("]"));
      assertFalse(Delimiters.isListCloseBracket("["));
      assertFalse(Delimiters.isListCloseBracket(")"));
      assertFalse(Delimiters.isArgumentSeperator(null));
   }

   @Test
   public void testPredicateOpenBracket() {
      assertTrue(Delimiters.isPredicateOpenBracket("("));
      assertFalse(Delimiters.isPredicateOpenBracket(")"));
      assertFalse(Delimiters.isPredicateOpenBracket("["));
      assertFalse(Delimiters.isArgumentSeperator(null));
   }

   @Test
   public void testPredicateCloseBracket() {
      assertTrue(Delimiters.isPredicateCloseBracket(")"));
      assertFalse(Delimiters.isPredicateCloseBracket("("));
      assertFalse(Delimiters.isPredicateCloseBracket("]"));
      assertFalse(Delimiters.isArgumentSeperator(null));
   }

   @Test
   public void testListTail() {
      assertTrue(Delimiters.isListTail("|"));
      assertFalse(Delimiters.isListTail("["));
      assertFalse(Delimiters.isListTail("]"));
      assertFalse(Delimiters.isArgumentSeperator(null));
   }

   @Test
   public void testSentenceTerminator() {
      assertTrue(Delimiters.isSentenceTerminator("."));
      assertFalse(Delimiters.isSentenceTerminator("..="));
      assertFalse(Delimiters.isSentenceTerminator(","));
      assertFalse(Delimiters.isArgumentSeperator(null));
   }

   @Test
private void assertDelimiter(boolean expectedResult, char... chars) {
         assertEquals(expectedResult, Delimiters.isDelimiter(Character.toString(c)));
      }
   }
}
public void testBrackets6() {
   }

   @Test
   public void testExtraTextAfterFullStop() {
      SentenceParser sp = getSentenceParser("?- consult(\'bench.pl\'). jkhkj");
      Term t = sp.parseSentence();
public void testNonAlphanumericCharacterFollowedByPeriod() {
      assertParse("!.", "!", ".");
   }

   @Test
   public void testWhitespaceAndComments() {
      WordParser p = create("/* comment */\t %!c(MISSING)omment\n %!c(MISSING)omment\r\n\n");
public void testRewindException() {
      WordParser wp = create("a b c");
      wp.next();
      wp.next();
      assertEquals("b", wp.getValue());
      wp.rewind("b");
      wp.next();
      assertEquals("b", wp.getValue());
      wp.rewind("b");

      // check that can only rewind one word
      assertRewindException(wp, "b");
      assertRewindException(wp, "a");

      assertEquals("b", wp.getValue());
      wp.next();
      assertEquals("b", wp.getValue());
      wp.next();
      assertEquals("c", wp.getValue());

      // check that the value specified in call to rewind has to be the last value parsed
      assertRewindException(wp, "b");
      assertRewindException(wp, null);
      assertRewindException(wp, "z");

      wp.rewind("c");
      assertEquals("c", wp.getValue());
      wp.next();
      assertEquals("c", wp.getValue());
      assertTrue(wp.isEndOfStream());
      assertEquals("c", wp.getValue());
      wp.rewind("c");

      // check that can only rewind one word
      assertRewindException(wp, "c");
   }

   private void assertRewindException(WordParser wp, String value) {
      try {
         wp.rewind(value);
         fail();
      } catch (IllegalArgumentException e) {
         // expected
private void assertWordType(String syntax, String value, WordType type) {
      WordParser p = create(syntax);
      assertFalse(p.isEndOfStream());
      p.next();
      assertEquals(value, p.getValue());
      assertSame(type, p.getType());
      assertTrue(p.isEndOfStream());
   }

   private void assertParse(String sentence, String... words) {
      WordParser p = create(sentence);
      for (String w : words) {
         p.next();
         assertEquals(w, p.getValue());
         p.rewind(w);
         p.next();
         assertEquals(w, p.getValue());
      }
      assertTrue(p.isEndOfStream());
      try {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
else if (moduleID == 4048) { // ENHANCED NARC - LTD (Clan Only)
                case "CTargetInfoGatherStats":
                case "CStealthDecayStats":
                case "CCrippledPerformanceStats":
                case "CImpulseElectricFieldStats":
                case "CUAVStats": {
                    final String name;
public Item asItem() {
                        HeatSinkStats.engineCooling, -HeatSinkStats.heatbase);
            case "CJumpJetStats":
                // Two values, first is heat for one JJ
                double heat = Double.parseDouble(JumpJetStats.heat.split(",")[0]);
                return new JumpJet(getUiName(), getUiDesc(), getMwoKey(), getMwoId(), ModuleStats.slots,
                        ModuleStats.tons, HardPointType.NONE, ModuleStats.health, getFaction(),
                        ModuleStats.getLocations(), ModuleStats.getMechClasses(), JumpJetStats.minTons,
                        JumpJetStats.maxTons, JumpJetStats.boost, JumpJetStats.duration, heat);
            case "CGECMStats":
                return new ECM(getUiName(), getUiDesc(), getMwoKey(), getMwoId(), ModuleStats.slots, ModuleStats.tons,
                        ModuleStats.health, getFaction());
            case "CBAPStats":
            case "CClanBAPStats":
            case "CCASEStats":
                return new Module(getUiName(), getUiDesc(), getMwoKey(), getMwoId(), ModuleStats.slots,
                        ModuleStats.tons, HardPointType.NONE, ModuleStats.health, getFaction(),
                        ModuleStats.getLocations(), ModuleStats.getMechClasses());
            case "CLowerArmActuatorStats":
            case "CInternalStats":
                return new Internal(getUiName(), getUiDesc(), getMwoKey(), getMwoId(), ModuleStats.slots,
                        ModuleStats.tons, HardPointType.NONE, ModuleStats.health, getFaction());
            case "CTargetingComputerStats":
                return TargetingComputerStats.asTargetingComputer(this);
            case "CMASCStats":
                return MASCStats.asMasc(this);
            default:
                return null;
        }
		<Quirk name="XPBonus" loc="XP BONUS">
			<Modify operation="Multiplier" context="PositiveGood" />
		</Quirk>
	</Category>
	
	<!-- Critical -->
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
android {
    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 18
        versionCode 4
        versionName "1.0"
        applicationId 'mil.nga.giat.dice'
        testApplicationId 'mil.nga.giat.dice.test'
var params = (function() {
  var match,
    pl     = /\+/g,  // Regex for replacing addition symbol with a space
    search = /([^&=]+)=?([^&]*)/g,
    decode = function (s) { return decodeURIComponent(s.replace(pl, " ")); },
    query  = window.location.search.substring(1);
  var params = {};
private String loadDisclaimer() {
            return disclaimer;
        }
        catch (Exception e) {
            throw new Error("error loading legal disclaimer");
        }
    }
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public static Value toValue(final Object obj, final QueryContext qc, final Stati
   * @return method if found, {@code null} otherwise
   * @throws QueryException query exception
   */
  private static Method getModMethod(final Object mod, final String path, final String name,
      final long arity, final QueryContext qc, final InputInfo ii) throws QueryException {

    // find method with identical name and arity
private static Method getModMethod(final Object mod, final String path, final St
  }

  /**
   * Converts a module URI to a Java path.
   * @param uri module URI
   * @return module path
   */
  private static String toPath(final String uri) {
    final String p = ModuleLoader.uri2path(uri);
    return p == null ? uri : ModuleLoader.capitalize(p).replace("/", ".").substring(1);
  }

  /**
   * Returns a new Java function instance.
   * @param name function name
   * @param args arguments
   * @param qc query context
   * @param sc static context
   * @param ii input info
   * @return Java function or {@code null}
   * @throws QueryException query exception
   */
  static JavaMapping get(final QNm name, final Expr[] args, final QueryContext qc,
      final StaticContext sc, final InputInfo ii) throws QueryException {

    final String uri = string(name.uri());
    // check if URI starts with "java:" prefix (if yes, module must be Java code)
    final boolean java = uri.startsWith(JAVAPREF);

    // rewrite function name: convert dashes to upper-case initials
    final String local = Strings.camelCase(string(name.local()));

    // check imported Java modules
    final String path = Strings.camelCase(toPath(java ? uri.substring(JAVAPREF.length()) : uri));

    final ModuleLoader modules = qc.resources.modules();
    final Object jm  = modules.findImport(path);
    if(jm != null) {
      final Method meth = getModMethod(jm, path, local, args.length, qc, ii);
      if(meth != null) return new JavaModuleFunc(sc, ii, jm, meth, args);
    }

    // only allowed with administrator permissions
    if(!qc.context.user().has(Perm.ADMIN)) return null;

    // check addressed class
    try {
      return new JavaFunc(sc, ii, modules.findClass(path), local, args);
    } catch(final ClassNotFoundException ex) {
      // only throw exception if "java:" prefix was explicitly specified
      if(java) throw FUNCJAVA_X.get(ii, path);
    } catch(final Throwable th) {
      throw JAVAINIT_X.get(ii, th);
    }

    // no function found
    return null;
  }

  /**
   * Returns an appropriate XQuery type for the specified Java object.
   * @param o object
   * @return item type or {@code null} if no appropriate type was found
import org.basex.util.similarity.*;

/**
 * Container for a user-defined function.
 *
 * @author BaseX Team 2005-15, BSD License
 * @author Christian Gruen
public StaticFunc declare(final AnnList anns, final QNm nm, final Var[] args, fi
    if(uri.length == 0) throw FUNNONS_X.get(ii, nm.string());
    if(NSGlobal.reserved(uri)) throw NAMERES_X.get(ii, nm.string());

    final StaticFunc fn = new StaticFunc(anns, nm, args, type, expr, sc, scope, doc, ii);
    final byte[] sig = fn.id();
    final FuncCache fc = funcs.get(sig);
    if(fc != null) fc.setFunc(fn);
    else funcs.put(sig, new FuncCache(fn));
    return fn;
  }

  /**
public String toString() {

    /**
     * Constructor.
     * @param sf function
     */
    FuncCache(final StaticFunc sf) {
      func = sf;
    }

    /**
     * Assigns the given function to all of its references and checks their visibility.
     * @param fn function to assign
     * @throws QueryException query exception
     */
    public void setFunc(final StaticFunc fn) throws QueryException {
      if(func != null) throw FUNCDEFINED_X.get(fn.info, fn.name.string());
      func = fn;
      for(final StaticFuncCall call : calls) call.init(fn);
      final FuncType ft = fn.funcType();
      for(final Closure lit : lits) lit.adoptSignature(ft);
    }

public void javaCast() {
    error("'x' cast as java", TYPE30_X);
  }

  /** Pass on Java items to functions. */
  @Test
  public void funcItem() {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    protected ImmutableList<String> nextLine;
    protected String relationName;
    protected int numberOfColumns = 0;

    public CsvFile(String relationName, Reader reader, char separator, char quotechar) throws InputIterationException {
        this(relationName, reader, separator, quotechar, CSVReader.DEFAULT_SKIP_LINES);
public boolean hasNext() {

    protected void failDifferingLine(ImmutableList<String> currentLine) throws InputIterationException {
        if (currentLine.size() != this.numberOfColumns()) {
            throw new InputIterationException("Csv line length did not match.");
        }
    }

protected void readToNextValidLine() throws InputIterationException {
        String[] lineArray;
        try {
            lineArray = this.csvReader.readNext();
        } catch (IOException e) {
            throw new InputIterationException("Could not read next line in csv file.");
        }
public void testShortWithHeader() throws InputIterationException {
            csvFileShortWithHeader.next();
            fail("Expected an InputIterationException to be thrown.");
        } catch (InputIterationException e) {
            // Intentionally left blank
        }
    }

public void testShort() throws InputIterationException, InputGenerationException
            shortCsvFile.next();
            shortCsvFile.next();
            fail("Expected an InputIterationException to be thrown.");
        } catch (InputIterationException actualException) {
            // Intentionally left blank
        }
    }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import android.util.Base64;
import android.util.Log;

import java.nio.charset.Charset;
import java.io.BufferedReader;
import java.io.Closeable;
public SimpleResponse get(String url) throws MalformedURLException {
	public SimpleResponse get(URL url) {
		if(DEBUG) traceMethod("get", "url", redactUrl(url));
		HttpURLConnection conn = null;
		InputStream inputStream = null;
		try {
			conn = openConnection(url);
			conn.setRequestProperty("Content-Type", "application/json");

			if(conn.getResponseCode() < 400) {
				inputStream = conn.getInputStream();
			} else {
				inputStream = conn.getErrorStream();
			}

			return new JsonResponse(conn.getResponseCode(),
					jsonResponseFrom("get", inputStream));
		} catch(IOException | JSONException ex) {
			return exceptionResponseFor(conn, ex);
		} finally {
			closeSafely("get", inputStream);
			closeSafely("get", conn);
		}
	}
public SimpleResponse post(URL url, JSONObject content) {
		if(DEBUG) traceMethod("post", "url", redactUrl(url));
		HttpURLConnection conn = null;
		OutputStream outputStream = null;
		InputStream inputStream = null;
		try {
			conn = openConnection(url);
			conn.setDoOutput(true);
public SimpleResponse post(URL url, JSONObject content) {
			outputStream = conn.getOutputStream();
			outputStream.write(content.toString().getBytes("UTF-8"));

			if(conn.getResponseCode() < 400) {
				inputStream = conn.getInputStream();
			} else {
				inputStream = conn.getErrorStream();
			}

			return new JsonResponse(conn.getResponseCode(),
					jsonResponseFrom("post", inputStream));
		} catch(IOException | JSONException ex) {
			return exceptionResponseFor(conn, ex);
		} finally {
			closeSafely("post", outputStream);
			closeSafely("post", inputStream);
			closeSafely("post", conn);
		}
	}
public static boolean basicAuth_isValidPassword(String password) {
	}

//> INSTANCE HELPERS
	private JSONObject jsonResponseFrom(String method, InputStream in) throws IOException, JSONException {
		BufferedReader reader = null;
		try {
			reader = new BufferedReader(new InputStreamReader(in, "UTF-8"), 8);
private JSONObject jsonResponseFrom(String method, InputStream in) throws IOExce
			while((line = reader.readLine()) != null) {
				bob.append(line).append('\n');
			}
			String jsonString = bob.toString();
			if(DEBUG) log(method, "Retrieved JSON: %!s(MISSING)", jsonString);
			return new JSONObject(jsonString);
		} finally {
			closeSafely(method, reader);
		}
private static void log(Exception ex, String message, Object... extras) {
		this.status = status;
	}

	abstract boolean isError();
}

class ExceptionResponse extends SimpleResponse {
private static void log(Exception ex, String message, Object... extras) {
		this.ex = ex;
	}

	boolean isError() { return true; }

	public String toString() {
		return new StringBuilder()
public String toString() {
class JsonResponse extends SimpleResponse {
	final JSONObject json;

	JsonResponse(int status, JSONObject json) {
		super(status);
		this.json = json;
	}

	boolean isError() {
		return this.status < 200 || this.status >= 300;
	}

	public String toString() {
private void handleOkResponse(GatewayRequest request, JSONObject response) throw
	}

	private void handleError(SimpleResponse response) throws JSONException {
		String description = "unknown";

		if(response instanceof JsonResponse) {
			JsonResponse jsonResponse = (JsonResponse) response;
			if(jsonResponse.json.has("message")) description = jsonResponse.json.getString("message");
		} else {
			ExceptionResponse errorResponse = (ExceptionResponse) response;
			description = errorResponse.ex.toString();
		}

		logEvent(ctx, "Received error from server: %!s(MISSING): %!s(MISSING)", response.status, description);
	}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
private boolean isQuotedSpecial(char chr) {
    }

    /**
     * Consumes the request up to and including the eno-of-line.
     *
     * @param request The request
private void addNextElement(ImapRequestLineReader command, FetchRequest fetch)
                throws ProtocolException {
            char next = nextCharInLine(command);
            StringBuilder element = new StringBuilder();
            while (next != ' ' && next != '[' && next != ')') {
                element.append(next);
                command.consume();
                next = nextCharInLine(command);
            }
            String name = element.toString();
            // Simple elements with no '[]' parameters.
            if (next == ' ' || next == ')') {
                if ("FAST".equalsIgnoreCase(name)) {
                    fetch.flags = true;
                    fetch.internalDate = true;
private void addNextElement(ImapRequestLineReader command, FetchRequest fetch)
        private char nextCharInLine(ImapRequestLineReader request)
                throws ProtocolException {
            char next = request.nextChar();
            if (next == '\r' || next == '\n') {
                throw new ProtocolException("Unexpected end of line.");
            }
            return next;
        }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import com.jaeksoft.searchlib.analysis.LanguageEnum;
import com.jaeksoft.searchlib.streamlimiter.StreamLimiter;
import com.jaeksoft.searchlib.util.IOUtils;
import com.sun.syndication.feed.synd.SyndEntry;
import com.sun.syndication.feed.synd.SyndFeed;
import com.sun.syndication.io.FeedException;
protected void parseContent(StreamLimiter streamLimiter, LanguageEnum lang)
						entry.getPublishedDate());
				resultItem.addField(ParserFieldEnum.title, entry.getTitle());
				resultItem.addField(ParserFieldEnum.link, entry.getLink());
				resultItem.addField(ParserFieldEnum.description, entry
						.getDescription().getValue());
				addDetectedLink(entry.getLink());
			}
		} catch (IllegalArgumentException e) {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
private static void loadTeamInfo(Server relay, String file) {
            // this line that it is not worth trying to handle ahead of time.
            // So instead just try to parse it and catch any exception.

            final Uuid id = Uuid.fromString(tokens[0].trim());
            final byte[] secret = Secret.parse(tokens[1].trim());

            relay.addTeam(id, secret);
public static void main(String[] args) {

    LOG.info("============================= START OF LOG =============================");

    final Uuid id = Uuid.fromString(args[0]);
    final byte[] secret = Secret.parse(args[1]);

    final int myPort = Integer.parseInt(args[2]);

    // This is the directory where it is safe to store data accross runs
    // of the server.
private static void buildString(Uuid current, StringBuilder build) {
    }
  }

  // FROM STRING
  //
  // Create a uuid from a sting.
  public static Uuid fromString(String string) {
    return fromString(null, string.split("\\."), 0);
  }

  private static Uuid fromString(final Uuid root, String[] tokens, int index) {

    final int id = Integer.parseInt(tokens[index]);

    final Uuid link = new Uuid(root, id);

    final int nextIndex = index + 1;

    return nextIndex < tokens.length ?
        fromString(link, tokens, nextIndex) :
        link;
  }
}

package codeu.chat.util;

import static org.junit.Assert.*;
import org.junit.Test;

public void testRootEqualNot() {
  }

  @Test
  public void testValidSingleLink() {

    final String string = "100";
    final Uuid id = Uuid.fromString(string);

    assertNotNull(id);
    assertNull(id.root());
    assertEquals(id.id(), 100);
  }

  @Test
  public void testValidMultiLink() {

    final String string = "100.200";
    final Uuid id = Uuid.fromString(string);

    assertNotNull(id);
    assertNotNull(id.root());
public void testValidMultiLink() {
    assertEquals(id.id(), 200);
    assertEquals(id.root().id(), 100);
  }
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
package org.apache.mesos.elasticsearch.scheduler;

import java.time.ZonedDateTime;
import java.util.Date;

public Date now() {
    public ZonedDateTime zonedNow() {
        return ZonedDateTime.now();
    }
}
public void run(String[] args) {
                configuration.getZookeeperCLI().getZookeeperMesosTimeout(),
                TimeUnit.MILLISECONDS,
                "/" + configuration.getFrameworkName() + "/" + configuration.getElasticsearchCLI().getElasticsearchClusterName()));
        final FrameworkState frameworkState = new FrameworkState(zookeeperStateDriver);
        final ClusterState clusterState = new ClusterState(zookeeperStateDriver, frameworkState);

        final ElasticsearchScheduler scheduler = new ElasticsearchScheduler(
                configuration,
                frameworkState,
                clusterState,
                new TaskInfoFactory(),
                new OfferStrategy(configuration, clusterState),
                zookeeperStateDriver
        );
package org.apache.mesos.elasticsearch.scheduler;

import org.apache.mesos.Protos;
import org.apache.mesos.elasticsearch.common.Discovery;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.time.ZonedDateTime;
import java.util.Properties;

/**
 * Task on a host.
    private ZonedDateTime startedAt;
    private InetSocketAddress clientAddress;
    private InetSocketAddress transportAddress;
    public Task(String hostname, String taskId, Protos.TaskState state, ZonedDateTime startedAt, InetSocketAddress clientInterface, InetSocketAddress transportAddress) {
        this.hostname = hostname;
        this.taskId = taskId;
public InetSocketAddress getClientAddress() {
    public InetSocketAddress getTransportAddress() {
        return transportAddress;
    }

    public static Task from(Protos.TaskInfo taskInfo, Protos.TaskStatus taskStatus) {
        Properties data = new Properties();
        try {
            data.load(taskInfo.getData().newInput());
        } catch (IOException e) {
            throw new RuntimeException("Failed to parse properties", e);
        }
        String hostName = data.getProperty("hostname", "UNKNOWN");
        String ipAddress = data.getProperty("ipAddress", hostName);
        ZonedDateTime startedAt = ZonedDateTime.parse(data.getProperty("startedAt", ZonedDateTime.now().toString()));
        Protos.TaskState taskState = null;
        if (taskStatus == null) {
            taskState = Protos.TaskState.TASK_STAGING;
        } else {
            taskState = taskStatus.getState();
        }
        return new Task(
                hostName,
                taskInfo.getTaskId().getValue(),
                taskState,
                startedAt,
                new InetSocketAddress(ipAddress, taskInfo.getDiscovery().getPorts().getPorts(Discovery.CLIENT_PORT_INDEX).getNumber()),
                new InetSocketAddress(ipAddress, taskInfo.getDiscovery().getPorts().getPorts(Discovery.TRANSPORT_PORT_INDEX).getNumber())
        );
    }
}
import org.apache.mesos.elasticsearch.scheduler.configuration.ExecutorEnvironmentalVariables;
import org.apache.mesos.elasticsearch.scheduler.state.FrameworkState;

import java.io.PrintWriter;
import java.io.StringWriter;
import java.net.InetSocketAddress;
import java.text.SimpleDateFormat;
import java.time.ZonedDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import java.util.UUID;

import static java.util.Arrays.asList;


        return Protos.TaskInfo.newBuilder()
                .setName(configuration.getTaskName())
                .setData(toData(offer.getHostname(), "UNKNOWN", clock.zonedNow()))
                .setTaskId(Protos.TaskID.newBuilder().setValue(taskId(offer)))
                .setSlaveId(offer.getSlaveId())
                .addAllResources(acceptedResources)
public ByteString toData(String hostname, String ipAddress, ZonedDateTime zonedD
        data.put("startedAt", zonedDateTime.toString());

        StringWriter writer = new StringWriter();
        data.list(new PrintWriter(writer));
        return ByteString.copyFromUtf8(writer.getBuffer().toString());
    }

private String taskId(Protos.Offer offer) {
        return String.format("elasticsearch_%!s(MISSING)_%!s(MISSING)", offer.getHostname(), date);
    }

}
import org.apache.mesos.Protos;
import org.apache.mesos.Protos.TaskInfo;
import org.apache.mesos.elasticsearch.scheduler.Task;

import javax.validation.constraints.NotNull;
import java.io.IOException;
    public static final String STATE_LIST = "stateList";
    private SerializableState zooKeeperStateDriver;
    private FrameworkState frameworkState;

    public ClusterState(@NotNull SerializableState zooKeeperStateDriver, @NotNull FrameworkState frameworkState) {
        if (zooKeeperStateDriver == null || frameworkState == null) {
            throw new NullPointerException();
        }
        this.zooKeeperStateDriver = zooKeeperStateDriver;
        this.frameworkState = frameworkState;
        frameworkState.onStatusUpdate(this::updateTask);
    }

public ClusterState(@NotNull SerializableState zooKeeperStateDriver, @NotNull Fr
     */
    public Map<String, Task> getGuiTaskList() {
        Map<String, Task> tasks = new HashMap<>();
        getTaskList().forEach(taskInfo -> tasks.put(taskInfo.getTaskId().getValue(), Task.from(taskInfo, getStatus(taskInfo.getTaskId()).getStatus())));
        return tasks;
    }

import org.apache.log4j.Logger;
import org.apache.mesos.Protos;
import org.apache.mesos.SchedulerDriver;

import java.io.IOException;
import java.util.List;
    private final SerializableState zookeeperStateDriver;
    private final StatePath statePath;
    private SchedulerDriver driver;

    public FrameworkState(SerializableState zookeeperStateDriver) {
        this.zookeeperStateDriver = zookeeperStateDriver;
        statePath = new StatePath(zookeeperStateDriver);
    }

public void markRegistered(Protos.FrameworkID frameworkId, SchedulerDriver drive
            LOGGER.error("Unable to store framework ID in zookeeper", e);
        }
        this.driver = driver;
        final ClusterState clusterState = new ClusterState(zookeeperStateDriver, this);
        registeredListeners.forEach(listener -> listener.accept(clusterState));
    }

package org.apache.mesos.elasticsearch.scheduler;

import org.apache.mesos.Protos;
import org.apache.mesos.elasticsearch.scheduler.state.FrameworkState;
import org.joda.time.DateTime;
import org.junit.Before;
import org.junit.Test;

import java.time.ZonedDateTime;
import java.util.Date;
import java.util.UUID;

import static java.util.Arrays.asList;
import static org.junit.Assert.*;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

/**
 * Tests TaskInfoFactory
 */
public class TaskInfoFactoryTest {

    private static final double EPSILON = 0.0001;
    private FrameworkState frameworkState = mock(FrameworkState.class);
    private Configuration configuration = mock(Configuration.class);

    @Before
    public void before() {
public void before() {

    @Test
    public void testCreateTaskInfo() {
        Clock clock = mock(Clock.class);

        TaskInfoFactory factory = new TaskInfoFactory();
        factory.clock = clock;

        Date now = new DateTime().withDayOfMonth(1).withDayOfYear(1).withYear(1970).withHourOfDay(1).withMinuteOfHour(2).withSecondOfMinute(3).withMillisOfSecond(400).toDate();
        when(clock.now()).thenReturn(now);
        when(clock.zonedNow()).thenReturn(ZonedDateTime.now());


        Protos.Offer offer = getOffer(frameworkState.getFrameworkID());
public void shouldAddJarInfoAndRemoveContainerInfo() {
        assertEquals(1, taskInfo.getExecutor().getCommand().getUrisCount());
        assertTrue(taskInfo.getExecutor().getCommand().getUris(0).getValue().contains(address));
    }
}
package org.apache.mesos.elasticsearch.scheduler.state;

import org.apache.mesos.Protos;
import org.apache.mesos.elasticsearch.scheduler.util.ProtoTestUtil;
import org.junit.Before;
import org.junit.Test;

    private FrameworkState frameworkState = mock(FrameworkState.class);

    private ClusterState clusterState = new ClusterState(state, frameworkState);

    @Before
    public void before() throws IOException {

import org.apache.mesos.Protos;
import org.apache.mesos.SchedulerDriver;
import org.junit.Test;

import java.io.IOException;

    public static final Protos.FrameworkID FRAMEWORK_ID = Protos.FrameworkID.newBuilder().setValue("FrameworkID").build();
    public final SerializableState state = mock(SerializableState.class);
    private final FrameworkState frameworkState = new FrameworkState(state);
    private SchedulerDriver driver = mock(SchedulerDriver.class);

    @Test
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      <c:ticket>43</c:ticket>
      <c:summary>Make parsers use URIs instead of Paths for diagnostic messages.</c:summary>
    </c:item>
  </c:release>

  <c:release c:ticket-system="com.github.io7m.smf">
public void onVersionReceived(
  @Override
  public void onFinish()
  {
    this.mesh =
      SMFMemoryMesh.builder()
        .setArrays(this.arrays)
        .setHeader(this.header)
        .setTriangles(this.triangles)
        .setMetadata(this.metadata)
        .build();

    this.finished = true;
  }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 */

public class LibrusConstants {
    //shared preferences
    public static final String PREFS_DEFAULT_VIEW = "default_view";
    //debug
    static final String TAG = "librus-client-log";
    static final boolean DBG = true;
import android.content.Context;
import android.preference.PreferenceManager;

import com.google.common.collect.Lists;
import com.loopj.android.http.AsyncHttpClient;
import com.loopj.android.http.RequestParams;

private void saveTokens(String response) {

        String endpoint = "/Timetables?weekStart=" + weekStart.toString("yyyy-MM-dd");

        return getObject(endpoint, "Timetable", Timetable.class);
    }

    public <T extends Persistable> CompletableFuture<List<T>> getAll(Class<T> clazz) {
        EntityInfo info = EntityInfos.infoFor(clazz);
        if(info.single()) {
            return getObject(info.endpoint(), info.topLevelName(), clazz)
                    .thenApply(Lists::newArrayList);
        } else {
            return getList(info.endpoint(), info.topLevelName(), clazz);
        }
    }

    public <T> CompletableFuture<T> getObject(String endpoint, final String topLevelName, final Class<T> clazz) {
        return APIRequest(endpoint).thenApplyAsync(s -> EntityParser.parseObject(s, topLevelName, clazz));
    }

    public <T> CompletableFuture<List<T>> getList(String endpoint, final String topLevelName, final Class<T> clazz) {
        return APIRequest(endpoint).thenApplyAsync(s -> EntityParser.parseList(s, topLevelName, clazz));
    }
}
import java.io.IOException;
import java.lang.reflect.Array;
import java.util.Arrays;
import java.util.List;

import pl.librus.client.LibrusUtils;

public class EntityParser {

    public static <T> List<T> parseList(String input, String topLevelName, Class<T> clazz) {
        ObjectMapper mapper = createMapper();
        try {
            input = input.replace("\\\\\\", "\\");
            JsonNode root = mapper.readTree(input);
            TreeNode node = root.at("/" + topLevelName);
            return Arrays.asList(mapper.treeToValue(node, getArrayClass(clazz)));
        } catch (IOException e) {
            LibrusUtils.logError("Error parsing " + topLevelName);
            e.printStackTrace();
            throw new RuntimeException(e);
        }
    }

    public static <T> T parseObject(String input, String topLevelName, Class<T> clazz) {
        ObjectMapper mapper = createMapper();
        try {
            input = input.replace("\\\\\\", "\\");
            JsonNode root = mapper.readTree(input);
            TreeNode node = root.at("/" + topLevelName);
            return mapper.treeToValue(node, clazz);
        } catch (IOException e) {
            LibrusUtils.logError("Error parsing " + topLevelName);
            e.printStackTrace();
            throw new ParseException(e);
        }
    }

    private static ObjectMapper createMapper() {
        return new ObjectMapper()
                .configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)
                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)
                .registerModule(new JodaModule())
                .registerModule(new GuavaModule());
    }

    <T extends Persistable> CompletableFuture<List<T>> getAll(Class<T> clazz);

    <T> CompletableFuture<T> getObject(String endpoint, String topLevelName, Class<T> clazz);

    <T> CompletableFuture<List<T>> getList(String endpoint, String topLevelName, Class<T> clazz);

}
package pl.librus.client.api;

/**
 * Created by robwys on 09/02/2017.
 */

public class ParseException extends RuntimeException {

    public ParseException(Throwable cause) {
        super(cause);
    }
}
package pl.librus.client;

import com.google.common.io.Resources;

import org.joda.time.LocalDate;
import io.requery.Persistable;
import pl.librus.client.api.EntityInfos;
import pl.librus.client.api.EntityParser;
import pl.librus.client.datamodel.Announcement;
import pl.librus.client.datamodel.Attendance;
import pl.librus.client.datamodel.AttendanceCategory;
import pl.librus.client.datamodel.Timetable;

import static org.hamcrest.Matchers.hasItem;
import static org.hamcrest.Matchers.is;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertThat;
    @Test
    public void shouldParseTeachers() throws IOException {
        //when
        List<Teacher> res = parseList("Teachers.json", Teacher.class);

        //then
        assertThat(res, hasItem(new Teacher.Builder()
public void shouldParseTeachers() throws IOException {
    @Test
    public void shouldParseMe() throws IOException {
        //when
        Me res = parseObject("Me.json", Me.class);

        //then
        LibrusAccount expectedAccount = new LibrusAccount.Builder()
public void shouldParseMe() throws IOException {
                .lastName("Problem")
                .login("12u")
                .build();
        assertThat(res, is(ImmutableMe.of(expectedAccount)));
    }

    @Test
    public void shouldParseTimetable() throws IOException {
        //when
        Timetable res = EntityParser.parseObject(readFile("Timetable.json"), "Timetable", Timetable.class);

        //then
        JsonLesson actual = res.get(LocalDate.parse("2017-01-30"))
                .get(1).get(0);
        JsonLesson expected = ImmutableJsonLesson.builder()
                .cancelled(false)
public void shouldParseTimetable() throws IOException {
    @Test
    public void shouldParseGrades() throws IOException {
        //when
        List<Grade> res = parseList("Grades.json", Grade.class);

        //then
        assertThat(res, hasItem(new Grade.Builder()
public void shouldParseGrades() throws IOException {
    @Test
    public void shouldParseCategories() throws IOException {
        //when
        List<GradeCategory> res = parseList("GradeCategories.json", GradeCategory.class);

        //then
        assertThat(res, hasItem(new GradeCategory.Builder()
public void shouldParseCategories() throws IOException {
    @Test
    public void shouldParseComment() throws IOException {
        //when
        List<GradeComment> res = parseList("GradeComments.json", GradeComment.class);

        //then
        assertThat(res, hasItem(new GradeComment.Builder()
public void shouldParseComment() throws IOException {
    @Test
    public void shouldParseLessons() throws IOException {
        //when
        List<PlainLesson> res = parseList("Lessons.json", PlainLesson.class);

        //then
        assertThat(res, hasItem(new PlainLesson.Builder()
public void shouldParseLessons() throws IOException {
    @Test
    public void shouldParseHomeWorks() throws IOException {
        //when
        List<Event> res = parseList("HomeWorks.json", Event.class);

        //then
        assertThat(res, hasItem(new Event.Builder()
public void shouldParseHomeWorks() throws IOException {
    @Test
    public void shouldParseHomeWorkCategories() throws IOException {
        //when
        List<EventCategory> res = parseList("HomeWorkCategories.json", EventCategory.class);

        //then
        assertThat(res, hasItem(new EventCategory.Builder()
public void shouldParseHomeWorkCategories() throws IOException {
    @Test
    public void shouldParseAttendances() throws IOException {
        //when
        List<Attendance> res = parseList("Attendances.json", Attendance.class);

        //then
        assertThat(res, hasItem(new Attendance.Builder()
public void shouldParseAttendances() throws IOException {
    @Test
    public void shouldParseAttendanceTypes() throws IOException {
        //when
        List<AttendanceCategory> res = parseList("AttendanceTypes.json", AttendanceCategory.class);

        //then
        assertThat(res, hasItem(new AttendanceCategory.Builder()
public void shouldParseAttendanceTypes() throws IOException {
    @Test
    public void shouldParseSubject() throws IOException {
        //when
        List<Subject> res = parseList("Subjects.json", Subject.class);
        
        //then
        assertThat(res, hasItem(new Subject.Builder()
public void shouldParseSubject() throws IOException {
    @Test
    public void shouldParseLuckyNumbers() throws IOException {
        //when
        LuckyNumber luckyNumber = parseObject("LuckyNumbers.json", LuckyNumber.class);

        //then
        assertThat(luckyNumber, is(ImmutableLuckyNumber.of(
                LocalDate.parse("2017-02-03"),
                13
        )));
public void shouldParseLuckyNumbers() throws IOException {
    @Test
    public void shouldParseAverages() {
        //when
        List<Average> averages = parseList("Averages.json", Average.class);

        //then
        assertThat(averages, hasItem(new Average.Builder()
public void shouldParseAverages() {
    @Test
    public void shouldParseColors() {
        //when
        List<LibrusColor> colors = parseList("Colors.json", LibrusColor.class);
        //then
        LibrusColor goldenrod = new LibrusColor.Builder()
                .id("13")
public void shouldParseColors() {
    @Test
    public void shouldParseAnnouncements() {
        //when
        List<Announcement> res = parseList("SchoolNotices.json", Announcement.class);

        //then
        assertThat(res, hasItem(new Announcement.Builder()
public void shouldParseAnnouncements() {
            .build()));
    }

    private static String readFile(String fileName) {
        try {
            return Resources.toString(Resources.getResource(fileName), Charset.defaultCharset());
private static String readFile(String fileName) {
        }
    }

    private <T extends Persistable> List<T> parseList(String filename, Class<T> clazz) {
        return EntityParser.parseList(readFile(filename), EntityInfos.infoFor(clazz).topLevelName(), clazz);
    }

    private <T extends Persistable> T parseObject(String filename, Class<T> clazz) {
        return EntityParser.parseObject(readFile(filename), EntityInfos.infoFor(clazz).topLevelName(), clazz);
    }
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import org.openhds.mobile.repository.GatewayRegistry;
import org.openhds.mobile.repository.gateway.Gateway;
import org.openhds.mobile.task.parsing.DataPage;
import org.openhds.mobile.task.parsing.ParseTask;
import org.openhds.mobile.task.parsing.ParseRequest;
import org.openhds.mobile.task.parsing.entities.EntityParser;
import org.openhds.mobile.task.parsing.entities.FieldWorkerParser;
import org.openhds.mobile.task.parsing.entities.IndividualParser;
public void onProgress(String progress) {
        }

        @Override
        public void onError(DataPage dataPage, Exception e) {
            entityError(e);
        }

        @Override
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 * An enum class that represents the browser flavors supported by SeLion
 */
public enum BrowserFlavors {
    GENERIC("*generic"), 
    FIREFOX("*firefox"), 
    INTERNET_EXPLORER("*iexplore"), 
    HTMLUNIT("*htmlunit"), 
    CHROME("*chrome"),
    /**
     * @deprecated SeLion is moving away from IPhoneDriver and now starting to use IOS-Driver. In order to be able to
     *             run tests on an iPad simulator (or) device using the Safari browser, please use
     *             {@link MobileTest#device()} equal to "iphone" and {@link MobileTest#appName()} equal to "Safari"
     */
    IPHONE("*iphone"),
    /**
     * @deprecated SeLion is moving away from IPhoneDriver and now starting to use IOS-Driver. In order to be able to
     *             run tests on an iPad simulator (or) device using the Safari browser, please use
     *             {@link MobileTest#device()} equal to "ipad" and {@link MobileTest#appName()} equal to "Safari"
     */
    IPAD("*ipad"), 
    SAFARI("*safari"), 
    OPERA("*opera"), 
    PHANTOMJS("*phantomjs");

    private String browser;

    private BrowserFlavors(String browser) {
        this.browser = browser;
    }

    /**
public String getBrowser() {
    }

    /**
     * This method returns all the browser flavors that are supported by the SeLion framework as a String with each
     * value delimited by a comma.
     * 
public static String getSupportedBrowsersAsCSV() {
        StringBuilder buffer = new StringBuilder();
        String delimiter = ",";
        for (BrowserFlavors flavor : BrowserFlavors.values()) {
            buffer.append(flavor.getBrowser()).append(delimiter);
        }
        buffer.deleteCharAt(buffer.length() - 1);
        return buffer.toString();
public static BrowserFlavors getBrowser(String browser) {
        StringBuilder errorMsg = new StringBuilder();
        errorMsg.append("Browser name \'");
        errorMsg.append(browser).append("\' did not match any browser flavors supported by SeLion.\n");
        errorMsg.append("Current Supported Browser flavors are : [").append(BrowserFlavors.getSupportedBrowsersAsCSV())
                .append("].");

        IllegalArgumentException e = new IllegalArgumentException(errorMsg.toString());
public String getAppName() {
        logger.entering();
        if (StringUtils.isBlank(appName)) {
            throw new IllegalArgumentException(
                    "Please specify the application name either via the @AppTest annotation or via the SeLion configuration parameter");
        }
        logger.exiting(appName);
        return appName;
private final void setSessionName(Map<String, SeLionSession> sessionMap, Invoked

        // for un-named sessions that may want to stay open or connect to an
        // existing session default to this session name in most cases
        this.sessionNameToUse = "unamed-sesssion-on-thread" + Thread.currentThread().getId();

        // dynamically generate a session name, if the user wants a new
        // session and wants to keep it open. session name will be "pacakge.class.method" name
private final void setSessionName(Map<String, SeLionSession> sessionMap, Invoked

        // catch openNewSession=false when there are no dependent methods specified
        if ((!this.openNewSession) && (!hasDependentMethods())) {
            throw new IllegalArgumentException("Can not have an unamed session without dependent methods and use"
                    + " an existing session. Error in " + SESSION_PREFIX + this.methodName);
        }

private final void setSessionName(Map<String, SeLionSession> sessionMap, Invoked
            // multiple in-flight sessions and dependent methods specified
            // that matched...
            if (foundSessions.size() > 1) {
                throw new IllegalStateException("Ambiguos match. Found more than one session that "
                        + "matched selection criteria " + foundSessions.toString());
            }

public final String getBrowser() {
        if (StringUtils.isBlank(this.browser)) {
            this.browser = Config.getConfigProperty(ConfigProperty.BROWSER);
        }
        logger.exiting(this.browser);
        return this.browser;
    }
private void closeCurrentSessionAndRemoveFromMap(Map<String, SeLionSession> sess
        try {
            closeSession();
        } catch (RuntimeException e) {
            logger.log(Level.FINER, "An exception occured while closing the web session", e);
        }
        logger.exiting();
    }
public void closeCurrentSession(Map<String, SeLionSession> sessionMap, InvokedMe
            return;
        }
        try {
            // lets attempt to capture a screenshot if there was a failure.
            // That way a user can see the how the page looked like
            // when a test failed.
            if (!method.isTestResultSuccess()) {
                warnUserOfTestFailures(method);
            }
        } catch (WebSessionException e) {
            logger.warning(e.getMessage() + " gobbling the WebSessionException as it is not due to test case failure");
            // do nothing
        } catch (UnsupportedOperationException e) {
            logger.warning(e.getMessage()
                    + " gobbling the UnsupportedOperationException as it is not due to test case failure");
        } catch (Exception e) {
            String warning = "An exception occured after the test method invocation. "
                    + "Gobbling it as the test case itself did not fail";
            logger.log(Level.WARNING, warning, e);
        } finally {
            closeCurrentSessionAndRemoveFromMap(sessionMap);
        }
static boolean isValid(AbstractSeLionElement[] validSet, String element) {
            }
        }
        return false;

    }

    /**
    //consider a field in the yaml file which looks like this : fxBankRadioButton
    //if we have Button ahead of RadioButton, then our code would end up matching this above key with
    //Button instead of matching it against RadioButton. This is the ONLY case wherein the order is very important
    
    private static HtmlSeLionElement[] values = {TEXT_FIELD, TABLE, SELECT_LIST, RADIO_BUTTON,BUTTON,LINK,LABEL,IMAGE,FORM,
        DATE_PICKER,CHECK_BOX,CONTAINER,BASE_CLASS,PAGE_TITLE
    };

    @Override
public static boolean isValid(String element) {

    /**
     * @param element - The element that needs to be tested for being a valid {@link HtmlSeLionElement} and whose
     * {@link HtmlSeLionElement#isHtmlElement()} returns true.
     * @return - <code>true</code> if there was a match and <code>false</code> otherwise.
     */
    public static boolean isValidHtmlElement(String element) {
public boolean looksLike(String key) {
     *            -keys for which {@link GUIObjectDetails} is to be created.
     * @return
     */
    public static List<GUIObjectDetails> getGUIObjectList(List<String> keys){
        String DELIMITER = "#";
        List<GUIObjectDetails> htmlObjectDetailsList = new ArrayList<GUIObjectDetails>();

        for (String key : keys) {
               String parent = null;
               // If the key contains a delimiter, then html object has a parent
               if (key.contains(DELIMITER)) {
                   parent = key.split(DELIMITER)[0];
                   key = key.split(DELIMITER)[1];
               }

               HtmlSeLionElement element = HtmlSeLionElement.findMatch(key);
               if (element != null && element.isUIElement()) {
                   GUIObjectDetails htmlObjectDetails = null;
                   if (element.canHaveParent()) {
                       htmlObjectDetails = new GUIObjectDetails(element.stringify(), key, parent);
                   } else {
                       htmlObjectDetails = new GUIObjectDetails(element.stringify(), key);
                   }
                   htmlObjectDetailsList.add(htmlObjectDetails);
               }
           }
        return htmlObjectDetailsList;
    }

public static boolean isValid(String element) {
    /**
     * @param element
     *            - The element that needs to be tested for being a valid {@link IOSSeLionElement} and whose
     *            {@link IOSSeLionElement#isHtmlElement()} returns true.
     * @return - <code>true</code> if there was a match and <code>false</code> otherwise.
     */
    public static boolean isValidUIElement(String element) {

/**
 * This class houses the core logic which is responsible for transforming a yaml file that houses locators into
 * corresponding .java files.
 * It leverages Velocity templates under the hoods to get this done.
 * 
 */
public class CodeGenerator {
    public CodeGenerator(String baseDirectory) {
        this.baseDirectory = baseDirectory;
    }
    
    /**
     * 
     * This method will generate .java file based on the a yaml file contents.
public CodeGenerator(String baseDirectory) {
     * 
     * @throws IOException
     */
    public void generateNewCode(File dataFile, String filePath, String packageName, String domain) throws IOException {
        BufferedReader br = null;
        String newFilePath = baseDirectory + filePath;
        File newFile = new File(newFilePath);
public void generateNewCode(File dataFile, String filePath, String packageName,
        DataReader dataReader = new DataReader(dataFile.getAbsolutePath());
        try {
            List<String> keys = dataReader.getKeys();
            
            TestPlatform currentPlatform = dataReader.platform();
            
            String baseClass = dataReader.getBaseClassName();
            
            String baseClassName = baseClass.substring(baseClass.lastIndexOf(".") + 1);
            
            //Validating the keys in data file before proceeding with the code generation
            GUIObjectDetails.validateKeysInDataFile(keys, dataFile.getName(), currentPlatform);
            
            List<GUIObjectDetails> htmlObjectDetailsList = GUIObjectDetails.transformKeys(keys,currentPlatform);
            
            Set<String> set = new HashSet<String>();
            for (GUIObjectDetails htmlObjectDetails : htmlObjectDetailsList) {
                set.add(htmlObjectDetails.getMemberType());
public void generateNewCode(File dataFile, String filePath, String packageName,
            context.put("package", packageName);
            context.put("baseclasspackage", baseClass);
            context.put("domain", domain);
            
            context.put("baseclass", baseClassName);
            
            String resourceToLoad = currentPlatform.getVelocityTemplateToUse();
            InputStream is = getClass().getResourceAsStream("/"+resourceToLoad);
            br = new BufferedReader(new InputStreamReader(is));
            
            BufferedWriter writer = new BufferedWriter(new FileWriter(newFilePath + "/" + className + ".java"));
            Velocity.evaluate(context, writer, "code generator", br);
            writer.flush();
    /**
     * Project the plugin is called from.
     * 
     * @parameter expression="${project}"
     */
    private MavenProject project;

    /**
     * Represents the base package used for generated java classes.
     * 
     * @parameter expression="${selion-code-generator.basePackage}" default-value="com.paypal.selion.testcomponents"
     */
    private String basePackage;

    /**
     * Represents the base folder used for reading page asset files such as PageYaml.
     * 
     * @parameter expression="${selion-code-generator.baseFolder}" default-value="GUIData"
     */
    private String baseFolder;

    /**
     * List of "domains" to exclude during code generation.
     * 
     * @parameter expression="${selion-code-generator.excludeDomains}"
     */
    private List<String> excludeDomains;

    /**
     * Represents the location for the code generator plug-in to create a <code>SeLionPageDetails.txt</code> text file. \
     * This text file will contain the file path of every resource file processed.
     * 
     * @parameter expression="${selion-code-generator.detailedTextOutputLocation}" default-value="${project.build.directory}";
     */
    private File detailedTextOutputLocation;

public void execute() throws MojoExecutionException {
        createSeLionPageDetailsFile(allDataFiles);
        CodeGenerator helper = new CodeGenerator(generatedSourceDir);

        for (File eachDataFile : allDataFiles) {
            try {
                String folder = pathToFolder(eachDataFile);
                String domain = folder.replace(File.separator, "/");
                folder = folder.replace(File.separator, ".");

                if (excludeDomains.contains(domain)) {
                    logger.info("Excluded code generation for YAML file [" + eachDataFile.getName()
                            + "] as the corresponding domain [" + domain + "] is available in excludeDomains list");
                    continue;
                }

                String relativePath = relativePath(folder);

                File extendedFile = extendedFileLoc(sourceDir, relativePath, eachDataFile);
                File baseFile = baseFileLoc(generatedSourceDir, relativePath, eachDataFile);
                if (generateJavaCode(baseFile, eachDataFile, extendedFile)) {

                    logger.info("Generating java file for YAML file [" + eachDataFile.getName() + "] in domain ["
                            + domain + "]");
                    String tempPackage = basePackage + "." + folder;
                    helper.generateNewCode(eachDataFile, relativePath, tempPackage, domain);

                }

            } catch (Exception e) {
                String errorMsg = " \n SeLion code generator failed when generating code for " + eachDataFile.getName()
                        + "\n" + "Root Cause : \n" + e.toString();
                throw new MojoExecutionException(errorMsg, e);
            }
import com.paypal.selion.reader.YamlReaderFactory;

/**
 * This class provides basic methods the read the data from the yaml file.
 * 
 */
public class DataReader {
public String getParent() {
    }
    
    //This method is used by the velocity template and has reference in Class.vm
    //DONOT tamper with this method
    public String returnArg(String key) {
        HtmlSeLionElement element = HtmlSeLionElement.findMatch(key);
        if (element == null) {
public String returnArg(String key) {
    }

    //This method is used by the velocity template and has reference in Class.vm
    //DONOT tamper with this method
    public String firstToUpperCase(String str) {
        return str.substring(0, 1).toUpperCase() + str.substring(1);
    }
public String firstToUpperCase(String str) {
            htmlObjectDetailsList = HtmlSeLionElement.getGUIObjectList(keys);
            break;
        }

        case IOS: {
            htmlObjectDetailsList = IOSSeLionElement.getGUIObjectList(keys);
            break;
public String firstToUpperCase(String str) {
    

    /**
     * A overloaded version of transformKeys method which internally specifies {@link TestPlatform.WEB} as the {@link TestPlatform}
     * @param keys
     * 			- keys for which {@link GUIObjectDetails} is to be created.
     * @return
     */
    public static List<GUIObjectDetails> transformKeys(List<String> keys){
    	return transformKeys(keys,TestPlatform.WEB);
    	
    }
    
    /**
public static void validateKeysInDataFile(List<String> keysToValidate, String da
                /*
                 * For Yaml V1 the non-html elements are added to the List of keys(EG: pageTitle) whereas for V2 it does
                 * not. As a result, if a user specifies wrong name for pageTitle we first check it to be valid name and
                 * then proceed with the usual check of validating if its a html element TODO: This is a hack to be
                 * removed when V1 is fully deprecated
                 */
                if (!(HtmlSeLionElement.isValid(currentKey))) {
                    throw new IllegalArgumentException(String.format(
                            "Detected an invalid key [%!s(MISSING)] in data file %!s(MISSING) for Platform: WEB", currentKey, dataFileName));

package com.paypal.selion.reader;

import java.io.IOException;

/**
 * A Factory that is internally responsible for producing {@link AbstractYamlReader} instances which can either
 * process Yaml v1 format (or) v2 format.
 * 
 */
public final class YamlReaderFactory {
private YamlReaderFactory() {
    }

    public static AbstractYamlReader createInstance(String fileName) throws IOException {
        if (! fileName.endsWith("yaml")) {
            throw new IllegalArgumentException("Data file not supported : " + fileName);
        }
        AbstractYamlReader provider = new YamlV2Reader(fileName);
        if (!provider.processed()) {
            provider = new YamlV1Reader(fileName);
        }
        return provider;
    }

    private static final String ELEMENTS = "Elements";

    /**
     * This is a public constructor to create an input stream & Yaml instance for the input file.
     * 
     * @param fileName
     *            the name of the YAML data file.
public YamlV1Reader(String fileName) throws IOException {
    }

    @Override
    public void processPage(FileSystemResource resource) throws IOException {
        boolean platformDefined = false;
        String fileName = resource.getFileName();
        InputStream is = resource.getInputStream();
        // Try to load PageYaml v1
        Logger.getLogger().debug(String.format("++ Processing %!s(MISSING) as PageYaml V1", fileName));

        Iterable<Object> allObjects = getYaml().loadAll(new BufferedReader(new InputStreamReader(is, "UTF-8")));
        try {
public void processPage(FileSystemResource resource) throws IOException {

                if ("baseClass".equals(map.get(KEY))) {
                    Logger.getLogger().debug(
                            String.format("++ Retrieved [%!s(MISSING)] as the base class in [%!s(MISSING)] PageYaml V1.", map.get("Value"),
                                    fileName));
                    setBaseClassName((String) map.get("Value"));
                }
public void processPage(FileSystemResource resource) throws IOException {

                appendKey(key);

                // TODO: Container support for IOS element still needs to analyzed
                if (canHaveContainers(currentPlatform, key, map)) {
                    @SuppressWarnings("unchecked")
                    ArrayList<Object> allElements = (ArrayList<Object>) map.get(ELEMENTS);
public void processPage(FileSystemResource resource) throws IOException {
                    }
                }
            }
        } catch (NullPointerException e) {// NOSONAR
            // Gobbling the exception but doing nothing with it.
        }
    }
    
import com.paypal.selion.plugins.TestPlatform;

/**
 * Concrete Yaml reader that is capable of reading Yaml v2 format file.
 */
class YamlV2Reader extends AbstractYamlReader {

    /**
     * This is a public constructor to create an input stream & Yaml instance for the input file.
     * 
     * @param fileName
     *            the name of the YAML data file.
public void processPage(FileSystemResource resource) throws IOException {
            String fileName = resource.getFileName();
            Page page = PageFactory.getPage(is);
            setBaseClassName(page.getBaseClass());
            Logger.getLogger().debug(String.format("++ Processing %!s(MISSING) as PageYaml V2", fileName));
            
            TestPlatform currentPlatform = TestPlatform.identifyPlatform(page.getPlatform());

            if (currentPlatform == null) {
                throw new IllegalArgumentException("Missing or invalid platform specified in " + fileName);
            }

            setPlatform(currentPlatform);
            
            for (Entry<String, GUIElement> eachElement : page.getElements().entrySet()) {
                if (!eachElement.getKey().isEmpty()) {

public void processPage(FileSystemResource resource) throws IOException {
                }
            }
            setProcessed(true);
        } catch (Exception ex) { // NOSONAR
            // Just log a debug message. The input is probably not a V2 PageYaml
            Logger.getLogger().debug(
                    String.format("Unable to process %!s(MISSING) as PageYaml V2.\n\t %!s(MISSING)", resource.getFileName(),
                            ex.getLocalizedMessage()));
        }
    }
}
import static org.testng.Assert.assertEquals;
import static org.testng.Assert.assertTrue;

import java.io.IOException;
import java.util.List;

import org.apache.maven.plugin.AbstractMojo;
import org.testng.annotations.Test;

import com.paypal.selion.elements.HtmlSeLionElement;
import com.paypal.selion.plugins.DataReader;
import com.paypal.selion.plugins.GUIObjectDetails;
import com.paypal.selion.plugins.Logger;

public class DataReaderTest {
    class DummyMojo extends AbstractMojo {

        @Override
        public void execute() throws MojoExecutionException, MojoFailureException {
        }

    }

    @BeforeClass
public void before() {
    }

    @Test
    public void getKeys_v1() throws IOException {
        DataReader r = new DataReader("src/test/resources/PayPalAbstractPage.yaml");
        List<String> keys = r.getKeys();
        assertTrue(keys.contains("messageBoxConfirmationLabel"));
    }

    @Test
    public void getKeys_v2() throws IOException {
        DataReader r = new DataReader("src/test/resources/SampleV2YamlPage.yaml");
        List<String> keys = r.getKeys();
        assertTrue(keys.contains("requestAPICredentialsLink"));
    }

    @Test
    public void getBaseClass_v2() throws IOException {
        DataReader r = new DataReader("src/test/resources/SampleV2YamlPage.yaml");
        String baseClass = r.getBaseClassName();
        assertEquals(baseClass, "com.paypal.selion.testcomponents.BasicPageImpl");
    }

    @Test
    public void getHtmlObjectDetails() throws IOException {
        DataReader r = new DataReader("src/test/resources/SampleV2YamlPage.yaml");
        List<String> keys = r.getKeys();
        List<GUIObjectDetails> objects = GUIObjectDetails.transformKeys(keys);

package com.paypal.selion.plugins;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;


public class GUIObjectDetailsTest {
    class DummyMojo extends AbstractMojo {

        @Override
        public void execute() throws MojoExecutionException, MojoFailureException {
        }

    }

    @BeforeClass
public void before() {
    }

    @Test
    public void validateWebElements() throws IOException {
        String dataFile = "src/test/resources/SampleV2YamlPage.yaml";
        DataReader reader = new DataReader(dataFile);
        TestPlatform currentPlatform = reader.platform();
        GUIObjectDetails.validateKeysInDataFile(reader.getKeys(), dataFile, currentPlatform);
    }

    @Test
    public void validateIOSElements() throws IOException {
        String dataFile = "src/test/resources/IOSInteractionPage.yaml";
        DataReader reader = new DataReader(dataFile);
        TestPlatform currentPlatform = reader.platform();
        GUIObjectDetails.validateKeysInDataFile(reader.getKeys(), dataFile, currentPlatform);
    }

    @Test(expectedExceptions = { IllegalArgumentException.class })
    public void testInvalidElement() throws IOException {
        String dataFile = "src/test/resources/SampleV2YamlPage.yaml";
        DataReader reader = new DataReader(dataFile);
        // Note: forcing to load a WEaB platform YAML using IOS platform

import static org.testng.Assert.assertTrue;

import java.io.IOException;

import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugin.MojoFailureException;
public class PlatformTest {

    class DummyMojo extends AbstractMojo {

        @Override
        public void execute() throws MojoExecutionException, MojoFailureException {
        }

    }

    @BeforeClass
public void before() {
    }

    @Test
    public void testWebPlatform() throws IOException {
        // When no platform is specified the default should be WEB
        TestPlatform currentPlatform = getPlatformToTest("src/test/resources/PayPalAbstractPage.yaml");
        assertTrue(currentPlatform == TestPlatform.WEB);
    }

    @Test
    public void testIOSPlatform() throws IOException {
        // For IOS platform, the value must be specified
        TestPlatform currentPlatform = getPlatformToTest("src/test/resources/IOSInteractionPage.yaml");
        assertTrue(currentPlatform == TestPlatform.IOS);

    }

    @Test(expectedExceptions = { IllegalArgumentException.class })
    public void testInvalidPlatform() throws IOException {
        // Testing the datareader for a negative condition with a invalid platform name
        getPlatformToTest("src/test/resources/InvalidBasePage.yaml");

    }

    private TestPlatform getPlatformToTest(String resourceFile) throws IOException {
        DataReader reader = new DataReader(resourceFile);
        return reader.platform();
    }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @skip-test

// Test case for Issue 753:
// https://github.com/typetools/checker-framework/issues/753

import java.util.concurrent.locks.ReentrantLock;
import org.checkerframework.checker.lock.qual.*;
import org.checkerframework.dataflow.qual.Pure;

public class Issue753 extends ReentrantLock {
    final Issue753 field = new Issue753();

    @Pure
    Issue753 getField(Object param) {
        return field;
    }

    void method() {
        getField(field.field).field.lock();
        method2();
    }

    @Holding("this.getField(this.field.field).field")
    void method2() {}
}
void testGuardedByExpressionIsFinal() {
        @GuardedBy("c1.getFieldPure(b ? c1 : o1, c1)")
        Object guarded5;

        // TODO: Fix the flow expression parser so it can handle
        // @GuardedBy("c1.field.field.field.getFieldPure(c1.field, c1.getFieldDeterministic().getFieldPure(c1, c1.field)).field") Object guarded6;
        // Currently it fails because the memberselect incorrectly splits the "getFieldPure(...).field" field access into:
        // "getFieldPure(c1"
        // and
        // "field, c1.getFieldDeterministic().getFieldPure(c1, c1.field)).field"
        // However, as soon as one fixes the flow expression parser to parse a longer expression, one must consider
        // whether the CFAbstractStore can (or should) store data for the resulting flow expression.

        @GuardedBy("c1.field.field.field.getFieldPure2().getFieldDeterministic().field")
        Object guarded6;

        // The following negative test cases are the same as the one above but with one modification in each.

        //:: error: (lock.expression.not.final)
        @GuardedBy("c1.field.field2.field.getFieldPure2().getFieldDeterministic().field")
        Object guarded7;
        //:: error: (lock.expression.not.final)
        @GuardedBy("c1.field.field.field.getField().getFieldDeterministic().field")
        Object guarded8;

        // Additional test cases to test that method parameters (in this case the parameters to getFieldPure) are parsed.
        @GuardedBy("c1.field.field.field.getFieldPure(c1, c1).getFieldDeterministic().field")
        Object guarded9;
        @GuardedBy("c1.field.field.field.getFieldPure(c1, o1).getFieldDeterministic().field")
        Object guarded10;
        //:: error: (lock.expression.not.final)
        @GuardedBy("c1.field.field.field.getFieldPure(c1, o2).getFieldDeterministic().field")
        Object guarded11;

        // Test that @GuardedBy annotations on various tree kinds inside a method are visited

        Object guarded12 = (@GuardedBy("o1") Object) guarded2;
        //:: error: (lock.expression.not.final)
        Object guarded13 = (@GuardedBy("o2") Object) guarded3;

        Object guarded14[] = new @GuardedBy("o1") MyClass[3];
        //:: error: (lock.expression.not.final)
        Object guarded15[] = new @GuardedBy("o2") MyClass[3];

        // Tests that the location of the @GB annotation inside a VariableTree does not matter (i.e. it does not need to be the leftmost subtree).
        Object guarded16 @GuardedBy("o1") [];
        //:: error: (lock.expression.not.final)
        Object guarded17 @GuardedBy("o2") [];

        @GuardedBy("o1") Object guarded18[];
        //:: error: (lock.expression.not.final)
        @GuardedBy("o2") Object guarded19[];

        MyParameterizedClass1<@GuardedBy("o1") Object> m1;
        //:: error: (lock.expression.not.final)
    /** Regular expression for a formal parameter use. */
    protected static final String parameterRegex = "#([1-9][0-9]*)";

    /** Unanchored; can be used to find all formal parameter uses. */
    protected static final Pattern unanchoredParameterPattern = Pattern.compile(parameterRegex);

private static Pattern anchored(String regex) {
    protected static final Pattern superPattern = anchored("super");
    /** Matches an identifier */
    protected static final Pattern identifierPattern = anchored(identifierRegex);
    /** Matches a method call. Capturing groups 1 and 2 are the method and arguments. */
    protected static final Pattern methodPattern = anchored("(" + identifierRegex + ")\\((.*)\\)");
    /** Matches an array access. Capturing groups 1 and 2 are the array and index. */
    protected static final Pattern arrayPattern = anchored("(.*)\\[(.*)\\]");
    /** Matches a field access. Capturing groups 1 and 2 are the object and field. */
    protected static final Pattern memberselect = anchored("([^.]+)\\.(.+)");
    /** Matches integer literals */
    protected static final Pattern intPattern = anchored("[-+]?[0-9]+");
    /** Matches long literals */
    protected static final Pattern longPattern = anchored("[-+]?[0-9]+[Ll]");
    /** Matches string literals */
    // Regex can be found at, for example, http://stackoverflow.com/a/481587/173852
    protected static final Pattern stringPattern = anchored("\"(?:[^\"\\\\]|\\\\.)*\"");
    /** Matches the null literal */
    protected static final Pattern nullPattern = anchored("null");
    /** Matches an expression contained in matching start and end parentheses */
private static Pattern anchored(String regex) {
    }

    private static boolean isMemberSelect(String s, FlowExpressionContext context) {
        Matcher dotMatcher = memberselect.matcher(s);
        return dotMatcher.matches();
    }

    private static Receiver parseMemberSelect(
            String s, ProcessingEnvironment env, FlowExpressionContext context, TreePath path)
            throws FlowExpressionParseException {
        Matcher dotMatcher = memberselect.matcher(s);
        if (!dotMatcher.matches()) {
            assert false : "isMemberSelect must be called first";
        }
        Receiver receiver;
        String memberSelected;

private static Receiver parseMemberSelect(
                        s, "a class cannot terminate a flow expression string");
            }
        } else {
            String receiverString = dotMatcher.group(1);
            memberSelected = dotMatcher.group(2);
            receiver = parseHelper(receiverString, context, path);
        }

private static Receiver parseParameter(String s, FlowExpressionContext context)
        return context.arguments.get(idx - 1);
    }

    private static boolean isMethod(String s, FlowExpressionContext contex) {
        Matcher methodMatcher = methodPattern.matcher(s);
        return methodMatcher.matches();
    }

    private static Receiver parseMethod(
            String s, FlowExpressionContext context, TreePath path, ProcessingEnvironment env)
            throws FlowExpressionParseException {
        Matcher methodMatcher = methodPattern.matcher(s);

        if (!methodMatcher.matches()) {
            return null;
        }
        String methodName = methodMatcher.group(1);

        // parse parameter list
        String parameterList = methodMatcher.group(2);
        List<Receiver> parameters =
                ParameterListParser.parseParameterList(
                        parameterList, true, context.copyAndUseOuterReceiver(), path);
private static Receiver parseMethod(
        }
    }

    private static boolean isArray(String s, FlowExpressionContext context) {
        Matcher arraymatcher = arrayPattern.matcher(s);
        return arraymatcher.matches();
    }

    private static Receiver parseArray(String s, FlowExpressionContext context, TreePath path)
            throws FlowExpressionParseException {
        Matcher arraymatcher = arrayPattern.matcher(s);
        if (!arraymatcher.matches()) {
            return null;
        }

        String receiverStr = arraymatcher.group(1);
        String indexStr = arraymatcher.group(2);
        Receiver receiver = parseHelper(receiverStr, context, path);
        FlowExpressionContext contextForIndex = context.copyAndUseOuterReceiver();
        Receiver index = parseHelper(indexStr, contextForIndex, path);
private static Receiver parseParentheses(String s, FlowExpressionContext context
        PackageSymbol packageSymbol = packageSymbolAndRemainingString.first;
        String packageRemainingString = packageSymbolAndRemainingString.second;

        Matcher dotMatcher = memberselect.matcher(packageRemainingString);
        String classNameString;
        String remainingString;
        if (dotMatcher.matches()) {
            classNameString = dotMatcher.group(1);
            remainingString = dotMatcher.group(2);
        } else {
            classNameString = packageRemainingString;
            remainingString = null;
private static Receiver parseParentheses(String s, FlowExpressionContext context
    private static Pair<PackageSymbol, String> matchPackageNameWithinExpression(
            String expression, Resolver resolver, TreePath path)
            throws FlowExpressionParseException {
        Matcher dotMatcher = memberselect.matcher(expression);

        // To proceed past this point, at the minimum the expression must be composed of packageName.className .
        // Do not remove the call to matches(), otherwise the dotMatcher groups will not be filled in.
        if (!dotMatcher.matches()) {
            return null;
        }

        String packageName = dotMatcher.group(1);
        String remainingString = dotMatcher.group(2),
                remainingStringIfPackageMatched = remainingString;

        PackageSymbol result = null; // the result of this method call

private static Receiver parseParentheses(String s, FlowExpressionContext context
            }
            result = longerResult;
            remainingString = remainingStringIfPackageMatched;
            dotMatcher = memberselect.matcher(remainingString);
            if (dotMatcher.matches()) {
                packageName += "." + dotMatcher.group(1);
                remainingStringIfPackageMatched = dotMatcher.group(2);
            } else {
                // There are no dots in remainingString, so we are done.
                // Fail if the whole string represents a package, otherwise return.
private static Receiver parseParentheses(String s, FlowExpressionContext context
                            }
                        }
                        break;
                    default:
                        // stay in same state and consume the character
                        break;
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Bundle-RequiredExecutionEnvironment: J2SE-1.5
Export-Package: org.xpect,
 org.xpect.expectation,
 org.xpect.formatting,
 org.xpect.parameter,
 org.xpect.parser.antlr,
 org.xpect.parser.antlr.internal,
Workflow {
                
                fragment = de.itemis.statefullexer.StatefulLexerFragment {
                	runtime = true
                	antlrParam = "-lib"
                	antlrParam = "${runtimeProject}/src-gen/org/xpect/parser/antlr/lexer"
                }
Workflow {
                // generates a more lightweight Antlr parser and lexer tailored for content assist
                fragment = parser.antlr.ex.ca.ContentAssistParserGeneratorFragment {}
                
                fragment = de.itemis.statefullexer.StatefulLexerFragment {
//                	lexerGrammar = "org.xpect.ui.highlighting.CradleHighlightingLexer" 
                	highlighting = true
                	antlrParam = "-lib"
                	antlrParam = "${runtimeProject}.ui/src-gen/org/xpect/ui/contentassist/antlr/lexer"
                }
    
                
                fragment = de.itemis.statefullexer.StatefulLexerFragment {
//                	lexerGrammar = "org.xpect.ui.contentassist.XpectContentAssistLexer" 
                	contentAssist = true
                	antlrParam = "-lib"
                	antlrParam = "${runtimeProject}.ui/src-gen/org/xpect/ui/contentassist/antlr/lexer"
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public DsItem getDsItem () {
	public ArrayList<String> getDsArray(String mainPage) {
		ArrayList<String> ds = new ArrayList<String>();
		
		Pattern MY_PATTERN = Pattern.compile("<a .*?page=discussion&amp;id=(.*?)&amp;level=101\">(.*?)</a>");		
		Matcher m = MY_PATTERN.matcher(mainPage);
		while (m.find()) {
		    ds.add(m.group(1) + ":" + m.group(2));
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  LESS_MIXIN_CALL,
  LESS_PARENT_SELECTOR_COMBINATOR,
  LESS_MIXIN_GUARD,
  LESS_MIXIN_GUARD_WHEN,
  LESS_MIXIN_GUARD_NOT,
  LESS_MIXIN_GUARD_AND,
public LessMixinCallTree lessMixinCall(Optional<SelectorCombinatorTree> parentCo
    return new LessMixinCallTreeImpl(parentCombinator.orNull(), selector, important.orNull(), semicolon.orNull());
  }

  public LessMixinGuardTree lessMixinGuard(SyntaxToken when, Optional<SyntaxToken> not, SeparatedList<ParenthesisBlockTree, SyntaxToken> conditions) {
    return new LessMixinGuardTreeImpl(when, not.orNull(), conditions);
  }

  public SeparatedList<ParenthesisBlockTree, SyntaxToken> lessMixinGuardConditionList(ParenthesisBlockTree condition, Optional<List<Tuple<SyntaxToken, ParenthesisBlockTree>>> subsequentConditions) {
    List<ParenthesisBlockTree> conditions = Lists.newArrayList(condition);
    List<SyntaxToken> separators = Lists.newArrayList();

    if (subsequentConditions.isPresent()) {
      for (Tuple<SyntaxToken, ParenthesisBlockTree> t : subsequentConditions.get()) {
        separators.add(t.first());
        conditions.add(t.second());
      }
public LessMixinGuardTree lessMixinGuard(SyntaxToken when, Optional<SyntaxToken>
    return new SeparatedList<>(conditions, separators);
  }

  public LessMixinParametersTree lessMixinParameters(SyntaxToken openParenthesis, Optional<SeparatedList<LessMixinParameterTree, DelimiterTree>> parameters, SyntaxToken closeParenthesis) {
    return new LessMixinParametersTreeImpl(openParenthesis, parameters.orNull(), closeParenthesis);
  }
public LessMixinGuardTree LESS_MIXIN_GUARD() {
    return b.<LessMixinGuardTree>nonterminal(LexicalGrammar.LESS_MIXIN_GUARD).is(
      f.lessMixinGuard(
        b.token(LexicalGrammar.LESS_MIXIN_GUARD_WHEN),
        b.optional(b.token(LexicalGrammar.LESS_MIXIN_GUARD_NOT)),
        LESS_MIXIN_GUARD_CONDITION_LIST()));
  }

  public SeparatedList<ParenthesisBlockTree, SyntaxToken> LESS_MIXIN_GUARD_CONDITION_LIST() {
    return b.<SeparatedList<ParenthesisBlockTree, SyntaxToken>>nonterminal().is(
      f.lessMixinGuardConditionList(
        PARENTHESIS_BLOCK(),
        b.zeroOrMore(
          f.newTuple2(
            b.firstOf(
              b.token(LexicalGrammar.LESS_MIXIN_GUARD_AND),
              b.token(LexicalGrammar.LESS_MIXIN_GUARD_OR)),
            PARENTHESIS_BLOCK()))));
  }

  public LessMixinParametersTree LESS_MIXIN_PARAMETERS() {
import org.sonar.css.tree.impl.SeparatedList;
import org.sonar.css.tree.impl.TreeImpl;
import org.sonar.plugins.css.api.tree.Tree;
import org.sonar.plugins.css.api.tree.css.ParenthesisBlockTree;
import org.sonar.plugins.css.api.tree.css.SyntaxToken;
import org.sonar.plugins.css.api.tree.less.LessMixinGuardTree;
import org.sonar.plugins.css.api.visitors.DoubleDispatchVisitor;

import javax.annotation.Nullable;
import java.util.Iterator;
import java.util.List;
import java.util.function.Function;

public class LessMixinGuardTreeImpl extends TreeImpl implements LessMixinGuardTree {

  private final SyntaxToken when;
  private final SyntaxToken not;
  private final SeparatedList<ParenthesisBlockTree, SyntaxToken> conditions;

  public LessMixinGuardTreeImpl(SyntaxToken when, @Nullable SyntaxToken not, SeparatedList<ParenthesisBlockTree, SyntaxToken> conditions) {
    this.when = when;
    this.not = not;
    this.conditions = conditions;
  }

public Kind getKind() {
  @Override
  public Iterator<Tree> childrenIterator() {
    return Iterators.concat(
      Iterators.forArray(when, not),
      conditions.elementsAndSeparators(Function.identity(), Function.identity()));
  }

public SyntaxToken when() {
  }

  @Override
  @Nullable
  public SyntaxToken not() {
    return not;
  }

  @Override
  public List<ParenthesisBlockTree> conditions() {
    return conditions;
  }

    LESS_PARENT_REFERENCING_SELECTOR(LessParentReferencingSelectorTree.class),
    LESS_MIXIN_CALL(LessMixinCallTree.class),
    LESS_MIXIN_GUARD(LessMixinGuardTree.class),
    LESS_MIXIN_PARAMETERS(LessMixinParametersTree.class),
    LESS_MIXIN_PARAMETER(LessMixinParameterTree.class),
    LESS_MIXIN_PARAMETER_DEFAULT_VALUE(LessMixinParameterDefaultValueTree.class),
 */
package org.sonar.plugins.css.api.tree.less;

import java.util.List;
import javax.annotation.Nullable;

import org.sonar.plugins.css.api.tree.css.ParenthesisBlockTree;
import org.sonar.plugins.css.api.tree.css.SyntaxToken;
import org.sonar.plugins.css.api.tree.Tree;

public interface LessMixinGuardTree extends Tree {

  SyntaxToken when();

  @Nullable
  SyntaxToken not();

  List<ParenthesisBlockTree> conditions();

}
public void visitLessMixinGuard(LessMixinGuardTree tree) {
    scanChildren(tree);
  }

  public void visitLessMixinParameters(LessMixinParametersTree tree) {
    scanChildren(tree);
  }
public void lessMixinGuard() {
    assertThat(tree.conditions()).hasSize(1);

    tree = checkParsed(" when not (@a > 2) ");
    assertThat(tree.not()).isNotNull();
    assertThat(tree.conditions()).hasSize(1);

    tree = checkParsed(" when (@a > 2), (@a = \"blue\"), (@b) ");
public void lessMixinGuard() {

    tree = checkParsed("when (@type = width) and (@index > 0),(@index > 1)");
    assertThat(tree.conditions()).hasSize(3);
  }

  @Test
public void stylesheet() throws Exception {
    assertThat(tree.all()).hasSize(1);

    checkParsed(".nav-top__icons { display: inline-block; margin-left: 10px; &-item { cursor: pointer; display: inline-block; padding: 10px 9px; } }");
  }

  private StyleSheetTree checkParsed(String toParse) {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public GradleEditor() {
		setSourceViewerConfiguration(new GradleSourceViewerConfiguration(this));
		setDocumentProvider(new GradleDocumentProvider());

		/*
		 * TODO ATR, 25.11.2016 - even when same content provider, the model
		 * itself will always be new created by outlines. Is this really
		 * necessary are should we have reuse of model and a dedicated trigger
		 * to rebuild model ?!
		 */
		contentProvider = new GradleEditorOutlineContentProvider(this);
		outlinePage = new GradleEditorContentOutlinePage(this);
		documentListener = new DelayedDocumentListener();
public void createPartControl(Composite parent) {
		}

		activateGradleEditorContext();

	}

	@Override
	public void dispose() {
protected void doSetInput(IEditorInput input) throws CoreException {
		outlinePage.inputChanged(document);
	}

	protected IDocument getDocument() {
		return getDocumentProvider().getDocument(getEditorInput());
	}

public String getHoverInfo(ITextViewer textViewer, IRegion hoverRegion) {

	@Override
	public IRegion getHoverRegion(ITextViewer textViewer, int offset) {
		// TODO Auto-generated method stub
		return null;
	}

import de.jcup.egradle.core.api.GradleStringTransformer;
import de.jcup.egradle.eclipse.api.EclipseResourceHelper;

/* FIXME ATR: implement correct!*/
/* FIXME ATR: The xml definition in plugin.xml makes no sense, because Source config returns fixed array of hyperlink detectors and this one was added extra to work!*/
public class GradleFileHyperlinkDetector extends AbstractHyperlinkDetector {
	private GradleStringTransformer transformer;
	private File editorFile;
public void selectionChanged(SelectionChangedEvent event) {

	public void inputChanged(Object input){
		this.input=input;
		TreeViewer treeViewer = getTreeViewer();
		if (treeViewer==null){
			return;
public void run() {
			if (contentProvider instanceof GradleEditorOutlineContentProvider){
				GradleEditorOutlineContentProvider gcp = (GradleEditorOutlineContentProvider) contentProvider;
				gcp.setModelType(changeTo());
				getTreeViewer().refresh();
			}
		}
private ToggleLinkingAction() {
		public void run() {
			linkingWithEditorEnabled = !linkingWithEditorEnabled;
			
			/*
			 * TODO ATR, 10.11.2016: what about updating - when now linked the
			 * outline view selection should be updated...
			 */
			initText();
			initImage();
		}
public ModelType getModelType() {
	public void setModelType(ModelType modelType) {
		this.modelType = modelType;
	}

	@Override
	public Object[] getElements(Object inputElement) {
		String dataAsString = null;
public void setModelType(ModelType modelType) {
			if (gradleEditor==null){
				return NO_OBJECTS;
			}
			IDocument document = (IDocument) inputElement;
			dataAsString = document.get();

public void keyPressed(KeyEvent event) {
			if (treeViewer == null) {
				return;
			}
			String filterText = text.getText();
			if (filterText != null) {
				if (filterText.equals(currentUsedFilterText)) {
public IStatus runInUIThread(IProgressMonitor monitor) {
		}

		protected void selectFirstMaching() {
			// /* select the first part where the matcher matches - so return
			// will use this*/
			selectfirstMatching(getTreeContentProvider().getElements(null));
		}

private boolean selectfirstMatching(Object[] elements) {
				if (Boolean.TRUE.equals(textFilter.isMatching(element))) {
					StructuredSelection selection = new StructuredSelection(element);
					treeViewer.setSelection(selection, true);
					System.out.println("selection done:" + element);
					return true;
				}
				ITreeContentProvider contentProvider = getTreeContentProvider();
public boolean matches(String itemText) {
			}

			if (filterPattern == null) {
				/* simple fall back ... */
				String filterText = text.getText();
				if (filterText == null) {
					return true;
public boolean accept(File file) {
				return false;
			}
			if (file.isDirectory()){
				/* TODO Albert, 20.09.2016 - Directory performance filtering could be improved - the ... name.equals looks ugly */
				/* optimize performance*/
				if (name.equals("src")){ // we ignore all content in src
					return false;

public interface Matcher<T> {

	public boolean matches(T toMatch) ;

}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import com.couchbase.lite.util.Log;

public class Version {

    public static final String VERSION;

    private static final String VERSION_NAME="${VERSION_NAME}";  // replaced during build process
    private static final String VERSION_CODE="${VERSION_CODE}";  // replaced during build process

    static {
        int versCode=getVersionCode();
        if (versCode==-1) {
            VERSION = String.format("%!s(MISSING)-%!s(MISSING)", getVersionName(), getVersionCode());
        } else{
            VERSION = String.format("%!s(MISSING)", getVersionName());
public static int getVersionCode() {
        if (VERSION_CODE == "${VERSION_CODE}") {
            return 0;
        }
        try {
            Integer.parseInt(VERSION_CODE);
        } catch (NumberFormatException e) {
            Log.e(Log.TAG, "Cannot parse version code: %!s(MISSING)", VERSION_CODE);
        }
        return -1;
    }


    public static String getVersion() {
        return String.format("%!s(MISSING)-%!s(MISSING)", getVersionName(), getVersionCode());
    }


}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  private static final Pattern MAX_RATING_PATTERN = Pattern.compile("<\\s*(" + RATING_NUMBER + ")");
  private static final Pattern ABOUT_RATING_PATTERN = Pattern.compile("~\\s*(" + RATING_NUMBER + ")");
  private static final Pattern BETWEEN_RATING_PATTERN = Pattern.compile("(" + RATING_NUMBER + ")\\s*-\\s*(" + RATING_NUMBER + ")");
  private static final Pattern INTEGER_PATTERN_MATCHER = Pattern.compile("\\d+");

  private final StringProperty host;
  private final StringProperty title;
public void updateFromGameInfo(GameInfoMessage gameInfoMessage) {
  }

  private int parseRating(String string) {
    Matcher matcher = INTEGER_PATTERN_MATCHER.matcher(string);
    if (matcher.matches()) {
      return Integer.parseInt(string);
    } else {
      int rating;
      String[] split = string.replace("k", "").split("\\.");
      rating = Integer.parseInt(split[0]) * 1000;
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Activator extends Plugin {
    super.start(context)

    val bundle = context.bundle
    // setup antlr4ide runtime.
    val rjar = "antlr4ide.runtime-" + bundle.headers.get("Bundle-Version")
      .replace(".qualifier", "-SNAPSHOT").replaceAll("\\.\\d{12}", "-SNAPSHOT") + ".jar";

    System.setProperty("antlr4ide.runtime.jar",
      new File(System.getProperty("java.io.tmpdir"), rjar).absolutePath
    );

    val jars = #[
      new File(Distributions.defaultDistribution.value),
      ToolOptionsProvider.RUNTIME_JAR
    ]

    jars.forEach[
      if (!it.exists) {
        val fname = "lib/" + it.name
        val toolUrl = bundle.getResource(fname)
        if (toolUrl == null) {
          throw new FileNotFoundException(fname)
        }
        copy(toolUrl.openStream, new BufferedOutputStream(new FileOutputStream(it)))
      }
    ]
  }

class ParseTreeGenerator {
    val process = entry.value

    val escape = [ String string |
      return string.replace(" ", "\u00B7").replace("\t", "\\t").replace("\r", "\\r").replace("\n", "\\n")
    ]

    connect(process, port) [ socket, out, in |
      out.println(
        "parsetree " + escape.apply(file.location.toOSString) + " " + rule.name + " " + escape.apply(input))
      var line = ""
      var sexpression = "( )"
      while ((line = in.readLine) != null) {
            <phase>package</phase>
            <configuration>
              <target>
                <delete failonerror="false">
                  <fileset dir="../antlr4ide.core/lib" includes="${project.artifactId}-*.jar" />
                </delete>
                <copy file="target/${project.artifactId}-${project.version}.jar"
                    tofile="../antlr4ide.core/lib/${project.artifactId}-${project.version}.jar" />
              </target>
            </configuration>
            <goals>
public void run() {
      PrintWriter out = new PrintWriter(clientSocket.getOutputStream(), true);
      BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));

      String line = in.readLine();
      String[] command = line.split(" ");
      if ("parsetree".equals(command[0])) {
        String sexpression = new ParseTreeCommand(out).run(unespace(command[1]), command[2], unespace(command[3]));
        out.println(sexpression);
      } else {
        System.err.println("error: unknown command " + command[0]);
      }

      out.close();
public void run() {
    }
  }

  private String unespace(final String string) {
    return string.replace("\u00B7", " ").replace("\\t", "\t").replace("\\r", "\r")
        .replace("\\n", "\n");
  }
}
import static org.junit.Assert.assertTrue;

import java.io.File;
import java.io.FilenameFilter;
import java.net.MalformedURLException;
import java.util.Dictionary;

import org.eclipse.core.runtime.Path;
import org.junit.Test;
  @Test
  public void start() throws MalformedURLException {
    String path = "lib/" + ToolOptionsProvider.DEFAULT_TOOL;
    String version = version(Path.fromOSString("..").append("antlr4ide.core").append("lib")
        .toFile());
    String runtime = "lib/antlr4ide.runtime-" + version + ".jar";
    File[] jars = {new File(Distributions.defaultDistribution().getValue()),
        new File(System.getProperty("java.io.tmpdir"), "antlr4ide.runtime-" + version + ".jar") };
    for (File jar : jars) {
      jar.delete();
    }

    @SuppressWarnings("unchecked")
    Dictionary<String, String> headers = createMock(Dictionary.class);
    expect(headers.get("Bundle-Version")).andReturn(version);

    Bundle bundle = createMock(Bundle.class);
    expect(bundle.getHeaders()).andReturn(headers);

    BundleContext context = createMock(BundleContext.class);
    expect(context.getBundle()).andReturn(bundle).times(2);
public void start() throws MalformedURLException {

    expect(bundle.getResource(runtime)).andReturn(
        Path.fromOSString("..").append("antlr4ide.core").append("lib")
            .append("antlr4ide.runtime-" + version + ".jar").
            toFile().toURI().toURL());

    Object[] mocks = {context, bundle, headers };

    replay(mocks);

    new Activator().start(context);

    // must be created again
    for (File jar : jars) {
      System.out.println(jar );
      assertTrue(jar.exists());
    }

    verify(mocks);
  }

  private String version(final File lib) {
    String name = lib.list(new FilenameFilter() {
      @Override
      public boolean accept(final File dir, final String name) {
        return name.startsWith("antlr4ide.runtime");
      }
    })[0];
    return name.substring(name.indexOf("-") + 1).replace(".jar", "");
  }

}
public void build() throws Exception {
    expect(options.getAntlrTool()).andReturn(toolPath);
    expect(options.vmArguments()).andReturn(vmArgs);

    IPath location = Path.fromPortableString("/home/edgar/ws/project/G4.g4");

    IWorkspaceRoot workspaceRoot = createMock(IWorkspaceRoot.class);
    IFile file = createMock(IFile.class);
public void build() throws Exception {
    OutputStream out = createMock(OutputStream.class);

    PrintWriter writer = PowerMock.createMockAndExpectNew(PrintWriter.class, out, true);
    writer.println("parsetree /home/edgar/ws/project/G4.g4 rule 3+4*5");
    writer.close();

    InputStream in = createMock(InputStream.class);
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import co.jirm.core.sql.SqlPartialParser.ResourceLoader.CachedResourceLoader;
import co.jirm.core.util.JirmUrlEncodedUtils;
import co.jirm.core.util.ResourceUtils;
import com.google.common.collect.Sets;
import com.google.common.io.LineReader;
import com.google.common.io.Resources;


public class SqlPartialParser {
public String call() throws Exception {
					return _parseFromPath(path);
				}
			});
		} catch (ExecutionException e) {
			throw new RuntimeException(e);
		}
	}
	
	private static String _parseFromPath(final String path) {
protected ExpandedSql _expand(DeclarationSql f, Set<String> seenPaths) {
				DeclarationSql ds = e.getDeclaration();
				boolean validate = ! r.isSame() || ds.getDeclaredSql().equals(r.getDeclaredSql());
				check.state(validate, 
						"Reference '> {}' in {}" +
						" does NOT MATCH declaration {}" +
						"\nREFERENCE:" +
						"\n{}\n" +
						"DECLARATION:" +
						"\n{}\n",
						r.getReferencePath().getFullPath(), 
						r.getCurrentPath().getFullPath(), 
						ds.getPath().getFullPath(),
						r.getDeclaredSql(), 
						ds.getDeclaredSql());
				byLine.put(r.getStartIndex(), e);
				referenceSql.put(r.getStartIndex(), r);
			}
private static FileDeclarationSql _processFile(String path, String sql) throws I
			String tag;
			if (m.matches() && (tag = m.group(1)) != null && ! (tag = tag.trim()).isEmpty()) {
				if (tag != null && tag.startsWith("#")) {
					check.state(state != PSTATE.HASH, PE + "Cannot hash within hash at line {}.", path, lineIndex);
					state = PSTATE.HASH;
					hashContent = ImmutableList.builder();
					hashReferences = ImmutableList.builder();
					currentHash = tag.substring(1).trim();
					HashDeclarationSql existing = nameToHash.get(currentHash);
					if (existing != null) {
						throw check.stateInvalid( 
								PE + "Hash: '#{}' already defined line: {}, new definition at line: {}",
								path,
								currentHash, existing.getStartIndex(), lineIndex);
					}
					hashContent.add(line);
					hashStartIndex = lineIndex;
				}
				else if (tag != null && tag.startsWith(">")) {
					check.state(state != PSTATE.REFERENCE, PE + "Cannot reference within reference line {}.", path, lineIndex);
					previousState = state;
					state = PSTATE.REFERENCE;
					referenceContent = ImmutableList.builder();
else if (tag != null && tag.startsWith("/")) {
					hashes.put(currentHash, hash);
				}
				else {
					throw check.stateInvalid(PE + "Looks like a bad --{} at line: {}", path, lineIndex);
				}
			}
			else {

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

import org.junit.Before;
import org.junit.Test;
public void testExpand() throws Exception {
	@Test(expected=JirmIllegalStateException.class)
	public void testValidate() throws Exception {
		Parser p = SqlPartialParser.Parser.create();
		ExpandedSql e = p.expand("/co/jirm/core/sql/partial-test-validate.sql#other");
		String actual = e.join();
		assertEquals("SELECT\n" + 
				"c.id, c.name, c.tags, c.category, c.description, \n" + 
				"c.division, c.experience_level as \"experienceLevel\", \n" + 
				"c.locations, c.type, c.parent_id as \"parentId\", \n" + 
				"g.latitude as \"latitude\", g.longitude as \"longitude\"\n" + 
				"FROM campaign c\n" + 
				"LEFT OUTER JOIN \n" + 
				"	(SELECT DISTINCT cg.campaign, geo.latitude, geo.longitude from campaign_geo cg\n" + 
				"	INNER JOIN geo geo on geo.id = cg.geo \n" + 
				"	WHERE geo.latitude IS NOT NULL AND geo.longitude IS NOT NULL AND cg.createts < now() -- {}\n" + 
				"	) g on g.campaign = c.id\n" + 
				"ORDER BY c.createts ASC, c.id, g.latitude, g.longitude\n" + 
				"LIMIT 100 -- {}\n" + 
				"OFFSET 1 -- {}", actual);
		
	}
	
	@Test
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void createContentList(String body) throws ParseException {
  }

  private ContentImpl parseBodyPart(String bodyPart) throws ParseException {
    String[] nextPartSplit = bodyPart.split("\r?\n\r?\n");

    String headers[] = null;
    String bodyContent;
		  		+ "</gml:Point>\n"
		  	   + "</gml:location>\n"
		  	+ "</gp:location-info>\n"
		  	+ "<gp:usage-rules>\n"
		  	  + "<gp:retransmission-allowed>no</gp:retransmission-allowed>\n"
		  	  + "<gp:retention-expiry>2007-07-27T18:00:00Z</gp:retention-expiry>\n"
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
private static boolean macros_body_1_0_0(PsiBuilder builder_, int level_) {
  }

  /* ********************************************************** */
  // generic_function_call_expression
  public static boolean macros_call(PsiBuilder builder_, int level_) {
    if (!recursion_guard_(builder_, level_, "macros_call")) return false;
    boolean result_ = false;
    Marker marker_ = builder_.mark();
    enterErrorRecordingSection(builder_, level_, _SECTION_GENERAL_, "<macros call>");
    result_ = generic_function_call_expression(builder_, level_ + 1);
    if (result_) {
      marker_.done(ERL_MACROS_CALL);
    }
    else {
      marker_.rollbackTo();
    }
    result_ = exitErrorRecordingSection(builder_, level_, result_, false, _SECTION_GENERAL_, null);
    return result_;
  }

public boolean parse(PsiBuilder builder_, int level_) {
      return form_recover(builder_, level_ + 1);
    }
  };
  final static Parser tuple_recoverer_parser_ = new Parser() {
    public boolean parse(PsiBuilder builder_, int level_) {
      return tuple_recoverer(builder_, level_ + 1);
function_call_expression ::= q_atom argument_list {
  pin=0
  methods = [getReference getNameIdentifier getTextOffset]
}
macros_call ::= generic_function_call_expression
generic_function_call_expression ::= (q_atom_or_var ':')? (q_atom_or_var | macros) argument_list {pin=0}
private q_atom_or_var ::= q_atom | q_var

ERL_FILE
  PsiErrorElement:'.' or ';' expected, got '->'
    PsiElement(->)('->')
  PsiElement(atom)('ok')
  PsiErrorElement:'(' or ':' expected, got ','
    PsiElement(,)(',')
  PsiElement(#)('#')
  PsiElement(atom)(''rec'')
  PsiElement({)('{')
  PsiElement(atom)('something')
  PsiElement(=)('=')
  PsiElement(var)('Eep')
  PsiElement(})('}')
  PsiElement(=)('=')
  PsiElement(var)('Eep')
  PsiElement(#)('#')
  PsiElement(atom)(''rec'')
  PsiElement(.)('.')
  PsiElement(atom)('something')
  PsiElement(,)(',')
  PsiElement(integer)('1')
  PsiElement(+)('+')
  PsiElement(integer)('1')
  PsiElement(*)('*')
  PsiElement(integer)('109')
  PsiElement(,)(',')
  PsiElement(atom)('foo')
  PsiElement(()('(')
  PsiElement([)('[')
  PsiElement({)('{')
  PsiElement(atom)('a')
  PsiElement(})('}')
  PsiElement(,)(',')
  PsiElement({)('{')
  PsiElement(atom)('b')
  PsiElement(})('}')
  PsiElement(,)(',')
  PsiElement(])(']')
  PsiElement())(')')
  PsiElement(,)(',')
  PsiElement(atom)('blah')
  PsiElement(end)('end')
  PsiElement(,)(',')
  PsiElement(var)('F')
  PsiElement(.)('.')
  PsiElement(-)('-')
  PsiElement(atom)('export')
  PsiElement(()('(')
  PsiElement([)('[')
  PsiElement(atom)('bar')
  PsiElement(/)('/')
  PsiElement(integer)('0')
  PsiElement(])(']')
  PsiElement())(')')
  PsiElement(.)('.')
  PsiElement(-)('-')
  PsiElement(atom)('record')
  PsiElement(()('(')
  PsiElement(atom)('rec')
  PsiElement(,)(',')
  PsiElement({)('{')
  PsiElement(atom)('something')
  PsiElement(})('}')
  PsiElement())(')')
  PsiElement(.)('.')
  PsiElement(atom)('foo')
  PsiElement(()('(')
  PsiElement(var)('Blah')
  PsiElement())(')')
  PsiElement(->)('->')
  PsiElement(var)('Blah')
  PsiElement(.)('.')
  PsiElement(atom)('bar')
  PsiElement(()('(')
  PsiElement())(')')
  PsiElement(->)('->')
  PsiElement(var)('F')
  PsiElement(=)('=')
  PsiElement(fun)('fun')
  PsiElement(()('(')
  PsiElement({)('{')
  PsiElement(var)('Eep')
  PsiElement(})('}')
  PsiElement())(')')
  PsiElement(->)('->')
  PsiElement(atom)('ok')
  PsiElement(,)(',')
  PsiElement(#)('#')
  PsiElement(atom)(''rec'')
  PsiElement({)('{')
  PsiElement(atom)('something')
  PsiElement(=)('=')
  PsiElement(var)('Eep')
  PsiElement(})('}')
  PsiElement(=)('=')
  PsiElement(var)('Eep')
  PsiElement(#)('#')
  PsiElement(atom)(''rec'')
  PsiElement(.)('.')
  PsiElement(atom)('something')
  PsiElement(,)(',')
  PsiElement(integer)('1')
  PsiElement(+)('+')
  PsiElement(integer)('1')
  PsiElement(*)('*')
  PsiElement(integer)('109')
  PsiElement(,)(',')
  PsiElement(atom)('foo')
  PsiElement(()('(')
  PsiElement([)('[')
  PsiElement({)('{')
  PsiElement(atom)('a')
  PsiElement(})('}')
  PsiElement(,)(',')
  PsiElement({)('{')
  PsiElement(atom)('b')
  PsiElement(})('}')
  PsiElement(,)(',')
  PsiElement(])(']')
  PsiElement())(')')
  PsiElement(,)(',')
  PsiElement(atom)('blah')
  PsiElement(end)('end')
  PsiElement(,)(',')
  PsiElement(var)('F')
  PsiElement(.)('.')
  PsiElement(atom)('bar2')
  PsiElement(()('(')
  PsiElement())(')')
  PsiElement(->)('->')
  PsiElement(var)('F')
  PsiElement(=)('=')
  PsiElement(fun)('fun')
  PsiElement(()('(')
  PsiElement({)('{')
  PsiElement(var)('Eep')
  PsiElement(})('}')
  PsiElement())(')')
  PsiElement(->)('->')
  PsiElement(atom)('ok')
  PsiElement(,)(',')
  PsiElement(#)('#')
  PsiElement(atom)(''rec'')
  PsiElement({)('{')
  PsiElement(atom)('something')
  PsiElement(=)('=')
  PsiElement(var)('Eep')
  PsiElement(})('}')
  PsiElement(=)('=')
  PsiElement(var)('Eep')
  PsiElement(#)('#')
  PsiElement(atom)(''rec'')
  PsiElement(.)('.')
  PsiElement(atom)('something')
  PsiElement(,)(',')
  PsiElement(integer)('1')
  PsiElement(+)('+')
  PsiElement(integer)('1')
  PsiElement(*)('*')
  PsiElement(integer)('109')
  PsiElement(,)(',')
  PsiElement(atom)('foo')
  PsiElement(()('(')
  PsiElement([)('[')
  PsiElement({)('{')
  PsiElement(atom)('a')
  PsiElement(})('}')
  PsiElement(,)(',')
  PsiElement({)('{')
  PsiElement(atom)('b')
  PsiElement(})('}')
  PsiElement(,)(',')
  PsiElement(integer)('1')
  PsiElement(])(']')
  PsiElement())(')')
  PsiElement(,)(',')
  PsiElement(atom)('blah')
  PsiElement(end)('end')
  PsiElement(,)(',')
  PsiElement(var)('F')
  PsiElement(.)('.')
ERL_FILE
  PsiErrorElement:'-', <expression>, <function> or <rule> expected, got '.'
    PsiElement(.)('.')
  PsiElement(.)('.')
  PsiElement(.)('.')
public ErlangParserTest() {
  public void testTest2()             { doTest(true, true);  }
  public void testDebug()             { doTest(true, true);  }
  public void testDebug2()            { doTest(true, true);  }
  public void test182()               { doTest(true, true);  }
  public void test175()               { doTest(true, true);  }

  protected void doTest(boolean checkResult, boolean suppressErrors) {
//    OVERWRITE_TESTDATA = true;
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
