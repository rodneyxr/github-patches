### Details

* Able to show changelist details from the file history view.
    * Right-click on the history entry and select *Describe Changelist*
* Bug fixes.
    * ?

## ::v0.9.3::

       <ol>
         <li><em>0.9.4</em>
           <ol>
               <li>?</li>
           </ol>
         </li>
         <li><em>0.9.3</em>
    @NotNull
    private final List<VirtualFile> vcsRootsCache = new ArrayList<VirtualFile>();

    public P4ProjectConfigStack(@NotNull Project project, @NotNull List<ConfigPart> userParts) {
        this.project = project;
        MutableCompositePart newParts = new MutableCompositePart(new DefaultDataPart());
        for (ConfigPart userPart : userParts) {
            newParts.addPriorityConfigPart(userPart);
        }
        loadVcsRoots();
        loadConfigs(newParts);
        project.getMessageBus().connect(this).subscribe(
public void dispose() {


    private void loadVcsRoots() {
        final VirtualFile[] cache = ProjectLevelVcsManager.getInstance(project).
                getRootsUnderVcs(P4Vcs.getInstance(project));
        List<VirtualFile> roots;
private void loadVcsRoots() {
        synchronized (vcsRootsCache) {
            vcsRootsCache.clear();
            vcsRootsCache.addAll(roots);
        }
    }

    private List<VirtualFile> getVcsRoots() {
        synchronized (vcsRootsCache) {
            return Collections.unmodifiableList(vcsRootsCache);
        }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void configure(final Env env, final Config config, final Binder binder) {
    ServiceKey serviceKey = env.serviceKey();
    serviceKey.generate(JedisPool.class, name, k -> binder.bind(k).toInstance(pool));
    serviceKey.generate(Jedis.class, name,
        k -> binder.bind(k).toProvider(jedis).asEagerSingleton());
  }

  private GenericObjectPoolConfig poolConfig(final Config config, final String name) {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public boolean needsScores() {
    public LeafBucketCollector getLeafCollector(LeafReaderContext ctx,
            final LeafBucketCollector sub) throws IOException {
        final LeafSearchScript leafMapScript = mapScript.getLeafSearchScript(ctx);
        return new LeafBucketCollectorBase(sub, mapScript) {
            @Override
            public void collect(int doc, long bucket) throws IOException {
                assert bucket == 0 : bucket;
import org.elasticsearch.index.query.QueryShardContext;
import org.elasticsearch.indices.breaker.CircuitBreakerService;
import org.elasticsearch.script.MockScriptEngine;
import org.elasticsearch.script.Script;
import org.elasticsearch.script.ScriptContextRegistry;
import org.elasticsearch.script.ScriptEngineRegistry;
    private static final Script MAP_SCRIPT = new Script(ScriptType.INLINE, MockScriptEngine.NAME, "mapScript", Collections.emptyMap());
    private static final Script COMBINE_SCRIPT = new Script(ScriptType.INLINE, MockScriptEngine.NAME, "combineScript",
            Collections.emptyMap());
    private static final Map<String, Function<Map<String, Object>, Object>> SCRIPTS = new HashMap<>();


public static void initMockScripts() {
            Map<String, Object> agg = (Map<String, Object>) params.get("_agg");
            return ((List<Integer>) agg.get("collector")).stream().mapToInt(Integer::intValue).sum();
        });
    }

    @SuppressWarnings("unchecked")
public void testScriptedMetricWithCombine() throws IOException {
    }

    /**
     * We cannot use Mockito for mocking QueryShardContext in this case because
     * script-related methods (e.g. QueryShardContext#getLazyExecutableScript)
     * is final and cannot be mocked
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
private void populateConsumer(KinesisShardOffset shardOffset) {
						}
					}

					ConsumerInvoker firstConsumerInvoker = this.consumerInvokers.get(0);
					firstConsumerInvoker.addConsumer(shardConsumer);
					this.consumerInvokerMaxCapacity = firstConsumerInvoker.consumers.size();
				}
			}
		}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    </issueManagement>
    <properties>
        <async-http-client.version>1.9.19</async-http-client.version>
        <ehcache.version>2.9.1</ehcache.version>
        <guava.version>18.0</guava.version>
        <guice.version>3.0</guice.version>
        <jackson.version>2.4.5</jackson.version>
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 *
 * @author A. Sundararajan
 */
public class ErrorReturnInstrumentor extends MethodEntryInstrumentor {
    private final Label start = new Label();
    private final Label end = new Label();

public void visitMaxs(int maxStack, int maxLocals) {

    @Override
    protected void onMethodEntry() {}

    protected void onErrorReturn() {
        asm.println("error return from " + getName() + getDescriptor());
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import java.util.List;

public class Attributes {
    public int brightness;
    @AsonName(name = "entity_id")
    public String[] children = null;
    public String entity_picture;
public void setEntity(Entity e) {
        stateSwitch.setChecked(entity.state.equals("on"));
        stateSwitch.setOnClickListener(this);
        if ((entity.attributes.supported_features & Common.LIGHT_SUPPORTS_BRIGHTNESS) == Common.LIGHT_SUPPORTS_BRIGHTNESS) {
            brightnessSlider.setProgress(entity.attributes.brightness);
            name.setOnTouchListener(this);
        }
        updateColor();
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import jenkins.MasterToSlaveFileCallable;
import jenkins.tasks.SimpleBuildStep;

@SuppressWarnings ( "unchecked" )
public class DroneRecorder extends Recorder implements SimpleBuildStep, Serializable
{
    private static final long serialVersionUID = 3116603636658192616L;
public void perform ( final Run<?, ?> run, final FilePath workspace, final Launc
        {
            uploader.close ();

            if ( uploader.isFailed () && this.failsAsUpload )
            {
                run.setResult ( Result.FAILURE );
            }
private boolean validateStart ( final Run<?, ?> run, final TaskListener listener

        private final boolean defaultExcludes;

        private transient final Run<?, ?> run;
        private final RunData runData;

        private transient DefaultHttpClient httpclient;
private boolean validateStart ( final Run<?, ?> run, final TaskListener listener

        private boolean failed;

        public boolean isFailed ()
        {
            return this.failed;
        }

        UploadFiles(final String includes, final String excludes, final boolean defaultExcludes, final boolean stripPath, final Run<?, ?> run, final TaskListener listener)
        {
            this.includes = includes;
            this.excludes = excludes;
            this.defaultExcludes = defaultExcludes;
            this.stripPath = stripPath;

            this.run = run; // for setting the result to FAILURE
            this.runData = new RunData(run);

            this.listener = listener;
public void close ()
            fileSet.setDefaultexcludes ( this.defaultExcludes );

            final String[] includedFiles = fileSet.getDirectoryScanner ().getIncludedFiles ();
            if ( includedFiles.length == 0 && !isAllowEmptyArchive () )
            {
                this.run.setResult ( Result.FAILURE );
            }

            final Uploader uploader;
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
private Result writeTuple(Object object, ResourceFieldSchema field, Generator ge
        }

        for (int i = 0; i < nestedFields.length; i++) {
            if (writeAsObject) {
                String name = nestedFields[i].getName();
                // handle schemas without names
                name = (StringUtils.hasText(name) ? alias.toES(name) : Integer.toString(i));
                generator.writeFieldName(name);
            }
            Result res = write(tuples.get(i), nestedFields[i], generator);
            if (!res.isSuccesful()) {
                return res;
            }
        }
        if (writeAsObject) {
import org.apache.pig.data.Tuple;
import org.apache.pig.data.TupleFactory;
import org.apache.pig.impl.util.Utils;
import org.elasticsearch.hadoop.pig.PigTuple;
import org.elasticsearch.hadoop.pig.PigValueWriter;
import org.elasticsearch.hadoop.serialization.builder.ContentBuilder;
import org.elasticsearch.hadoop.util.FastByteArrayOutputStream;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
public void testBagWithAnonTuple() {
                createSchema("{t:(chararray, chararray)}"))), is(expected));
    }

    private ResourceSchema createSchema(String schema) {
        try {
            return new ResourceSchema(Utils.getSchemaFromString(schema));
private PigTuple createTuple(Object obj, ResourceSchema schema) {
    }

    private String pigTypeToJson(PigTuple obj) {
        ContentBuilder.generate(out, new PigValueWriter(true)).value(obj).flush().close();
        return out.bytes().toString();
    }
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public ItemAmountVariable(Instruction instruction) throws InstructionParseExcept
			}
		} else if (instruction.current().equalsIgnoreCase("amount")) {
			type = Type.AMOUNT;
		}
	}

public PointVariable(Instruction instruction) throws InstructionParseException {
			} catch (NumberFormatException e) {
				throw new InstructionParseException("Could not parse point amount");
			}
		}
	}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import net.ndrei.teslacorelib.gui.FluidTankPiece
import net.ndrei.teslacorelib.inventory.BoundingRectangle
import net.ndrei.teslacorelib.inventory.FluidTank
import net.ndrei.teslacorelib.tileentities.SidedTileEntity
import net.ndrei.teslapoweredthingies.TeslaThingiesMod

/**
 * Created by CF on 2017-07-16.
class MultiTankEntity
            else
                !initialFluids[it]!!.isFluidStackIdentical(finalFluids[it])
        }) {
            TeslaThingiesMod.logger.info("Marked for render update: ${this.pos}")
            this.getWorld().markBlockRangeForRenderUpdate(this.pos, this.pos)
        }
    }
import net.minecraftforge.common.model.IModelState
import net.minecraftforge.fml.common.Loader
import net.minecraftforge.fml.common.discovery.ASMDataTable
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent
import net.ndrei.teslacorelib.annotations.BaseAnnotationHandler
import net.ndrei.teslacorelib.annotations.IRegistryHandler
import net.ndrei.teslacorelib.annotations.RegistryHandler
import java.util.function.Function

@RegistryHandler
object SelfRenderingBlocksRegistry : IRegistryHandler, ICustomModelLoader {
    private lateinit var blocks: List<ISelfRenderingBlock>
    private val models = mutableMapOf<String, IModel>()

    override fun preInit(asm: ASMDataTable) {
        MinecraftForge.EVENT_BUS.register(this)
        ModelLoaderRegistry.registerLoader(this)

        val blocks = mutableListOf<ISelfRenderingBlock>()
        object: BaseAnnotationHandler<ISelfRenderingBlock>({ it, _, _ ->
            blocks.add(it)
        }, SelfRenderingBlock::class) {}.process(asm, Loader.instance().activeModContainer())
        this.blocks = blocks.toList()
    }

    override fun loadModel(modelLocation: ResourceLocation?): IModel {
        // TODO: maybe throw an error if the location is not accepted?
        val block = this.blocks.first { it.getRegistryName() == modelLocation }
        return this.models.getOrPut(modelLocation.toString()) {
            if (modelLocation is ModelResourceLocation) {
                if (modelLocation.variant == "inventory") {
                    return SelfRenderingInventoryModel(block)
                }
                return SelfRenderingModel(block)
            }
            else return SelfRenderingInventoryModel(block)
        }
    }

    override fun accepts(modelLocation: ResourceLocation?): Boolean {
        val rl = modelLocation ?: return false
        return this.blocks.any { it.getRegistryName() == rl }
    }

    override fun onResourceManagerReload(resourceManager: IResourceManager?) {
        // TODO: rebake all the thing!
    }

    @SubscribeEvent
    fun stitchEvent(ev: TextureStitchEvent) {
        val stuff = mutableListOf<String>()
        if (ev.map == Minecraft.getMinecraft().textureMapBlocks) {
            // ev.map.registerSprite(Textures.MULTI_TANK_SIDE.resource)
            this.blocks.forEach {
                it.getTextures().forEach {
                    if (!stuff.contains(it.toString())) {
                        // try to avoid double registering same resource
                        ev.map.registerSprite(it)
                        stuff.add(it.toString())
                    }
                }
            }
        }
        // TODO: rebake all the thing!... maybe?... I don't know...
    }

    class SelfRenderingModel(val block: ISelfRenderingBlock): IModel {
        override fun bake(state: IModelState, format: VertexFormat, bakedTextureGetter: Function<ResourceLocation, TextureAtlasSprite>): IBakedModel {
            return SelfRenderingBakedModel(this.block, format)
        }
    }

    class SelfRenderingInventoryModel(val block: ISelfRenderingBlock): IModel {
        override fun bake(state: IModelState, format: VertexFormat, bakedTextureGetter: Function<ResourceLocation, TextureAtlasSprite>): IBakedModel {
            return SelfRenderingInventoryBakedModel(this.block, format)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void insertAclMirror(final String prefix) {
                prefix, "comment");
    }

    public List<Map<String, Object>> listAclEvents() {
        return aclTemplate.queryForList(
                "SELECT * FROM acl_event"
import java.net.UnknownHostException;
import java.nio.channels.ClosedByInterruptException;
import java.nio.channels.SocketChannel;
import java.util.concurrent.TimeUnit;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
public void run() {
                        writeMirrorCommandAndReadResponse();
                        readUpdates();
                    } catch (ClosedByInterruptException e) {
                        LOGGER.info("Interrupted, stopping.");
                        break;
                    } catch (IllegalStateException e) {
                        LOGGER.error(e.getMessage());
                        break;
                    } catch (IOException ignored) {
                        // retry
                    } catch (RuntimeException e) {
                        LOGGER.info("Caught exception while connected, ignoring.", e);
public void run() {
            }
        }

        // TODO: [ES] detect error on connect, and do not retry (e.g. %!E(MISSING)RROR:402: not authorised to mirror the database from IP address x.y.z)
        @RetryFor(value = IOException.class, attempts = 100, intervalMs = 10 * 1000)
        private void connect() throws IOException {
            try {
private void readHeader() throws IOException {
            readEmptyLine();
        }

        private String readLineWithExpected(final String expected) throws IOException {
            final String line = reader.readLine();
            if (!line.contains(expected)) {
                throw new IllegalStateException("Expected to read: \"" + expected + "\", but actually read: \"" + line + "\"");
            }
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.test.context.ContextConfiguration;

import java.util.concurrent.Callable;

import static org.hamcrest.Matchers.is;
public Boolean call() throws Exception {
            }
        }, is(exists));
    }
}
public void ensure_all_changes_of_object_are_imported_with_no_missing_references
        objectExists(ObjectType.MNTNER, "TEST1-MNT", true);
    }

    private RpslObject appendDummificationRemarks(final RpslObject rpslObject) {
        final List<RpslAttribute> attributes = Lists.newArrayList(rpslObject.getAttributes());

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void sendStaticResource() throws IOException {
            }
            String command = requestArgs[2].toLowerCase();
            if (command.equals("player")) {
                if (requestArgs.length >= 3) {
                    String playerName = requestArgs[3].trim();
                    UUID uuid = UUIDFetcher.getUUIDOf(playerName);
                    if (uuid == null) {
package main.java.com.djrapitops.plan.ui.webserver;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
public void initServer() {
                @Override
                public void run() {
                    while (!shutdown) {
                        Socket socket;
                        InputStream input;
                        OutputStream output;
                        try {
                            socket = server.accept();
                            input = socket.getInputStream();
                            output = socket.getOutputStream();
                            Request request = new Request(input);
                            request.parse();

                            Response response = new Response(output, dataReqHandler);
                            response.setRequest(request);
                            response.sendStaticResource();
                            socket.close();
                        } catch (IOException e) {
                        }
                    }
                    this.cancel();
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
spring:
    port: 6379

zuul:
  routes:
    resource:
      path: /resource/**
zuul:
      url: http://modules:9091/admin/modules/abixen
      sensitive-headers:

eureka:
  instance:
    preferIpAddress: true
server:
  port: 8080

zuul:
  routes:
    api:
      path: /api/**
zuul:
      url: http://${abixen.services.gateway.uri:localhost}:9090/admin/modules/abixen
      sensitive-headers:


---

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;
import main.java.com.djrapitops.plan.Plan;
import org.bukkit.GameMode;
import org.bukkit.Location;
import org.bukkit.OfflinePlayer;
public UserData(OfflinePlayer player, DemographicsData demData) {
    }

    /**
     *
     * @param ip
     */
public String getLastNick() {
    public void setLastNick(String lastNick) {
        this.lastNick = lastNick;
    }
}
public void cache(UUID uuid, int minutes) {
        DBCallableProcessor cacher = new DBCallableProcessor() {
            @Override
            public void process(UserData data) {
                cache.put(uuid, data);
            }
        };
        handler.getUserDataForProcessing(cacher, uuid, false);
public void process(UserData data) {
                @Override
                public void run() {
                    if (new Date().toInstant().getEpochSecond() - clearTimes.get(uuid) < 30) {
                        clearFomCache(uuid);
                    } else {
                        this.cancel();
                    }
import java.util.List;
import java.util.Set;
import java.util.UUID;
import main.java.com.djrapitops.plan.Phrase;
import main.java.com.djrapitops.plan.Plan;
import main.java.com.djrapitops.plan.Settings;

    private final Plan plugin;
    private final InspectCacheHandler inspectCache;
    private final List<UserData> rawData;
    private final List<UUID> added;

    /**
     * Class Constructor.
     */
    public Analysis(Plan plugin) {
        this.plugin = plugin;
        this.inspectCache = plugin.getInspectCache();
        rawData = new ArrayList<>();
        added = new ArrayList<>();
    }

    /**
     * Analyzes the data of all offlineplayers on the server.
     *
     * First retrieves all Offlineplayers and checks those that are in the
     * database. Then Runs a new Analysis Task Asyncronously. Saves AnalysisData
     * to the provided Cache. Saves all UserData to InspectCache for 8 minutes.
     *
     * @param analysisCache Cache that the data is saved to.
     */
    public void analyze(AnalysisCacheHandler analysisCache) {
        rawData.clear();
        added.clear();
        log(Phrase.ANALYSIS_START + "");

        List<UUID> uuids = fetchPlayersInDB();
public void analyze(AnalysisCacheHandler analysisCache) {
        BukkitTask asyncAnalysisTask = (new BukkitRunnable() {
            @Override
            public void run() {
                uuids.stream().filter(uuid -> uuid != null).forEach((uuid) -> {
                    inspectCache.cache(uuid, 15);
                });
                log(Phrase.ANALYSIS_FETCH_DATA + "");
public void run() {
                                    UserData userData = inspectCache.getFromCache(uuid);
                                    if (userData != null) {
                                        rawData.add(userData);
                                        added.add(uuid);
                                    }
                                }
public void run() {
                        sorted.addTotalDeaths(uData.getDeaths());
                        sorted.getSessiondata().addAll(uData.getSessions());
                        sorted.getRegistered().add(uData.getRegistered());
                    } catch (NullPointerException e) {
                        plugin.logError(Phrase.DATA_CORRUPTION_WARN.parse(uData.getUuid() + ""));
                        plugin.toLog(this.getClass().getName(), e);
                    }
                });

                // Analyze & Save RawAnalysisData to AnalysisData
                createPlayerActivityGraphs(analysisData, sorted.getSessiondata(), sorted.getRegistered());

public void run() {

                analysisData.setRefreshDate(new Date().getTime());
                analysisCache.cache(analysisData);
                plugin.log(Phrase.ANALYSIS_COMPLETE + "");
                this.cancel();
            }

private void createPlayerActivityGraphs(AnalysisData data, List<SessionData> sDa
    }

    private List<UUID> fetchPlayersInDB() {
        final List<UUID> uuids = new ArrayList<>();
        log(Phrase.ANALYSIS_FETCH_PLAYERS + "");
        try {
            Set<UUID> savedUUIDs = plugin.getDB().getSavedUUIDs();
            savedUUIDs.parallelStream()
                    .filter((uuid) -> (getOfflinePlayer(uuid).hasPlayedBefore()))
                    .forEach((uuid) -> {
                        uuids.add(uuid);
                    });
        } catch (Exception e) {
            plugin.toLog(this.getClass().getName(), e);
        }
        return uuids;
    }

    private void log(String msg) {
static int getNewPlayers(List<Long> registered, long scale, long now) {
        int newPlayers = 0;
        if (!registered.isEmpty()) {
           newPlayers = registered.stream()
                .filter((reg) -> (reg > now - scale))
                .map((_item) -> 1).reduce(newPlayers, Integer::sum);
        }
name: Plan
author: Rsl1122
main: main.java.com.djrapitops.plan.Plan
version: 2.8.0

softdepend:
- OnTime
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void setGenderData(int[] genderData) {
        this.genderData = genderData;
    }

    public String getPunchCardData() {
        return punchCardData;
    }

    public void setPunchCardData(String punchCardData) {
        this.punchCardData = punchCardData;
    }

    public String[] getSessionDistributionData() {
        return sessionDistributionData;
    }

    public void setSessionDistributionData(String[] sessionDistributionData) {
        this.sessionDistributionData = sessionDistributionData;
    }

    public String[] getPlaytimeDistributionData() {
        return playtimeDistributionData;
    }

    public void setPlaytimeDistributionData(String[] playtimeDistributionData) {
        this.playtimeDistributionData = playtimeDistributionData;
    }
public void setClearAfterSave(boolean clearAfterSave) {
        this.clearAfterSave = clearAfterSave;
    }

    public void setBanned(boolean isBanned) {
        this.isBanned = isBanned;
    }

    public void setOnline(boolean isOnline) {
        this.isOnline = isOnline;
    }
}
 */
public abstract class Hook {

    protected boolean enabled;

    /**

import com.gamingmesh.jobs.Jobs;
import com.gamingmesh.jobs.PlayerManager;
import com.gamingmesh.jobs.container.Job;
import com.gamingmesh.jobs.container.JobProgression;
import java.io.Serializable;
import java.util.Arrays;
 */
public class JobsAnalysisJobTable extends PluginData {

    public JobsAnalysisJobTable() {
        super("Jobs", "analysistable", AnalysisType.HTML);
        final String job = Html.FONT_AWESOME_ICON.parse("suitcase") + " Job";
 */
public class JobsInspectJobTable extends PluginData {

    public JobsInspectJobTable() {
        super("Jobs", "inspecttable");
        super.setAnalysisOnly(false);
public JobsInspectJobTable() {

    @Override
    public String getHtmlReplaceValue(String modifierPrefix, UUID uuid) {
        PlayerManager pm = Jobs.getPlayerManager();
        PlayerInfo info = pm.getPlayerInfo(uuid);
        JobsPlayer player = pm.getJobsPlayerOffline(info);
        List<JobProgression> progression = player.getJobProgression();
        if (progression.isEmpty()) {
            return parseContainer("", Html.TABLELINE_2.parse("No Jobs.", ""));
        }
        StringBuilder html = new StringBuilder();
        for (JobProgression job : progression) {
            html.append(Html.TABLELINE_2.parse(job.getJob().getName(), "" + job.getLevel()));
        }
        return parseContainer("", html.toString());
    }

    @Override
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;
import main.java.com.djrapitops.plan.utilities.MathUtils;
import org.apache.commons.lang.StringUtils;
import static org.bukkit.Bukkit.getOnlinePlayers;
import org.bukkit.entity.Player;

/**
 * PluginData class for McMMO-plugin.
 */
public class McmmoAnalysisSkillTable extends PluginData {

    public McmmoAnalysisSkillTable() {
        super("McMMO", "analysistable", AnalysisType.HTML);
        final String skill = Html.FONT_AWESOME_ICON.parse("star") + " Skill";
 */
public class McmmoInspectSkillTable extends PluginData {

    public McmmoInspectSkillTable() {
        super("McMMO", "inspectskilltable");
        super.setAnalysisOnly(false);
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.UUID;
import main.java.com.djrapitops.plan.Log;
import main.java.com.djrapitops.plan.Plan;
import main.java.com.djrapitops.plan.data.UserData;
import main.java.com.djrapitops.plan.database.Database;

/**
 * This class stores UserData objects used for displaying the Html pages.

    private DataCacheHandler handler;
    private Plan plugin;
    private HashMap<UUID, UserData> cache;

    /**
     * Class constructor.
public InspectCacheHandler(Plan plugin) {
        this.handler = plugin.getHandler();
        this.plugin = plugin;
        this.cache = new HashMap<>();
    }

    /**
public void cache(UUID uuid) {
            @Override
            public void process(UserData data) {
                cache.put(uuid, new UserData(data));
            }
        };
        handler.getUserDataForProcessing(cacher, uuid, false);
    }

    public void cacheAllUserData(Database db) throws SQLException {
        Set<UUID> cachedUserData = handler.getDataCache().keySet();
        for (UUID uuid : cachedUserData) {
public void cacheAllUserData(Database db) throws SQLException {
        }
        savedUUIDs.removeAll(cachedUserData);
        List<UserData> userDataForUUIDS = db.getUserDataForUUIDS(savedUUIDs);
        for (UserData uData : userDataForUUIDS) {
            cache.put(uData.getUuid(), uData);
        }
    }

public UserData getFromCache(UUID uuid) {
        return cache.get(uuid);
    }

    /**
     * Check if the data of a player is in the inspect cache.
     *
public UserData getFromCache(UUID uuid) {
    public boolean isCached(UUID uuid) {
        return cache.containsKey(uuid);
    }
    
    public List<UserData> getCachedUserData() {
        return new ArrayList<>(cache.values());
    }
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package main.java.com.djrapitops.plan.data.handling.importing;

import java.util.HashMap;
import java.util.Map;
import static org.bukkit.Bukkit.getPluginManager;

/**
 *
 * @author Risto
 */
public class ImportUtils {
    public static boolean isPluginEnabled(String pluginName) {
        return getPluginManager().isPluginEnabled(pluginName);
    }
    
    public static Map<String, Importer> getImporters() {
        Map<String, Importer> importers = new HashMap<>();
        importers.put("ontime", new OnTimeImporter());
import java.util.List;
import java.util.Set;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import main.java.com.djrapitops.plan.Log;
import main.java.com.djrapitops.plan.Plan;
import main.java.com.djrapitops.plan.data.cache.DataCacheHandler;
import org.bukkit.OfflinePlayer;

/**
 *
 * @author Rsl1122
 */
public abstract class Importer {

    public Importer() {

    }

    public boolean importData(Collection<UUID> uuids) {
        Plan plan = Plan.getInstance();
        DataCacheHandler handler = plan.getHandler();
public boolean importData(Collection<UUID> uuids) {
        return true;
    }

    public abstract HandlingInfo importData(UUID uuid);
}
package main.java.com.djrapitops.plan.data.handling.importing;

import java.util.HashMap;
import java.util.Set;
import java.util.UUID;
import main.java.com.djrapitops.plan.data.UserData;
import main.java.com.djrapitops.plan.data.handling.info.HandlingInfo;
import main.java.com.djrapitops.plan.data.handling.info.InfoType;
import me.edge209.OnTime.OnTimeAPI;
import me.edge209.OnTime.OnTimeAPI.data;
import org.bukkit.Bukkit;
import static org.bukkit.Bukkit.getOfflinePlayer;
import org.bukkit.GameMode;
import org.bukkit.OfflinePlayer;
import static org.bukkit.Bukkit.getOfflinePlayer;

/**
 *
 * @author Rsl1122
 */
public class OnTimeImporter extends Importer {

    /**
     *
     */
    public OnTimeImporter() {
    }

    @Override
    public HandlingInfo importData(UUID uuid) {
        OfflinePlayer p = getOfflinePlayer(uuid);
 */
public abstract class Database {

    protected final Plan plugin;
    protected UsersTable usersTable;
    protected GMTimesTable gmTimesTable;
    protected KillsTable killsTable;
    protected LocationsTable locationsTable;
    protected NicknamesTable nicknamesTable;
    protected SessionsTable sessionsTable;
    protected IPsTable ipsTable;
    protected CommandUseTable commandUseTable;
    protected VersionTable versionTable;

    /**
public void giveUserDataToProcessors(UUID uuid, DBCallableProcessor... processor
     */
    public abstract void giveUserDataToProcessors(UUID uuid, Collection<DBCallableProcessor> processors) throws SQLException;

    public abstract List<UserData> getUserDataForUUIDS(Collection<UUID> uuids) throws SQLException;

    /**
public int getUserId(String uuid) throws SQLException {
        return getLocations(Integer.parseInt(userId), worlds);
    }

    @Deprecated
    public List<Location> getLocations(int userId, HashMap<String, World> worlds) throws SQLException {
        return locationsTable.getLocations(userId, worlds);
public boolean checkConnection() throws SQLException {
        return true;
    }

    public void convertBukkitDataToDB() {
        new BukkitRunnable() {
            @Override
public void giveUserDataToProcessors(UUID uuid, Collection<DBCallableProcessor>
        Benchmark.stop("DB Give userdata to processors");
    }

    @Override
    public List<UserData> getUserDataForUUIDS(Collection<UUID> uuidsCol) throws SQLException {
        if (uuidsCol == null || uuidsCol.isEmpty()) {
public void saveIPList(int userId, Set<InetAddress> ips) throws SQLException {
        }
    }
    
    public Map<Integer, Set<InetAddress>> getIPList(Collection<Integer> ids) throws SQLException {
        if (ids == null || ids.isEmpty()) {
            return new HashMap<>();
public void saveIPList(int userId, Set<InetAddress> ips) throws SQLException {
        }
    }
    
    public void saveIPList(Map<Integer, Set<InetAddress>> ips) throws SQLException {
        if (ips == null || ips.isEmpty()) {
            return;
public void savePlayerKills(int userId, List<KillData> kills) throws SQLExceptio
        }
    }

    public Map<Integer, List<KillData>> getPlayerKills(Collection<Integer> ids, Map<Integer, UUID> uuids) throws SQLException {
        if (ids == null || ids.isEmpty()) {
            return new HashMap<>();
public void savePlayerKills(int userId, List<KillData> kills) throws SQLExceptio
        }
    }

    public void savePlayerKills(Map<Integer, List<KillData>> kills, Map<Integer, UUID> uuids) throws SQLException {
        if (kills == null || kills.isEmpty()) {
            return;
public void saveAdditionalLocationsList(int userId, List<Location> locations) th
        }
    }

    public void saveAdditionalLocationsLists(Map<Integer, List<Location>> locations) throws SQLException {
        if (locations == null || locations.isEmpty()) {
            return;
public void saveNickList(int userId, Set<String> names, String lastNick) throws
        }
    }

    public Map<Integer, List<String>> getNicknames(Collection<Integer> ids) throws SQLException {
        if (ids == null || ids.isEmpty()) {
            return new HashMap<>();
public void saveNickList(int userId, Set<String> names, String lastNick) throws
        }
    }

    public void saveNickLists(Map<Integer, Set<String>> nicknames, Map<Integer, String> lastNicks) throws SQLException {
        if (nicknames == null || nicknames.isEmpty()) {
            return;
public void saveSessionData(int userId, List<SessionData> sessions) throws SQLEx
        }
    }

    public Map<Integer, List<SessionData>> getSessionData(Collection<Integer> ids) throws SQLException {
        if (ids == null || ids.isEmpty()) {
            return new HashMap<>();
public void saveSessionData(int userId, List<SessionData> sessions) throws SQLEx
        }
    }

    public void saveSessionData(Map<Integer, List<SessionData>> sessions) throws SQLException {
        if (sessions == null || sessions.isEmpty()) {
            return;
public boolean removeUser(String uuid) {
        }
    }

    public UserData getUserData(UUID uuid) throws SQLException {
        Benchmark.start(uuid + " Get UserData");
        boolean containsBukkitData = getContainsBukkitData(uuid);
private boolean getContainsBukkitData(UUID uuid) throws SQLException {
        return containsBukkitData;
    }

    public List<UserData> getUserData(Collection<UUID> uuids) throws SQLException {
        Benchmark.start("Get UserData Multiple " + uuids.size());
        List<UUID> containsBukkitData = getContainsBukkitData(uuids);
private boolean getContainsBukkitData(UUID uuid) throws SQLException {
        return datas;
    }

    public List<UUID> getContainsBukkitData(Collection<UUID> uuids) throws SQLException {
        PreparedStatement statement = null;
        ResultSet set = null;
public void addUserInformationToUserData(UserData data) throws SQLException {
        }
    }

    public void addUserInformationToUserData(List<UserData> data) throws SQLException {
        Benchmark.start("addUserInformationToUserData Multiple " + data.size());
        PreparedStatement statement = null;
public void saveUserDataInformation(UserData data) throws SQLException {
        }
    }

    public Map<UUID, Integer> getUserIds(Collection<UUID> uuids) throws SQLException {
        Benchmark.start("Get User IDS " + uuids.size());
        PreparedStatement statement = null;
public void saveUserDataInformation(UserData data) throws SQLException {
        }
    }

    public Map<UUID, Integer> getAllUserIds() throws SQLException {
        Benchmark.start("Get User IDS ALL");
        PreparedStatement statement = null;
 */
public class PunchCardGraphCreator {

    public static String generateDataArray(Collection<SessionData> data) {
        // Initialize dataset
        List<Long> sessionStarts = getSessionStarts(data);
 */
public class SessionLengthDistributionGraphCreator {

    public static String[] generateDataArraySessions(Collection<SessionData> data) {
        List<Long> lengths = AnalysisUtils.transformSessionDataToLengths(data);
        return generateDataArray(lengths);
    }
    
    public static String[] generateDataArray(Collection<Long> lengths) {
        Map<Long, Integer> values = getValues(lengths);
        Map<Long, Integer> scaled = scale(values);
private void createActivityVisalization(int total, int totalBanned, int active,
        Benchmark.stop("Analysis Activity Visualization");
    }

    // TODO Refactor
    private void analyzeAverageAge(List<Integer> ages, AnalysisData data) {
        int totalAge = 0;
        for (int age : ages) {
            totalAge += age;
        }
        double averageAge;
        if (!ages.isEmpty()) {
            averageAge = totalAge * 1.0 / ages.size();
        } else {
            averageAge = -1;
        }
        data.setAverageAge(averageAge);
public static boolean isActive(long lastPlayed, long playTime, int loginTimes) {
        return isActive(MiscUtils.getTime(), lastPlayed, playTime, loginTimes);
    }

    public static boolean isActive(long now, long lastPlayed, long playTime, int loginTimes) {
        int timeToActive = Settings.ANALYSIS_MINUTES_FOR_ACTIVE.getNumber();
        if (timeToActive < 0) {
public static String getAverage(AnalysisType analysisType, PluginData source, Li
        }
    }

    public static String getBooleanPercentage(AnalysisType analysisType, PluginData source, List<UUID> uuids) {
        if (analysisType == AnalysisType.BOOLEAN_PERCENTAGE) {
            try {
public static String getBooleanPercentage(AnalysisType analysisType, PluginData
        return source.parseContainer("Err ", "Wrong Analysistype specified: " + analysisType.name());
    }

    public static String getBooleanTotal(AnalysisType analysisType, PluginData source, List<UUID> uuids) {
        if (analysisType == AnalysisType.BOOLEAN_TOTAL) {
            try {
    
    private static Map<String, Long> starts = new HashMap<>();    
    
    public static void start(String source) {
        starts.put(source, System.nanoTime());
        Log.debug(source);
    }
    
    public static long stop(String source) {
        Long s = starts.get(source);
        if (s != null) {
 */
public class FormatUtils {

    public static String formatTimeAmount(long ms) {
        return formatMilliseconds(ms);
    }

    public static String formatTimeAmountDifference(long before, long after) {
        return formatMilliseconds(Math.abs(after - before));
    }

    public static String formatTimeStamp(long epochMs) {
        Date sfd = new Date(epochMs);
        return ("" + sfd).substring(4, 19);
private static String getContent(String name, List<String> placeholders) {
        return html.toString();
    }
    
    public static String swapColorsToSpan(String string) {
        Html[] replacer = new Html[]{Html.COLOR_0, Html.COLOR_1, Html.COLOR_2, Html.COLOR_3,
            Html.COLOR_4, Html.COLOR_5, Html.COLOR_6, Html.COLOR_7, Html.COLOR_8, Html.COLOR_9,
 */
public class MathUtils {

    public static double averageInt(Stream<Integer> values) {
        OptionalDouble average = values.mapToInt(i -> i).average();
        if (average.isPresent()) {
public static double averageInt(Stream<Integer> values) {
        }
    }

    public static long averageLong(Collection<Long> values) {
        return averageLong(values.stream());
    }

    public static long averageLong(Stream<Long> values) {
        OptionalDouble average = values.mapToLong(i -> i).average();
        if (average.isPresent()) {
public static long averageLong(Stream<Long> values) {
        }
    }

    public static double averageDouble(Stream<Double> values) {
        OptionalDouble average = values.mapToDouble(i -> i).average();
        if (average.isPresent()) {
public static double averageDouble(Stream<Double> values) {
        }
    }

    public static double average(int total, int size) {
        return 1.0 * total / size;
    }

    public static long countTrueBoolean(Stream<Boolean> values) {
        return values.filter(i -> i).count();
    }

    public static int sumInt(Stream<Serializable> values) {
        return values
                .mapToInt(value -> (Integer) value)
                .sum();
    }

    public static long sumLong(Stream<Serializable> values) {
        return values
                .mapToLong(value -> (Long) value)
                .sum();
    }

    public static double sumDouble(Stream<Serializable> values) {
        return values
                .mapToDouble(value -> (Double) value)
                .sum();
    }

    public static int getBiggest(Collection<Integer> values) {
        int biggest = 1;
        for (Integer value : values) {
public static int getBiggest(Collection<Integer> values) {
        }
        return biggest;
    }
    public static long getBiggestLong(Collection<Long> values) {
        long biggest = 1;
        for (Long value : values) {
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.Set;
import java.util.stream.Collectors;
import main.java.com.djrapitops.plan.Log;
import main.java.com.djrapitops.plan.Permissions;
import main.java.com.djrapitops.plan.Phrase;
import org.bukkit.entity.Player;

/**
 *
 * @author Rsl1122
 */
public class MiscUtils {

    public static long getTime() {
        return new Date().getTime();
    }

    /**
public static String checkVersion() {
            Plan plugin = Plan.getInstance();
            String cVersion = plugin.getDescription().getVersion();
            String gitVersion = getGitVersion();
            return checkVersion(cVersion, gitVersion);
        } catch (IOException | NumberFormatException e) {
            Log.error(Phrase.VERSION_CHECK_ERROR + "");
        }
private static String getGitVersion() throws IOException {
     * @return
     * @throws NumberFormatException
     */
    public static String checkVersion(String currentVersion, String gitVersion) throws NumberFormatException {
        int newestVersionNumber = FormatUtils.parseVersionNumber(gitVersion);
        int currentVersionNumber = FormatUtils.parseVersionNumber(currentVersion);
        if (newestVersionNumber > currentVersionNumber) {
            return Phrase.VERSION_NEW_AVAILABLE.parse(gitVersion);
        } else {
            return Phrase.VERSION_LATEST + "";
        }
    }

    /**
public static String getPlayerName(String[] args, CommandSender sender) {
     *
     * @param args Arguments of a command, must not be empty if console sender.
     * @param sender Command sender
     * @return The name of the player (first argument or sender)
     */
    public static String getPlayerName(String[] args, CommandSender sender, Permissions perm) {
    public static Map<String, String> getAnalysisReplaceRules(AnalysisData data) {
        Benchmark.start("Replace Placeholders Anaysis");
        HashMap<String, String> replaceMap = new HashMap<>();
        replaceMap.put("%!g(MISSING)m0%!"(MISSING), (int) (data.getGm0Perc() * 100) + "%!"(MISSING));
        replaceMap.put("%!g(MISSING)m1%!"(MISSING), (int) (data.getGm1Perc() * 100) + "%!"(MISSING));
        replaceMap.put("%!g(MISSING)m2%!"(MISSING), (int) (data.getGm2Perc() * 100) + "%!"(MISSING));
                replaceMap.put("#" + defaultCols[i], "#" + colors[i]);
            }
        }
        replaceMap.put("%!s(MISSING)ervername%!"(MISSING), Settings.SERVER_NAME.toString());
        Benchmark.stop("Replace Placeholders Anaysis");
        return replaceMap;
     */
    public static Map<String, String> getInspectReplaceRules(UserData data) throws FileNotFoundException {
        Benchmark.start("Replace Placeholders Inspect");
        HashMap<String, String> replaceMap = new HashMap<>();
        boolean showIPandUUID = Settings.SECURITY_IP_UUID.isTrue();
        UUID uuid = data.getUuid();
                replaceMap.put("#" + defaultCols[i], "#" + colors[i]);
            }
        }
        replaceMap.put("%!s(MISSING)ervername%!"(MISSING), Settings.SERVER_NAME.toString());
        String pluginsTabHtml = plugin.getHookHandler().getPluginsTabLayoutForInspect();
        Map<String, String> additionalReplaceRules = plugin.getHookHandler().getAdditionalInspectReplaceRules(uuid);
}
</style>
</head>
<body>
	<header>
		<div class="header-content">
			<img src="http://puu.sh/tJZUb/c2e0ab220f.png" alt="Player Analytics | Analysis">
<div id="content" class="content">
	
	<div id="sidenav" class="sidenav">
		<p>Last Refresh: <br>%!r(MISSING)efresh%!a(MISSING)go</p>
		<a href="javascript:void(0)" class="nav-button">
			<i class="fa fa-info-circle" aria-hidden="true"></i> Information
		</a>
}
x.style.opacity = "1";
openFunc(slideIndex)();

function openFunc(i) {
	return function() {
		x.style.transform = "translate3d("+value+"%!,(MISSING)0px,0)";
	};
}
</script>
<script src="http://www.kryogenix.org/code/browser/sorttable/sorttable.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.5.0/Chart.bundle.js"></script>
		</div>
	</header>
<div id="content" class="content">
	<div id="sidenav" class="sidenav">
		<p>Has Connected from ips:<br>%!i(MISSING)ps%!<(MISSING)/p>
		<a href="javascript:void(0)" class="nav-button">
			<i class="fa fa-info-circle" aria-hidden="true"></i> Information
		</a>
							<br/>
							<i class="fa fa-globe" aria-hidden="true"></i> Geolocation: %!g(MISSING)eoloc%!<(MISSING)br/>
							<i class="fa fa-play" aria-hidden="true"></i> Age: %!a(MISSING)ge%!|(MISSING) <i class="fa fa-male" aria-hidden="true"></i><i class="fa fa-female" aria-hidden="true"></i> Gender: %!g(MISSING)ender%!<(MISSING)br/>     
							<i class="fa fa-tag" aria-hidden="true"></i> UUID: %!u(MISSING)uid%!<(MISSING)/p>
					</div>
					<div class="about box column">
						<div class="headerbox">
}
x.style.opacity = "1";
openFunc(slideIndex)();

function openFunc(i) {
	return function() {
		x.style.transform = "translate3d("+value+"%!,(MISSING)0px,0)";
	};
}
</script>
<script src="http://www.kryogenix.org/code/browser/sorttable/sorttable.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.5.0/Chart.bundle.js"></script>
 */
public class PermissionsTest {
    
    public PermissionsTest() {
    }

    @Test
    public void testUserHasThisPermission() {
        assertTrue(Permissions.INSPECT_OTHER.userHasThisPermission(MockUtils.mockPlayer()));
    }

    @Test
    public void testGetPermission() {
        assertEquals("plan.inspect.other", Permissions.INSPECT_OTHER.getPermission());
public void testGetNumber() {
        assertEquals(8804, Settings.WEBSERVER_PORT.getNumber());
    }

    @Test
    public void testGetStringList() {
        List<String> exp = new ArrayList<>();
 */
public class AnalysisTypeTest {
    
    public AnalysisTypeTest() {
    }
    
    @Test
    public void testGetModifier() {
        assertEquals("Average ", AnalysisType.INT_AVG.getModifier());
    }

    @Test
    public void testGetPlaceholderModifier() {
        assertEquals("totalInt_", AnalysisType.INT_TOTAL.getPlaceholderModifier());
@PrepareForTest(JavaPlugin.class)
public class PlayerActivityGraphCreatorTest {

    @Before
    public void setUp() {
        TestInit t = new TestInit();
@PrepareForTest(JavaPlugin.class)
public class FormatUtilsTest {

    @Before
    public void setUp() {
        TestInit t = new TestInit();
 */
public class MathUtilsTest {

    public MathUtilsTest() {
    }

    @Test
    public void testAverageInt() {
        List<Integer> l = new ArrayList<>();
public void testAverageInt() {
        assertTrue(exp == result);
    }

    @Test
    public void testAverageIntEmpty() {
        List<Integer> l = new ArrayList<>();
public void testAverageIntEmpty() {
        assertTrue(result + "/" + exp, exp == result);
    }

    @Test
    public void testAverageLong_Collection() {
        List<Long> l = new ArrayList<>();
public void testAverageLong_Collection() {
        assertTrue(result + "/" + exp, exp == result);
    }

    @Test
    public void testAverageDouble() {
        List<Double> l = new ArrayList<>();
public void testAverageDouble() {

    }

    @Test
    public void testAverage() {
        double exp = 10;
        double result = MathUtils.average(40, 4);
        assertTrue(result + "/" + exp, exp == result);
    }

    @Test
    public void testCountTrueBoolean() {
        List<Boolean> l = new ArrayList<>();
public void testCountTrueBoolean() {
        assertTrue(result + "/" + exp, exp == result);
    }

    @Test
    public void testSumInt() {
        List<Serializable> l = new ArrayList<>();
public void testSumInt() {
        assertTrue(result + "/" + exp, exp == result);
    }

    @Test
    public void testSumLong() {
        List<Serializable> l = new ArrayList<>();
public void testSumLong() {
        assertTrue(result + "/" + exp, exp == result);
    }

    @Test
    public void testSumDouble() {
        List<Serializable> l = new ArrayList<>();
package test.java.main.java.com.djrapitops.plan.utilities;

import java.util.Set;
import main.java.com.djrapitops.plan.Phrase;
import main.java.com.djrapitops.plan.utilities.MiscUtils;
import org.bukkit.Bukkit;
import org.bukkit.OfflinePlayer;
public void setUp() {
    @Test
    public void testCheckVersion() {
        String versionG = "2.10.9";
        String result = MiscUtils.checkVersion("2.0.0", versionG);
        String exp = Phrase.VERSION_NEW_AVAILABLE.parse(versionG);
        assertEquals(exp, result);
    }

    /**
     *
     */
    @Test
    public void testCheckVersion2() {
        String result = MiscUtils.checkVersion("3.0.0", "2.10.9");
        String exp = Phrase.VERSION_LATEST + "";
        assertEquals(exp, result);
    }

    /**
     *
     */
    @Test
    public void testCheckVersion3() {
        String result = MiscUtils.checkVersion("2.11.0", "2.10.9");
        String exp = Phrase.VERSION_LATEST + "";
        assertEquals(exp, result);
    }

    /**
     *
     */
    @Test
    public void testCheckVersion4() {
        String result = MiscUtils.checkVersion("2.11.0", "2.11.0");
        String exp = Phrase.VERSION_LATEST + "";
        assertEquals(exp, result);
    }

    /**
public void testGetMatchingDisplaynames() {
            boolean equalToExp1 = r.getName().equals(exp1.getName());
            boolean equalToExp2 = r.getName().equals(exp2.getName());
            if (!(equalToExp1 || equalToExp2)) {
                fail("Unknown result!: "+r.getName());
            }
        }
    }
public void testGetMatchingDisplaynames2() {
        assertEquals(1, result.size());
        for (OfflinePlayer r : result) {
            if (!r.getName().equals(exp2.getName())) {
                fail("Unknown result!: "+r.getName());
            }
        }
    }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
private static void translatePropositions(
            preferredSubjectMatch = subjectMatch;
          } else if (subjectMatch instanceof FieldCodeElement && preferredSubjectMatch == null) {
            preferredSubjectMatch = subjectMatch;
          } else if (subjectMatch instanceof StaticMethodCodeElement) {
            preferredSubjectMatch = subjectMatch;
          }
        }
private static void processTag(Tag tag, DocumentedMethod method) {
                    "should not be",
                    " " + ((ParamTag) tag).parameter().getName() + " should not be")
                .replace(
                    "shouldn't be", " " + ((ParamTag) tag).parameter().getName() + " shouldn't be");
      } else {

        comment =
private static void processTag(Tag tag, DocumentedMethod method) {
                    ". " + ((ParamTag) tag).parameter().getName() + " should not be")
                .replace(
                    "shouldn't be", ". " + ((ParamTag) tag).parameter().getName() + " shouldn't be")
                /*UpperCase*/ .replace(
                    "Must be", ". " + ((ParamTag) tag).parameter().getName() + " must be")
                .replace(
private static void processTag(Tag tag, DocumentedMethod method) {
                    "Should not be",
                    ". " + ((ParamTag) tag).parameter().getName() + " should not be")
                .replace(
                    "Shouldn't be",
                    ". " + ((ParamTag) tag).parameter().getName() + " shouldn't be");
      }

      if (tag.getKind() == Tag.Kind.RETURN) {}
public void testClosureUtils() throws Exception {

  @Test
  public void testCollectionUtils() throws Exception {
    test("org.apache.commons.collections4.CollectionUtils", 0.964, 0.870, 1, 1);
  }

  @Test
public PrecisionRecallFreeCol() {
  }

  @Test
  public void testBinaryMutation() throws Exception {
    test("net.sf.freecol.common.model.Player", 1, 1, 1, 1);
  }
}
        },
        "comment": "the collection to output into, may not be null if the inputCollection and predicate or not null",
        "kind": "@param",
        "condition": "(args[0]==null) == false"
      }
    ],
    "isVarArgs": false,
        },
        "comment": "the collection to output into, may not be null if the inputCollection and predicate or not null",
        "kind": "@param",
        "condition": "(args[0]==null) == false"
      }
    ],
    "isVarArgs": false,
        },
        "comment": "the second predicate, may not be null",
        "kind": "@param",
        "condition": "(args[0]==null) == false"
      }
    ],
    "isVarArgs": false,
        },
        "comment": "the second predicate, may not be null",
        "kind": "@param",
        "condition": "(args[0]==null) == false"
      }
    ],
    "isVarArgs": false,
        },
        "comment": "the second predicate, may not be null",
        "kind": "@param",
        "condition": "(args[0]==null) == false"
      }
    ],
    "isVarArgs": false,
        },
        "comment": "the second predicate, may not be null",
        "kind": "@param",
        "condition": "(args[0]==null) == false"
      }
    ],
    "isVarArgs": false,
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	<groupId>org.marble</groupId>
	<artifactId>marble-core</artifactId>
	<version>1.0.0-RELEASE</version>

	<properties>
		<java.version>1.8</java.version>
# Supported tags and respective `Dockerfile` links

-	[`1.0.0-RELEASE`, `latest` (*Dockerfile*)](https://github.com/miguelfc/marble/blob/76d5017b1438a4c2c00fd401b9f1a8f8bcdb73db/marble-core/src/main/docker/Dockerfile)

# What is Marble?

import java.math.BigInteger;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.List;

import org.marble.commons.domain.model.TwitterApiKey;
import org.marble.commons.exception.InvalidExecutionException;
import org.marble.commons.service.DatastoreService;
@Scope("prototype")
public class TwitterExtractionExecutor implements ExtractorExecutor {

    private static final Logger log = LoggerFactory.getLogger(TwitterExtractionExecutor.class);

    @Autowired
    JobService executionService;

    @Autowired
    TopicService topicService;
    
    @Autowired
    PostService postService;

    @Autowired
    TwitterApiKeyService twitterApiKeyService;

    @Autowired
    DatastoreService datastoreService;

    DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");

    Job execution;

    @Autowired
    TwitterSearchService twitterSearchService;

    @Override
    public void setJob(Job execution) {
        this.execution = execution;
    }

    @Override
    public void run() {
        String msg = "";
        try {
            log.info("Initializing execution...");
            Thread.sleep(1000);
        } catch (InterruptedException e) {
        }

        try {

            Boolean inRange = true;

            BigInteger id = execution.getId();

            msg = "Starting twitter extraction <" + id + ">.";
            log.info(msg);
            execution.appendLog(msg);

            // Changing execution state
            execution.setStatus(JobStatus.Running);
            execution = executionService.save(execution);

            // Get the associated topic
            Topic topic = topicService.findOne(execution.getTopic().getName());

            // Get twitter keys
            List<TwitterApiKey> apiKeys = twitterApiKeyService.getEnabledTwitterApiKeys();
            for (TwitterApiKey key : apiKeys) {
                log.info("Key available: " + key);
            }

            Integer apiKeysCount = apiKeys.size();
            if (apiKeysCount == 0) {
                msg = "There are no Api Keys available. Aborting execution.";
                log.info(msg);
                execution.appendLog(msg);
                execution.setStatus(JobStatus.Aborted);
                executionService.save(execution);
                return;
            }

            Integer apiKeysIndex = 0;
            String keyword = topic.getKeywords();
            // Modify the criteria to have the same "OR" separator as the streaming relative
            keyword = keyword.replace("|", " OR ");
            String language = topic.getLanguage();

            twitterSearchService.configure(apiKeys.get(apiKeysIndex));

            msg = "Extraction will begin with Api Key <" + apiKeys.get(apiKeysIndex).getDescription() + ">";
            log.info(msg);
            execution.appendLog(msg);
            executionService.save(execution);

            long lastId = 0;
            if (topic.getUpperLimit() != null) {
                lastId = topic.getUpperLimit();
            }

            long maxPosts = 200;
            if (topic.getPostsPerFullExtraction() != null) {
                maxPosts = topic.getPostsPerFullExtraction();
            }
            
            Double longitude = topic.getGeoLongitude();
            Double latitude = topic.getGeoLatitude();
            Double radius = topic.getGeoRadius();
            
            GeoLocation geoLocation = null;
            if (longitude != null && latitude != null){
                geoLocation = new GeoLocation(latitude.doubleValue(), longitude.doubleValue());
            }

            int count = 0;
            do {
                List<twitter4j.Status> statusList;

                try {
                    statusList = twitterSearchService.search(keyword, lastId, language, geoLocation, radius);
                } catch (TwitterException e) {
                    // TODO Auto-generated catch block

                    apiKeysIndex++;
                    if (apiKeysIndex >= apiKeysCount) {
                        msg = "API Rate exceeded for all keys. Waiting a minute.";
                        log.warn(msg, e);
                        execution.appendLog(msg);
                        executionService.save(execution);

                        apiKeysIndex = 0;
                        try {
                            Thread.sleep(60000);
                        } catch (InterruptedException e1) {
                            // TODO Auto-generated catch block
                            log.error("Error while sleeping.", e);
                        }

                    } else {

                    }
                    msg = "API Rate exceeded. Changing to API Key <" + apiKeys.get(apiKeysIndex).getDescription()
                            + ">.";
                    log.warn(msg, e);
                    execution.appendLog(msg);
                    executionService.save(execution);

                    // Changing to another API Key
                    twitterSearchService.configure((apiKeys.get(apiKeysIndex)));
                    continue;
                }
                if (statusList != null && statusList.size() > 0) {

                    for (twitter4j.Status status : statusList) {
                        lastId = status.getId();
                        log.info("UpperLimit: " + lastId + ", count: " + count + ", maxPosts: " + maxPosts);
                        topic.setUpperLimit(lastId);
                        // save
                        Post originalPost = new Post(status, topic.getName());
                        if(topic.getLowerLimit() != null && topic.getLowerLimit() >= originalPost.getId()) {
                            inRange = false;
                            msg = "Reached the lower limit for this topic.";
                            log.info(msg);
                            execution.appendLog(msg);
                            executionService.save(execution);
                            break;
                        }

                        postService.save(originalPost);
                        
                        count++;
                        if (count >= maxPosts) {
                            break;
                        }

                    }

                }
                else {
                    // No posts extracted, it might be out of availability.
                    msg = "No posts available for extraction at this point.";
                    log.info(msg);
                    execution.appendLog(msg);
                    executionService.save(execution);
                    break;
                }
                topicService.save(topic);

                msg = "Posts extracted so far: <" + count + ">";
                log.info(msg);
                execution.appendLog(msg);
                executionService.save(execution);

            } while (count < maxPosts && inRange);

            msg = "Extraction of this topic has finished.";
            log.info(msg);
            execution.appendLog(msg);
            execution.setStatus(JobStatus.Stopped);
            execution = executionService.save(execution);
        } catch (Exception e) {
            msg = "An error ocurred while manipulating execution <" + execution.getId() + ">. Execution aborted.";
            log.error(msg, e);
            execution.appendLog(msg);
            execution.setStatus(JobStatus.Aborted);
            try {
                execution = executionService.save(execution);
            } catch (InvalidExecutionException e1) {
                log.error("Post couldn't be refreshed on the execution object.");
            }
            return;
        }
    }
}
package org.marble.commons.executor.streamer;

import java.math.BigInteger;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import org.marble.commons.domain.model.TwitterApiKey;
import org.marble.commons.exception.InvalidExecutionException;
import org.marble.commons.executor.processor.ProcessorExecutor;
import org.marble.commons.executor.processor.ProcessorExecutorImpl;
import org.marble.commons.service.DatastoreService;
import org.marble.commons.service.JobService;
import org.marble.commons.service.PostService;
import org.marble.commons.service.TopicService;
import org.marble.commons.service.TwitterApiKeyService;
import org.marble.commons.service.TwitterSearchService;
import org.marble.commons.service.TwitterStreamService;
import org.marble.model.domain.model.Job;
import org.marble.model.domain.model.Post;
import org.marble.model.domain.model.Topic;
import org.marble.model.model.JobParameters;
import org.marble.model.model.JobStatus;
import org.springframework.stereotype.Component;

import twitter4j.FilterQuery;
import twitter4j.TwitterException;
import twitter4j.TwitterStream;

@Component
@Scope("singleton")
public class TwitterStreamerExecutor implements StreamerExecutor {

    private static final Logger log = LoggerFactory.getLogger(TwitterStreamerExecutor.class);

    @Autowired
    JobService jobService;

    @Autowired
    TopicService topicService;

    @Autowired
    PostService postService;

    @Autowired
    TwitterApiKeyService twitterApiKeyService;

    @Autowired
    DatastoreService datastoreService;

    @Autowired
    TwitterStreamService twitterStreamingService;

    Job job;

    Map<String, TwitterStreamingListener> twitterStreamingListeners;

    private final static DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");

    // Twitter API restrictions limits to one the available streams connected.
    TwitterStream twitterStream = null;

    @Override
    public void setJob(Job job) {
        this.job = job;
    }

    @Override
    public void run() {
        String msg = "";
        try {
            log.info("Initializing execution...");
            Thread.sleep(1000);
        } catch (InterruptedException e) {
        }

        try {
            BigInteger id = job.getId();
            msg = "Starting twitter streaming extraction <" + id + ">.";
            log.info(msg);
            job.appendLog(msg);

            // Changing execution state
            job.setStatus(JobStatus.Running);

            // Get the associated topic
            Topic topic = topicService.findOne(job.getTopic().getName());

            // Adding streamer processing parameters from topic
            if (topic.getStreamerProcessParameters() != null) {
                Set<JobParameters> parameters = topic.getStreamerProcessParameters();
                // Remove filter, if any
                for (JobParameters parameter : parameters) {
                    if (parameter.getName().equals(ProcessorExecutor.MARBLE_FILTER)) {
                        parameters.remove(parameter);
                    }
                }
                job.setParameters(parameters);
            }

            jobService.save(job);

            // Get twitter keys
            List<TwitterApiKey> apiKeys = twitterApiKeyService.getEnabledTwitterApiKeys();
            for (TwitterApiKey key : apiKeys) {
                log.info("Key available: " + key);
            }

            Integer apiKeysCount = apiKeys.size();
            if (apiKeysCount == 0) {
                msg = "There are no Api Keys available. Aborting execution.";
                log.info(msg);
                job.appendLog(msg);
                job.setStatus(JobStatus.Aborted);
                jobService.save(job);
                return;
            }

            // The twitter stream is only created if it doesn't exists
            Integer apiKeysIndex = 0;
            if (twitterStream == null) {
                twitterStream = twitterStreamingService.configure(apiKeys.get(apiKeysIndex));
            }

            if (twitterStreamingListeners == null) {
                twitterStreamingListeners = new LinkedHashMap<String, TwitterStreamingListener>();
            }

            msg = "Extraction will begin with Api Key <" + apiKeys.get(apiKeysIndex).getDescription() + ">";
            log.info(msg);
            job.appendLog(msg);
            jobService.save(job);

            FilterQuery query = new FilterQuery();
            TwitterStreamingListener listener = new TwitterStreamingListener(topic, job, postService, jobService);

            // Adding the listener to the stream (we need to stop the stream
            // and then start it if needed)
            twitterStream.shutdown();
            twitterStream.addListener(listener);
            twitterStreamingListeners.put(topic.getName(), listener);

            String[] languages = getListenersLanguages();
            String[] keywords = getListenersKeywords();
            double[][] locations = getLocations();

            if (keywords.length > 0 || locations.length > 0) {

                if (keywords.length > 0) {
                    log.info("Adding " + keywords.length + " keywords.");
                    query = query.track(keywords);
                }

                if (languages.length > 0) {
                    log.info("Adding " + languages.length + " languages.");
                    query = query.language(languages);
                }

                if (locations.length > 0) {
                    log.info("Adding " + locations.length + " locations.");
                    query = query.locations(locations);
                }

                topic.setStreaming(Boolean.TRUE);
                topicService.save(topic);

                log.info("Adding query...");
                twitterStream.filter(query);
            } else {
                msg = "No keywords or locations defined for the stream. It will not be restarted.";
                log.info(msg);
                job.appendLog(msg);
                job.setStatus(JobStatus.Aborted);
                job = jobService.save(job);
            }

        } catch (Exception e) {
            msg = "An error ocurred while manipulating execution <" + job.getId() + ">. Execution aborted.";
            log.error(msg, e);
            job.appendLog(msg);
            job.setStatus(JobStatus.Aborted);
            try {
                job = jobService.save(job);
            } catch (InvalidExecutionException e1) {
                log.error("Status couldn't be refreshed on the execution object.");
            }
            return;
        }

    }

    public void stopStreaming(Job job) {

        String msg = "";
        try {
            log.info("Initializing execution...");
            Thread.sleep(1000);
        } catch (InterruptedException e) {
        }

        try {
            BigInteger id = job.getId();
            msg = "Stopping twitter streaming extraction <" + id + ">.";
            log.info(msg);
            job.appendLog(msg);
            job.setStatus(JobStatus.Running);
            jobService.save(job);

            Topic topic = topicService.findOne(job.getTopic().getName());

            topic.setStreaming(Boolean.FALSE);
            topicService.save(topic);

            // Changing execution state
            msg = "Stop operation finished.";
            log.info(msg);
            job.appendLog(msg);
            job.setStatus(JobStatus.Stopped);
            job = jobService.save(job);

            FilterQuery query = new FilterQuery();

            TwitterStreamingListener listener = twitterStreamingListeners.get(topic.getName());

            // Removing the listener from the stream (we need to stop the stream
            // and then start it if needed)
            twitterStream.shutdown();
            twitterStream.removeListener(listener);
            twitterStreamingListeners.remove(topic.getName());

            if (!twitterStreamingListeners.isEmpty()) {
                String[] languages = getListenersLanguages();
                String[] keywords = getListenersKeywords();
                double[][] locations = getLocations();

                if (keywords.length > 0 || locations.length > 0) {

                    // Signaling the stopped listener job.
                    msg = "Restarting the stream with keywords <" + Arrays.toString(keywords) + ">.";
                    log.info(msg);
                    job.appendLog(msg);
                    job = jobService.save(job);

                    if (keywords.length > 0) {
                        query = query.track(keywords);
                    }

                    if (languages.length > 0) {
                        query = query.language(languages);
                    }

                    if (locations.length > 0) {
                        query = query.locations(locations);
                    }

                    topic.setStreaming(Boolean.TRUE);
                    topicService.save(topic);

                    twitterStream.filter(query);
                    msg = "Stop operation finished.";
                    log.info(msg);
                    job.appendLog(msg);
                } else {
                    msg = "No keywords defined for the stream. It will not be restarted.";
                    log.info(msg);
                    job.appendLog(msg);
                    job = jobService.save(job);
                }
            } else {
                twitterStream.cleanUp();
            }

        } catch (Exception e) {
            msg = "An error ocurred while manipulating jobs <" + job.getId() + ">. Execution aborted.";
            log.error(msg, e);
            job.appendLog(msg);
            job.setStatus(JobStatus.Aborted);
            try {
                job = jobService.save(job);
            } catch (InvalidExecutionException e1) {
                log.error("An error occurred while persisting the job");
            }
            return;
        }
    }

    public String[] getListenersKeywords() {
        Set<String> keywords = new HashSet<String>();
        for (String topicName : twitterStreamingListeners.keySet()) {
            TwitterStreamingListener listener = twitterStreamingListeners.get(topicName);
            if (listener.getKeywords() != null && listener.getKeywords().length > 0)
                keywords.addAll(Arrays.asList(listener.getKeywords()));

        }
        String[] result = {};
        return keywords.toArray(result);

    }

    public String[] getListenersLanguages() {
        Set<String> languages = new HashSet<String>();
        for (String topicName : twitterStreamingListeners.keySet()) {
            TwitterStreamingListener listener = twitterStreamingListeners.get(topicName);
            if (listener.getLanguage() != null && listener.getLanguage() != "") {
                languages.add(listener.getLanguage());
            }
        }
        String[] result = {};
        return languages.toArray(result);
    }

    public double[][] getLocations() {
        ArrayList<double[]> locations = new ArrayList<double[]>();
        for (String topicName : twitterStreamingListeners.keySet()) {
            TwitterStreamingListener listener = twitterStreamingListeners.get(topicName);
            ArrayList<double[]> listenerLocation = listener.getLocations();
            if (listenerLocation != null) {
                locations.addAll(listenerLocation);
            }
        }
        double[][] result = {  };
        double[][] returnResult = locations.toArray(result);
        return returnResult;
    }
}

public class TwitterStreamingListener implements StatusListener {

    JobService jobService;

    PostService postService;
    private boolean failure = false;
    private boolean stopping = false;
    private String topicName;
    private String[] keywords;
    private ArrayList<double[]> locations;
    private Topic topic;
    private static final Logger log = LoggerFactory.getLogger(TwitterExtractionExecutor.class);
    private long count;
    private Job job;

    public TwitterStreamingListener(Topic topic, Job job, PostService postService, JobService executionService) {
        this.topic = topic;
        String keywordsString = topic.getKeywords();
        if (keywordsString != null) {
            keywordsString = keywordsString.toLowerCase();
        }
        this.keywords = keywordsString.split("\\|");

        this.job = job;
        this.postService = postService;
        this.topicName = topic.getName();
        this.jobService = executionService;

        Double longitude = topic.getGeoLongitude();
        Double latitude = topic.getGeoLatitude();
        Double radius = topic.getGeoRadius();
        if (longitude != null && latitude != null && radius != null) {
            this.locations = getSquareAroundPoint(latitude, longitude, radius);
        }
        count = 0;
    }

    private ArrayList<double[]> getSquareAroundPoint(Double lat, Double lon, Double radius) {
        double R = 6371;
        double distance = radius.doubleValue();

        double north = (lat * Math.PI / 180 + distance / R) * 180 / Math.PI;
        if (north > 90)
            north = 90;

        double neast = (lon + (Math.atan2(Math.sin(distance / R) * Math.cos(lat * Math.PI / 180),
                Math.cos(distance / R) - Math.sin(lat * Math.PI / 180) * Math.sin(lat * Math.PI / 180 + distance / R))) * 180 / Math.PI);
        double nwest = (lon + (Math.atan2(-Math.sin(distance / R) * Math.cos(lat * Math.PI / 180),
                Math.cos(distance / R) - Math.sin(lat * Math.PI / 180) * Math.sin(lat * Math.PI / 180 + distance / R))) * 180 / Math.PI);

        double south = (lat * Math.PI / 180 - distance / R) * 180 / Math.PI;
        if (south < -90)
            south = -90;
        double seast = (lon + (Math.atan2(Math.sin(distance / R) * Math.cos(lat * Math.PI / 180),
                Math.cos(distance / R) - Math.sin(lat * Math.PI / 180) * Math.sin(lat * Math.PI / 180 - distance / R))) * 180 / Math.PI);
        double swest = (lon + (Math.atan2(-Math.sin(distance / R) * Math.cos(lat * Math.PI / 180),
                Math.cos(distance / R) - Math.sin(lat * Math.PI / 180) * Math.sin(lat * Math.PI / 180 - distance / R))) * 180 / Math.PI);

        double east = Math.max(seast, neast);
        double west = Math.min(swest, nwest);
        while (east > 180)
            east -= 360;
        while (east <= -180)
            east += 360;
        while (west > 180)
            east -= 360;
        while (west <= -180)
            east += 360;
        ArrayList<double[]> coords = new ArrayList<double[]>();
        double[] southwest = { west, south };
        double[] northeast = { east, north };
        coords.add(southwest);
        coords.add(northeast);
        return coords;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((keywords == null) ? 0 : keywords.hashCode());
        result = prime * result + ((topicName == null) ? 0 : topicName.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        TwitterStreamingListener other = (TwitterStreamingListener) obj;
        if (keywords == null) {
            if (other.keywords != null)
                return false;
        } else if (!keywords.equals(other.keywords))
            return false;
        if (topicName == null) {
            if (other.topicName != null)
                return false;
        } else if (!topicName.equals(other.topicName))
            return false;
        return true;
    }

    public String getTopicName() {
        return topicName;
    }

    public void setTopicName(String topicName) {
        this.topicName = topicName;
    }

    public long getCount() {
        return count;
    }

    public void setCount(long count) {
        this.count = count;
    }

    public void setKeywords(String[] keywords) {
        this.keywords = keywords;
    }

    public String[] getKeywords() {
        return keywords;
    }

    public Topic getTopic() {
        return topic;
    }

    public void setTopic(Topic topic) {
        this.topic = topic;
    }

    public String getLanguage() {
        return topic.getLanguage();
    }

    public ArrayList<double[]> getLocations() {
        return locations;
    }

    public Job getJob() {
        return job;
    }

    public void setJob(Job job) {
        this.job = job;
    }

    public void onStatus(Status status) {

        String msg = "Received new post <" + status.getId() + ">. Matching for topic <" + topic.getName() + ">.";
        log.info(msg);
        job.appendLog(msg);

        try {
            jobService.save(job);
        } catch (InvalidExecutionException e) {
            log.error("Couldn't persist job object.", e);
        }

        if (keywords != null && keywords.length > 0) {
            String[] phrases = keywords;
            String tweetText = status.getText().toLowerCase();
            Boolean matchesOne = Boolean.FALSE;
            for (String phrase : phrases) {
                String[] individualKeywords = phrase.split(" ");
                Integer matches = 0;
                for (String individualKeyword : individualKeywords) {
                    if (tweetText.toLowerCase().contains(individualKeyword.toLowerCase())) {
                        matches++;
                    }
                }
                if (matches == individualKeywords.length) {
                    matchesOne = Boolean.TRUE;
                    break;
                }
            }
            if (!matchesOne) {
                log.debug("Tweet didn't match keywords <" + Arrays.toString(keywords) + ">");
                return;
            }
        }

        if (topic.getLanguage() != null && !"".equals(topic.getLanguage())) {
            if (!topic.getLanguage().equals(status.getLang())) {
                log.debug("Tweet didn't match language <" + topic.getLanguage() + ">");
                return;
            }
        }

        Double longitude = topic.getGeoLongitude();
        Double latitude = topic.getGeoLatitude();
        Double radius = topic.getGeoRadius();

        if (longitude != null && latitude != null && radius != null) {
            if (status.getGeoLocation() == null) {
                log.debug("Tweet don't have geolocation info. Discarding for topic <" + topic.getName() + ">");
                return;
            } else {
                GeoLocation tweetGeo = new GeoLocation(status.getGeoLocation());
                double R = 6371; // Earth's radius
                double tweetLat = tweetGeo.getLatitude() * Math.PI / 180;
                double tweetLng = tweetGeo.getLongitude() * Math.PI / 180;
                double centerLat = latitude.doubleValue() * Math.PI / 180;
                double centerLng = longitude.doubleValue() * Math.PI / 180;
                double dist = Math.acos(Math.sin(tweetLat) * Math.sin(centerLat) + Math.cos(tweetLat) * Math.cos(centerLat) * Math.cos(tweetLng - centerLng)) * R;
                if (dist > radius) {
                    log.debug("Tweet is not within geolocation area of topic <" + topic.getName() + ">");
                    return;
                }

            }
        }

        // Save the post
        if (!stopping) {

            msg = "Post <" + status.getId() + "> matched topic <" + topic.getName() + ">.";
            log.debug(msg);
            job.appendLog(msg);

            try {
                jobService.save(job);
            } catch (InvalidExecutionException e) {
                log.error("Couldn't persist job object.", e);
            }

            Post streamingStatus = new Post(status, topic.getName());
            try {
                if (postService == null)
                    log.error("Data store is null");
                postService.save(streamingStatus);
                failure = false;
            } catch (Exception e) {
                log.error(e.getMessage());
            }

            count++;

            // Calling processor if applicable
            if (topic.getStreamerProcessParameters() != null && topic.getStreamerProcessParameters().size() > 0) {
                try {
                    Set<JobParameters> extraParameters = new HashSet<>();
                    JobParameters filterParameters = new JobParameters();
                    filterParameters.setName(ProcessorExecutor.MARBLE_FILTER);
                    Map<String, Object> filterOptions = new HashMap<>();
                    filterOptions.put(ProcessorExecutor.MARBLE_FILTER_FROM_ID, Long.toString(streamingStatus.getId()));
                    filterOptions.put(ProcessorExecutor.MARBLE_FILTER_TO_ID, Long.toString(streamingStatus.getId()));
                    filterParameters.setOptions(filterOptions);
                    extraParameters.add(filterParameters);
                    jobService.executeProcessor(topicName, job, extraParameters);
                } catch (InvalidTopicException | InvalidExecutionException | InvalidModuleException e) {
                    msg = "An error occurred while starting the processor for post <" + streamingStatus.getId() + ">.";
                    log.error(msg);
                    job.appendLog(msg);
                }
            }

        }

        long maxStatuses = 200;
        if (topic.getPostsPerFullExtraction() != null) {
            maxStatuses = topic.getPostsPerFullExtraction();
            if (count > maxStatuses && maxStatuses > 0) {
                if (stopping)
                    return;
                stopping = true;
                try {
                    msg = "Stopping listener as it has reached the maximum count <" + maxStatuses + "> for topic <" + topic.getName() + ">.";
                    log.debug(msg);
                    job.appendLog(msg);

                    try {
                        jobService.save(job);
                    } catch (InvalidExecutionException e) {
                        log.error("Couldn't persist job object.", e);
                    }
                    jobService.stopStreamer(topic.getName());

                } catch (InvalidTopicException e) {
                    log.error("InvalidStreaming", e);
                } catch (InvalidExecutionException e) {
                    log.error("InvalidStreaming", e);
                }

                return;
            } else {
                stopping = false;
            }
        }

    }

    public void onDeletionNotice(StatusDeletionNotice statusDeletionNotice) {

    }

    public void onTrackLimitationNotice(int numberOfLimitedStatuses) {

    }

    public void onScrubGeo(long userId, long upToStatusId) {

    }

    public void onStallWarning(StallWarning warning) {

    }

    public void onException(Exception ex) {
        if (!failure) {
            failure = true;
            // TODO Check what to do here. They sent an email
        }
        failure = true;
        // executionService.useNextAPIKey();
    }

}
a
  border-color: lighten($success-color, 25%!)(MISSING)
  
.full-width-textarea
  width: 100%!
(MISSING)<h3 class="modal-title">{{modalProperties.title}}</h3>
            <p>{{modalProperties.text}}</p>
        </div>
        <div ng-if="modalProperties.type == 'plot'">
            <p>Please select the module and the type of plot to generate and click {{modalProperties.button}} to
                continue.</p>
            <p>Please enter the processing recipe and click {{modalProperties.button}} to continue.</p>
            <fieldset>
                <div class="form-group ">
                    <textarea rows="6" cols="70" ng-model="$parent.plotterRecipe"></textarea>
                </div>
            </fieldset>
        </div>
        <div ng-if="modalProperties.type == 'process'">
            <p>Please enter the processing recipe and click {{modalProperties.button}} to continue.</p>
            <fieldset>
                <div class="form-group ">
                    <textarea rows="6" cols="70" ng-model="$parent.processRecipe"></textarea>
                </div>
            </fieldset>
        </div>
<h1 class="page-header">Dashboard</h1>
                    <p>
                        As a guest user, you will be able to test some of the most basic features, but you will be limited to the data
                        available in the system at the moment of the test. If you would like to test the extraction modules or test with a
                        different set of data, Please feel free to contact me through my <a href="http://miguelfernandes.com/contact/">contact
                            form</a> and I will provide you with the appropriated credentials for you to test the system.
                    </p>

                    <p>
<h1 class="page-header">
                                <p class="help-block">Two letters language code.</p>
                            </div>
                            <div class="form-group ">
                                <label for="postsPerCall">Posts Per Call</label> <input id="postsPerCall"
                                    data-ng-model="topic.postsPerCall" class="form-control" type="text"
                                />

                                <p class="help-block">Number of posts to extract on each API call.</p>
                            </div>
                            <div class="form-group ">
                                <label for="postsPerFullExtraction">Posts Per Full Extraction</label> <input
                                    id="postsPerFullExtraction" data-ng-model="topic.postsPerFullExtraction" class="form-control"
                                    type="text"
<h1 class="page-header">
                        <fieldset>
                            <div class="form-group ">
                                <label for="name">Process Recipe</label>
                                <div class="form-group ">
                                <textarea rows="6" ng-model="topic.streamerProcessParametersString" class="full-width-textarea"></textarea>
                                </div>
<h1 class="page-header">


                            <div class="form-group ">
                                <label for="postsPerCall">Posts Per Call</label> <input id="postsPerCall"
                                    data-ng-model="topic.postsPerCall" class="form-control" type="text"
                                />

                                <p class="help-block">Number of posts to extract on each API call.</p>
                            </div>


                            <div class="form-group ">
                                <label for="postsPerFullExtraction">Posts Per Full Extraction</label> <input
                                    id="postsPerFullExtraction" data-ng-model="topic.postsPerFullExtraction" class="form-control"
                                    type="text"
# Supported tags and respective `Dockerfile` links

-	[`1.0.0-RELEASE`, `latest` (*Dockerfile*)](https://github.com/miguelfc/marble/blob/76d5017b1438a4c2c00fd401b9f1a8f8bcdb73db/marble-core/src/main/docker/Dockerfile)

# What is Marble?

# Supported tags and respective `Dockerfile` links

-	[`1.0.0-RELEASE`, `latest` (*Dockerfile*)](https://github.com/miguelfc/marble/blob/76d5017b1438a4c2c00fd401b9f1a8f8bcdb73db/marble-core/src/main/docker/Dockerfile)

# What is Marble?

# Supported tags and respective `Dockerfile` links

-	[`1.0.0-RELEASE`, `latest` (*Dockerfile*)](https://github.com/miguelfc/marble/blob/76d5017b1438a4c2c00fd401b9f1a8f8bcdb73db/marble-core/src/main/docker/Dockerfile)

# What is Marble?

# Supported tags and respective `Dockerfile` links

-	[`1.0.0-RELEASE`, `latest` (*Dockerfile*)](https://github.com/miguelfc/marble/blob/76d5017b1438a4c2c00fd401b9f1a8f8bcdb73db/marble-core/src/main/docker/Dockerfile)

# What is Marble?

# Supported tags and respective `Dockerfile` links

-	[`1.0.0-RELEASE`, `latest` (*Dockerfile*)](https://github.com/miguelfc/marble/blob/76d5017b1438a4c2c00fd401b9f1a8f8bcdb73db/marble-core/src/main/docker/Dockerfile)

# What is Marble?

# Supported tags and respective `Dockerfile` links

-	[`1.0.0-RELEASE`, `latest` (*Dockerfile*)](https://github.com/miguelfc/marble/blob/76d5017b1438a4c2c00fd401b9f1a8f8bcdb73db/marble-core/src/main/docker/Dockerfile)

# What is Marble?

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import java.util.function.Supplier;

public class MembershipAction extends AbstractComponent {


    private final MembershipListener listener;

    public MembershipAction(Settings settings, TransportService transportService,
                            Supplier<DiscoveryNode> localNodeSupplier, MembershipListener listener) {
        super(settings);
        this.transportService = transportService;
        this.listener = listener;
public MembershipAction(Settings settings, TransportService transportService,
        transportService.registerRequestHandler(DISCOVERY_JOIN_ACTION_NAME, JoinRequest::new,
            ThreadPool.Names.GENERIC, new JoinRequestRequestHandler());
        transportService.registerRequestHandler(DISCOVERY_JOIN_VALIDATE_ACTION_NAME,
            () -> new ValidateJoinRequest(localNodeSupplier), ThreadPool.Names.GENERIC,
            new ValidateJoinRequestRequestHandler());
        transportService.registerRequestHandler(DISCOVERY_LEAVE_ACTION_NAME, LeaveRequest::new,
            ThreadPool.Names.GENERIC, new LeaveRequestRequestHandler());
public void onFailure(Exception e) {
    }

    static class ValidateJoinRequest extends TransportRequest {
        private final Supplier<DiscoveryNode> localNode;
        private ClusterState state;

        ValidateJoinRequest(Supplier<DiscoveryNode> localNode) {
            this.localNode = localNode;
        }

        ValidateJoinRequest(ClusterState state) {
            this.state = state;
            this.localNode = state.nodes()::getLocalNode;
        }

        @Override
        public void readFrom(StreamInput in) throws IOException {
            super.readFrom(in);
            this.state = ClusterState.readFrom(in, localNode.get());
        }

        @Override
public ZenDiscovery(Settings settings, ThreadPool threadPool, TransportService t
                        new NewPendingClusterStateListener(),
                        discoverySettings,
                        clusterService.getClusterName());
        this.membership = new MembershipAction(settings, transportService, this::localNode, new MembershipListener());
        this.joinThreadControl = new JoinThreadControl();

        transportService.registerRequestHandler(
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		</attributes>
	</classpathentry>
	<classpathentry kind="src" path="src/main/test"/>
	<classpathentry kind="con" path="org.eclipse.m2e.MAVEN2_CLASSPATH_CONTAINER">
		<attributes>
			<attribute name="maven.pomderived" value="true"/>
<h2 title="Class RakNetClient" class="title">Class RakNetClient</h2>
<pre>public final&nbsp;boolean&nbsp;isConnected()</pre>
<dl>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>true if the client is connected.</dd>
</dl>
</li>
</ul>
<h2 title="Class SessionPreparation" class="title">Class SessionPreparation</h2>
<pre>public&nbsp;boolean&nbsp;readyForSession()</pre>
<dl>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>true if the session has enough data to be created</dd>
</dl>
</li>
</ul>
<h2 title="Class DiscoveryThread" class="title">Class DiscoveryThread</h2>
<pre>public&nbsp;boolean&nbsp;isRunning()</pre>
<dl>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>true if the thread has been started.</dd>
</dl>
</li>
</ul>
<h2 title="Class ChatServer" class="title">Class ChatServer</h2>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>username</code> - the username to check.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>true if the server has a client with the specified username.</dd>
</dl>
</li>
</ul>
<h2 title="Class ChatServer" class="title">Class ChatServer</h2>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>channel</code> - the channel ID.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>true if the server has a channel with the specified ID.</dd>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code><a href="../../../../../../net/marfgamer/jraknet/session/InvalidChannelException.html" title="class in net.marfgamer.jraknet.session">InvalidChannelException</a></code> - if the channel exceeds the limit.</dd>
</dl>
<h2 title="Class ChatServer" class="title">Class ChatServer</h2>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>username</code> - the username to check.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>true if the server has a client with the specified username.</dd>
</dl>
</li>
</ul>
<h2 title="Class BroadcastCommand" class="title">Class BroadcastCommand</h2>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>args</code> - the command arguments.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>true if the command was handled successfully.</dd>
</dl>
</li>
</ul>
<h2 title="Class ChannelCommand" class="title">Class ChannelCommand</h2>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>args</code> - the command arguments.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>true if the command was handled successfully.</dd>
</dl>
</li>
</ul>
<h2 title="Class Command" class="title">Class Command</h2>
<pre>protected&nbsp;boolean&nbsp;isOverridable()</pre>
<dl>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>true if this command by overridden by another command.</dd>
</dl>
</li>
</ul>
<h2 title="Class Command" class="title">Class Command</h2>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>args</code> - the command arguments.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>true if the command was handled successfully.</dd>
</dl>
</li>
</ul>
<h2 title="Class KickCommand" class="title">Class KickCommand</h2>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>args</code> - the command arguments.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>true if the command was handled successfully.</dd>
</dl>
</li>
</ul>
<h2 title="Class StopCommand" class="title">Class StopCommand</h2>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>args</code> - the command arguments.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>true if the command was handled successfully.</dd>
</dl>
</li>
</ul>
<h2 title="Class MCPEIdentifier" class="title">Class MCPEIdentifier</h2>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>versionTag</code> - the version tag to validate.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>true if the version tag is valid.</dd>
</dl>
</li>
</ul>
<h2 title="Class MCPEIdentifier" class="title">Class MCPEIdentifier</h2>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>identifier</code> - the identifier to check.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>true if the specified identifier is a Minecraft: Pocket Edition
         identifier.</dd>
</dl>
</li>
<h2 title="Class MCPEIdentifier" class="title">Class MCPEIdentifier</h2>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>versionTag</code> - the new version tag.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>true if the version tag was set</dd>
</dl>
</li>
</ul>
<h2 title="Class MCPEIdentifier" class="title">Class MCPEIdentifier</h2>
<pre>public&nbsp;boolean&nbsp;isLegacyMode()</pre>
<dl>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>true if the identifier is in legacy mode.</dd>
</dl>
</li>
</ul>
<h2 title="Interface Failable" class="title">Interface Failable</h2>
<pre>boolean&nbsp;failed()</pre>
<dl>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>true if the packet failed to encode.</dd>
</dl>
</li>
</ul>
<h2 title="Enum Reliability" class="title">Enum Reliability</h2>
<pre>public&nbsp;boolean&nbsp;isReliable()</pre>
<dl>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>true if the reliability is reliable.</dd>
</dl>
</li>
</ul>
<h2 title="Enum Reliability" class="title">Enum Reliability</h2>
<pre>public&nbsp;boolean&nbsp;isOrdered()</pre>
<dl>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>true if the reliability is ordered.</dd>
</dl>
</li>
</ul>
<h2 title="Enum Reliability" class="title">Enum Reliability</h2>
<pre>public&nbsp;boolean&nbsp;isSequenced()</pre>
<dl>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>true if the reliability is sequenced.</dd>
</dl>
</li>
</ul>
<h2 title="Enum Reliability" class="title">Enum Reliability</h2>
<pre>public&nbsp;boolean&nbsp;requiresAck()</pre>
<dl>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>true if the reliability requires acknowledgement.</dd>
</dl>
</li>
</ul>
<h2 title="Class ConnectionRequestAccepted" class="title">Class ConnectionReques
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code><a href="../../../../../net/marfgamer/jraknet/protocol/Failable.html#failed--">failed</a></code>&nbsp;in interface&nbsp;<code><a href="../../../../../net/marfgamer/jraknet/protocol/Failable.html" title="interface in net.marfgamer.jraknet.protocol">Failable</a></code></dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>true if the packet failed to encode.</dd>
</dl>
</li>
</ul>
<h2 title="Class NewIncomingConnection" class="title">Class NewIncomingConnectio
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code><a href="../../../../../net/marfgamer/jraknet/protocol/Failable.html#failed--">failed</a></code>&nbsp;in interface&nbsp;<code><a href="../../../../../net/marfgamer/jraknet/protocol/Failable.html" title="interface in net.marfgamer.jraknet.protocol">Failable</a></code></dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>true if the packet failed to encode.</dd>
</dl>
</li>
</ul>
<h2 title="Class OpenConnectionRequestTwo" class="title">Class OpenConnectionReq
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code><a href="../../../../../net/marfgamer/jraknet/protocol/Failable.html#failed--">failed</a></code>&nbsp;in interface&nbsp;<code><a href="../../../../../net/marfgamer/jraknet/protocol/Failable.html" title="interface in net.marfgamer.jraknet.protocol">Failable</a></code></dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>true if the packet failed to encode.</dd>
</dl>
</li>
</ul>
<h2 title="Class OpenConnectionResponseTwo" class="title">Class OpenConnectionRe
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code><a href="../../../../../net/marfgamer/jraknet/protocol/Failable.html#failed--">failed</a></code>&nbsp;in interface&nbsp;<code><a href="../../../../../net/marfgamer/jraknet/protocol/Failable.html" title="interface in net.marfgamer.jraknet.protocol">Failable</a></code></dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>true if the packet failed to encode.</dd>
</dl>
</li>
</ul>
<h2 title="Class CustomPacket" class="title">Class CustomPacket</h2>
<pre>public&nbsp;boolean&nbsp;containsUnreliables()</pre>
<dl>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>true if the packet contains any unreliable messages.</dd>
</dl>
</li>
</ul>
<h2 title="Class RakNetServer" class="title">Class RakNetServer</h2>
<pre>public final&nbsp;boolean&nbsp;isBroadcastingEnabled()</pre>
<dl>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>true if broadcasting is enabled.</dd>
</dl>
</li>
</ul>
<h2 title="Class RakNetServer" class="title">Class RakNetServer</h2>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>guid</code> - the globally unique ID to check.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>true if the server has a session with the specified globally
         unique ID.</dd>
</dl>
</li>
<h2 title="Class RakNetServer" class="title">Class RakNetServer</h2>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>address</code> - the address to check.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>true if the specified address is blocked.</dd>
</dl>
</li>
</ul>
<h2 title="Class RakNetUtils" class="title">Class RakNetUtils</h2>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>address</code> - the address of the server.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>true if the server is online.</dd>
</dl>
</li>
</ul>
<h2 title="Class RakNetUtils" class="title">Class RakNetUtils</h2>
<dd><code>address</code> - the address of the server.</dd>
<dd><code>port</code> - the port of the server.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>true if the server is online.</dd>
</dl>
</li>
</ul>
<h2 title="Class RakNetUtils" class="title">Class RakNetUtils</h2>
<dd><code>address</code> - the address of the server.</dd>
<dd><code>port</code> - the port of the server.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>true if the server is online.</dd>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code>java.net.UnknownHostException</code> - if the specified address is an unknown host.</dd>
</dl>
<h2 title="Class RakNetUtils" class="title">Class RakNetUtils</h2>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>address</code> - the address of the server.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>true if the server is compatible to the current client protocol.</dd>
</dl>
</li>
</ul>
<h2 title="Class RakNetUtils" class="title">Class RakNetUtils</h2>
<dd><code>address</code> - the address of the server.</dd>
<dd><code>port</code> - the port of the server.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>true if the server is compatible to the current client protocol.</dd>
</dl>
</li>
</ul>
<h2 title="Class RakNetUtils" class="title">Class RakNetUtils</h2>
<dd><code>address</code> - the address of the server.</dd>
<dd><code>port</code> - the port of the server.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>true if the server is compatible to the current client protocol.</dd>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code>java.net.UnknownHostException</code> - if the specified address is an unknown host.</dd>
</dl>
      <artifactId>netty-handler</artifactId>
      <version>4.1.2.Final</version>
    </dependency>
  </dependencies>
  
  <distributionManagement>
	private PacketDataOutput output;

	/**
	 * Constructs a <code>Packet</code> that reads from and writes to the
	 * specified <code>ByteBuf</code>.
	 * 
	 * @param buffer
	 *            the <code>ByteBuf</code> to read from and write to.
public Packet(ByteBuf buffer) {
	}

	/**
	 * Constructs a <code>Packet</code> that reads from and writes to the
	 * specified <code>DatagramPacket</code>
	 * 
	 * @param datagram
	 *            the <code>DatagramPacket</code> to read from and write to.
public Packet(DatagramPacket datagram) {
	}

	/**
	 * Constructs a <code>Packet</code> that reads from and writes to the
	 * specified byte array.
	 * 
	 * @param data
	 *            the byte[] to read from and write to.
public Packet(byte[] data) {
	}

	/**
	 * Constructs a <code>Packet</code> that reads from and writes to the
	 * specified <code>Packet</code>.
	 * 
	 * @param packet
	 *            the <code>Packet</code> to read from and write to.
public Packet(Packet packet) {
	}

	/**
	 * Constructs a blank <code>Packet</code> using an empty
	 * <code>ByteBuf</code>.
	 */
	public Packet() {
		this(Unpooled.buffer());
public String readString() {
	}

	/**
	 * Reads a UTF-8 String with it's length prefixed by a unsigned little
	 * endian short.
	 * 
	 * @return a String.
	 */
private Packet writeCFUByte(byte b) {
	}

	/**
	 * Writes a byte array of the specified flipped unsigned byte's casted back
	 * to a byte to the packet.
	 * 
	 * @param data
	 *            the data to write.
public PacketDataOutput getDataOutput() {
	}

	/**
	 * @return How many bytes are left in the packet's buffer.
	 */
	public int remaining() {
		return buffer.readableBytes();
	// Max packet count
	private static long MAX_PACKETS_PER_SECOND = 500;

	/**
	 * Returns how many packets can be received in the span of a single second
	 * (1000 milliseconds) before a session is blocked.
	 * 
	 * @return how many packets can be received in the span of a single second
	 *         before a session is blocked.
public static long getMaxPacketsPerSecond() {
	}

	/**
	 * Sets how many packets can be received in the span of a single second
	 * (1000 milliseconds) before a session is blocked.
	 * 
	 * @param maxPacketsPerSecond
	 *            how many packets can be received in the span of a single
	 *            second before a session is blocked.
	 */
	public static void setMaxPacketsPerSecond(long maxPacketsPerSecond) {
		MAX_PACKETS_PER_SECOND = maxPacketsPerSecond;
	}

	/**
	 * Removes the max packets per second limit so that no matter how many
	 * packets a session sends it will never be blocked. This is unrecommended,
	 * as it can open your server to DOS/DDOS attacks.
	 */
	public static void setMaxPacketsPerSecondUnlimited() {
		MAX_PACKETS_PER_SECOND = Long.MAX_VALUE;
	}

	// Session timing
	public static final long SEND_INTERVAL = 50L;
	public static final long RECOVERY_SEND_INTERVAL = SEND_INTERVAL;
public RakNetPacket(ByteBuf buffer) {

	/**
	 * Constructs a <code>RakNetPacket</code> that reads from and writes to the
	 * specified <code>DatagramPacket</code>. On instantiation, the first byte
	 * of the datagram will be read and set as the ID.
	 * 
	 * @param datagram
	 *            the <code>DatagramPacket</code> to read from and write to.
public RakNetPacket(DatagramPacket datagram) {

	/**
	 * Constructs a <code>RakNetPacket</code> that reads from and writes to the
	 * specified byte array. On instantiation, the first byte of the byte array
	 * will be read and set as the ID.
	 * 
	 * @param data
	 *            the byte array to read from and write to.
public RakNetPacket(byte[] data) {

	/**
	 * Constructs a <code>RakNetPacket</code> that reads from and writes to the
	 * specified <code>Packet</code>. On instantiation, the first byte of the
	 * buffer will be read and set as the ID <b>unless</b> the specified packet
	 * is a subclass of <code>RakNetPacket</code>.
	 * 
	 * @param packet
	 *            the <code>Packet</code> to read from and write to.
	private final int serverProtocol;

	/**
	 * Constructs an <code>IncompatibleProtocolException</code> with the
	 * specified <code>RakNetClient</code>, client protocol, and server
	 * protocol.
	 * 
	 * @param client
	 *            the <code>RakNetClient</code> that threw the exception.
import java.util.Set;
import java.util.TreeMap;

import net.marfgamer.jraknet.util.map.IntMap;

/**
 */
public class MaximumTransferUnit {

	private final int maximumTransferUnit;
	private final int retries;
	private int retriesLeft;

	/**
	 * Constructs a <code>MaximumTransferUnit</code> with the specified maximum
	 * transfer unit and amount of retries before it should stop being used.
	 * 
	 * @param maximumTransferUnit
	 *            the maximum transfer unit.
	 * @param retries
	 *            the amount of retries before it should stop being used.
	 */
	public MaximumTransferUnit(int maximumTransferUnit, int retries) {
		this.maximumTransferUnit = maximumTransferUnit;
		this.retries = retries;
		this.retriesLeft = retries;
	}

	/**
	 * Sorts an array of <code>MaximumTransferUnit</code>'s from highest to
	 * lowest maximum transfer units.
	 * 
	 * @param units
	 *            the <code>MaximumTransferUnit</code>s to sort.
public MaximumTransferUnit(int maximumTransferUnit, int retries) {
			Entry<Integer, MaximumTransferUnit> unitEntry = unitI.next();
			unitList.add(unitEntry.getValue());
		}
		return unitList.toArray(new MaximumTransferUnit[unitList.size()]);
	}

	/**
	 * @return the size of the maximum transfer unit.
	 */
	public int getMaximumTransferUnit() {
public int getRetries() {
	}

	/**
	 * @return how many times <code>retry()</code> can be called before yielding
	 *         0 or lower without calling <code>reset()</code>.
	 */
	public int getRetriesLeft() {
		return this.retriesLeft;
public int getRetriesLeft() {
	 * @return the amount of retries left.
	 */
	public int retry() {
		return this.retriesLeft--;
	}

	/**
	 * Sets the amount of retries left back to the default.
	 */
	public void reset() {
		this.retriesLeft = this.retries;
	}

	 * @param client
	 *            the <code>RakNetClient</code> that threw the exception.
	 * @param handler
	 *            the <code>RakNetClientHandler</code> that caught the
	 *            exception.
	 * @param cause
	 *            the <code>Throwable</code> that was caught by the handler.
	 */
 */
package net.marfgamer.jraknet.client;

import static net.marfgamer.jraknet.protocol.MessageIdentifier.*;

import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.Random;
import java.util.concurrent.ConcurrentHashMap;

import io.netty.bootstrap.Bootstrap;
import net.marfgamer.jraknet.Packet;
import net.marfgamer.jraknet.RakNet;
import net.marfgamer.jraknet.RakNetException;
import net.marfgamer.jraknet.RakNetPacket;
import net.marfgamer.jraknet.client.discovery.DiscoveredServer;
import net.marfgamer.jraknet.client.discovery.DiscoveryMode;
import net.marfgamer.jraknet.client.discovery.DiscoveryThread;
import net.marfgamer.jraknet.protocol.Reliability;
import net.marfgamer.jraknet.protocol.login.ConnectionRequest;
import net.marfgamer.jraknet.protocol.login.OpenConnectionRequestOne;
	// Client data
	private final long guid;
	private final long timestamp;
	private int discoveryPort;
	private DiscoveryMode discoveryMode;
	/** synchronize this first! (<code>externalServers</code> goes second!) */
	private final ConcurrentHashMap<InetSocketAddress, DiscoveredServer> discovered;
	 * @param discoveryMode
	 *            how the client will discover servers. If this is set to
	 *            <code>null</code>, the client will enable set it to
	 *            <code>DiscoveryMode.ALL_CONNECTIONS</code> as long as the port
	 *            is greater than -1.
	 * @param discoveryPort
	 *            the port the client will attempt to discover servers on.
	 */
	public RakNetClient(DiscoveryMode discoveryMode, int discoveryPort) {
		// Set client data
		this.guid = new Random().nextLong();
		this.timestamp = System.currentTimeMillis();

		// Set discovery data
		this.discoveryPort = discoveryPort;
		this.discoveryMode = discoveryMode;
		if (discoveryMode == null) {
			this.discoveryMode = (discoveryPort > -1 ? DiscoveryMode.ALL_CONNECTIONS : DiscoveryMode.NONE);
		}
		this.discovered = new ConcurrentHashMap<InetSocketAddress, DiscoveredServer>();
		this.externalServers = new ConcurrentHashMap<InetSocketAddress, DiscoveredServer>();
public RakNetClient(DiscoveryMode discoveryMode, int discoveryPort) {
			bootstrap.channel(NioDatagramChannel.class).group(group).handler(handler);
			bootstrap.option(ChannelOption.SO_BROADCAST, true).option(ChannelOption.SO_REUSEADDR, false);
			this.channel = bootstrap.bind(0).sync().channel();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}

	/**
	 * Constructs a <code>RakNetClient</code> with the specified server
	 * discovery port with the <code>DiscoveryMode</code> set to
	 * <code>DiscoveryMode.ALL_CONNECTIONS</code>.
	 * 
	 * @param discoveryPort
	 *            the port the client will attempt to discover servers on.
	 */
	public RakNetClient(int discoveryPort) {
		this(null, discoveryPort);
	}

	/**
	 * Constructs a <code>RakNetClient</code> with the
	 * <code>DiscoveryMode</code> set to <code>DiscoveryMode.NONE</code> and the
	 * discovery port set to -1.
	 */
	public RakNetClient() {
		this(-1);
	}

	/**
public final long getTimestamp() {
	}

	/**
	 * @return the client's discovery port.
	 */
	public final int getDiscoveryPort() {
		return this.discoveryPort;
	}

	/**
	 * Sets the client's discovery port.
	 * 
	 * @param discoveryPort
	 *            the new discovery port.
	 */
	public final void setDiscoveryPort(int discoveryPort) {
		this.discoveryPort = discoveryPort;
	}

	/**
public final void setDiscoveryMode(DiscoveryMode mode) {
					listener.onServerForgotten(address);
				}
				discovered.clear(); // We are not discovering servers anymore!
			}
		}
	}

	/**
	 * Adds a server to the client's external server discovery list. This
	 * functions like the normal discovery system but is not affected by the
	 * <code>DiscoveryMode</code> or discovery port set for the client.
	 * 
	 * @param address
public final void addExternalServer(InetSocketAddress address) {
			if (!externalServers.contains(address)) {
				externalServers.put(address, new DiscoveredServer(address, -1, null));
				listener.onExternalServerAdded(address);
			}
		}
	}

	/**
	 * Adds a server to the client's external server discovery list. This
	 * functions like the normal discovery system but is not affected by the
	 * <code>DiscoveryMode</code> or discovery port set for the client.
	 * 
	 * @param address
public final void addExternalServer(InetAddress address, int port) {
	}

	/**
	 * Adds a server to the client's external server discovery list. This
	 * functions like the normal discovery system but is not affected by the
	 * <code>DiscoveryMode</code> or discovery port set for the client.
	 * 
	 * @param address
public final void addExternalServer(String address, int port) throws UnknownHost
	}

	/**
	 * Removes an external server from the client's external server discovery
	 * list.
	 * 
	 * @param address
	 *            the server address.
public final void removeExternalServer(InetSocketAddress address) {
			if (externalServers.contains(address)) {
				externalServers.remove(address);
				listener.onExternalServerRemoved(address);
			}
		}
	}

	/**
	 * Removes an external server from the client's external server discovery
	 * list.
	 * 
	 * @param address
	 *            the server address.
public final void removeExternalServer(InetAddress address, int port) {
	}

	/**
	 * Removes an external server from the client's external server discovery
	 * list.
	 * 
	 * @param address
	 *            the server address.
public final void removeExternalServer(String address, int port) throws UnknownH
	}

	/**
	 * Adds a <code>MaximumTransferUnit</code> that can be used by the client
	 * during connection.
	 * 
	 * @param maximumTransferUnit
	 *            the maximum transfer unit.
	 */
	public final void addMaximumTransferUnit(MaximumTransferUnit maximumTransferUnit) {
		maximumTransferUnits.put(maximumTransferUnit.getMaximumTransferUnit(), maximumTransferUnit);
	}

	/**
	 * Adds a <code>MaximumTransferUnit</code> that can be used by the client
	 * during connection.
	 * 
	 * @param maximumTransferUnit
	 *            the maximum transfer unit.
public final void addMaximumTransferUnit(int maximumTransferUnit, int retries) {
	}

	/**
	 * Removes a <code>MaximumTransferUnit</code> that was being used by the
	 * client based on it's maximum transfer unit.
	 * 
	 * @param maximumTransferUnit
	 *            the maximum transfer unit to remove.
	 */
	public final void removeMaximumTransferUnit(int maximumTransferUnit) {
		maximumTransferUnits.remove(maximumTransferUnit);
	}

	/**
	 * Removes a <code>MaximumTransferUnit</code> that was being used by the
	 * client.
	 * 
	 * @param maximumTransferUnit
	 *            the maximum transfer unit to remove.
	 */
	public final void removeMaximumTransferUnit(MaximumTransferUnit maximumTransferUnit) {
		this.removeMaximumTransferUnit(maximumTransferUnit);
	}

	/**
	 * @return the <code>MaximumTransferUnit</code>'s the client uses during
	 *         login.
	 */
	public final MaximumTransferUnit[] getMaximumTransferUnits() {
		return maximumTransferUnits.values().toArray(new MaximumTransferUnit[maximumTransferUnits.size()]);
public final RakNetClientListener getListener() {
	public final RakNetClient setListener(RakNetClientListener listener) {
		// Set listener
		if (listener == null) {
			throw new NullPointerException("Listener must not be null!");
		}
		this.listener = listener;

		// Initiate discovery system if it is not yet started
		if (discoverySystem.isRunning() == false) {
public final RakNetClient setListener(RakNetClientListener listener) {
	}

	/**
	 * Sets the client's listener to itself, normally used for when a client is
	 * an all-in-one class
	 * 
	 * @return the client.
	 */
public final RakNetClient setListenerSelf() {
	}

	/**
	 * @return true if the client is connected.
	 */
	public final boolean isConnected() {
		if (session != null) {
protected final void handleHandlerException(InetSocketAddress address, Throwable
				}
			}
		}
	}

	/**
public final void handleMessage(RakNetPacket packet, InetSocketAddress sender) {
				}
			}
		}
	}

	/**
	 * Sends a raw message to the specified address. Be careful when using this
	 * method, because if it is used incorrectly it could break server sessions
	 * entirely! If you are wanting to send a message to a session, you are
	 * probably looking for the
	 * {@link net.marfgamer.jraknet.session.RakNetSession#sendMessage(net.marfgamer.jraknet.protocol.Reliability, net.marfgamer.jraknet.Packet)
	 * sendMessage} method.
	 * 
public final void handleMessage(RakNetPacket packet, InetSocketAddress sender) {
	 */
	public final void sendNettyMessage(ByteBuf buf, InetSocketAddress address) {
		channel.writeAndFlush(new DatagramPacket(buf, address));
	}

	/**
	 * Sends a raw message to the specified address. Be careful when using this
	 * method, because if it is used incorrectly it could break server sessions
	 * entirely! If you are wanting to send a message to a session, you are
	 * probably looking for the
	 * {@link net.marfgamer.jraknet.session.RakNetSession#sendMessage(net.marfgamer.jraknet.protocol.Reliability, net.marfgamer.jraknet.Packet)
	 * sendMessage} method.
	 * 
public final void sendNettyMessage(Packet packet, InetSocketAddress address) {
	/**
	 * Sends a raw message to the specified address. Be careful when using this
	 * method, because if it is used incorrectly it could break server sessions
	 * entirely! If you are wanting to send a message to a session, you are
	 * probably looking for the
	 * {@link net.marfgamer.jraknet.session.RakNetSession#sendMessage(net.marfgamer.jraknet.protocol.Reliability, int)
	 * sendMessage} method.
	 * 
public final void updateDiscoveryData() {
					}
				}
				discovered.keySet().removeAll(forgottenServers);

				// Broadcast ping to local network
				if (discoveryMode != DiscoveryMode.NONE && discoveryPort > -1) {
					UnconnectedPing ping = new UnconnectedPing();
					if (discoveryMode == DiscoveryMode.OPEN_CONNECTIONS) {
						ping = new UnconnectedPingOpenConnections();
					}
					ping.timestamp = this.getTimestamp();
					ping.encode();

					this.sendNettyMessage(ping, new InetSocketAddress("255.255.255.255", discoveryPort));
				}

				// Send ping to external servers
public final void updateDiscoveryData() {

						for (InetSocketAddress externalAddress : externalServers.keySet()) {
							this.sendNettyMessage(ping, externalAddress);
						}
					}
				}
public final void updateDiscoveryData(InetSocketAddress sender, UnconnectedPong
						discovered.put(sender,
								new DiscoveredServer(sender, System.currentTimeMillis(), pong.identifier));
						listener.onServerDiscovered(sender, pong.identifier);
					} else {
						// Server already discovered, but data has changed
						DiscoveredServer server = discovered.get(sender);
						server.setDiscoveryTimestamp(System.currentTimeMillis());
						if (!pong.identifier.equals(server.getIdentifier())) {
							server.setIdentifier(pong.identifier);
							listener.onServerIdentifierUpdate(sender, pong.identifier);
						}
					}
				} else {
public final void updateDiscoveryData(InetSocketAddress sender, UnconnectedPong
						if (!pong.identifier.equals(server.getIdentifier())) {
							server.setIdentifier(pong.identifier);
							listener.onExternalServerIdentifierUpdate(sender, pong.identifier);
						}
					}
				}
public final void connect(InetSocketAddress address) throws RakNetException {
			connectionRequest.timestamp = (System.currentTimeMillis() - this.timestamp);
			connectionRequest.encode();
			session.sendMessage(Reliability.RELIABLE_ORDERED, connectionRequest);

			// Initiate connection loop required for the session to function
			this.initConnection();
public synchronized void run() {
				}
			}
		};
		thread.start();

		// Return the thread so it can be modified
		return thread;
public final Thread connectThreaded(DiscoveredServer server) {
	 *             if any problems occur during connection.
	 */
	private final void initConnection() throws RakNetException {
		while (session != null) {
			session.update();
		}
	}

public final void disconnect(String reason) {
		if (session != null) {
			session.closeConnection();
			listener.onDisconnect(session, reason);
		}
		this.session = null;
	}
public final void disconnect() {
	}

	/**
	 * Shuts down the client for good, once this is called the client can no
	 * longer connect to servers.
	 */
	public final void shutdown() {
		// Close channel
		channel.close();
		group.shutdownGracefully();

		// Shutdown discovery system if needed
		discoverySystem.removeClient(this);
		if (discoverySystem.getClients().length <= 0) {
			discoverySystem.shutdown();
			discoverySystem = new DiscoveryThread();
		}
	}

	/**
	 * Disconnects from the server and shuts down the client for good, once this
	 * is called the client can no longer connect to servers.
	 * 
	 * @param reason
	 *            the reason the client shutdown.
public final void disconnectAndShutdown(String reason) {
	}

	/**
	 * Disconnects from the server and shuts down the client for good, once this
	 * is called the client can no longer connect to servers.
	 */
	public final void disconnectAndShutdown() {
		this.disconnectAndShutdown("Shutdown");
public final void disconnectAndShutdown() {
	@Override
	public final void finalize() {
		this.shutdown();
	}

}
import io.netty.channel.ChannelHandlerContext;
import io.netty.channel.ChannelInboundHandlerAdapter;
import io.netty.channel.socket.DatagramPacket;
import net.marfgamer.jraknet.RakNetPacket;

/**
 */
public class RakNetClientHandler extends ChannelInboundHandlerAdapter {

	private final RakNetClient client;
	private InetSocketAddress causeAddress;

	 *            the <code>RakNetClient</code> to send received packets to.
	 */
	public RakNetClientHandler(RakNetClient client) {
		this.client = client;
	}

public void channelRead(ChannelHandlerContext ctx, Object msg) {
			// Handle the packet and release the buffer
			client.handleMessage(packet, sender);
			datagram.content().readerIndex(0); // Reset position
			client.getListener().handleNettyMessage(datagram.content(), sender);
			datagram.content().release(); // No longer needed

			// No exceptions occurred, release the suspect
			this.causeAddress = null;
public default void onServerIdentifierUpdate(InetSocketAddress address, Identifi
	}

	/**
	 * Called when a previously discovered server has been forgotten by the
	 * client.
	 * 
	 * @param address
	 *            the address of the server.
public default void onServerForgotten(InetSocketAddress address) {
	}

	/**
	 * Called when an external server is added to the client's external server
	 * list.
	 * 
	 * @param address
	 *            the address of the server.
public default void onExternalServerIdentifierUpdate(InetSocketAddress address,
	}

	/**
	 * Called when an external server is removed from the client's external
	 * server list.
	 * 
	 * @param address
	 *            the address of the server.
public default void handleMessage(RakNetServerSession session, RakNetPacket pack

	/**
	 * Called when the handler receives a packet after the server has already
	 * handled it, this method is useful for handling packets outside of the
	 * RakNet protocol. However, be weary when using this as packets meant for
	 * the server will have already been handled by the client; and it is not a
	 * good idea to try to manipulate JRakNet's RakNet protocol implementation
	 * using this method.
	 * 
	 * @param buf
	 *            the packet buffer.
public default void handleNettyMessage(ByteBuf buf, InetSocketAddress address) {
	}

	/**
	 * Called when a handler exception has occurred, these normally do not
	 * matter as long as it does not come the address of the server the client
	 * is connecting or is connected to.
	 * 
	 * @param address
	 *            the address that caused the exception.
import io.netty.channel.Channel;
import net.marfgamer.jraknet.RakNet;
import net.marfgamer.jraknet.RakNetException;
import net.marfgamer.jraknet.RakNetPacket;
import net.marfgamer.jraknet.protocol.login.ConnectionBanned;
import net.marfgamer.jraknet.protocol.login.IncompatibleProtocol;
import net.marfgamer.jraknet.protocol.login.OpenConnectionResponseOne;
public class SessionPreparation {

	// Preparation data
	private final RakNetClient client;
	private final int initialMaximumTransferUnit;
	public RakNetException cancelReason;
	 *            the initial maximum transfer unit.
	 */
	public SessionPreparation(RakNetClient client, int initialMaximumTransferUnit) {
		this.client = client;
		this.initialMaximumTransferUnit = initialMaximumTransferUnit;
	}

	/**
	 * Handles the specified packet and automatically updates the preparation
	 * data.
	 * 
	 * @param packet
	 *            the packet to handle.
public void handleMessage(RakNetPacket packet) {
				this.maximumTransferUnit = connectionResponseOne.maximumTransferUnit;
				this.guid = connectionResponseOne.serverGuid;
				this.loginPackets[0] = true;
			}
		} else if (packetId == ID_OPEN_CONNECTION_REPLY_2) {
			OpenConnectionResponseTwo connectionResponseTwo = new OpenConnectionResponseTwo(packet);
public void handleMessage(RakNetPacket packet) {
			} else {
				this.loginPackets[1] = true;
				this.maximumTransferUnit = connectionResponseTwo.maximumTransferUnit;
			}
		} else if (packetId == ID_ALREADY_CONNECTED) {
			this.cancelReason = new AlreadyConnectedException(client);
public void handleMessage(RakNetPacket packet) {
	}

	/**
	 * @return true if the session has enough data to be created
	 */
	public boolean readyForSession() {
		// It was cancelled, why are we finishing?
public RakNetServerSession createSession(Channel channel) {
		if (!this.readyForSession()) {
			return null;
		}
		return new RakNetServerSession(client, guid, maximumTransferUnit, channel, address);
	}

	ALL_CONNECTIONS,

	/**
	 * any servers found on the local network will appear as long as they have
	 * open connections.
	 */
	OPEN_CONNECTIONS;


import java.util.ArrayList;

import net.marfgamer.jraknet.client.RakNetClient;
import net.marfgamer.jraknet.util.RakNetUtils;

 */
public class DiscoveryThread extends Thread {

	private ArrayList<RakNetClient> clients;
	private volatile boolean running;

public DiscoveryThread() {
	}

	/**
	 * Adds a <code>RakNetClient</code> to the discovery system so it can
	 * discover servers.
	 * 
	 * @param client
	 *            the <code>RakNetClient</code> enabling its discovery system.
	 */
	public void addClient(RakNetClient client) {
		if (clients.contains(client)) {
			return;
		}
		clients.add(client);
	}

	/**
	 * Removes a <code>RakNetClient</code> from the discovery system, this
	 * method is also called automatically by the client when it is garbage
	 * collected.
	 * 
	 * @param client
	 *            the <code>RakNetClient</code> disabling its discovery system.
	 */
	public void removeClient(RakNetClient client) {
		clients.remove(client);
	}

	/**
	 * @return true if the thread has been started.
	 */
	public boolean isRunning() {
		return this.running;
	}

	/**
	 * shuts down the discovery system.
	 */
	public void shutdown() {
		this.running = false;
	}

	@Override
	public synchronized void run() {
		this.running = true;
		while (this.running) {
			for (RakNetClient client : this.clients) {
				client.updateDiscoveryData();
			}
			RakNetUtils.threadLock(1000L);
		}
	}
	/**
	 * @param versionTag
	 *            the version tag to validate.
	 * @return true if the version tag is valid.
	 */
	private static boolean verifyVersionTag(String versionTag) {
		for (char vtc : versionTag.toCharArray()) {
private static boolean verifyVersionTag(String versionTag) {
	/**
	 * @param identifier
	 *            the identifier to check.
	 * @return true if the specified identifier is a Minecraft: Pocket Edition
	 *         identifier.
	 */
	public static boolean isMCPEIdentifier(Identifier identifier) {
		return identifier.build().startsWith(HEADER);
public static boolean isMCPEIdentifier(Identifier identifier) {

	/**
	 * Constructs an <code>MCPEIdentifier</code> with the specified server name,
	 * server protocol, version tag, online player count, max player count,
	 * globally unique ID, world name, and gamemode.
	 * 
	 * @param serverName
	 *            the server name.
public void setServerProtocol(int serverProtocol) {
	 * 
	 * @param versionTag
	 *            the new version tag.
	 * @return true if the version tag was set
	 */
	public boolean setVersionTag(String versionTag) {
		if (verifyVersionTag(versionTag)) {
public void setLegacyMode(boolean legacy) {
	}

	/**
	 * @return true if the identifier is in legacy mode.
	 */
	public boolean isLegacyMode() {
		return this.legacy;
public interface Failable {

	/**
	 * @return true if the packet failed to encode.
	 */
	public boolean failed();

import java.lang.reflect.Field;

/**
 * Contains all the IDs for RakNet.
 *
 * @author Trent "MarfGamer" Summerlin
 */
	public static final short ID_CUSTOM_F = 0x8F;

	/**
	 * @param id
	 *            the ID of the packet.
	 * @return the packet's name based on it's ID.
public static String getName(int id) {
	}

	/**
	 * @param name
	 *            the name of the packet.
	 * @return the packet's ID based on it's name.
public static int getId(String name) {
		}
	}

}
 */
public enum Reliability {

	UNRELIABLE(0, false, false, false, false), UNRELIABLE_SEQUENCED(1, false, false, true, false),
	RELIABLE(2, true, false, false, false), RELIABLE_ORDERED(3, true, true, false, false),
	RELIABLE_SEQUENCED(4, true, false, true, false), UNRELIABLE_WITH_ACK_RECEIPT(5, false, false, false, true),
	UNRELIABLE_SEQUENCED_WITH_ACK_RECEIPT(6, false, false, true, true),
	RELIABLE_WITH_ACK_RECEIPT(7, true, false, false, true),
	RELIABLE_ORDERED_WITH_ACK_RECEIPT(8, true, true, false, true),
	RELIABLE_SEQUENCED_WITH_ACK_RECEIPT(9, true, false, true, true);

	private final byte reliability;
	private final boolean reliable;

	/**
	 * Constructs a <code>Reliability</code> with the specified reliability and
	 * whether or not it is reliable, ordered, sequenced, or requires an
	 * acknowledge receipt.
	 * 
	 * @param reliability
	 *            the reliability.
private Reliability(int reliability, boolean reliable, boolean ordered, boolean
	}

	/**
	 * @return the reliability as a byte.
	 */
	public byte asByte() {
		return this.reliability;
	}

	/**
	 * @return true if the reliability is reliable.
	 */
	public boolean isReliable() {
		return this.reliable;
	}

	/**
	 * @return true if the reliability is ordered.
	 */
	public boolean isOrdered() {
		return this.ordered;
	}

	/**
	 * @return true if the reliability is sequenced.
	 */
	public boolean isSequenced() {
		return this.sequenced;
	}

	/**
	 * @return true if the reliability requires acknowledgement.
	 */
	public boolean requiresAck() {
		return this.requiresAck;
public boolean requiresAck() {
	public static Reliability lookup(int reliability) {
		Reliability[] reliabilities = Reliability.values();
		for (Reliability sReliability : reliabilities) {
			if (sReliability.asByte() == reliability) {
				return sReliability;
			}
		}
	public long timestamp;

	/*
	 * JRakNet does not support RakNet's built in security function, it is
	 * poorly documented
	 */
	public boolean useSecurity = false;

	public int maximumTransferUnit;

	/*
	 * JRakNet does not support RakNet's built in security function, it is
	 * poorly documented
	 */
	public boolean useSecurity = false;

import net.marfgamer.jraknet.RakNetPacket;
import net.marfgamer.jraknet.protocol.MessageIdentifier;

public class CustomPacket extends RakNetPacket {

	public static final int SEQUENCE_NUMBER_LENGTH = 0x03;

public void decode() {
	/**
	 * @return the size of the packet would be if it had been encoded.
	 */
	public int calculateSize() {
		int packetSize = 1; // Packet ID
		packetSize += SEQUENCE_NUMBER_LENGTH;
public int calculateSize() {
	}

	/**
	 * @return true if the packet contains any unreliable messages.
	 */
	public boolean containsUnreliables() {
		if (messages.size() <= 0) {
 *
 * @author Trent "MarfGamer" Summerlin
 */
public class EncapsulatedPacket {

	// Length constants
	public static final int MINIMUM_BUFFER_LENGTH = 0x03;
	 * Encodes the packet.
	 */
	public void encode() {
		buffer.writeByte((byte) ((reliability.asByte() << RELIABILITY_POSITION) | (split ? FLAG_SPLIT : 0)));
		buffer.writeUShort(payload.size() * 8);

		if (reliability.isReliable()) {
			buffer.writeTriadLE(messageIndex);
public void encode() {
	 * Decodes the packet.
	 */
	public void decode() {
		byte flags = buffer.readByte();
		this.reliability = Reliability.lookup((byte) (byte) ((flags & 0b11100000) >> 5));
		this.split = (flags & FLAG_SPLIT) > 0;
		int length = buffer.readUShort() / 8;

		if (reliability.isReliable()) {
			this.messageIndex = buffer.readTriadLE();
public void decode() {
	/**
	 * @return what the size of the packet would be if it had been encoded.
	 */
	public int calculateSize() {
		int packetSize = 0; // Unlike CustomPacket EncapsulatedPacket has no ID,
		// so this starts at 0 instead of 1
		packetSize += BITFLAG_LENGTH;
		packetSize += PAYLOAD_LENGTH_LENGTH;

public int calculateSize() {
	 *            whether or not the packet is split.
	 * @param payload
	 *            the payload of the packet
	 * @return the size of an <code>EncapsulatedPacket</code> based on the
	 *         specified reliability, whether or not it is split, and the size
	 *         of the specified payload without any extra data written to it.
	 */
	public static int calculateDummy(Reliability reliability, boolean split, Packet payload) {
		EncapsulatedPacket dummy = new EncapsulatedPacket();
public static int calculateDummy(Reliability reliability, boolean split, Packet
	 *            the reliability of the packet.
	 * @param split
	 *            whether or not the packet is split.
	 * @return the size of an <code>EncapsulatedPacket</code> based on the
	 *         specified reliability and whether or not it is split without any
	 *         extra data written to it.
	 */
	public static int calculateDummy(Reliability reliability, boolean split) {
		return EncapsulatedPacket.calculateDummy(reliability, split, new Packet());
public void decode() {

	/**
	 * This method condenses the records, converting all single records (ranged
	 * records are converted back to single records through the
	 * <code>toArray</code> method in <code>Record</code>) back to as many
	 * ranged records as possible and then storing the single records that could
	 * not be converted to ranged records. For example, let's say we have
	 * records <code>[1, 2, 3, 4, 5, 66, 77]</code> and the ranged records
	 * <code>[4:7, 12:17]</code>. The output will now be
	 * <code> [1:3, 4:7, 12:17, 66, 77]</code>.
	 */
public void condenseRecords() {

	/**
	 * This method simplifies the records, converting the single records and the
	 * ranged records to an ordered array of single records. For example, let's
	 * say we have records <code>[1, 2, 3]</code> and the ranged records
	 * <code>[4:7,
	 * 12:17]</code>. The output will now be
	 * <code>[1, 2, 3, 4, 5, 6, 7, 12, 13, 14, 15, 16,
	 * 17]</code>.
public void setIndex(int index) {
	}

	/**
	 * @return the ending index of the record or <code>-1</code> if the record
	 *         is not ranged.
	 */
	public int getEndIndex() {
		return this.endIndex;
	}

	/**
	 * Sets the ending index of the record. <br>
	 * <b>Note:</b> If the ending index is set to -1 or lower (It will be set to
	 * -1 automatically if the new end index is lower than the starting index),
	 * it is assumed that the record is a single record and not a ranged one.
	 * 
	 * @param endIndex
	 *            the new ending index.
	private final long time;

	/**
	 * Constructs a <code>BlockedClient</code> with the specified start time and
	 * the amount of time that the client is blocked.
	 * 
	 * @param startTime
	 *            the time the address was first blocked.
 */
package net.marfgamer.jraknet.server;

import static net.marfgamer.jraknet.protocol.MessageIdentifier.*;

import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.util.Random;
import java.util.concurrent.ConcurrentHashMap;

import io.netty.bootstrap.Bootstrap;
import net.marfgamer.jraknet.NoListenerException;
import net.marfgamer.jraknet.Packet;
import net.marfgamer.jraknet.RakNet;
import net.marfgamer.jraknet.RakNetPacket;
import net.marfgamer.jraknet.identifier.Identifier;
import net.marfgamer.jraknet.protocol.Reliability;
import net.marfgamer.jraknet.protocol.login.ConnectionBanned;
import net.marfgamer.jraknet.protocol.login.IncompatibleProtocol;
	 */
	public RakNetServer(int port, int maxConnections, int maximumTransferUnit, Identifier identifier) {
		// Set server data
		this.guid = new Random().nextLong();
		this.timestamp = System.currentTimeMillis();
		this.port = port;
		this.maxConnections = maxConnections;
public RakNetServer(int port, int maxConnections, int maximumTransferUnit) {
	}

	/**
	 * Constructs a <code>RakNetServer</code> with the specified port and
	 * maximum amount of connections.
	 *
	 * @param port
	 *            the server port.
public final int getMaximumTransferUnit() {
	 */
	public final void setBroadcastingEnabled(boolean enabled) {
		this.broadcastingEnabled = enabled;
	}

	/**
	 * @return true if broadcasting is enabled.
	 */
	public final boolean isBroadcastingEnabled() {
		return this.broadcastingEnabled;
public final Identifier getIdentifier() {
	 */
	public final void setIdentifier(Identifier identifier) {
		this.identifier = identifier;
	}

	/**
public final RakNetServer setListener(RakNetServerListener listener) {
			throw new NullPointerException();
		}
		this.listener = listener;
		return this;
	}

	/**
	 * Sets the server's listener to itself, normally used for when a server is
	 * a bundled server
	 * 
	 * @return the server.
	 */
public final boolean hasSession(InetSocketAddress address) {
	/**
	 * @param guid
	 *            the globally unique ID to check.
	 * @return true if the server has a session with the specified globally
	 *         unique ID.
	 */
	public final boolean hasSession(long guid) {
		synchronized (sessions) {
public final void removeSession(InetSocketAddress address, String reason) {
					listener.onClientPreDisconnect(address, reason);
				}
				session.sendMessage(Reliability.UNRELIABLE, ID_DISCONNECTION_NOTIFICATION);
				sessions.remove(address);
			}
		}
	}
public final void removeSession(RakNetClientSession session) {
	}

	/**
	 * Blocks the address and disconnects all the clients on the address with
	 * the specified reason for the specified amount of time.
	 * 
	 * @param address
	 *            the address to block.
public final void unblockAddress(InetAddress address) {
	/**
	 * @param address
	 *            the address to check.
	 * @return true if the specified address is blocked.
	 */
	public final boolean addressBlocked(InetAddress address) {
		return handler.addressBlocked(address);
protected final void handleHandlerException(InetSocketAddress address, Throwable
			this.removeSession(address, cause.getClass().getName());
		}
		listener.onHandlerException(address, cause);
	}

	/**
protected final void handleMessage(RakNetPacket packet, InetSocketAddress sender
				}
			}
		}
	}

	/**
private final RakNetPacket validateSender(InetSocketAddress sender) {
			return connectionBanned;
		}

		// there were no errors
		return null;
	}

	/**
	 * Sends a raw message to the specified address. Be careful when using this
	 * method, because if it is used incorrectly it could break server sessions
	 * entirely! If you are wanting to send a message to a session, you are
	 * probably looking for the
	 * {@link net.marfgamer.jraknet.session.RakNetSession#sendMessage(net.marfgamer.jraknet.protocol.Reliability, net.marfgamer.jraknet.Packet)
	 * sendMessage} method.
	 * 
private final RakNetPacket validateSender(InetSocketAddress sender) {
	 */
	public final void sendNettyMessage(ByteBuf buf, InetSocketAddress address) {
		channel.writeAndFlush(new DatagramPacket(buf, address));
	}

	/**
	 * Sends a raw message to the specified address. Be careful when using this
	 * method, because if it is used incorrectly it could break server sessions
	 * entirely! If you are wanting to send a message to a session, you are
	 * probably looking for the
	 * {@link net.marfgamer.jraknet.session.RakNetSession#sendMessage(net.marfgamer.jraknet.protocol.Reliability, net.marfgamer.jraknet.Packet)
	 * sendMessage} method.
	 * 
public final void sendNettyMessage(Packet packet, InetSocketAddress address) {
	/**
	 * Sends a raw message to the specified address. Be careful when using this
	 * method, because if it is used incorrectly it could break server sessions
	 * entirely! If you are wanting to send a message to a session, you are
	 * probably looking for the
	 * {@link net.marfgamer.jraknet.session.RakNetSession#sendMessage(net.marfgamer.jraknet.protocol.Reliability, int)
	 * sendMessage} method.
	 * 
public final void start() throws NoListenerException {
			bootstrap.option(ChannelOption.SO_BROADCAST, true).option(ChannelOption.SO_REUSEADDR, false);
			this.channel = bootstrap.bind(port).sync().channel();
			this.running = true;
		} catch (InterruptedException e) {
			e.printStackTrace();
			this.running = false;
public final void start() throws NoListenerException {
				}
			}
		}
	}

	/**
public synchronized void run() {
				}
			}
		};
		thread.start();

		// Return the thread so it can be modified
		return thread;
public final void shutdown() {
			sessions.clear();
		}
		listener.onServerShutdown();
	}

}
import io.netty.channel.ChannelHandlerContext;
import io.netty.channel.ChannelInboundHandlerAdapter;
import io.netty.channel.socket.DatagramPacket;
import net.marfgamer.jraknet.RakNetPacket;

/**
 */
public class RakNetServerHandler extends ChannelInboundHandlerAdapter {

	private final RakNetServer server;
	private final HashMap<InetAddress, BlockedAddress> blocked;
	private InetSocketAddress causeAddress;
	 *            the <code>RakNetServer</code> to send received packets to.
	 */
	public RakNetServerHandler(RakNetServer server) {
		this.server = server;
		this.blocked = new HashMap<InetAddress, BlockedAddress>();
	}
public RakNetServerHandler(RakNetServer server) {
	public void blockAddress(InetAddress address, String reason, long time) {
		blocked.put(address, new BlockedAddress(System.currentTimeMillis(), time));
		server.getListener().onAddressBlocked(address, reason, time);
	}

	/**
public void blockAddress(InetAddress address, String reason, long time) {
	public void unblockAddress(InetAddress address) {
		blocked.remove(address);
		server.getListener().onAddressUnblocked(address);
	}

	/**
public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception
			// Handle the packet and release the buffer
			server.handleMessage(packet, sender);
			datagram.content().readerIndex(0); // Reset position
			server.getListener().handleNettyMessage(datagram.content(), sender);
			datagram.content().release(); // No longer needed

			// No exceptions occurred, release the suspect
			this.causeAddress = null;
public default void handlePing(ServerPing ping) {
	}

	/**
	 * Called when a client has connected to the server but has not logged yet
	 * in.
	 * 
	 * @param address
	 *            the address of the client.
public default void onClientDisconnect(RakNetClientSession session, String reaso
	}

	/**
	 * Called when a session exception has occurred, these normally do not
	 * matter as the server will kick the client.
	 * 
	 * @param session
	 *            the session that caused the exception.
public default void handleMessage(RakNetClientSession session, RakNetPacket pack

	/**
	 * Called when the handler receives a packet after the server has already
	 * handled it, this method is useful for handling packets outside of the
	 * RakNet protocol. However, be weary when using this as packets meant for
	 * the server will have already been handled by the client; and it is not a
	 * good idea to try to manipulate JRakNet's RakNet protocol implementation
	 * using this method.
	 * 
	 * @param buf
	 *            the packet buffer.
public default void handleNettyMessage(ByteBuf buf, InetSocketAddress address) {
	}

	/**
	 * Called when a handler exception has occurred, these normally do not
	 * matter as long as the server handles them on it's own.
	 * 
	 * @param address
	 *            the address that caused the exception.
public interface GeminusRakNetPeer {

	/**
	 * Sends a message with the specified reliability on the specified channel
	 * to the session with the specified globally unique ID.
	 * 
	 * @param guid
	 *            the globally unique ID of the session.
	public void sendMessage(long guid, Reliability reliability, int channel, Packet packet);

	/**
	 * Sends the specified messages with the specified reliability on the
	 * specified channel to the session with the specified globally unique ID.
	 * 
	 * @param guid
	 *            the globally unique ID of the session.
public default void sendMessage(long guid, Reliability reliability, int channel,
	}

	/**
	 * Sends a message with the specified reliability on the default channel to
	 * the session with the specified globally unique ID.
	 * 
	 * @param guid
	 *            the globally unique ID of the session.
public default void sendMessage(long guid, Reliability reliability, Packet packe
	}

	/**
	 * Sends the specified messages with the specified reliability on the
	 * default channel to the session with the specified globally unique ID.
	 * 
	 * @param guid
	 *            the globally unique ID of the session.
public default void sendMessage(long guid, Reliability reliability, Packet... pa
	}

	/**
	 * Sends a message identifier with the specified reliability on the
	 * specified channel to the session with the specified globally unique ID.
	 * 
	 * @param guid
	 *            the globally unique ID of the session.
public default void sendMessage(long guid, Reliability reliability, int channel,
	}

	/**
	 * Sends the specified message identifiers with the specified reliability on
	 * the specified channel to the session with the specified globally unique
	 * ID
	 * 
	 * @param guid
	 *            the globally unique ID of the session.
public default void sendMessage(long guid, Reliability reliability, int packetId
	}

	/**
	 * Sends the specified message identifiers with the specified reliability on
	 * the default channel to the session with the specified globally unique ID.
	 * 
	 * @param guid
	 *            the globally unique ID of the session.

	/**
	 * Constructs a <code>RakNetClientSession</code> with the specified
	 * <code>RakNetServer</code>, the time the server was created, globally
	 * unique ID, maximum transfer unit, <code>Channel</code>, and address.
	 * 
	 * @param server
	 *            the <code>RakNetServer</code>.
import io.netty.channel.socket.DatagramPacket;
import net.marfgamer.jraknet.Packet;
import net.marfgamer.jraknet.RakNet;
import net.marfgamer.jraknet.RakNetPacket;
import net.marfgamer.jraknet.protocol.Reliability;
import net.marfgamer.jraknet.protocol.message.CustomPacket;
import net.marfgamer.jraknet.protocol.message.EncapsulatedPacket;
public abstract class RakNetSession implements UnumRakNetPeer, GeminusRakNetPeer {

	// Session data
	private final long guid;
	private final int maximumTransferUnit;
	private final Channel channel;
	private long highestLatency;

	/**
	 * Constructs a <code>RakNetSession</code> with the specified globally
	 * unique ID, maximum transfer unit, <code>Channel</code>, and address.
	 * 
	 * @param guid
	 *            the globally unique ID.
	 */
	public RakNetSession(long guid, int maximumTransferUnit, Channel channel, InetSocketAddress address) {
		// Session data
		this.guid = guid;
		this.maximumTransferUnit = maximumTransferUnit;
		this.channel = channel;
public RakNetState getState() {
	 */
	public void setState(RakNetState state) {
		this.state = state;
	}

	/**
public int getKeepAliveState() {
	 */
	public void setKeepAliveState(int keepAliveState) {
		this.keepAliveState = keepAliveState;
	}

	/**
public long getLastPacketReceiveTime() {
	}

	/**
	 * Bumps the message index and returns the new one, this should only be
	 * called by the <code>SplitPacket</code> class.
	 * 
	 * @return the new message index.
	 */
	protected int bumpMessageIndex() {
		return this.messageIndex++;
	}

	/**
	 * Enables/disables latency detection, when disabled the latency will always
	 * return -1. If the session is not yet in the keep alive state then the
	 * packets needed to detect the latency will not be sent until then.
	 * 
	 * @param enabled
	 *            whether or not latency detection is enabled
public void enableLatencyDetection(boolean enabled) {
		this.latencyEnabled = enabled;
		this.latency = (enabled ? this.latency : -1);
		this.pongsReceived = (enabled ? this.pongsReceived : 0);
	}

	/**
public final void sendMessage(Reliability reliability, int channel, Packet packe
		encapsulated.orderChannel = (byte) channel;
		encapsulated.payload = packet;
		if (reliability.isReliable()) {
			encapsulated.messageIndex = this.messageIndex++;
		}
		if (reliability.isOrdered() || reliability.isSequenced()) {
			encapsulated.orderIndex = (reliability.isOrdered() ? this.orderSendIndex[channel]++
					: this.sequenceSendIndex[channel]++);
		}

		// Do we need to split the packet?
public final void sendMessage(Reliability reliability, int channel, Packet packe
				for (EncapsulatedPacket split : SplitPacket.splitPacket(this, encapsulated)) {
					sendQueue.add(split);
				}
			} else {
				sendQueue.add(encapsulated);
			}
		}
	}

	@Override
public final void sendMessage(long guid, Reliability reliability, int channel, P
	 */
	public final void sendRawMessage(Packet packet) {
		channel.writeAndFlush(new DatagramPacket(packet.buffer(), this.address));
	}

	/**
public final void sendRawMessage(Packet packet) {
	 * @param encapsulated
	 *            the encapsulated packets to send.
	 * @param updateRecoveryQueue
	 *            whether or not to store the encapsulated packets in the
	 *            recovery queue for later, only set this to <code>true</code>
	 *            if you are sending new data and not resending old data.
	 * @return the sequence number of the <code>CustomPacket</code>.
	 */
	private final int sendCustomPacket(ArrayList<EncapsulatedPacket> encapsulated, boolean updateRecoveryQueue) {
private final int sendCustomPacket(ArrayList<EncapsulatedPacket> encapsulated, b
		// Update packet data
		this.packetsSentThisSecond++;
		this.lastPacketSendTime = System.currentTimeMillis();
		return custom.sequenceNumber;
	}

private final int sendCustomPacket(ArrayList<EncapsulatedPacket> encapsulated, b
	 * @param encapsulated
	 *            The encapsulated packets to send
	 * @param updateRecoveryQueue
	 *            Whether or not to store the encapsulated packets in the
	 *            recovery queue for later, only set this to <code>true</code>
	 *            if you are sending new data and not resending old data
	 * @return The sequence number of the <code>CustomPacket</code>
	 */
	private final int sendCustomPacket(EncapsulatedPacket[] encapsulated, boolean updateRecoveryQueue) {
private final void sendAcknowledge(AcknowledgeType type, Record... records) {

		// Update packet data
		this.lastPacketSendTime = System.currentTimeMillis();
	}

	/**
public final void handleCustom(CustomPacket custom) {

		/*
		 * 1. The reason we subtract one from the difference is because the last
		 * sequence number we received should always be one less than the next
		 * one
		 */

		/*
		 * 2. The reason we add one to the last sequence number to the record
		 * when the difference is bigger than one is because we have already
		 * received that record, this is also the same reason we subtract one
		 * from the CustomPacket's sequence number even when the difference is
		 * not greater than one
		 */

		/*
		 * 3. We always generate the NACK response first because the previous
		 * sequence number data would be destroyed, making it impossible to
		 * generate it
		 */

		// Generate NACK queue if needed
public final void handleCustom(CustomPacket custom) {

		// Send ACK
		this.sendAcknowledge(AcknowledgeType.ACKNOWLEDGED, new Record(custom.sequenceNumber));
	}

	/**
public final void handleAcknowledge(Acknowledge acknowledge) {

		// Update packet data
		this.lastPacketReceiveTime = System.currentTimeMillis();
	}

	/**
private final void handleEncapsulated(EncapsulatedPacket encapsulated) {
			}

			/*
			 * It is safe to set the payload here because the old payload is no
			 * longer needed and split EncapsulatedPackets share the exact same
			 * data except for split data and payload.
			 */
			encapsulated.payload = finalPayload;
			splitQueue.remove(encapsulated.splitId);
private final void handleEncapsulated(EncapsulatedPacket encapsulated) {
		} else {
			// Channel is valid, it is safe to handle
			if (reliability.isOrdered()) {
				// System.out.println("Received ordered packet on channel " +
				// orderChannel + " with index " + orderIndex);
				handleQueue.get(orderChannel).put(orderIndex, encapsulated);
				while (handleQueue.get(orderChannel).containsKey(orderReceiveIndex[orderChannel])) {
					EncapsulatedPacket orderedEncapsulated = handleQueue.get(orderChannel)
							.get(orderReceiveIndex[orderChannel]++);
					handleQueue.get(orderChannel).remove(orderReceiveIndex[orderChannel] - 1);
					this.handleMessage0(encapsulated.orderChannel, new RakNetPacket(orderedEncapsulated.payload));
				}
				/*
				 * System.out.println("Current order index for channel " +
				 * orderChannel + ": " + (orderReceiveIndex[orderChannel] - 1) +
				 * " (Leftover: " + handleQueue.get(orderChannel).size() +
				 * ") (Last index on channel: " + orderIndex + ")");
				 */
			} else if (reliability.isSequenced()) {
				if (orderIndex > sequenceReceiveIndex[orderChannel]) {
					sequenceReceiveIndex[orderChannel] = orderIndex;
private final void handleEncapsulated(EncapsulatedPacket encapsulated) {
				this.handleMessage0(encapsulated.orderChannel, new RakNetPacket(encapsulated.payload));
			}
		}
	}

	/**
	 * Handles an internal packet related to RakNet, if the ID is unrecognized
	 * it is passed on to the underlying session class.
	 * 
	 * @param channel
	 *            the channel the packet was sent on.
private final void handleMessage0(int channel, RakNetPacket packet) {
		} else {
			this.handleMessage(packet, channel);
		}
	}

	/**
public final void update() {
	public abstract void onAcknowledge(Record record);

	/**
	 * This function is called when a not acknowledged receipt is received for
	 * the packet.
	 * 
	 * @param record
	 *            the lost record.
public Reliability getReliability() {
	}

	/**
	 * Updates the data for the split packet while also verifying that the
	 * specified <code>EncapsulatedPacket</code> belongs to this split packet.
	 * 
	 * @param encapsulated
	 *            the <code>EncapsulatedPacket</code> being used to update the
	 *            data.
	 * @return the packet if finished, null if data is still missing.
	 */
	public Packet update(EncapsulatedPacket encapsulated) {
	public void sendMessage(Reliability reliability, int channel, Packet packet);

	/**
	 * Sends the specified messages with the specified reliability on the
	 * specified channel.
	 * 
	 * @param reliability
	 *            the reliability of the packet.
public default void sendMessage(Reliability reliability, Packet packet) throws I
	}

	/**
	 * Sends the specified messages with the specified reliability on the
	 * default channel.
	 * 
	 * @param reliability
	 *            the reliability of the packet.
public default void sendMessage(Reliability reliability, Packet... packets) thro
	}

	/**
	 * Sends a message identifier with the specified reliability on the
	 * specified channel.
	 * 
	 * @param reliability
	 *            the reliability of the packet.
public default void sendMessage(Reliability reliability, int channel, int packet
	}

	/**
	 * Sends the specified message identifiers with the specified reliability on
	 * the specified channel.
	 * 
	 * @param reliability
	 *            the reliability of the packet.
public default void sendMessage(Reliability reliability, int packetId) {
	}

	/**
	 * Sends the specified message identifiers with the specified reliability on
	 * the default channel.
	 * 
	 * @param reliability
	 *            the reliability of the packet.
	}

	/**
	 * Convert the specified list of objects to a String. Used primarily by
	 * JRakNet objects to easily convert their data to a readable String.
	 * 
	 * @param obj
	 *            the objects to convert.
 */
public class RakNetUtils {

	private static final long UTILS_TIMESTAMP = System.currentTimeMillis();
	private static final int SERVER_PING_RETRIES = 5;
	private static final int IDENTIFIER_RETRIES = 3;

	/**
	 * Sends a raw message to the specified address for the specified amount of
	 * times in the specified interval until the packet is received or there is
	 * a timeout.
	 * 
	 * @param address
	 *            the address to send the packet to.
private static RakNetPacket createBootstrapAndSend(InetSocketAddress address, Pa
			e.printStackTrace();
		}

		group.shutdownGracefully();
		return packetReceived;
	}

	/**
	 * @param address
	 *            the address of the server.
	 * @return true if the server is online.
	 */
	public static boolean isServerOnline(InetSocketAddress address) {
		// Create connection packet
public static boolean isServerOnline(InetSocketAddress address) {
	 *            the address of the server.
	 * @param port
	 *            the port of the server.
	 * @return true if the server is online.
	 */
	public static boolean isServerOnline(InetAddress address, int port) {
		return isServerOnline(new InetSocketAddress(address, port));
public static boolean isServerOnline(InetAddress address, int port) {
	 *            the address of the server.
	 * @param port
	 *            the port of the server.
	 * @return true if the server is online.
	 * @throws UnknownHostException
	 *             if the specified address is an unknown host.
	 */
public static boolean isServerOnline(String address, int port) throws UnknownHos
	/**
	 * @param address
	 *            the address of the server.
	 * @return true if the server is compatible to the current client protocol.
	 */
	public static boolean isServerCompatible(InetSocketAddress address) {
		// Create connection packet
public static boolean isServerCompatible(InetSocketAddress address) {
	 *            the address of the server.
	 * @param port
	 *            the port of the server.
	 * @return true if the server is compatible to the current client protocol.
	 */
	public static boolean isServerCompatible(InetAddress address, int port) {
		return isServerCompatible(new InetSocketAddress(address, port));
public static boolean isServerCompatible(InetAddress address, int port) {
	 *            the address of the server.
	 * @param port
	 *            the port of the server.
	 * @return true if the server is compatible to the current client protocol.
	 * @throws UnknownHostException
	 *             if the specified address is an unknown host.
	 */
public static int getMaximumTransferUnit() {
		} catch (Throwable throwable) {
			try {
				/*
				 * We failed to get the NetworkInterface, we're gonna have to
				 * cycle through them manually and choose the lowest one to make
				 * sure we never exceed any hardware limitations
				 */
				boolean foundDevice = false;
				int lowestMaximumTransferUnit = Integer.MAX_VALUE;
public static int getMaximumTransferUnit() {
		}
	}

	public static void main(String[] args) throws IOException {
		System.out.println(getMaximumTransferUnit());
	}

	/**
	 * Parses a single String as an address and port and converts it to an
	 * <code>InetSocketAddress</code>.
public static void main(String[] args) throws IOException {
	 *            the default port to use if one is not specified.
	 * @return the parsed <code>InetSocketAddress</code>.
	 * @throws UnknownHostException
	 *             if the address is in an invalid format or if the host cannot
	 *             be found.
	 */
	public static InetSocketAddress parseAddress(String address, int defaultPort) throws UnknownHostException {
		String[] addressSplit = address.split(":");
public static InetSocketAddress parseAddress(String address, int defaultPort) th
	 *            the address to convert.
	 * @return the parsed <code>InetSocketAddress</code>.
	 * @throws UnknownHostException
	 *             if the address is in an invalid format or if the host cannot
	 *             be found.
	 */
	public static InetSocketAddress parseAddress(String address) throws UnknownHostException {
		return parseAddress(address, -1);
public static void threadLock(long time) {
	 * @author Trent "MarfGamer" Summerlin
	 */
	private static class BootstrapHandler extends ChannelInboundHandlerAdapter {
		public volatile RakNetPacket packet;

		@Override
public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception
		public void channelReadComplete(ChannelHandlerContext ctx) {
			ctx.flush();
		}
	}

}
	private static final long serialVersionUID = 4324132003573381634L;

	/**
	 * Returns <tt>true</tt> if this map contains a mapping for the specified
	 * key.
	 *
	 * @param key
	 *            The key whose presence in this map is to be tested
	 * @return <tt>true</tt> if this map contains a mapping for the specified
	 *         key.
	 */
	public boolean containsKey(byte key) {
		return super.containsKey(new Byte(key));
public boolean containsValue(Object value) {
	}

	/**
	 * Returns the value to which the specified key is mapped, or {@code null}
	 * if this map contains no mapping for the key.
	 *
	 * <p>
	 * More formally, if this map contains a mapping from a key {@code k} to a
	 * value {@code v} such that {@code (key==null ? k==null :
	 * key.equals(k))}, then this method returns {@code v}; otherwise it returns
	 * {@code null}. (There can be at most one such mapping.)
	 *
	 * <p>
	 * A return value of {@code null} does not <i>necessarily</i> indicate that
	 * the map contains no mapping for the key; it's also possible that the map
	 * explicitly maps the key to {@code null}. The {@link #containsKey
	 * containsKey} operation may be used to distinguish these two cases.
	 *
	 * @see #put(byte, Object)
	 * @param key
public T get(byte key) {
	}

	/**
	 * Associates the specified value with the specified key in this map. If the
	 * map previously contained a mapping for the key, the old value is
	 * replaced.
	 *
	 * @param key
	 *            key with which the specified value is to be associated
	 * @param value
	 *            value to be associated with the specified key
	 * @return the previous value associated with <tt>key</tt>, or <tt>null</tt>
	 *         if there was no mapping for <tt>key</tt>. (A <tt>null</tt> return
	 *         can also indicate that the map previously associated
	 *         <tt>null</tt> with <tt>key</tt>.)
	 */
	public T put(byte key, T value) {
		return super.put(new Byte(key), value);
public T put(byte key, T value) {
	 *
	 * @param key
	 *            key whose mapping is to be removed from the map
	 * @return the previous value associated with <tt>key</tt>, or <tt>null</tt>
	 *         if there was no mapping for <tt>key</tt>. (A <tt>null</tt> return
	 *         can also indicate that the map previously associated
	 *         <tt>null</tt> with <tt>key</tt>.)
	 */
	public T remove(byte key) {
		return super.remove(new Byte(key));
	private static final long serialVersionUID = 4324132003573381634L;

	/**
	 * Returns <tt>true</tt> if this map contains a mapping for the specified
	 * key.
	 *
	 * @param key
	 *            The key whose presence in this map is to be tested
	 * @return <tt>true</tt> if this map contains a mapping for the specified
	 *         key.
	 */
	public boolean containsKey(int key) {
		return super.containsKey(new Integer(key));
public boolean containsValue(Object value) {
	}

	/**
	 * Returns the value to which the specified key is mapped, or {@code null}
	 * if this map contains no mapping for the key.
	 *
	 * <p>
	 * More formally, if this map contains a mapping from a key {@code k} to a
	 * value {@code v} such that {@code (key==null ? k==null :
	 * key.equals(k))}, then this method returns {@code v}; otherwise it returns
	 * {@code null}. (There can be at most one such mapping.)
	 *
	 * <p>
	 * A return value of {@code null} does not <i>necessarily</i> indicate that
	 * the map contains no mapping for the key; it's also possible that the map
	 * explicitly maps the key to {@code null}. The {@link #containsKey
	 * containsKey} operation may be used to distinguish these two cases.
	 *
	 * @see #put(int, Object)
	 * @param key
public T get(int key) {
	}

	/**
	 * Associates the specified value with the specified key in this map. If the
	 * map previously contained a mapping for the key, the old value is
	 * replaced.
	 *
	 * @param key
	 *            key with which the specified value is to be associated
	 * @param value
	 *            value to be associated with the specified key
	 * @return the previous value associated with <tt>key</tt>, or <tt>null</tt>
	 *         if there was no mapping for <tt>key</tt>. (A <tt>null</tt> return
	 *         can also indicate that the map previously associated
	 *         <tt>null</tt> with <tt>key</tt>.)
	 */
	public T put(int key, T value) {
		return super.put(new Integer(key), value);
public T put(int key, T value) {
	 *
	 * @param key
	 *            key whose mapping is to be removed from the map
	 * @return the previous value associated with <tt>key</tt>, or <tt>null</tt>
	 *         if there was no mapping for <tt>key</tt>. (A <tt>null</tt> return
	 *         can also indicate that the map previously associated
	 *         <tt>null</tt> with <tt>key</tt>.)
	 */
	public T remove(int key) {
		return super.remove(new Integer(key));
	private static final long serialVersionUID = 4324132003573381634L;

	/**
	 * Returns <tt>true</tt> if this map contains a mapping for the specified
	 * key.
	 *
	 * @param key
	 *            The key whose presence in this map is to be tested
	 * @return <tt>true</tt> if this map contains a mapping for the specified
	 *         key.
	 */
	public boolean containsKey(long key) {
		return super.containsKey(new Long(key));
public boolean containsValue(Object value) {
	}

	/**
	 * Returns the value to which the specified key is mapped, or {@code null}
	 * if this map contains no mapping for the key.
	 *
	 * <p>
	 * More formally, if this map contains a mapping from a key {@code k} to a
	 * value {@code v} such that {@code (key==null ? k==null :
	 * key.equals(k))}, then this method returns {@code v}; otherwise it returns
	 * {@code null}. (There can be at most one such mapping.)
	 *
	 * <p>
	 * A return value of {@code null} does not <i>necessarily</i> indicate that
	 * the map contains no mapping for the key; it's also possible that the map
	 * explicitly maps the key to {@code null}. The {@link #containsKey
	 * containsKey} operation may be used to distinguish these two cases.
	 *
	 * @see #put(long, Object)
	 * @param key
public T get(long key) {
	}

	/**
	 * Associates the specified value with the specified key in this map. If the
	 * map previously contained a mapping for the key, the old value is
	 * replaced.
	 *
	 * @param key
	 *            key with which the specified value is to be associated
	 * @param value
	 *            value to be associated with the specified key
	 * @return the previous value associated with <tt>key</tt>, or <tt>null</tt>
	 *         if there was no mapping for <tt>key</tt>. (A <tt>null</tt> return
	 *         can also indicate that the map previously associated
	 *         <tt>null</tt> with <tt>key</tt>.)
	 */
	public T put(long key, T value) {
		return super.put(new Long(key), value);
public T put(long key, T value) {
	 *
	 * @param key
	 *            key whose mapping is to be removed from the map
	 * @return the previous value associated with <tt>key</tt>, or <tt>null</tt>
	 *         if there was no mapping for <tt>key</tt>. (A <tt>null</tt> return
	 *         can also indicate that the map previously associated
	 *         <tt>null</tt> with <tt>key</tt>.)
	 */
	public T remove(long key) {
		return super.remove(new Long(key));
	private static final long serialVersionUID = 4324132003573381634L;

	/**
	 * Returns <tt>true</tt> if this map contains a mapping for the specified
	 * key.
	 *
	 * @param key
	 *            The key whose presence in this map is to be tested
	 * @return <tt>true</tt> if this map contains a mapping for the specified
	 *         key.
	 */
	public boolean containsKey(short key) {
		return super.containsKey(new Short(key));
public boolean containsValue(Object value) {
	}

	/**
	 * Returns the value to which the specified key is mapped, or {@code null}
	 * if this map contains no mapping for the key.
	 *
	 * <p>
	 * More formally, if this map contains a mapping from a key {@code k} to a
	 * value {@code v} such that {@code (key==null ? k==null :
	 * key.equals(k))}, then this method returns {@code v}; otherwise it returns
	 * {@code null}. (There can be at most one such mapping.)
	 *
	 * <p>
	 * A return value of {@code null} does not <i>necessarily</i> indicate that
	 * the map contains no mapping for the key; it's also possible that the map
	 * explicitly maps the key to {@code null}. The {@link #containsKey
	 * containsKey} operation may be used to distinguish these two cases.
	 *
	 * @see #put(short, Object)
	 * @param key
public T get(short key) {
	}

	/**
	 * Associates the specified value with the specified key in this map. If the
	 * map previously contained a mapping for the key, the old value is
	 * replaced.
	 *
	 * @param key
	 *            key with which the specified value is to be associated
	 * @param value
	 *            value to be associated with the specified key
	 * @return the previous value associated with <tt>key</tt>, or <tt>null</tt>
	 *         if there was no mapping for <tt>key</tt>. (A <tt>null</tt> return
	 *         can also indicate that the map previously associated
	 *         <tt>null</tt> with <tt>key</tt>.)
	 */
	public T put(short key, T value) {
		return super.put(new Short(key), value);
public T put(short key, T value) {
	 *
	 * @param key
	 *            key whose mapping is to be removed from the map
	 * @return the previous value associated with <tt>key</tt>, or <tt>null</tt>
	 *         if there was no mapping for <tt>key</tt>. (A <tt>null</tt> return
	 *         can also indicate that the map previously associated
	 *         <tt>null</tt> with <tt>key</tt>.)
	 */
	public T remove(short key) {
		return super.remove(new Short(key));

import net.marfgamer.jraknet.client.RakNetClient;
import net.marfgamer.jraknet.client.RakNetClientListener;
import net.marfgamer.jraknet.protocol.Reliability;
import net.marfgamer.jraknet.protocol.message.acknowledge.Record;
import net.marfgamer.jraknet.session.RakNetServerSession;

 */
public class RakNetClientTest {

	public static void main(String[] args) throws RakNetException, UnknownHostException {
		RakNetClient client = new RakNetClient();
		client.setListener(new RakNetClientListener() {

			@Override
			public void onConnect(RakNetServerSession session) {
				System.out.println("Connected to server with address " + session.getAddress() + "!");
				session.sendMessage(Reliability.UNRELIABLE, new RakNetPacket(0xFF));
			}

			@Override
			public void onDisconnect(RakNetServerSession session, String reason) {
				System.out.println("Disconnected from server with address " + session.getAddress() + " for reason \""
						+ reason + "\"");
			}

			@Override
			public void onAcknowledge(RakNetServerSession session, Record record) {
				System.out.println("Received ACK for record(s) " + record.toString());
				client.disconnectAndShutdown();
			}

			@Override
			public void onNotAcknowledge(RakNetServerSession session, Record record) {
				System.out.println("Received NACK for record(s) " + record.toString());
				client.disconnectAndShutdown();
			}

			@Override
			public void onHandlerException(InetSocketAddress address, Throwable cause) {
				System.err.println("Exception caused by " + address);
				cause.printStackTrace();
			}

		});
		System.out.println("Created client, connecting to " + UtilityTest.LIFEBOAT_SURVIVAL_GAMES_ADDRESS + "...");

		client.connect("192.168.1.21", 19132);
	}

}
 */
public class RakNetServerTest {

	public static void main(String[] args) throws RakNetException {
		RakNetServer server = new RakNetServer(UtilityTest.MINECRAFT_POCKET_EDITION_DEFAULT_PORT, 10);

		server.setListener(new RakNetServerListener() {

			@Override
			public void onClientPreConnect(InetSocketAddress address) {
				System.out.println("Client from " + address + " has instantiated the connection, waiting for "
						+ NewIncomingConnection.class.getSimpleName() + " packet");
			}

			@Override
			public void onClientPreDisconnect(InetSocketAddress address, String reason) {
				System.out.println("Client from " + address + " has failed to login for \"" + reason + "\"");
			}

			@Override
			public void onClientConnect(RakNetClientSession session) {
				System.out.println("Client from address " + session.getAddress() + " has connected to the server");
			}

			@Override
			public void onClientDisconnect(RakNetClientSession session, String reason) {
				System.out.println("Client from address " + session.getAddress() + " has been disconnected for \""
						+ reason + "\"");
			}

			@Override
			public void handleMessage(RakNetClientSession session, RakNetPacket packet, int channel) {
				System.out.println(
						"Received packet from client with address " + session.getAddress() + " with packet ID 0x"
								+ Integer.toHexString(packet.getId()).toUpperCase() + " on channel " + channel);
			}
public void handlePing(ServerPing ping) {

			@Override
			public void onHandlerException(InetSocketAddress address, Throwable cause) {
				System.err.println("Exception caused by " + address);
				cause.printStackTrace();
			}

			@Override
			public void onAddressBlocked(InetAddress address, String reason, long time) {
				System.out.println(
						"Blocked address " + address + " due to \"" + reason + "\" for " + (time / 1000L) + " seconds");
			}

			@Override
			public void onAddressUnblocked(InetAddress address) {
				System.out.println("Unblocked address " + address);
			}

		});

		server.startThreaded();
		System.out.println("Started server!");
	}

}
 * <br>
 * 
 * This test was created in a response to GitHub issue #35 after it was
 * discovered during beta testing of MarfGamer's port of Five Night's at
 * Freddy's 3 to Java in it's spectator mode inside multiplayer mode.
 *
 * @author Trent "MarfGamer" Summerlin
 */
public class SequencedPacketTest {

	private static final short SEQUENCE_START_ID = 0xFE;
	private static final int PACKET_SEND_COUNT = 1000;

	private static long startSend = -1;
	private static int packetReceiveCount = 0;
	private static boolean[] packetsReceived = new boolean[PACKET_SEND_COUNT];

	public static void main(String[] args) throws RakNetException, UnknownHostException {
		System.out.println("Creating server...");
		createServer();

		System.out.print("Sleeping 3000MS");
		for (int i = 0; i < 3; i++) {
			RakNetUtils.threadLock(1000);
			System.out.print(".");
		}
		System.out.println();

		System.out.println("Creating client...");
		createClient();

		// In case of timeout
public static void main(String[] args) throws RakNetException, UnknownHostExcept
	 * Prints the results of the test
	 */
	private static void printResults() {
		System.out.print("Server: Sequenced packet test finished, lost " + (packetReceiveCount >= PACKET_SEND_COUNT
				? "no"
				: Float.toString(((float) PACKET_SEND_COUNT - packetReceiveCount / (float) PACKET_SEND_COUNT) * 100)
						.substring(0, 3).replace(".", "") + "%!o(MISSING)f")
				+ " packets");
		if (packetReceiveCount < PACKET_SEND_COUNT) {
			// Create list of lost packets
			ArrayList<Integer> packetsLost = new ArrayList<Integer>();
private static void printResults() {
			}

			// Print out said list
			System.out.print(" [");
			for (int i = 0; i < packetsLost.size(); i++) {
				Integer wi = packetsLost.get(i);
				System.out.print(wi.intValue() + (i + 1 < packetsLost.size() ? ", " : ""));
			}
			System.out.print("]");
		}
		System.out.println(" (Took " + (System.currentTimeMillis() - startSend) + "MS)");
	}

	/**
public void onClientConnect(RakNetClientSession session) {
					e.printStackTrace();
				}

				System.out.println("Server: Client connected from " + session.getAddress() + "!");
			}

			@Override
			public void onClientDisconnect(RakNetClientSession session, String reason) {
				System.out.println("Server: Client from " + session.getAddress() + " disconnected! (" + reason + ")");
				System.exit(1);
			}

private static RakNetClient createClient() throws RakNetException, UnknownHostEx

			@Override
			public void onConnect(RakNetServerSession session) {
				System.out.println("Client: Connected to server with MTU " + session.getMaximumTransferUnit());

				// Send 100 sequenced packets
				System.out.println("Client: Sending " + PACKET_SEND_COUNT + " packets...");
				startSend = System.currentTimeMillis();
				for (int i = 0; i < PACKET_SEND_COUNT; i++) {
					RakNetPacket sequencedPacket = new RakNetPacket(SEQUENCE_START_ID);
					sequencedPacket.writeInt(i);
					packetSize += sequencedPacket.size();
					session.sendMessage(Reliability.RELIABLE_SEQUENCED, sequencedPacket);
				}

				// Notify user
				System.out.println("Client: Sent " + PACKET_SEND_COUNT + " packets (" + packetSize + " bytes, "
						+ (packetSize / 4) + " ints)");
			}

			@Override
			public void onDisconnect(RakNetServerSession session, String reason) {
				System.err.println("Client: Lost connection to server! (" + reason + ")");
				System.exit(1);
			}

 */
public class SplitPacketTest {

	private static final short SPLIT_START_ID = 0xFE;
	private static final short SPLIT_END_ID = 0xFF;

	private static long startSend = -1;

	public static void main(String[] args) throws RakNetException, UnknownHostException {
		System.out.println("Creating server...");
		createServer();

		System.out.print("Sleeping 3000MS");
		for (int i = 0; i < 3; i++) {
			RakNetUtils.threadLock(1000);
			System.out.print(".");
		}
		System.out.println();

		System.out.println("Creating client...");
		createClient();
	}

public void onClientConnect(RakNetClientSession session) {
					e.printStackTrace();
				}

				System.out.println("Server: Client connected from " + session.getAddress() + "!");
			}

			@Override
			public void onClientDisconnect(RakNetClientSession session, String reason) {
				System.out.println("Server: Client from " + session.getAddress() + " disconnected! (" + reason + ")");
				System.exit(1);
			}

			@Override
			public void handleMessage(RakNetClientSession session, RakNetPacket packet, int channel) {
				System.out.println("Server: Received packet of " + packet.size() + " bytes from " + session.getAddress()
						+ ", checking data...");

				// Check packet ID
				System.out.println("Server: Checking header byte...");
				if (packet.getId() != SPLIT_START_ID) {
					System.err.println("Server: Packet header is " + packet.getId() + " when it should be "
							+ SPLIT_START_ID + "!");
					System.exit(1);
				}

				// Check shorts
				System.out.println("Server: Checking if data is sequenced correctly...");
				long lastInt = -1;
				while (packet.remaining() >= 4) {
					long currentInt = packet.readUInt();
public void handleMessage(RakNetClientSession session, RakNetPacket packet, int
						System.exit(1);
					} else {
						lastInt = currentInt;
						System.out.print(lastInt + (packet.remaining() >= 4 ? ", " : "\n"));
					}
				}

				// Check packet footer
				System.out.println("Server: Checking footer byte...");
				if (packet.readUByte() != SPLIT_END_ID) {
					System.err.println("Server: Packet footer is " + packet.getId() + " when it should be "
							+ SPLIT_START_ID + "!");
					System.exit(1);
				}

				System.out.println(
						"Server: Split packet test passed! (Took " + (System.currentTimeMillis() - startSend) + "MS)");
				System.exit(0);
			}
private static RakNetClient createClient() throws RakNetException, UnknownHostEx

			@Override
			public void onConnect(RakNetServerSession session) {
				System.out.println("Client: Connected to server with MTU " + session.getMaximumTransferUnit());

				// Calculate maximum packet size
				this.packet = new RakNetPacket(SPLIT_START_ID);
public void onConnect(RakNetServerSession session) {
				packet.writeUByte(SPLIT_END_ID);

				// Send packet
				System.out.println(
						"Client: Sending giant packet... (" + packet.size() + " bytes, " + integersWritten + " ints)");
				startSend = System.currentTimeMillis();
				session.sendMessage(Reliability.RELIABLE_ORDERED, packet);
 */
public class UtilityTest {

	private static final String ADDRESS_TEST_VALID = "255.255.255.255:65535";
	private static final String ADDRESS_TEST_INVALID = "275.3.6.28:83245";
	private static final char UNICODE_MINECRAFT_COLOR_SYMBOL = '\u00A7';
			MINECRAFT_POCKET_EDITION_DEFAULT_PORT);

	public static void main(String[] args) throws RakNetException {
		System.out.println("Parsing valid address " + ADDRESS_TEST_VALID + " ?= "
				+ RakNetUtils.parseAddressPassive(ADDRESS_TEST_VALID));
		System.out.println("Parsing invalid address " + ADDRESS_TEST_INVALID + " ?= "
				+ RakNetUtils.parseAddressPassive(ADDRESS_TEST_INVALID));

		// Tell the user the sever we are pinging
		System.out.println("Server address: " + LIFEBOAT_SURVIVAL_GAMES_ADDRESS);
		System.out.println("Maximum Transfer Unit: " + RakNetUtils.getMaximumTransferUnit());

		// Check if the server is online
		System.out.print("Pinging server... ");
		if (isServerOnline(LIFEBOAT_SURVIVAL_GAMES_ADDRESS)) {
			System.out.println("Success!");
		} else {
			throw new RakNetException("Failed to connect to server, unable to proceed with testing!");
		}

		System.out.print("Checking compatibility... ");
		if (isServerCompatible(LIFEBOAT_SURVIVAL_GAMES_ADDRESS)) {
			System.out.println("Success!");
		} else {
			throw new RakNetException("Invalid protocol, we are unable to continue with testing!");
		}

		// Get the server identifier
		System.out.print("Server identifier: ");
		MCPEIdentifier identifier = new MCPEIdentifier(getServerIdentifier(LIFEBOAT_SURVIVAL_GAMES_ADDRESS));
		System.out.println(formatMCPEIdentifier(identifier));
	}

	/**
	public static final int ID_UPDATE_USERNAME_REQUEST = 0x90;

	/**
	 * Sent from the server to let the client know it's new username was
	 * accepted.
	 */
	public static final int ID_UPDATE_USERNAME_ACCEPTED = 0x91;

	private final StringBuilder channelText;

	/**
	 * Constructs a <code>ServerChannel</code> with the specified channel and
	 * name.
	 * 
	 * @param channel
	 *            the channel.
import java.util.UUID;

import javax.swing.JFrame;
import javax.swing.UIManager;

import net.marfgamer.jraknet.RakNet;
public void sendChatMessage(String message, int channel) throws InvalidChannelEx
		ChatMessage messagePacket = new ChatMessage();
		messagePacket.message = message;
		messagePacket.encode();
		session.sendMessage(Reliability.RELIABLE_ORDERED, channel, messagePacket);
	}

	/**
public void handleMessage(RakNetServerSession session, RakNetPacket packet, int

			// Update channel text if the channel is valid
			if (channels[channel] != null) {
				// TODO: Display error if invalid channel
				channels[channel].addChatMessage(chat.message);
				this.updateChannelText();
			}
public static void main(String[] args) {
			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
			ChatFrame frame = new ChatFrame();
			frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

			// Create client
			@SuppressWarnings("unused")
	private static final long serialVersionUID = 4497482433048975592L;

	/**
	 * Constructs a <code>ChatException</code> with the specified exception
	 * message.
	 * 
	 * @param exception
	 *            the exception message.
public void toggleServerInteraction(boolean connected) {
	}

	/**
	 * Updates the listeners required for the frame to function properly based
	 * on the client.
	 * 
	 * @param client
	 *            the client to assign the listeners to.
import java.util.UUID;

import net.marfgamer.jraknet.RakNet;
import net.marfgamer.jraknet.RakNetPacket;
import net.marfgamer.jraknet.UtilityTest;
import net.marfgamer.jraknet.example.chat.ChatMessageIdentifier;
 */
public class ChatServer implements RakNetServerListener {

	private final String name;
	private final String motd;
	private final RakNetServer server;
	private final ServerChannel[] serverChannels;
	private final HashMap<InetSocketAddress, ConnectedClient> connected;

	/**
	 * Constructs a <code>ChatServer</code> with the specified name, message of
	 * the day, port, and maximum amount of connections.
	 * 
	 * @param name
	 *            the name.
private void denyLogin(RakNetClientSession session, String reason) {
	/**
	 * @param username
	 *            the username to check.
	 * @return true if the server has a client with the specified username.
	 */
	private boolean hasUsername(String username) {
		for (ConnectedClient client : connected.values()) {
public void removeChannel(int channel) throws InvalidChannelException {
	/**
	 * @param channel
	 *            the channel ID.
	 * @return true if the server has a channel with the specified ID.
	 * @throws InvalidChannelException
	 *             if the channel exceeds the limit.
	 */
public String getChannelName(int channel) throws InvalidChannelException {
	}

	/**
	 * Broadcasts the specified message to the specified channel and prints it
	 * out to the console if needed.
	 * 
	 * @param message
	 *            the message to send.
private void broadcastMessage(String message, int channel, boolean print) throws
			client.sendChatMessage(message, channel);
		}
		if (print == true) {
			System.out.println(message + " [" + serverChannels[channel].getName() + "]");
		}
	}

public void broadcastMessage(String message) {
		for (ServerChannel channel : getChannels()) {
			this.broadcastMessage(message + " [Global]", channel.getChannel(), false);
		}
		System.out.println(message + " [Global]");
	}

	/**
public ConnectedClient getClient(String username) {
	/**
	 * @param username
	 *            the username to check.
	 * @return true if the server has a client with the specified username.
	 */
	public boolean hasClient(String username) {
		return (getClient(username) != null);
public void onClientDisconnect(RakNetClientSession session, String reason) {
	}

	public static void main(String[] args) {
		// Create and start server
		ChatServer server = new ChatServer("JRakNet Server Example", "This is a test server made for JRakNet",
				UtilityTest.MARFGAMER_DEVELOPMENT_PORT, 10);
		server.start();
		System.out.println("Started server!");

		// Register commands
		CommandHandler commandHandler = new CommandHandler();
package net.marfgamer.jraknet.example.chat.server.command;

import net.marfgamer.jraknet.RakNet;
import net.marfgamer.jraknet.example.chat.server.ChatServer;
import net.marfgamer.jraknet.util.RakNetUtils;

 */
public class ChannelCommand extends Command {

	private final ChatServer server;

	public ChannelCommand(ChatServer server) {
public boolean handleCommand(String[] args) {
					while (!server.hasChannel(channelId)) {
						channelId++;
						if (channelId >= RakNet.MAX_CHANNELS) {
							System.err.println("Unable to add channel, either remove some or assign an ID manually!");
							return true;
						}
					}
				} else {
					// Channel was preset but there is no name!
					if (args.length < 3) {
						System.err.println("Failed to add channel with ID " + channelId + ", no name was provided!");
						return true;
					}
				}

				// Add the channel and notify the server
				String channelName = remainingArguments((hadId ? 2 : 1), args);
				server.addChannel(channelId, channelName);
				System.out.println("Added channel \"" + channelName + "\" with ID " + channelId);
				return true;
			} else if (args[0].equalsIgnoreCase("rename")) {
				if (args.length >= 3) {
					// Does the channel exist yet?
					if (!server.hasChannel(channelId)) {
						System.err.println("Channel with ID " + channelId + " has not yet been created!");
						return true;
					}

					// Rename the channel and notify the server
					String channelName = server.getChannelName(channelId);
					server.renameChannel(channelId, remainingArguments(2, args));
					System.out.println("Renamed channel with ID " + channelId + " from \"" + channelName + "\" to \""
							+ server.getChannelName(channelId) + "\"");
					return true;
				}
			} else if (args[0].equalsIgnoreCase("remove")) {
				// Does the channel exist yet?
				if (!server.hasChannel(channelId)) {
					System.err.println("Channel was ID " + channelId + " has not yet been created!");
					return true;
				}

				// Remove the channel and notify the server
				String channelName = server.getChannelName(channelId);
				server.removeChannel(channelId);
				System.out.println("Removed channel \"" + channelName + "\"");
				return true;
			}
		}
	private final String usage;

	/**
	 * Constructs a <code>Command</code> with whether or not it is overridable
	 * along the specified label and usage.
	 * 
	 * @param overridable
	 *            whether or not the command is overridable.
public Command(String label) {
	}

	/**
	 * @return true if this command by overridden by another command.
	 */
	protected boolean isOverridable() {
		return this.overridable;
protected String remainingArguments(int startIndex, String[] stringArray) {
	 * 
	 * @param args
	 *            the command arguments.
	 * @return true if the command was handled successfully.
	 */
	public abstract boolean handleCommand(String[] args);

 */
package net.marfgamer.jraknet.example.chat.server.command;

import net.marfgamer.jraknet.example.chat.server.ChatServer;

/**
 */
public class KickCommand extends Command {

	private final ChatServer server;

	public KickCommand(ChatServer server) {
public boolean handleCommand(String[] args) {
			String reason = (args.length >= 2 ? remainingArguments(1, args) : "Kicked from server");
			if (server.hasClient(args[0])) {
				server.kickClient(server.getClient(args[0]), reason);
				System.out.println("Kicked client \"" + args[0] + "\" with reason \"" + reason + "\"");
			} else {
				System.err.println("Client \"" + args[0] + "\" is not online!");
			}
			return true;
		}
 */
package net.marfgamer.jraknet.example.chat.server.command;

import net.marfgamer.jraknet.example.chat.server.ChatServer;

/**
 */
public class StopCommand extends Command {

	private final ChatServer server;

	public StopCommand(ChatServer server) {
public StopCommand(ChatServer server) {

	@Override
	public boolean handleCommand(String[] args) {
		System.out.println("Stopping the server...");
		server.stop();
		return true;
	}
public BroadcastFrame(RakNetClient client) {
		// Used to update the discovery port
		JTextField textFieldDiscoveryPort = new JTextField();
		textFieldDiscoveryPort.setBounds(370, 45, 115, 20);
		textFieldDiscoveryPort.setText(Integer.toString(client.getDiscoveryPort()));
		getContentPane().add(textFieldDiscoveryPort);
		textFieldDiscoveryPort.setColumns(10);
		JButton btnUpdatePort = new JButton("Update Port");
public RakNetBroadcastUpdatePortListener(RakNetClient client, JTextField textFie
		public void actionPerformed(ActionEvent e) {
			int newDiscoveryPort = RakNetUtils.parseIntPassive(textFieldDiscoveryPort.getText());
			if (newDiscoveryPort > -1) {
				client.setDiscoveryPort(newDiscoveryPort);
			} else {
				textFieldDiscoveryPort.setText(Integer.toString(client.getDiscoveryPort()));
			}
		}

import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

import net.marfgamer.jraknet.UtilityTest;
import net.marfgamer.jraknet.client.RakNetClient;
import net.marfgamer.jraknet.client.RakNetClientListener;
public void start() {
	public static void main(String[] args) throws ClassNotFoundException, InstantiationException,
			IllegalAccessException, UnsupportedLookAndFeelException {
		UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
		BroadcastTest test = new BroadcastTest();
		test.start();
	}
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

import net.marfgamer.jraknet.UtilityTest;
import net.marfgamer.jraknet.identifier.MCPEIdentifier;
import net.marfgamer.jraknet.server.RakNetServer;
public void start() {
	public static void main(String[] args) throws ClassNotFoundException, InstantiationException,
			IllegalAccessException, UnsupportedLookAndFeelException {
		UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
		LatencyTest test = new LatencyTest();
		test.start();
	}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
private void updateCache(ClassLoader loader, Multimap<String, Location> newClass
                return ImmutableList.of();
            }
        }
        // special case for jboss/wildfly
        try {
            return Collections.list(loader.getResources("/"));
        } catch (IOException e) {
            logger.warn(e.getMessage(), e);
            return ImmutableList.of();
        }
    }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import org.springframework.expression.Expression;
import org.springframework.expression.ParserContext;
import org.springframework.expression.spel.standard.SpelExpressionParser;
import org.springframework.web.client.RestTemplate;

import de.codecentric.boot.admin.event.ClientApplicationEvent;
public void setRestTemplate(RestTemplate restTemplate) {
		this.restTemplate = restTemplate;
	}

	protected Object createMessage(ClientApplicationEvent event) {
		Map<String, Object> messageJson = new HashMap<>();
		messageJson.put("username", username);
		if (icon != null) {
protected Object createMessage(ClientApplicationEvent event) {
		attachments.put("color", getColor(event));
		attachments.put("mrkdwn_in", Collections.singletonList("text"));
		messageJson.put("attachments", Collections.singletonList(attachments));
		return messageJson;
	}

	protected String getText(ClientApplicationEvent event) {

import org.junit.Before;
import org.junit.Test;
import org.springframework.web.client.RestTemplate;

import de.codecentric.boot.admin.event.ClientApplicationStatusChangedEvent;
private ClientApplicationStatusChangedEvent getEvent(StatusInfo infoDown, Status
				infoDown, infoUp);
	}

	private Object expectedMessage(String color, String user, @Nullable String icon,
			@Nullable String channel, String message) {
		Map<String, Object> messageJson = new HashMap<>();
		messageJson.put("username", user);
private Object expectedMessage(String color, String user, @Nullable String icon,

		messageJson.put("attachments", Collections.singletonList(attachments));

		return messageJson;
	}

	private String standardMessage(String status, String appName, String id) {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 */
package net.tridentsdk.meta.nbt;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.Setter;

import javax.annotation.concurrent.Immutable;
import javax.annotation.concurrent.NotThreadSafe;
 * @author TridentSDK
 * @since 0.3-alpha-DP
 */
@NotThreadSafe
@AllArgsConstructor
public class Tag {
public Object read(String name, DataInputStream stream) {
            public void write(Object o, DataOutputStream stream) {
                Compound compound = (Compound) o;
                for (Map.Entry<String, Tag> entry : compound.getEntries().entrySet()) {
                    System.out.println("W: " + entry.getKey() + " - " + entry.getValue().getObject() + " (" + entry.getValue().getType() + ")");
                    entry.getValue().getType().writeFully(entry.getKey(), entry.getValue().getObject(), stream);
                }
                END.writeFully("", null, stream);
public static HoverEvent achievement(String achievement) {
        return new HoverEvent(HoverAction.SHOW_ACHIEVEMENT, new JsonPrimitive(achievement));
    }

    public static HoverEvent item(Item item) {
        JsonObject json = new JsonObject();
        json.addProperty("id", item.getSubstance().toString());

        return new HoverEvent(HoverAction.SHOW_ITEM, json);
    }

    /**
/*
 * Trident - A Multithreaded Server Alternative
 * Copyright 2017 The TridentSDK Team
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package net.tridentsdk.util;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.concurrent.ThreadSafe;
import java.util.Comparator;
import java.util.Iterator;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.function.BiFunction;
import java.util.function.Supplier;

/**
 * A cache that expires stored instances after specified
 * timeout.
 *
 * @author TridentSDK
 * @since 0.5-alpha
 * @param <T> The key type of the cache
 * @param <M> The value type of the cache
 */
@ThreadSafe
public class Cache<T, M> {
    /**
     * Limiting value used to prevent eviction from taking
     * FOREVER.
     */
    private static final int MAX_EVICTION_ITERATIONS = 100;
    /**
     * A no-op removal listener used for evictions that
     * require no further action
     */
    private static final BiFunction NOP = (a, b) -> null;

    /**
     * The internal mapping of the cache entries
     */
    private final ConcurrentHashMap<T, Tuple<M, Long>> cache = new ConcurrentHashMap<>();
    /**
     * The amount of time, in millis, in which a cache entry
     * will timeout
     */
    private final long timeout;
    /**
     * The the expiry listener, which is notified whenever
     * an entry is evicted do to a timeout
     */
    private final BiFunction<T, M, Boolean> expire;

    /**
     * Builds a cache with the given number of milliseconds
     * before its entries timeout, performing no further
     * action upon entry eviction.
     *
     * @param timeout the amount of time in which cache
     * entries will timeout
     */
    public Cache(long timeout) {
        this(timeout, NOP);
    }

    /**
     * Constructs a cache in which entries expire within the
     * given timeout and perform the action given by the
     * expiry listener when evicted.
     *
     * @param timeout the amount of time in which the cache
     * entries will timeout
     * @param expire the expiry listener
     */
    public Cache(long timeout, BiFunction<T, M, Boolean> expire) {
        this.timeout = timeout;
        this.expire = expire;
    }

    /**
     * Obtains the value associated with the entry that has
     * the given key, or else inserts a new cache entry
     * with the given key and the value supplied by the
     * loader.
     *
     * @param key the key with which to find the cache entry
     * @param loader the computation which is run in order
     * to find the value if the entry does not exist
     * @return the cached or computed value
     */
    @Nonnull
    public M get(T key, Supplier<M> loader) {
        this.scan();
        Tuple<M, Long> instance = this.cache.get(key);

        // If the given value does not exist,
        // Perform computation (do not use raw insert
        // because computeIfAbsent will recover from races)
        // If the given value DOES exist,
        // If timed out, notify the listener (ensuring that
        // a remove works in order to prevent prescan races)
        // and compute
        // (again using compute to recover from races)
        // Otherwise, value exists and is valid, return it

        if (instance == null) {
            return this.cache.computeIfAbsent(key, t -> new Tuple<>(loader.get(), System.currentTimeMillis())).getA();
        } else {
            if (System.currentTimeMillis() - instance.getB() > this.timeout) {
                this.cache.computeIfPresent(key, (k, v) -> this.expire.apply(key, instance.getA()) ? null : instance);
                return this.cache.computeIfAbsent(key, t -> new Tuple<>(loader.get(), System.currentTimeMillis())).getA();
            }

            return instance.getA();
        }
    }

    /**
     * Computes the value at this cache entry, returning the
     * new value to put into or returning {@code null} to
     * remove it.
     *
     * @param key the key to check
     * @param loader the value loader
     * @return the value, or {@code null} if it is now or
     * was {@code null}
     */
    public M compute(T key, BiFunction<T, M, M> loader) {
        Tuple<M, Long> compute = this.cache.compute(key, (k, v) -> {
            if (v == null) {
                M apply = loader.apply(k, null);
                return new Tuple<>(apply, System.currentTimeMillis());
            } else {
                M apply = loader.apply(k, v.getA());
                return apply == null ? null : new Tuple<>(apply, System.currentTimeMillis());
            }
        });

        return compute == null ? null : compute.getA();
    }

    /**
     * Obtains the value of the cache entry with the given
     * key, or {@code null} if it does not exist, or if the
     * cache entry has already expired.
     *
     * @param key the key with which to find the value
     * @return the value associated with the given key, or
     * {@code null} if not present or expired
     */
    @Nullable
    public M get(T key) {
        this.scan();
        Tuple<M, Long> instance = this.cache.get(key);

        // If null, no entry contained. Return null.
        // Otherwise, check if expired
        // Notify listener, and use remove(key, value) to
        // recover from races (relies on all Tuples being
        // unique), ensure removal works before notifying
        // in case other threads prescan
        // Then return null to indicate no non-expired value
        // If valid and non-expired, all return the value

        if (instance == null) {
            return null;
        }

        if (System.currentTimeMillis() - instance.getB() > this.timeout) {
            Tuple<M, Long> tuple = this.cache.computeIfPresent(key, (k, v) -> this.expire.apply(key, instance.getA()) ? null : instance);
            return tuple == null ? null : tuple.getA();
        }

        return instance.getA();
    }

    /**
     * Inserts the given key and value pair into a cache
     * entry, regardless of whether the entry already
     * exists.
     *
     * @param key the key which to associate with the value
     * @param value the value which to associate with the
     * key
     */
    public void put(T key, M value) {
        this.scan();
        this.cache.put(key, new Tuple<>(value, System.currentTimeMillis()));
    }

    /**
     * Attempt to scan and remove cache entries that have
     * already expired.
     */
    private void scan() {
        long time = System.currentTimeMillis();

        int rounds = 0;
        for (Iterator<Map.Entry<T, Tuple<M, Long>>> it =
             this.cache.entrySet().
                stream().
                sorted(Comparator.comparingLong(o -> o.getValue().getB())).
                filter(e -> time - e.getValue().getB() > this.timeout).
                iterator();
             it.hasNext() && rounds < MAX_EVICTION_ITERATIONS;
             rounds++) {
            Map.Entry<T, Tuple<M, Long>> e = it.next();

            this.cache.computeIfPresent(e.getKey(), (k, v) -> this.expire.apply(e.getKey(), e.getValue().getA()) ? null : e.getValue());
        }
    }
}
     * @return the container world
     */
    World getWorld();
}
     *
     * @return the world's directory
     */
    Path getWorldDirectory();

    /**
     * Saves this world to the region files in the world
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
buildscript {
	repositories {
	    jcenter()
	    maven { url = "http://files.minecraftforge.net/maven" }
	}
	dependencies {
		classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
	}
}
apply plugin: 'net.minecraftforge.gradle.forge'
//Only edit below this line, the above code adds and enables the nessasary things for Forge to be setup.


version = "6.0.0.3"
group= "landmaster.plustic" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "plustic"

repositories {
		url 'http://dvs1.progwml6.com/files/maven'
	}
	maven {
        url = "http://maven.covers1624.net"
    }
}

sourceCompatibility = targetCompatibility = "1.8" // Need this here so eclipse task generates correctly.
dependencies {
	// or you may define them like so..
	//compile "some.group:artifact:version:classifier"
	//compile "some.group:artifact:version"
	  
	// real examples
	//compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
	//compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env
dependencies {
	// http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
	// http://www.gradle.org/docs/current/userguide/dependency_management.html
	
	deobfCompile "slimeknights.mantle:Mantle:1.12-1.3.0.15"
	deobfCompile "slimeknights:TConstruct:1.12-2.7.1.7"
	deobfCompile "cofh:RedstoneFlux:1.12-2.0.0.1:universal"
}

processResources {
	exclude '**/*.xcf'
	
processResources {
	
	// replace stuff in mcmod.info, nothing else
	from(sourceSets.main.resources.srcDirs) {
	    include 'mcmod.info'
	            
	    // replace version and mcversion
	    expand 'version':project.version, 'mcversion':project.minecraft.version
	}
	    
	// copy everything else, thats not the mcmod.info
	from(sourceSets.main.resources.srcDirs) {
	    exclude 'mcmod.info'
	}
}

jar {
	manifest {
	    attributes 'FMLAT': 'plustic_at.cfg'
	}
}
public void init(FMLInitializationEvent event) {
		
		IModule.modules.forEach(IModule::init2);
		
		integrate(materials, materialIntegrations);
	}
	
	@EventHandler
private static void preIntegrate(Map<String,Material> materials,
					} else {
						mi = new MaterialIntegration(v);
					}
					mi.preInit();
					materialIntegrations.put(k, mi);
				});
			}
		});
	}
	
	private static void integrate(Map<String,Material> materials,
			Map<String,MaterialIntegration> materialIntegrations) {
		materialIntegrations.forEach((k, mi) -> {
			mi.integrateRecipes();
		});
		
		Utils.displace(TinkerMaterials.wood.getIdentifier()); // so that natura woods are prioritized
	}
}

	public static final String MODID = "plustic";
	public static final String NAME = "PlusTiC";
	public static final String VERSION = "6.0.0.3";
	
	// TODO add dependencies when needed
	public static final String DEPENDS = "required-after:mantle;"
	+ "required-after:tconstruct@[1.12-2.7.1.7,);required-after:forge@[14.21.1.2387,);"
	+ "after:mekanism;after:biomesoplenty;"
	+ "after:botania;after:libvulpes;after:redstoneflux;"
	+ "after:armorplus;after:enderio;after:projectred-exploration;"
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void run() {
            Thread.sleep(200);
          }

          pathChildrenCache =
              new PathChildrenCache(curatorFramework, ZookeeperPath.ORACLE_SERVER, true);
          pathChildrenCache.getListenable().addListener(this);
          pathChildrenCache.start();

          leaderSelector = new LeaderSelector(curatorFramework, ZookeeperPath.ORACLE_SERVER, this);

          connect();
        }
        doWork();
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ssh_test(){
    fi
}

echo "[INFO]Checking agent-machine SSH reachable status..."

if [ "$CLOUD_PROVIDER" = "local" ]; then
    echo "[INFO]All agent-machines are SSH reachable."
import com.hazelcast.simulator.coordinator.tasks.TerminateWorkersTask;
import com.hazelcast.simulator.protocol.CoordinatorClient;
import com.hazelcast.simulator.protocol.core.SimulatorAddress;
import com.hazelcast.simulator.utils.CommonUtils;
import com.hazelcast.simulator.vendors.VendorDriver;
import com.hazelcast.simulator.worker.operations.ExecuteScriptOperation;
import org.apache.log4j.Logger;

import java.io.Closeable;
import java.io.File;
import java.rmi.AlreadyBoundException;
private void stopTests() {
    private void startClient() throws Exception {
        // todo: should be async to speed things up
        for (AgentData agent : registry.getAgents()) {
            client.connectToAgentBroker(agent.getAddress(), agent.getPublicAddress());
        }

        LOGGER.info("Remote client started successfully!");
public void run() {
        private final MessageConsumer replyQueueConsumer;
        private final MessageConsumer coordinatorConsumer;
        private final SimulatorAddress agentAddress;

        private RemoteBroker(String ip, SimulatorAddress agentAddress) throws JMSException {
            this.agentAddress = agentAddress;

            connection = connectionFactory.newConnection("tcp://" + ip + ":" + remoteBrokerPort, this);
            session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);

            agentProducer = session.createProducer(session.createTopic("agents"));
private RemoteBroker(String ip, SimulatorAddress agentAddress) throws JMSExcepti
        }

        @Override
        public void onException(JMSException exception) {
            close();

            LOGGER.fatal("Lost connection to remote broker [" + agentAddress + "]", exception);
            remoteBrokers.remove(agentAddress.getAgentIndex());

            FailureOperation failureOperation = new FailureOperation(
                    "Lost connection to " + agentAddress,
                    FailureType.MESSAGING_EXCEPTION,
                    null,
                    agentAddress.toString(),
                    exception);

            if (failureCollector != null) {
                failureCollector.notify(failureOperation);
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public boolean chooseTarget(Outcome outcome, Target target, Ability source, Game
            }
            return target.isChosen();
        }

        throw new IllegalStateException("Target wasn't handled. class:" + target.getClass().toString());
    }

package mage.cards.t;

import java.util.UUID;
import mage.constants.CardType;
import mage.abilities.common.EntersBattlefieldTappedAbility;
import mage.abilities.keyword.TransmuteAbility;
import mage.abilities.mana.BlueManaAbility;
import mage.cards.CardImpl;
import mage.cards.CardSetInfo;

/**
 *
public class TolariaWest extends CardImpl {

    public TolariaWest(UUID ownerId, CardSetInfo setInfo) {
        super(ownerId,setInfo,new CardType[]{CardType.LAND},"");

        // Tolaria West enters the battlefield tapped.
        this.addAbility(new EntersBattlefieldTappedAbility());
        // {tap}: Add {U} to your mana pool.
        this.addAbility(new BlueManaAbility());
        // Transmute {1}{U}{U}
        this.addAbility(new TransmuteAbility("{1}{U}{U}"));
public boolean canTarget(UUID id, Ability source, Game game) {
        }
        StackObject stackObject = game.getStack().getStackObject(id);
        return stackObject != null && stackObject.getStackAbility() != null && stackObject.getStackAbility().getAbilityType() == AbilityType.ACTIVATED
                && filter.match(((ActivatedAbility) stackObject), game);
    }

    @Override
public boolean canChoose(UUID sourceControllerId, Game game) {
        for (StackObject stackObject : game.getStack()) {
            if (stackObject.getStackAbility().getAbilityType() == AbilityType.ACTIVATED
                    && game.getState().getPlayersInRange(sourceControllerId, game).contains(stackObject.getStackAbility().getControllerId())
                    && filter.match(((ActivatedAbility) stackObject), game)) {
                possibleTargets.add(stackObject.getStackAbility().getId());
            }
        }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import io.janusproject.kernel.bic.internaleventdispatching.AgentInternalEventsDispatcher;
import io.janusproject.services.logging.LogService;
import io.janusproject.services.spawn.SpawnService;
import io.janusproject.services.spawn.SpawnService.AgentKillException;

import io.sarl.core.AgentSpawned;
import io.sarl.core.Destroy;
private void fireEnqueuedEvents(InternalEventBusSkill skill) {
		}

		@SuppressWarnings("synthetic-access")
		private void killOwner(InternalEventBusSkill skill) {
			try {
				skill.spawnService.killAgent(this.aid);
			} catch (AgentKillException e) {
				skill.logger.error(Messages.InternalEventBusSkill_2, this.aid, e);
			}
		}

		void killOrMarkAsKilled() {
			this.isKilled.set(true);
			final OwnerState state = getOwnerState();
			assert state != null;
			if (state == OwnerState.ALIVE) {
				killOwner(InternalEventBusSkill.this);
			}

		}

	}
public void killMe() {
		ExecutorService.neverReturn();
	}

	/**
	 * This runtie exception is thrown when an agent cannot be killed.
	 *
	 * @author $Author: sgalland$
	 * @version $FullVersion$
	 * @mavengroupid $GroupId$
	 * @mavenartifactid $ArtifactId$
	 */
	public static class AgentKillException extends RuntimeException {

		private static final long serialVersionUID = 3186824315988212481L;

		/**
		 * Construct.
		 *
		 * @param exception - cause
		 */
		AgentKillException(io.janusproject.services.spawn.SpawnService.AgentKillException exception) {
			super(exception.getMessage(), exception);
		}

		/**
		 * Replies the agent that cannot be killed.
		 *
		 * @return the agent.
		 */
		public UUID getAgent() {
			return ((io.janusproject.services.spawn.SpawnService.AgentKillException) getCause()).getAgent();
		}

	}

}
protected void fireAgentSpawnedInAgent(UUID spawningAgent, AgentContext context,
	}

	@Override
	public void killAgent(UUID agentID) throws AgentKillException {
		final boolean error = !isRunning();

		// We should check if it is possible to kill the agent BEFORE killing it.
public void killAgent(UUID agentID) throws AgentKillException {
			if (error) {
				throw new SpawnServiceStopException(agentID);
			}
		} else if (!foundAgent) {
			throw new AgentKillException(agentID);
		}
	}

	/**
/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2017 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.janusproject.services.spawn;

import org.eclipse.osgi.util.NLS;

/** Messages.
 *
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@SuppressWarnings("all")
public class Messages extends NLS {
	private static final String BUNDLE_NAME = "io.janusproject.services.spawn.messages"; //$NON-NLS-1$
	public static String SpawnService_0;
	public static String SpawnService_1;
	static {
		// initialize resource bundle
		NLS.initializeMessages(BUNDLE_NAME, Messages.class);
	}

	private Messages() {
	}
}

package io.janusproject.services.spawn;

import java.text.MessageFormat;
import java.util.List;
import java.util.UUID;

	 * Kill the agent with the given identifier.
	 *
	 * @param agentID - the identifier of the agent to kill.
	 * @throws AgentKillException - thrown when the agent cannot be killed.
	 */
	void killAgent(UUID agentID) throws AgentKillException;

	/**
	 * Add a listener on the changes in the current state of an agent.
	 */
	void removeKernelAgentSpawnListener(KernelAgentSpawnListener listener);

	/**
	 * Exception occurs when an agent cannot be killed.
	 *
	 * @author $Author: sgalland$
	 * @version $FullVersion$
	 * @mavengroupid $GroupId$
	 * @mavenartifactid $ArtifactId$
	 */
	class AgentKillException extends Exception {

		private static final long serialVersionUID = -7911946040378324212L;

		private final UUID agent;

		/**
		 * @param agent - id of the agent that cannot be killed.
		 */
		public AgentKillException(UUID agent) {
			super(MessageFormat.format(Messages.SpawnService_0, agent));
			this.agent = agent;
			fillInStackTrace();
		}

		/**
		 * @param agent - id of the agent that cannot be killed.
		 * @param cause - the exception that is the cause of the killing discarding.
		 */
		public AgentKillException(UUID agent, Throwable cause) {
			super(MessageFormat.format(Messages.SpawnService_1, agent, cause), cause);
			this.agent = agent;
		}

		/**
		 * Replies the id of the agent that cannot be skilled.
		 *
		 * @return the agent id.
		 */
		public UUID getAgent() {
			return this.agent;
		}

	}

}
SpawnService_0=Cannot kill the agent ''{0}''
SpawnService_1=Cannot kill the agent ''{0}'': {1}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    private volatile boolean paused;

    public void pause() {
        sync();
        paused = true;
    }

public void run() throws IOException, IllegalAccessException, IllegalArgumentExc
        callback.onCompleted(hostRunnable, startOffset, endOffset);
    }

    public FileDownloadOutputStream getOutputStream() {
        return outputStream;
    }

    private final FileDownloadDatabase database;
    private volatile long lastSyncBytes = 0;
    private volatile long lastSyncTimestamp = 0;
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
private void renamePet(final UltraPlayer ultraPlayer) {
                if (event.getName() == null) {
                    return;
                }
                if (SettingsManager.getConfig().getBoolean("Pets-Rename.Requires-Money.Enabled") && UltraCosmeticsData.get().getPlugin().isVaultLoaded()) {
                    event.setWillClose(false);
                    event.setWillDestroy(false);
                    buyRenamePet(ultraPlayer, event.getName());
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public static String inferFullActionPath(String actionPath) {

    public static String inferFullActionPath(String actionPath, $.Func0<String> currentActionPathProvider) {
        String handler, controller = null;
        int pos = actionPath.indexOf(".");
        if (pos < 0) {
            handler = actionPath;
public static String inferFullActionPath(String actionPath, $.Func0<String> curr
            }
        }
        String currentPath = currentActionPathProvider.apply();
        pos = currentPath.lastIndexOf(".");
        String currentPathWithoutHandler = currentPath.substring(0, pos);
        if (null == controller) {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import net.milkbowl.vault.economy.EconomyResponse;
import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.Material;
import org.bukkit.command.CommandSender;
import org.bukkit.entity.Player;
import org.bukkit.event.inventory.ClickType;
				if (!kit.getFlag(VISIBLE, world)) continue;
				if (kit.getFlag(FREE, world) || user.isUnlocked(kit)) continue;

				menuObject = new MenuObject(Material.SULPHUR, (byte) 0, ChatColor.RED + kit.getDisplayName(player.getWorld().getName()), KitManager.getKitDescription(player, kit, world));
				menuObject.setActionListener(buyInventoryListener);

				menu.addMenuObject(menuObject);
import java.util.*;
import java.util.stream.Collectors;

import static hu.tryharddevs.advancedkits.utils.localization.I18n.getMessage;

public class EditCommand implements ActionListener
	@CommandManager.Cmd(cmd = "edit", help = "Edit kit", longhelp = "This command opens up a gui where you can edit kits.", permission = "edit", args = "[kitname] [world]", only = CommandManager.CommandOnly.PLAYER)
	public static CommandManager.CommandFinished editCommand(CommandSender sender, Object[] args)
	{
		if (args.length == 0) {
			Player    player    = (Player) sender;
			Inventory inventory = Bukkit.createInventory(player, !inEdit.containsKey(player.getUniqueId()) ? ((int) (Math.ceil((double) KitManager.getKits().size() / 9)) * 9) : 9, "AdvancedKitsReborn - Edit kit");
			MenuObject menuObject;
			if (!inEdit.containsKey(player.getUniqueId())) {
				for (Kit kit : KitManager.getKits()) {
					menuObject = new MenuObject(Material.STORAGE_MINECART, (byte) 0, ChatColor.GREEN + kit.getDisplayName(player.getWorld().getName()), Arrays.asList(ChatColor.BLACK + "", ChatColor.GREEN + "Click to edit"));
					menuObject.setActionListener(editCommandListener);

					menu.addMenuObject(menuObject);
			return CommandManager.CommandFinished.DONE;
		}

		String world = "global";
		if (args.length == 2) {
			world = String.valueOf(args[1]);
		}
import hu.tryharddevs.advancedkits.kits.flags.Flag;
import hu.tryharddevs.advancedkits.kits.flags.InvalidFlagValueException;
import org.bukkit.Bukkit;
import org.bukkit.Material;
import org.bukkit.command.CommandSender;
import org.bukkit.entity.Player;
		}
		Flag flag = DefaultFlags.fuzzyMatchFlag(String.valueOf(args[1]));
		if (String.valueOf(args[1]).equalsIgnoreCase("help")) {
			if (Objects.isNull(flag)) {
				player.sendMessage(AdvancedKitsMain.advancedKits.chatPrefix + " " + getMessage("flagNotFound"));
			}
			player.sendMessage(AdvancedKitsMain.advancedKits.chatPrefix + " " + getMessage("availableFlags", Arrays.stream(DefaultFlags.getFlags()).map(Flag::getName).collect(Collectors.joining(","))));
			return CommandManager.CommandFinished.DONE;
		}
		Object value = args[2];
		String world = "global";
		if (args.length > 3) {
			world = String.valueOf(args[3]);
			if (Objects.isNull(Bukkit.getWorld(world))) {
			}
		}

		if (flag.getName().equalsIgnoreCase("firework")) {
			if (Objects.isNull(player.getInventory().getItemInMainHand()) || !player.getInventory().getItemInMainHand().getType().equals(Material.FIREWORK)) {
				player.sendMessage(AdvancedKitsMain.advancedKits.chatPrefix + " " + getMessage("notFirework"));
				return CommandManager.CommandFinished.DONE;
			}
			kit.setFlag(flag, world, flag.parseItem(player));
		}
		else {
			try {
				kit.setFlag(flag, world, flag.parseInput(String.valueOf(value)));
			}
			catch (InvalidFlagValueException e) {
				player.sendMessage(e.getMessages());
				return CommandManager.CommandFinished.DONE;
			}
		}

		player.sendMessage(AdvancedKitsMain.advancedKits.chatPrefix + " " + getMessage("flagSet", flag.getName(), value, kit.getDisplayName(world), world));
		return CommandManager.CommandFinished.DONE;
	}
				if (!kit.getFlag(VISIBLE, world)) continue;
				if (!kit.getFlag(FREE, world) && !user.isUnlocked(kit)) continue;

				menuObject = new MenuObject(Material.STORAGE_MINECART, (byte) 0, ChatColor.GREEN + kit.getDisplayName(player.getWorld().getName()), KitManager.getKitDescription(player, kit, world));
				menuObject.setActionListener(useInventoryListener);

				menu.addMenuObject(menuObject);

import java.util.Objects;

import static hu.tryharddevs.advancedkits.kits.flags.DefaultFlags.VISIBLE;
import static hu.tryharddevs.advancedkits.utils.localization.I18n.getMessage;

	private static ViewCommand viewInventoryListener = new ViewCommand();

	@CommandManager.Cmd(cmd = "view", help = "View kits", longhelp = "This command opens up a gui where you can view kits.", permission = "view", args = "[kitname]", only = CommandManager.CommandOnly.PLAYER)
	public static CommandManager.CommandFinished buyCommand(CommandSender sender, Object[] args)
	{
		Player player = (Player) sender;
		User   user   = User.getUser(player.getUniqueId());
			for (Kit kit : KitManager.getKits()) {
				if (!kit.getFlag(VISIBLE, world)) continue;

				menuObject = new MenuObject(Material.SULPHUR, (byte) 0, ChatColor.WHITE + kit.getDisplayName(player.getWorld().getName()), KitManager.getKitDescription(player, kit, world));
				menuObject.setActionListener(viewInventoryListener);

				menu.addMenuObject(menuObject);
package hu.tryharddevs.advancedkits.kits.flags;

import org.bukkit.Sound;
import org.bukkit.potion.PotionEffect;
import org.inventivetalent.particle.ParticleEffect;

	public static final DoubleFlag DELAY = new DoubleFlag("delay", 0.0);

	public static final ItemStackFlag FIREWORK = new ItemStackFlag("firework");

	public static final ListFlag<String>         CUSTOMDESCRIPTION = new ListFlag<>("customdescription", new StringFlag(null));
	public static final ListFlag<ParticleEffect> PARTICLEEFFECTS   = new ListFlag<>("particleeffects", new ParticleEffectFlag(null));
	public static final ListFlag<Sound>          SOUNDEFFECTS      = new ListFlag<>("soundeffects", new SoundEffectFlag(null));

	public static final Flag<?>[] flagsList = new Flag<?>[]{VISIBLE, FIRSTJOIN, AUTOEQUIPARMOR, FREE, USEONBUY, CLEARINVENTORY, SPEWITEMS, DISPLAYNAME, PERUSECOST, COST, MAXUSES, DELAY, FIREWORK, CUSTOMDESCRIPTION, COMMANDS, MESSAGES, DISABLEDWORLDS, POTIONEFFECTS, PARTICLEEFFECTS, SOUNDEFFECTS};

	public static Flag<?>[] getFlags()
	{
public T chooseValue(Collection<T> values)
	public abstract T parseInput(String input) throws InvalidFlagValueException;

	@Nullable
	public T parseItem(Player player)
	{
		return null;
	}
noPermission=&cYou don''t have the permission for this.
flagNotFound=&cFlag not found.
worldNotFound=&cWorld not found.
notFirework=&cYou need to hold the firework in your hand.
notEnoughMoney=&cYou don''t have enought money. &7({0})
notEnoughSpace=&cYou need &f{0}&c space in your inventory.
emptyInventory=&cYou don''t have anything in your inventory.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 */
package com.speedment.tool.core.internal.component;

import com.speedment.generator.core.GeneratorBundle;
import com.speedment.runtime.core.ApplicationBuilder;
import com.speedment.runtime.core.Speedment;
import com.speedment.tool.core.ToolBundle;
import com.speedment.tool.core.component.VersionComponent;
import org.junit.Test;

import java.net.UnknownHostException;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

/**
 *
 * @author  Emil Forslund
 * @since   3.0.0
 */
public class VersionComponentImplTest {

    /**
     * Test of latestVersion method, of class VersionComponentImpl.
     */
    @Test
    public void testLatestVersion() {
        System.out.println("Determining the latest version of Speedment.");
        final Speedment speedment = ApplicationBuilder.empty()
            .withBundle(GeneratorBundle.class)
            .withBundle(ToolBundle.class)
public void testLatestVersion() {
        
        try {
            final String latest = version.latestVersion().get(2, TimeUnit.SECONDS);
            System.out.println("The latest released version of Speedment is " + latest + ".");
        } catch (final ExecutionException | InterruptedException ex) {
            if (hasCause(ex, UnknownHostException.class)) {
                System.out.println("UnknownHostException - not connected to the Internet?");
            } else {
                throw new RuntimeException(ex);
            }
        } catch (final TimeoutException ex ) {
            System.out.println("Connection timed out before a version could be established");
        }
    }

    private static boolean hasCause(Exception ex, Class<? extends Throwable> c) {
        Throwable cause = ex.getCause();
        while (cause != null) {
            if (c.equals(cause.getClass())) {
                return true;
            }
            cause = cause.getCause();
        }
        return false;
    }

}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
and adjust the build number accordingly -->
                                <includes>
                                    <include>com.feildmaster.lib:EnhancedConfiguration</include>
                                    <include>com.dumptruckman.minecraft:Logging</include>
                                    <include>net.minidev:json-smart</include>
                                </includes>
                            </artifactSet>
and adjust the build number accordingly -->
                                    </shadedPattern>
                                </relocation>
                                <relocation>
                                    <pattern>com.dumptruckman.minecraft.util.DebugLog</pattern>
                                    <shadedPattern>com.onarandombox.MultiverseCore.utils.DebugFileLogger</shadedPattern>
                                </relocation>
and adjust the build number accordingly -->
            <scope>provided</scope>
        </dependency>
        <!-- End of WorldInventories Dependency -->
        <!-- Start of jsonsmart Dependency -->
        <dependency>
            <groupId>net.minidev</groupId>
            <artifactId>json-smart</artifactId>
            <version>1.1.1</version>
            <type>jar</type>
            <scope>compile</scope>
        </dependency>
        <!-- End of jsonsmart Dependency -->
        <!-- Start of Test Dependencies -->
        <dependency>
            <groupId>junit</groupId>
package com.onarandombox.multiverseinventories.util;

import com.google.common.io.Files;
import org.apache.commons.lang.Validate;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;

public class EncodedJsonConfiguration extends JsonConfiguration {

    private final Charset charset;

    public EncodedJsonConfiguration(File file, String charset) throws UnsupportedEncodingException, IllegalCharsetNameException {
        super(file);
        this.charset = Charset.forName(charset);
    }

    @Override
    public void save(File file) throws IOException {
        Validate.notNull(file, "File cannot be null");

        Files.createParentDirs(file);

        String data = saveToString();

        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), charset));

        try {
            writer.write(data);
        } finally {
            writer.close();
        }
    }
}
package com.onarandombox.multiverseinventories.util;

import com.dumptruckman.minecraft.util.Logging;
import net.minidev.json.parser.JSONParser;
import net.minidev.json.parser.ParseException;
import org.apache.commons.lang.Validate;
import org.bukkit.Bukkit;
import org.bukkit.configuration.ConfigurationSection;
import org.bukkit.configuration.InvalidConfigurationException;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.configuration.serialization.ConfigurationSerializable;
import org.bukkit.configuration.serialization.ConfigurationSerialization;
import org.json.simple.JSONValue;
import org.yaml.snakeyaml.error.YAMLException;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;

public class JsonConfiguration extends FileConfiguration {

    protected static final String BLANK_CONFIG = "{}\n";
    //private static final JSONParser JSON_PARSER = ;

    @Override
    public String saveToString() {
        String dump = JSONValue.toJSONString(buildMap(getValues(false)));

        if (dump.equals(BLANK_CONFIG)) {
            dump = "";
        }

        return dump;
    }

    private Map<String, Object> buildMap(final Map<?, ?> map) {
        final Map<String, Object> result = new LinkedHashMap<String, Object>(map.size());
        try {
            for (final Map.Entry<?, ?> entry : map.entrySet()) {
                if (entry.getValue() instanceof ConfigurationSection) {
                    result.put(entry.getKey().toString(), buildMap(((ConfigurationSection) entry.getValue()).getValues(false)));
                } else if (entry.getValue() instanceof Map) {
                    result.put(entry.getKey().toString(), buildMap(((Map) entry.getValue())));
                } else if (entry.getValue() instanceof List) {
                    result.put(entry.getKey().toString(), buildList((List) entry.getValue()));
                } else if (entry.getValue() instanceof ConfigurationSerializable) {
                    ConfigurationSerializable serializable = (ConfigurationSerializable) entry.getValue();
                    Map<String, Object> values = new LinkedHashMap<String, Object>();
                    values.put(ConfigurationSerialization.SERIALIZED_TYPE_KEY, ConfigurationSerialization.getAlias(serializable.getClass()));
                    values.putAll(serializable.serialize());
                    result.put(entry.getKey().toString(), buildMap(values));
                } else {
                    result.put(entry.getKey().toString(), entry.getValue());
                }
            }
        } catch (Exception e) {
            Logging.getLogger().log(Level.WARNING, "Error while building configuration map.", e);
        }
        return result;
    }

    private List<Object> buildList(final List<?> list) {
        final List<Object> result = new ArrayList<Object>(list.size());
        try {
            for (final Object o : list) {
                if (o instanceof ConfigurationSection) {
                    result.add(buildMap(((ConfigurationSection) o).getValues(false)));
                } else if (o instanceof Map) {
                    result.add(buildMap(((Map) o)));
                } else if (o instanceof List) {
                    result.add(buildList((List) o));
                } else if (o instanceof ConfigurationSerializable) {
                    ConfigurationSerializable serializable = (ConfigurationSerializable) o;
                    Map<String, Object> values = new LinkedHashMap<String, Object>();
                    values.put(ConfigurationSerialization.SERIALIZED_TYPE_KEY, ConfigurationSerialization.getAlias(serializable.getClass()));
                    values.putAll(serializable.serialize());
                    result.add(buildMap(values));
                } else {
                    result.add(o);
                }
            }
        } catch (Exception e) {
            Logging.getLogger().log(Level.WARNING, "Error while building configuration list.", e);
        }
        return result;
    }

    @Override
    public void loadFromString(String contents) throws InvalidConfigurationException {
        Validate.notNull(contents, "Contents cannot be null");
        if (contents.isEmpty()) {
            return;
        }

        Map<?, ?> input;
        try {
            input = (Map<?, ?>) new JSONParser(JSONParser.USE_INTEGER_STORAGE).parse(contents);
        } catch (ParseException e) {
            throw new InvalidConfigurationException("Invalid JSON detected.");
        } catch (ClassCastException e) {
            throw new InvalidConfigurationException("Top level is not a Map.");
        }

        if (input != null) {
            convertMapsToSections(input, this);
        }
    }

    protected void convertMapsToSections(Map<?, ?> input, ConfigurationSection section) {
        Object result = dealWithSerializedObjects(input);
        if (result instanceof Map) {
            input = (Map<?, ?>) result;
            for (Map.Entry<?, ?> entry : input.entrySet()) {
                String key = entry.getKey().toString();
                Object value = entry.getValue();

                if (value instanceof Map) {
                    convertMapsToSections((Map<?, ?>) value, section.createSection(key));
                } else {
                    section.set(key, value);
                }
            }
        } else {
            section.set("", result);
        }
    }

    protected Object dealWithSerializedObjects(final Map<?, ?> input) {
        final Map<String, Object> output = new LinkedHashMap<String, Object>(input.size());
        for (final Map.Entry<?, ?> e : input.entrySet()) {
            if (e.getValue() instanceof Map) {
                output.put(e.getKey().toString(), dealWithSerializedObjects((Map<?, ?>) e.getValue()));
            }  else if (e.getValue() instanceof List) {
                output.put(e.getKey().toString(), dealWithSerializedObjects((List<?>) e.getValue()));
            } else {
                output.put(e.getKey().toString(), e.getValue());
            }
        }
        if (output.containsKey(ConfigurationSerialization.SERIALIZED_TYPE_KEY)) {
            try {
                return ConfigurationSerialization.deserializeObject(output);
            } catch (IllegalArgumentException ex) {
                throw new YAMLException("Could not deserialize object", ex);
            }
        }
        return output;
    }

    protected Object dealWithSerializedObjects(final List<?> input) {
        final List<Object> output = new ArrayList<Object>(input.size());
        for (final Object o : input) {
            if (o instanceof Map) {
                output.add(dealWithSerializedObjects((Map<?, ?>) o));
            } else if (o instanceof List) {
                output.add(dealWithSerializedObjects((List<?>) o));
            } else {
                output.add(o);
            }
        }
        return output;
    }

    @Override
    protected String buildHeader() {
        return "";
    }

    @Override
    public JsonConfigurationOptions options() {
        if (options == null) {
            options = new JsonConfigurationOptions(this);
        }

        return (JsonConfigurationOptions) options;
    }

    public JsonConfiguration(final File file) {
        try {
            load(file);
        } catch (FileNotFoundException ex) {
        } catch (IOException ex) {
            Bukkit.getLogger().log(Level.SEVERE, "Cannot load " + file, ex);
        } catch (InvalidConfigurationException ex) {
            Bukkit.getLogger().log(Level.SEVERE, "Cannot load " + file , ex);
        }
    }
}
package com.onarandombox.multiverseinventories.util;

import org.bukkit.configuration.file.FileConfigurationOptions;

public class JsonConfigurationOptions extends FileConfigurationOptions {

    protected JsonConfigurationOptions(JsonConfiguration configuration) {
        super(configuration);
    }

    @Override
    public JsonConfiguration configuration() {
        return (JsonConfiguration) super.configuration();
    }

    @Override
    public JsonConfigurationOptions copyDefaults(boolean value) {
        super.copyDefaults(value);
        return this;
    }

    @Override
    public JsonConfigurationOptions pathSeparator(char value) {
        super.pathSeparator(value);
        return this;
    }

    @Override
    public JsonConfigurationOptions header(String value) {
        super.header(value);
        return this;
    }

    @Override
    public JsonConfigurationOptions copyHeader(boolean value) {
        super.copyHeader(value);
        return this;
    }
}
package com.onarandombox.multiverseinventories.util.data;

import com.dumptruckman.minecraft.util.Logging;
import com.feildmaster.lib.configuration.EnhancedConfiguration;
import com.onarandombox.multiverseinventories.ProfileTypes;
import com.onarandombox.multiverseinventories.api.profile.PlayerProfile;
import com.onarandombox.multiverseinventories.api.profile.ProfileType;
import com.onarandombox.multiverseinventories.util.EncodedConfiguration;
import com.onarandombox.multiverseinventories.util.EncodedJsonConfiguration;
import com.onarandombox.multiverseinventories.util.JsonConfiguration;
import org.bukkit.configuration.ConfigurationSection;
import org.bukkit.configuration.file.FileConfiguration;

private FileConfiguration getConfigHandle(File file) {
            }
        } else {
            try {
                return new EncodedJsonConfiguration(file, "UTF-8");
            } catch (UnsupportedEncodingException e) {
                return new JsonConfiguration(file);
            }
        }
    }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import io.muoncore.newton.NewtonEvent;
import io.muoncore.newton.StreamSubscriptionManager;
import io.muoncore.newton.eventsource.muon.EventStreamProcessor;
import io.muoncore.newton.query.EventStreamIndex;
import io.muoncore.newton.query.EventStreamIndexStore;
public void localTrackingSubscription(String subscriptionName, String streamName
        }

        eventStreamIndexStore.save(new EventStreamIndex(subscriptionName, event.getOrderId()==null?0l:event.getOrderId()));
        final NewtonEvent newtonEvent = event.getPayload(eventType);
        worker.execute(() -> {
          eventStreamProcessor.executeWithinEventContext(newtonEvent, onData);
        });
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

package com.facebook.imagepipeline.producers;

import java.io.File;
import java.io.IOException;
import java.util.Map;
import java.util.concurrent.Executor;

import android.content.ContentResolver;
import android.database.Cursor;
import android.media.ExifInterface;
import android.net.Uri;
import android.provider.MediaStore;
import android.util.Pair;

import com.facebook.common.internal.ImmutableMap;
public void onCancellationRequested() {
    mExecutor.execute(cancellableProducerRunnable);
  }

  @VisibleForTesting ExifInterface getExifInterface(Uri uri) throws IOException {
    final String realPath = UriUtil.getRealPathFromUri(mContentResolver, uri);
    if (canReadAsFile(realPath)) {
        return new ExifInterface(realPath);
    }
    return null;
  }
private TestLocalExifThumbnailProducer(
    }

    @Override
    ExifInterface getExifInterface(Uri uri) throws IOException {
      if (uri.equals(mUri)) {
        return mExifInterface;
      }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
<idea-plugin>
  <id>com.aurimasniekis.phppsr4namespacedetector</id>
  <name>PHP PSR-4 Namespace Detector</name>
  <version>1.0.0</version>
  <vendor email="aurimas@niekis.lt" url="https://aurimas@niekis.lt">Aurimas Niekis</vendor>

  <description><![CDATA[
package com.aurimasniekis.phppsr4namespacedetector;

import com.intellij.json.psi.*;
import com.intellij.openapi.application.ApplicationManager;
import com.intellij.openapi.module.Module;
import com.intellij.openapi.module.ModuleManager;
private static boolean existsSource(SourceFolder[] sourceFolders, PhpNamespaceRo
    public static void processNamespaces(Project project, Set<PhpNamespaceRootInfo> roots) {
        VirtualFile composerFile = project.getBaseDir().findChild("composer.json");

        JsonFile psiFile = (JsonFile) PsiManager.getInstance(project).findFile(composerFile);

        if (psiFile != null) {
actions.detect.namespace.roots.notification.message=Do you want to configure nam
actions.detect.namespace.roots.title=Detecting PSR-4 Namespace Roots...
actions.detect.namespace.roots.finished=Detection of PSR-4 namespace roots is completed. You can change it manually at {0}.
actions.detect.namespace.roots.no.new.roots.detected=No new PSR-4 namespace roots was detected. You can specify it manually at {0}.
actions.detect.namespace.roots.manually.edit=<a href="config">Settings | Directories</a>
actions.detect.namespace.roots.manually.edit.idea="Project Settings | Modules"
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->

<!-- Version history
1.3.0
* #8 Including aaa without adding anything else to new ACT project will cause an NPE
* update to osgl-aaa 1.3.0

1.2.2
* #9 Raise event when principal resolved

1.2.1
* Update to osgl-aaa 1.2.1 to fix show stopper issue https://github.com/osglworks/java-aaa/issues/3
  <groupId>org.actframework</groupId>
  <artifactId>act-aaa</artifactId>
  <packaging>jar</packaging>
  <version>1.3.0-SNAPSHOT</version>

  <name>ACT AAA</name>
  <description>The OSGL AAA Plugin for Actframework Security handling</description>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    <git.url>git@github.com:actframework/act-aaa-plugin.git</git.url>
    <java.version>1.7</java.version>
    <act.version>1.5.0-SNAPSHOT</act.version>
    <aaa.version>1.3.0-SNAPSHOT</aaa.version>
    <mockito-core.version>2.7.0</mockito-core.version>
    <snakeyaml.version>1.18</snakeyaml.version>
  </properties>
public AAAPersistentService get() {
    public static class AuthenticationServiceProvider extends ActProvider<AuthenticationService> {
        @Override
        public AuthenticationService get() {
            return aaa().authenticationService;
        }
    }

    public static class AuthorizationServiceProvider extends ActProvider<AuthorizationService> {
        @Override
        public AuthorizationService get() {
            return aaa().authorizationService;
        }
    }

    public static class AuditorProvider extends ActProvider<Auditor> {
        @Override
        public Auditor get() {
            return aaa().auditor;
        }
    }

import act.app.event.AppEventId;
import act.app.event.AppStop;
import act.event.AppEventListenerBase;
import act.util.SessionManager;
import org.osgl.aaa.*;
import org.osgl.http.H;

import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
public void buildService(App app, ActAAAService service) {
        AAAService aaa = initializeAAAService(app, service);
        // we need to check if persistent service is already
        // provisioned with buildService(App, AAAPersistentService) call
        if (null == aaa.persistentService) {
            aaa.persistentService = new DefaultPersistenceService(service);
        }
        // we need to check if authentication service is already
        // provisioned with buildService(App, AuthenticationService) call
        if (null == aaa.authenticationService) {
            aaa.authenticationService = service;
        }
    }

    public void buildService(App app, AuthenticationService service) {
        AAAService aaa = initializeAAAService(app, null);
        aaa.authenticationService = service;
    }

    public void buildService(App app, AuthorizationService service) {
        AAAService aaa = initializeAAAService(app, null);
        aaa.authorizationService = service;
    }

    public void buildService(App app, AAAPersistentService service) {
        AAAService aaa = initializeAAAService(app, null);
        if (null != aaa.persistentService) {
            // app's implementation should be the winner
            if (DefaultPersistenceService.class.equals(service.getClass())) {
                // leave with it
            } else {
                aaa.persistentService = service;
            }
        } else {
            aaa.persistentService = service;
        }
    }

    public void buildService(App app, Auditor auditor) {
        AAAService aaa = initializeAAAService(app, null);
        aaa.auditor = auditor;
    }

    private AAAService initializeAAAService(final App app, final ActAAAService appSvc) {
private AAAService initializeAAAService(final App app, final ActAAAService appSv
        }
        svc = null == appSvc ? new AAAService(app) : new AAAService(app, appSvc);
        services.put(app, svc);
        app.eventBus().bind(AppEventId.STOP, new AppEventListenerBase<AppStop>("aaa-stop") {
            @Override
            public void on(AppStop event) {
                services.remove(app);
import act.app.AppServiceBase;
import act.app.conf.AutoConfig;
import act.conf.ConfLoader;
import act.handler.RequestHandler;
import act.handler.builtin.controller.ActionHandlerInvoker;
import act.handler.builtin.controller.Handler;
    private boolean disabled;
    private final String sessionKeyUsername;

    AuthenticationService authenticationService;
    AuthorizationService authorizationService;
    AAAPersistentService persistentService;
    Auditor auditor;

    AAAService(final App app) {
        super(app);

    AAAService(final App app, final ActAAAService appSvc) {
        this(app);
        persistentService = new DefaultPersistenceService(appSvc);
    }

    private void postOperations(App app) {
        app.jobManager().beforeAppStart(new Runnable() {
            @Override
            public void run() {
                loadAcl();
                registerFastJsonConfig();
                registerDefaultContext();
            }
        });
    }
public AAAPersistentService persistentService() {
        return persistentService;
    }

    public void sessionResolved(H.Session session, ActionContext context) {
        if (disabled) {
            return;
public void foundDynamicPermissionCheckHelper(final Class<DynamicPermissionCheck

    @SubClassFinder
    public void handleFound(Class<AAAPersistentService> serviceType) {
        if (DefaultPersistenceService.class.equals(serviceType)) {
            // DefaultPersistentService is not aimed to be used for dependency injection
            // however subclass of it might be implemented by app developer
            return;
import org.osgl.aaa.*;
import org.osgl.aaa.impl.SimplePrincipal;
import org.osgl.cache.CacheService;
import org.osgl.util.C;
import org.osgl.util.E;
import org.osgl.util.Generics;

    abstract class Base<USER_TYPE> extends SingletonBase implements ActAAAService {

        /**
         * The user model class
         */
protected void setPrincipalProperties(Principal principal, USER_TYPE user) {}
         */
        protected abstract boolean verifyPassword(USER_TYPE user, char[] password);

        private USER_TYPE findUser(String username) {
            return userDao.findOneBy(_userKey(), username);
        }

        private String _userKey() {
            return AAAConfig.user.key.get();
        }

        private void initUserType(Class<USER_TYPE> userType) {
            this.cacheService = Act.cache();
            this.userType = $.notNull(userType);
            this.userTypeIsPrincipal = Principal.class.isAssignableFrom(userType);
            this.userDao = Act.app().dbServiceManager().dao(userType);
            String userKey = userKey();
            if (S.notBlank(userKey)) {
                $.setProperty(AAAConfig.user.key, userKey, "v");
            }
        }
    }
}
import java.util.Map;
import java.util.Set;

public class DefaultPersistenceService extends DestroyableBase implements AAAPersistentService {

    private ActAAAService actAAAService;

    private Map<String, Role> roles = C.newMap();
    private Map<String, Permission> permissions = C.newMap();
    private Map<String, Privilege> privileges = C.newMap();

    public DefaultPersistenceService(ActAAAService ActAAAService) {
        E.NPE(ActAAAService);
        this.actAAAService = ActAAAService;
    }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ERROR_NO_DATA_VIEW(ChatColor.YELLOW + "Webserver disabled but Alternative IP/PlanLite not used, no way to view data!"),
    ERROR_WEBSERVER_OFF_ANALYSIS(ChatColor.YELLOW + "" + PREFIX + "This command can be only used if the webserver is running on this server."),
    ERROR_WEBSERVER_OFF_INSPECT(ChatColor.YELLOW + "" + PREFIX + "This command can be only used if webserver/planlite is enabled on this server."),
    ERROR_LOGGED("Caugth "+REPLACE0+". It has been logged to the Errors.txt"),
    ERROR_SESSIONDATA_INITIALIZATION("Player's session was initialized in a wrong way! (" + REPLACE0 + ")"),
    //
    CMD_FOOTER(COLOR_TER.color() + "" + ARROWS_RIGHT),
package main.java.com.djrapitops.plan.command.commands.manage;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Set;
import java.util.UUID;
import main.java.com.djrapitops.plan.Phrase;
import main.java.com.djrapitops.plan.Plan;
import main.java.com.djrapitops.plan.command.CommandType;
import main.java.com.djrapitops.plan.command.SubCommand;
import main.java.com.djrapitops.plan.data.UserData;
import main.java.com.djrapitops.plan.data.cache.DBCallableProcessor;
import main.java.com.djrapitops.plan.database.Database;
import main.java.com.djrapitops.plan.database.databases.SQLiteDB;
import main.java.com.djrapitops.plan.utilities.ManageUtils;
import org.bukkit.command.Command;
import org.bukkit.command.CommandSender;
import main.java.com.djrapitops.plan.Plan;
import main.java.com.djrapitops.plan.command.CommandType;
import main.java.com.djrapitops.plan.command.SubCommand;
import main.java.com.djrapitops.plan.data.UserData;
import main.java.com.djrapitops.plan.data.cache.DBCallableProcessor;
import main.java.com.djrapitops.plan.data.cache.DataCacheHandler;
import main.java.com.djrapitops.plan.data.importing.Importer;
import main.java.com.djrapitops.plan.data.importing.OnTimeImporter;
import main.java.com.djrapitops.plan.utilities.ManageUtils;
import org.bukkit.Bukkit;
import org.bukkit.GameMode;
import org.bukkit.OfflinePlayer;
import org.bukkit.command.Command;
import org.bukkit.command.CommandSender;
import org.bukkit.scheduler.BukkitRunnable;
import org.bukkit.scheduler.BukkitTask;
import static org.bukkit.Bukkit.getOfflinePlayer;
import static org.bukkit.Bukkit.getOfflinePlayer;

/**
 *
package main.java.com.djrapitops.plan.command.commands.manage;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.Set;
import java.util.UUID;
import main.java.com.djrapitops.plan.Phrase;
import main.java.com.djrapitops.plan.Plan;
import main.java.com.djrapitops.plan.command.CommandType;
import main.java.com.djrapitops.plan.command.SubCommand;
import main.java.com.djrapitops.plan.data.UserData;
import main.java.com.djrapitops.plan.data.cache.DBCallableProcessor;
import main.java.com.djrapitops.plan.database.Database;
import main.java.com.djrapitops.plan.utilities.ManageUtils;
import org.bukkit.command.Command;
    private long totaldeaths;
    
    private long sessionAverage;

    /**
     * Class constructor.
public AnalysisData() {
        commandUseTableHtml = Html.ERROR_NOT_SET+"";
        top20ActivePlayers = Html.ERROR_NOT_SET+"";
        recentPlayers = Html.ERROR_NOT_SET+"";
        playersDataArray = new String[]{"[0]","[\"No data\"]","[0]","[\"No data\"]","[0]","[\"No data\"]"};
    }

    // Getters and setters v---------------------------------v

    /**
     *
     * @return
    private HashMap<String, Long> playtimes;
    private List<SessionData> sessiondata;
    private HashMap<String, Integer> commandUse;
    private List<Long> registered;

    /**
public RawAnalysisData() {
        ages = new ArrayList<>();
        latestLogins = new HashMap<>();
        playtimes = new HashMap<>();
        sessiondata = new ArrayList<>();        
        commandUse = new HashMap<>();
        registered = new ArrayList<>();
    }

    /**
     *
     * @param gmZero
public void sendStaticResource() throws IOException {
            String[] requestArgs = request.getUri().split("/");
            boolean forbidden = false;
            String securityCode = "";
            if (requestArgs.length < 2) {
                forbidden = true;
            } else {
                securityCode = requestArgs[1];
public void sendStaticResource() throws IOException {
                    if (requestHandler.checkIfCached(uuid)) {
                        try {
                            String dataHtml = requestHandler.getInspectHtml(uuid);
                            String htmlDef = "HTTP/1.1 OK\r\n"
                                    + "Content-Type: text/html; charset=utf-8\r\n"
                                    + "Content-Length: " + dataHtml.length() + "\r\n"
                                    + "\r\n";
public void sendStaticResource() throws IOException {
            } else if (command.equals("server")) {
                if (requestHandler.checkIfAnalysisIsCached()) {
                    String analysisHtml = requestHandler.getAnalysisHtml();
                    String htmlDef = "HTTP/1.1 OK\r\n"
                            + "Content-Type: text/html; charset=utf-8\r\n"
                            + "Content-Length: " + analysisHtml.length() + "\r\n"
                            + "\r\n";
public void analyze(AnalysisCacheHandler analysisCache) {
    /**
     * Caches analyzed data of db to the provided cache analysisCache.
     *
     * @param analysisCache Cache that will contain AnalysisData result of this method.
     * @param db Database which data will be analyzed.
     * @return Whether or not analysis was successful.
     */
public boolean analyze(AnalysisCacheHandler analysisCache, Database db) {
        log(Phrase.ANALYSIS_BEGIN_ANALYSIS + "");
        AnalysisData analysisData = new AnalysisData();
        analysisData.setSortablePlayersTable(AnalysisUtils.createSortablePlayersTable(rawData));
        // Fill Dataset with userdata.
        rawData.parallelStream().forEach((uData) -> {
            try {
public boolean analyze(AnalysisCacheHandler analysisCache, Database db) {
                sorted.addTotalDeaths(uData.getDeaths());
                sorted.getSessiondata().addAll(uData.getSessions());
                sorted.getRegistered().add(uData.getRegistered());
                uData.stopAccessing();
            } catch (NullPointerException e) {
                plugin.logError(Phrase.DATA_CORRUPTION_WARN.parse(uData.getUuid() + ""));
                plugin.toLog(this.getClass().getName(), e);
            }
        });
        // Analyze & Save RawAnalysisData to AnalysisData
        createPlayerActivityGraphs(analysisData, sorted.getSessiondata(), sorted.getRegistered());
        analysisData.setRecentPlayers(RecentPlayersButtonsCreator.createRecentLoginsButtons(sorted.getLatestLogins(), 20));
private void log(String msg) {
            plugin.log(msg);
        }
    }
}

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import main.java.com.djrapitops.plan.Settings;
import main.java.com.djrapitops.plan.data.SessionData;
import main.java.com.djrapitops.plan.data.UserData;
import main.java.com.djrapitops.plan.ui.Html;
import main.java.com.djrapitops.plan.ui.tables.SortableCommandUseTableCreator;
import main.java.com.djrapitops.plan.ui.tables.SortablePlayersTableCreator;
import main.java.com.djrapitops.plan.utilities.comparators.MapComparator;

/**
 *
                + "\",\"#" + Settings.HCOLOR_GMP_2 + "\",\"#" + Settings.HCOLOR_GMP_3 + "\"");
        replaceMap.putAll(plugin.getHookHandler().getAdditionalAnalysisReplaceRules());
        replaceMap.put("%!s(MISSING)essionaverage%!"(MISSING), FormatUtils.formatTimeAmount(data.getSessionAverage() + ""));
        return replaceMap;
    }

        <meta name="author" content="Rsl1122">
        <link rel="icon" href="https://puu.sh/tK0KL/6aa2ba141b.ico" type="image/x-icon" />        
        <script src="https://use.fontawesome.com/df48eb908b.js"></script>
        <style>
            * {
                box-sizing: border-box;
                content: " \25B4\25BE" 
            }
            #wrapper {
                width: 400%!;(MISSING)
                transform: translate3d(0, 0, 0);
                transition: transform .5s ease-in-out;
            }
            .content {
                float: left;
                width: 25%!;(MISSING)
                height: 100%!;(MISSING)
                white-space: normal;
                background-repeat: no-repeat;
            <div id="navLinks">
                <ul>
                    <li class="itemLinks" data-pos="0px"><i class="fa fa-info-circle" aria-hidden="true"></i> Information</li>
                    <li class="itemLinks" data-pos="-25%!"(MISSING)><i class="fa fa-bar-chart" aria-hidden="true"></i> Online Activity</li>
                    <li class="itemLinks" data-pos="-50%!"(MISSING)><i class="fa fa-list-alt" aria-hidden="true"></i> Playerlist</li>
                    <li class="itemLinks" data-pos="-75%!"(MISSING)><i class="fa fa-terminal" aria-hidden="true"></i> Command usage</li>
                </ul>
            </div>
            <div id="contentContainer">
                            </tbody>
                        </table>
                    </div>
                </div>
            </div></div>
    </body>
    <script src="http://www.kryogenix.org/code/browser/sorttable/sorttable.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.5.0/Chart.bundle.js"></script>
        });
    </script>
    <script>
        // Script for the page navigation buttons
        var links = document.querySelectorAll(".itemLinks");
        var wrapper = document.querySelector("#wrapper");
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void write(final Output output, Map<Expression<?>, Object> values) {
        QueryBuilder qb = output.builder();
        qb.keyword(INSERT, INTO);
        output.appendTables();
        qb.openParenthesis()
            .commaSeparated(values.entrySet(),
                new QueryBuilder.Appender<Map.Entry<Expression<?>, Object>>() {
                    @Override
                    public void append(QueryBuilder qb, Map.Entry<Expression<?>, Object> value) {
public void append(QueryBuilder qb, Map.Entry<Expression<?>, Object> value) {
                        }
                    }
                })
            .closeParenthesis()
            .space();

            if (!values.isEmpty()) {
                qb.keyword(VALUES)
                .openParenthesis()
                .commaSeparated(values.entrySet(),
                    new QueryBuilder.Appender<Map.Entry<Expression<?>, Object>>() {
                        @Override
                        public void append(QueryBuilder qb, Map.Entry<Expression<?>, Object> value) {
                            output.appendConditionValue(value.getKey(), value.getValue());
                        }
                    })
                .closeParenthesis();
            } else {
                qb.keyword(DEFAULT, VALUES);
            }
    }
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
protected void uninstall(UninstallationStage stage) {
			final Destroy event = new Destroy();
			event.setSource(getInnerDefaultSpaceAddress());
			this.eventDispatcher.unregisterAll((subscriber) -> {
				this.eventDispatcher.immediateDispatchTo(subscriber, event);
			});
		}
	}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	 * Vertical blocks to query for a "ground block".
	 */
	public static final int ITERATIONS_TO_QUERY_FOR_GROUND_BLOCK = 256;
	
	/**
	 * Capture block directives from set of blocks defined in the game world.
	 * 
	 *            block to create all block directives with.
	 * @param blockState
	 *            block state to create all block directives with.
	 * @param result
	 *            list of calculated {@linkplain BlockDirective}.
	 */
	public static List<BlockDirective> calculateBlockDirectives(Iterable<BlockPos> blockPosSet, Block block,
			IBlockState blockState) {

		List<BlockDirective> result = new ArrayList<BlockDirective>();

		// create directives
		for (BlockPos blockPos : blockPosSet) {

			// create directive
			BlockDirective directive = new BlockDirective(blockPos, block, HARVEST);
			directive.setState(blockState);
			result.add(directive);
		}
			// create rotated directive
			BlockPos RotatedPosition = new BlockPos((int) rotationPoint[0], sourceDirective.getBlockPosition().getY(),
					(int) rotationPoint[1]);
			BlockDirective rotatedDirective = new BlockDirective(RotatedPosition, sourceDirective.block);

			// add block state to rotated directive
			IBlockState sourceState = sourceDirective.getState();
public static Vec3d rotateUnitVectorAroundYAxisAtOrigin(double angle, Vec3d vect
	 * @param structure
	 *            structure which defines the local offset, size and block
	 *            characteristics of the created rectangle.
	 * @return list of block directive (e.g. coordinates) for the blocks in the
	 *         structure.
	 */
	private static List<BlockDirective> calculateBlockDirectivesFromChildStructure(BlockPos offset,
			PlayerDirection playerDirection, Structure structure) {

		// exit if structure is a composite
		if (structure.isComposite())
public static Vec3d rotateUnitVectorAroundYAxisAtOrigin(double angle, Vec3d vect

		// calculate block directives
		List<BlockDirective> directives = calculateBlockDirectives(blockPosSet, structure.getBlock(),
				structure.getBlockState());

		// rotate directives to player orientation
		// for (BlockDirective c : directives) System.out.println("rect c=" +
public static Vec3d rotateUnitVectorAroundYAxisAtOrigin(double angle, Vec3d vect
	 *            coordinates.
	 * @param structure
	 *            structure which defines the size of the created rectangle.
	 * @return list of block directives (e.g. coordinates) for the blocks in the
	 *         structure.
	 */
	public static List<BlockDirective> calculateBlockDirectives(BlockPos offset, PlayerDirection playerDirection,
			Structure structure) {

		// handle child structure
		if (!structure.isComposite()) {
			return calculateBlockDirectivesFromChildStructure(offset, playerDirection, structure);
		}

		// handle composite structure
		List<BlockDirective> compositeResult = new ArrayList<BlockDirective>();
		for (Structure child : structure.getChildren()) {
			compositeResult.addAll(calculateBlockDirectives(offset, playerDirection, child));
		}
		return compositeResult;
	}
public static BlockDirective createFlowerDirective(BlockPos position, Random ran
			BlockDirective yellow = new BlockDirective(position, Blocks.YELLOW_FLOWER, DONT_HARVEST);
			return yellow;
		case 1:
		default:			
			BlockDirective red = new BlockDirective(position, Blocks.RED_FLOWER, DONT_HARVEST);
			red.setState(selectRedFlowerType(random));
			return red;
		}			
	}

	/**
package bassebombecraft.item.action.build;

import static bassebombecraft.item.action.build.BuildUtils.*;
import static bassebombecraft.BassebombeCraft.getBassebombeCraft;
import static bassebombecraft.geom.GeometryUtils.calculateBlockDirectives;
import static bassebombecraft.player.PlayerUtils.calculatePlayerFeetPosititionAsInt;
import static bassebombecraft.player.PlayerUtils.getPlayerDirection;
import static bassebombecraft.player.PlayerUtils.isBelowPlayerYPosition;
import static bassebombecraft.structure.ChildStructure.*;

import java.util.List;
import java.util.Random;

import bassebombecraft.event.block.BlockDirectivesRepository;
import bassebombecraft.geom.BlockDirective;
import bassebombecraft.item.action.BlockClickedItemAction;
import bassebombecraft.player.PlayerDirection;
import bassebombecraft.structure.ChildStructure;
import bassebombecraft.structure.CompositeStructure;
import bassebombecraft.structure.Structure;
import net.minecraft.block.Block;
import net.minecraft.block.BlockStairs;
import net.minecraft.block.state.IBlockState;
import net.minecraft.entity.Entity;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.init.Blocks;
 */
public class BuildTower implements BlockClickedItemAction {

	/**
	 * Helper class for rooms.
	 */
	class Room {

		BlockPos offset;
		BlockPos size;
		Block material;
		
		/**
		 * Room constructor.
		 * 
		 * @param offset
		 *            room offset
		 * @param size
		 *            room size
		 */
		public Room(BlockPos offset, BlockPos size) {
			super();
			this.offset = offset;
			this.size = size;
		}

		/**
		 * Room constructor.
		 * 
		 * @param offset
		 *            room offset
		 * @param size
		 *            room size
		 * @param material room material.           
		 *            
		 */
		public Room(BlockPos offset, BlockPos size, Block material) {
			super();
			this.offset = offset;
			this.size = size;
			this.material = material;
		}
		
		/**
		 * Build room
		 * 
		 * @return structure for room.
		 */
		public Structure createRoom() {
			CompositeStructure composite = new CompositeStructure();

			int height = size.getY();
			int width = size.getX();
			int depth = size.getZ();
			int xoffset = offset.getX();
			int yoffset = offset.getY();
			int zoffset = offset.getZ();
			BlockPos roomOffset = new BlockPos(xoffset, yoffset, zoffset);
			BlockPos roomSize = new BlockPos(width, height, depth);
			composite.add(new ChildStructure(roomOffset, roomSize, material));

			height = size.getY() - 2;
			width = size.getX() - 2;
			depth = size.getZ() - 2;
			xoffset = offset.getX() + 1;
			yoffset = offset.getY() + 1;
			zoffset = zoffset + 1;
			roomOffset = new BlockPos(xoffset, yoffset, zoffset);
			roomSize = new BlockPos(width, height, depth);
			composite.add(createAirStructure(roomOffset, roomSize));

			return composite;
		}		
		
		public void resizeAsRoom1(int width, int depth) {
			offset = offset.add(-width, 0, -depth);
			size = size.add(width, 0, depth);
		}
		
		public void resizeAsRoom2(int width, int depth) {
			offset = offset.add(0, 0, -depth);
			size = size.add(width, 0, depth);
		}

		public void resizeAsRoom3(int width, int depth) {
			offset = offset.add(-width, 0, 0);
			size = size.add(width, 0, depth);
		}

		public void resizeAsRoom4(int width, int depth) {
			offset = offset.add(0, 0, 0);
			size = size.add(width, 0, depth);
		}
		
	}

	static final EnumActionResult USED_ITEM = EnumActionResult.SUCCESS;
	static final EnumActionResult DIDNT_USED_ITEM = EnumActionResult.PASS;

	/**
	 * Random generator.
public void resizeAsRoom4(int width, int depth) {
	int floorDepth;

	/**
	 * Stairs material.
	 */
	StairsMaterial stairsMaterial;

	/**
	 * BuildSmallHole constructor.
	 */
	public BuildTower() {
		super();
		repository = getBassebombeCraft().getBlockDirectivesRepository();

		floorWidth = 25;
		floorDepth = 25;
		minSizeReductionPerLayer = 2;
		maxSizeReductionPerLayer = 4;
		numberLayers = 3;
		roomHeight = 6;

		IBlockState state = Blocks.STONE_BRICK_STAIRS.getDefaultState().withProperty(BlockStairs.FACING,
				EnumFacing.SOUTH);
		stairsMaterial = createInstance(state, Blocks.STONE_BRICK_STAIRS, Blocks.STONEBRICK);
	}

	@Override
public EnumActionResult onItemUse(EntityPlayer player, World worldIn, BlockPos p
		// calculate if selected block is a ground block
		boolean isGroundBlock = isBelowPlayerYPosition(pos.getY(), player);

		// calculate structure
		Structure structure = null;
		if (isGroundBlock)
			structure = createHorizontalStructure();
		else
			structure = createVerticalStructure();

		// calculate Y offset in structure
		int yOffset = calculatePlayerFeetPosititionAsInt(player);
public EnumActionResult onItemUse(EntityPlayer player, World worldIn, BlockPos p

		// calculate set of block directives
		BlockPos offset = new BlockPos(pos.getX(), yOffset, pos.getZ());
		List<BlockDirective> directives = calculateBlockDirectives(offset, playerDirection, structure);

		// add directives
		repository.addAll(directives);
public EnumActionResult onItemUse(EntityPlayer player, World worldIn, BlockPos p

	@Override
	public void onUpdate(ItemStack stack, World worldIn, Entity entityIn, int itemSlot, boolean isSelected) {
	}

	/**
	 * Create horizontal structure.
	 * 
	 * @return created structure.
	 */
	Structure createHorizontalStructure() {
		CompositeStructure composite = new CompositeStructure();

		BlockPos offset = new BlockPos(0, 0, 0);
Structure createHorizontalStructure() {
			currentFloorWidth = calculateLayerSize(currentFloorWidth);
			currentFloorDepth = calculateLayerSize(currentFloorDepth);

			// calculate floor center
			int floorWidthDiv2 = currentFloorWidth / 2;
			int floorWidthDiv4 = currentFloorWidth / 4;
Structure createHorizontalStructure() {
			// setup room #1
			BlockPos room1Offset = new BlockPos(0, offset.getY(), 0);
			BlockPos room1Size = new BlockPos(floorXCenter, height, floorZCenter);
			Room room1 = new Room(room1Offset, room1Size, selectMaterial());
			room1.resizeAsRoom1(random.nextInt(2), random.nextInt(2));			
			composite.add(room1.createRoom());

			// setup room #2
			BlockPos room2Offset = new BlockPos(floorXCenter - 1, offset.getY(), 0);
			BlockPos room2Size = new BlockPos(currentFloorWidth - floorXCenter, height, floorZCenter);
			Room room2 = new Room(room2Offset, room2Size, selectMaterial());
			room2.resizeAsRoom2(random.nextInt(2), random.nextInt(2));						
			composite.add(room2.createRoom());

			// setup room #3
			BlockPos room3Offset = new BlockPos(0, offset.getY(), floorZCenter - 1);
			BlockPos room3Size = new BlockPos(floorXCenter, height, currentFloorDepth - floorZCenter);
			Room room3 = new Room(room3Offset, room3Size, selectMaterial());
			room3.resizeAsRoom3(random.nextInt(2), random.nextInt(2));						
			composite.add(room3.createRoom());

			// setup room #4
			BlockPos room4Offset = new BlockPos(floorXCenter - 1, offset.getY(), floorZCenter - 1);
			BlockPos room4Size = new BlockPos(currentFloorWidth - floorXCenter, height,
					currentFloorDepth - floorZCenter);
			Room room4 = new Room(room4Offset, room4Size, selectMaterial());
			room4.resizeAsRoom4(random.nextInt(2), random.nextInt(2));									
			composite.add(room4.createRoom());

			// add door to room #1 in layer #1
			if (layer == 0) {
				BlockPos doorOffset = new BlockPos(floorXCenter - floorWidthDiv4, 0, 0);
				addOakFencedDoorEntryFront(composite, doorOffset);
			}

			// TODO: select stairs type based on available space
			// add stair up in room #1 or #4
			BlockPos stairOffset;
			if (placeStairsInRoom1(layer))
				stairOffset = new BlockPos(room1Offset.getX() + 1, room1Offset.getY(), room1Offset.getZ() + 2);
			else
				stairOffset = new BlockPos(room4Offset.getX() + room4Size.getX() - 3, room4Offset.getY(),
						room4Offset.getZ() + 2);
			addSolidStairUp(roomHeight, stairsMaterial, composite, stairOffset);

			// calculate offset etc for next iteration
			offset = new BlockPos(0, offset.getY() + height, 0);
Structure createHorizontalStructure() {
	}

	/**
	 * Returns true if stairs should be place in room #1.
	 * 
	 * @param layer
boolean placeStairsInRoom1(int layer) {
	}

	/**
	 * Create vertical structure.
	 * 
	 * @return created structure.
	 */
	Structure createVerticalStructure() {
		CompositeStructure composite = new CompositeStructure();
		return composite;
		// NO-OP
	}
	
	/**
	 * Select random material.
	 * 
	 * @return random material
import static bassebombecraft.structure.ChildStructure.createAirStructure;
import static bassebombecraft.structure.ChildStructure.createOakFenceStructure;

import bassebombecraft.structure.ChildStructure;
import bassebombecraft.structure.Structure;
import net.minecraft.block.Block;
package bassebombecraft.item.action.build;

import net.minecraft.block.Block;
import net.minecraft.block.state.IBlockState;
import com.typesafe.config.Config;

import bassebombecraft.geom.BlockDirective;
import bassebombecraft.item.action.build.StairsMaterial;
import bassebombecraft.player.PlayerDirection;
import bassebombecraft.structure.CompositeStructure;
import net.minecraft.block.BlockStairs;
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
********************************************
1.0.4
- #111 Routing failure on `/{path1}/{path2}/{path3}/{id}.html` style URL path
- #115 Router: support inner variables inside URL path

1.0.3
private String patchedJsonBody(ActionContext context) {
            return body;
        }
        String theName = singleJsonFieldName(context);
        if (null == theName) {
            return body;
        }
private String patchedJsonBody(ActionContext context) {
                    if (c == '"') {
                        break;
                    }
                    if (theName.charAt(i - nameStart - 1) != c) {
                        needPatch = true;
                        break;
                    }
public boolean test(String s) {
     * The data structure support decision tree for
     * fast URL routing
     */
    private static class Node extends DestroyableBase implements Serializable, TreeNode {

        // used to pass a baq request result when dynamic regex matching failed
        private static final Node BADREQUEST = new Node(Integer.MIN_VALUE) {
public boolean equals(Object obj) {
            return false;
        }

        public boolean isDynamic() {
            return isDynamic;
        }
Node addChild(StrBase<?> name, CharSequence path, String action) {
                    child.dynamicReverseAliases.put(action, child);
                    dynamicChilds.add(child);
                }
                return child;
            } else {
                staticChildren.put(name, child);
Node addChild(StrBase<?> name, CharSequence path, String action) {

        Node handler(RequestHandler handler, RouteSource source) {
            this.routeSource = $.notNull(source);
            this.handler = handler.requireResolveContext() ? new ContextualHandler((RequestHandlerBase)handler, this) : handler;
            return this;
        }

void debug(H.Method method, PrintStream ps) {
            for (Node node : staticChildren.values()) {
                node.debug(method, ps);
            }
            for (Node node: dynamicChilds) {
                node.debug(method, ps);
            }
        }
static boolean parseDynaNameStyleA(

            return true;
        }

        private static $.T2<StrBase, Pattern> _parseDynaName(StrBase name) {
            name = name.trim();
            if (name.startsWith("{") && name.endsWith("}")) {
                StrBase s = name.afterFirst('{').beforeLast('}').trim();
                if (s.contains('<') && s.contains('>')) {
                    StrBase varName = s.afterLast('>').trim();
                    StrBase ptn = s.afterFirst('<').beforeLast('>').trim();
                    Pattern pattern = Pattern.compile(ptn.toString());
                    return $.T2(varName, pattern);
                } else {
                    return $.T2(s, null);
                }
            } else if (name.contains(":")) {
                StrBase varName = name.beforeFirst(":");
                StrBase ptn = name.afterFirst(":");
                Pattern pattern = ptn.isBlank() ? null : Pattern.compile(ptn.toString());
                return $.T2(varName, pattern);
            } else {
                return null;
            }
        }
    }

    private enum BuiltInHandlerResolver implements RequestHandlerResolver {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

public class MatrixID implements _MatrixID {

    private static final Pattern matrixIdLaxPattern = Pattern.compile("@(.+):(.+)");
    private static final Pattern matrixIdStrictPattern = Pattern.compile("@([0-9a-z-.=_]+):(.+)");

    private String id;
    private static String invalidMxId3 = "john.doe";
    private static String invalidMxId4 = "@:";
    private static String invalidMxId5 = "@john.doe:";
    private static String invalidMxId6 = "@:example.org";


    @Test
public void invalidMatrixIDs5() {
        new MatrixID(invalidMxId5);
    }

    @Test(expected = IllegalArgumentException.class)
    public void invalidMatrixIDs6() {
        new MatrixID(invalidMxId6);
    }

}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public FlushResult flush(String username, String token) throws UnknownHostExcept
		//	return FlushResult.Skip;
		//}
		
		List<ActivityInfo> activityInfoList = processor.getSerializableEntities(InetAddress.getLocalHost().getHostName(), 
				context.getInstanceValue(), "intellij", context.getPluginVersion());
		String activityLogExtension = context.getProperty("activity-log.extension");
		if (!processor.isActivityValid(activityInfoList)) {
public FlushResult flush(String username, String token) throws UnknownHostExcept
		}
		return result;
	}

	private void trySendEntriesOnFile(File fileEntry, String username, String token) {
		try {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import java.lang.ref.WeakReference;
import java.util.concurrent.Callable;
import java.util.concurrent.Executors;

import io.reactivex.Maybe;
import io.reactivex.Observable;

    public static final Scheduler computationScheduler = Schedulers.computation();

    public static final Scheduler networkScheduler = Schedulers.from(Executors.newFixedThreadPool(10, new RxThreadFactory("network-")));

    public static final Scheduler refreshScheduler = Schedulers.from(Executors.newFixedThreadPool(3, new RxThreadFactory("refresh-")));

    private static final HandlerThread looperCallbacksThread =
            new HandlerThread("looper callbacks", Process.THREAD_PRIORITY_DEFAULT);
public void run() {
            }
        });
    }
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void updateForMethodCall(
                CFValue newValue = changeLockAnnoToTop(var, localVariableValues.get(var));
                localVariableValues.put(var, newValue);
            }
        }
    }

// @skip-test

// Test case for Issue 804:
// https://github.com/typetools/checker-framework/issues/804

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
private void becomeLeader()
        leader = true;
        metadataSegmentManager.start();
        metadataRuleManager.start();
        serverInventoryView.start();
        serviceAnnouncer.announce(self);
        final int startingLeaderCounter = leaderCounter;

private void stopBeingLeader()
        loadManagementPeons.clear();

        serviceAnnouncer.unannounce(self);
        serverInventoryView.stop();
        metadataRuleManager.stop();
        metadataSegmentManager.stop();
        leader = false;
public void testCoordinatorRun() throws Exception{
    EasyMock.expect(serverInventoryView.getInventory()).andReturn(
        ImmutableList.of(druidServer)
    ).atLeastOnce();
    serverInventoryView.start();
    EasyMock.expectLastCall().atLeastOnce();
    EasyMock.expect(serverInventoryView.isStarted()).andReturn(true).anyTimes();

    serverInventoryView.stop();
    EasyMock.expectLastCall().once();

    EasyMock.replay(serverInventoryView);

    coordinator.start();
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
protected Action handling()
                    return Action.TERMINATED;

                case ASYNC_WOKEN:
                    if (_asyncRead.isInterested() && _asyncReadPossible)
                    {
                        _state=State.ASYNC_IO;
                        _asyncRead=Interest.NONE;
protected Action unhandle()
                    break;

                case STARTED:
                    // If a read is possible and either we are interested in reads or we have
                    // to call onAllDataRead, then we need a READ_CALLBACK
                    if (_asyncReadPossible && (_asyncRead.isInterested() || _channel.getRequest().getHttpInput().isAsyncEOF()))
                    {
                        _state=State.ASYNC_IO;
                        _asyncRead=Interest.NONE;
public void onReadUnready()
                    _asyncRead=Interest.REGISTERED;
                }
                else
                    _asyncRead=Interest.NEEDED;
            }
        }

public boolean onReadEof()
        try(Locker.Lock lock= _locker.lock())
        {
            if (LOG.isDebugEnabled())
                LOG.debug("onReadEof {}",toStringLocked());

            if (_state==State.ASYNC_WAIT)
            {
                woken=true;
                _state=State.ASYNC_WOKEN;
                _asyncRead=Interest.REGISTERED;
                _asyncReadPossible=true;
            }
        }
        return woken;
public boolean isReadPossible()

    public boolean onWritePossible()
    {
        boolean handle=false;

        try(Locker.Lock lock= _locker.lock())
        {
public boolean onWritePossible()
            if (_state==State.ASYNC_WAIT)
            {
                _state=State.ASYNC_WOKEN;
                handle=true;
            }
        }

        return handle;
    }
}
public int read(byte[] b, int off, int len) throws IOException

                    // Consume any following poison pills
                    if (item.isEmpty())
                        pollReadableContent();
                    break;
                }

protected void produceContent() throws IOException
     */
    protected Content nextContent() throws IOException
    {
        Content content = pollNonEmptyContent();
        if (content == null && !isFinished())
        {
            produceContent();
            content = pollNonEmptyContent();
        }
        return content;
    }
protected Content nextContent() throws IOException
     *
     * @return Content or null
     */
    protected Content pollNonEmptyContent()
    {
        while (true)
        {            
            // Get the next content (or EOF)
            Content content = pollReadableContent();
            
            // If it is EOF, consume it here
            if (content instanceof SentinelContent)
            {
                if (content instanceof EofContent)
                {
                    if (content == EARLY_EOF_CONTENT)
                        _state = EARLY_EOF;
                    else if (_listener == null)
                        _state = EOF;
                    else
                        _state = AEOF;
                }
                
                // Consume the EOF content, either if it was original content
                // or if it was produced by interception
                content.succeeded();
                if (_content==content)
                    _content = null;
                else if (_intercepted==content)
                    _intercepted = null;
                continue;
            }

            return content;
        }
        
    }

    /**
     * Poll the inputQ for Content or EOF. Consumed buffers and non EOF {@link SentinelContent}s are removed. EOF state is not updated.
     * Interception is done within this method.
     * @return Content with remaining, a {@link SentinelContent},  or null
     */
    protected Content pollReadableContent()
    {
        // If we have a chunk produced by interception
        if (_intercepted!=null)
protected Content pollReadableContent()
        }
        
        return null;

    }
    

    /**
     * Get the next readable from the inputQ, calling {@link #produceContent()} if need be. EOF is NOT processed and state is not changed.
     *
     * @return the content or EOF or null if none available.
     * @throws IOException
     *             if retrieving the content fails
     */
    protected Content nextReadable() throws IOException
    {
        Content content = pollReadableContent();
        if (content == null && !isFinished())
        {
            produceContent();
            content = pollReadableContent();
        }
        return content;
    }


    /**
     * Copies the given content into the given byte buffer.
     *
protected void skip(Content content, int length)

        _contentConsumed += l;
        if (l > 0 && content.isEmpty())
            pollNonEmptyContent(); // hungry succeed

    }

public boolean addContent(Content content)
            if (LOG.isDebugEnabled())
                LOG.debug("{} addContent {}",this,content);

            if (pollReadableContent()!=null)
            {
                if (_listener == null)
                    _inputQ.notify();
public boolean isReady()
                    return true;
                if (_state instanceof EOFState)
                    return true;
                if (nextReadable() != null)
                    return true;

                _channelState.onReadUnready();
public void setReadListener(ReadListener readListener)
               
                _listener = readListener;
                
                Content content = nextReadable();
                if (content!=null)
                {
                    _state = ASYNC;
public void setReadListener(ReadListener readListener)
                else if (_state == EOF)
                {
                    _state = AEOF;
                    woken = _channelState.onReadReady();
                }
                else 
                {
public void run()
            
            if (!aeof && error==null)
            {
                Content content = pollReadableContent();

                // Consume EOF
                if (content instanceof EofContent)
                {
                    content.succeeded();
                    if (_content==content)
                        _content = null;
                    if (content == EARLY_EOF_CONTENT)
                    {
                        _state = EARLY_EOF;
                        error = _state.getError();
                    }
                    else 
                    {
                        _state = EOF;
                        aeof = true;
                    }
                }
                else if (content==null)
                    return;
            }
        }

else if (aeof)
            else
            {
                listener.onDataAvailable();
                synchronized (_inputQ)
                {
                    if (_state == AEOF)
                    {
                        _state = EOF;
                        aeof = !_channelState.isAsyncComplete();
                    }
                }
                if (aeof)
                    listener.onAllDataRead();
            }
        }
        catch (Throwable e)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

public class FileConstants {

    public static final String JSON_FILE_NAME_SUFFIX = ".json";
    public static final String YML_FILE_NAME_SUFFIX = ".yml";
    public static final String YAML_FILE_NAME_SUFFIX = ".yaml";

    public static final String CARET = "<caret>";
}
import com.google.common.collect.Lists;
import com.intellij.json.psi.JsonFile;
import com.intellij.json.psi.JsonProperty;
import com.intellij.psi.PsiElement;
import com.intellij.psi.PsiFile;
import org.jetbrains.yaml.psi.YAMLDocument;
import org.jetbrains.yaml.psi.YAMLFile;
import org.jetbrains.yaml.psi.YAMLKeyValue;

public class FileDetector {

    public boolean isMainSwaggerJsonFile(final PsiFile psiFile) {
        return psiFile.getName().equals("swagger.json") || hasSwaggerJsonKey(psiFile);
    }

    public boolean isMainSwaggerYamlFile(final PsiFile psiFile) {
        return psiFile.getName().equals("swagger.yaml") ||
                psiFile.getName().equals("swagger.yml") ||
                hasSwaggerYamlKey(psiFile);
    }

private boolean hasSwaggerYamlKey(final PsiFile psiFile) {

        return children.stream()
                .anyMatch(psiElement -> psiElement instanceof YAMLKeyValue
                        && "swagger".equals(psiElement.getName()));
    }

    private boolean hasSwaggerJsonKey(final PsiFile psiFile) {
private boolean hasSwaggerJsonKey(final PsiFile psiFile) {

        return children.stream()
                .anyMatch(psiElement -> psiElement instanceof JsonProperty
                        && ((JsonProperty) psiElement).getName().equals("swagger"));
    }

    public boolean isSwaggerFile(final PsiFile file) {
        return isMainSwaggerJsonFile(file) || isMainSwaggerYamlFile(file);
    }
}
    @Override
    public Map<String, Set<String>> map(@NotNull FileContent inputData) {
        final Map<String, Set<String>> indexMap = new HashMap<>();
        final PsiFile file = inputData.getPsiFile();

        if (fileDetector.isMainSwaggerJsonFile(file) || fileDetector.isMainSwaggerYamlFile(file)) {
            Set<String> partialSwaggerFileNames;

            if (isJsonFile(file)) {
                partialSwaggerFileNames = getPartialJsonSwaggerFileNames(file);
            } else {
                partialSwaggerFileNames = getPartialYamlSwaggerFileNames(file);
            }

            indexMap.put(SwaggerFileIndex.PARTIAL_SWAGGER_FILES, partialSwaggerFileNames);
            indexMap.put(SwaggerFileIndex.MAIN_SWAGGER_FILE, ImmutableSet.of(file.getName() + DELIMITER + SwaggerFileType.MAIN));
        }
        return indexMap;
    }

    private boolean isJsonFile(PsiFile file) {
        return file instanceof JsonFile;
    }
import com.intellij.util.io.EnumeratorStringDescriptor;
import com.intellij.util.io.KeyDescriptor;
import org.jetbrains.annotations.NotNull;

import java.io.DataInput;
import java.io.DataOutput;
    static final ID<String, Set<String>> SWAGGER_INDEX_ID = ID.create("SwaggerFileIndex");
    private static final int VERSION = 1;

    @NotNull
    @Override
    public ID<String, Set<String>> getName() {
public int getVersion() {
    @NotNull
    @Override
    public FileBasedIndex.InputFilter getInputFilter() {
        return file -> file.getName().endsWith("json")
                || file.getName().endsWith("yaml")
                || file.getName().endsWith("yml");
    }

    @Override
package org.zalando.intellij.swagger.file;

import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import com.google.common.collect.Lists;
import com.intellij.json.psi.JsonFile;
import com.intellij.json.psi.JsonProperty;
import com.intellij.json.psi.JsonValue;
import com.intellij.psi.PsiElement;
import com.intellij.psi.PsiFile;
import org.jetbrains.yaml.psi.YAMLDocument;
import org.junit.Before;
import org.junit.Test;


public class FileDetectorTest {

public void thatIsSwaggerYamlFileBasedOnFileContent() throws Exception {
        assertTrue(fileDetector.isMainSwaggerYamlFile(yamlFile));
    }

}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public MetadataUpdate(Long seriesPk, InstancePurgeState instancePurgeState, Stri
            this.storageID = storageID;
            this.storagePath = storagePath;
        }
    }

    @Id
import javax.json.Json;
import javax.json.stream.JsonGenerator;
import java.io.IOException;
import java.text.MessageFormat;
import java.util.List;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;
protected void execute() {
            do {
                metadataUpdates = ejb.findSeriesForScheduledMetadataUpdate(fetchSize);
                for (Series.MetadataUpdate metadataUpdate : metadataUpdates) {
                    updateMetadata(retrieveService.newRetrieveContextSeriesMetadata(metadataUpdate), storage);
                }
            }
            while (metadataUpdates.size() == fetchSize);
        } catch (IOException e) {
            LOG.error("Failed to store Series Metadata to {}:\n", storageDesc.getStorageURI(), e);
        }
    }

private void updateMetadata(RetrieveContext ctx, Storage storage) throws IOExcep
                out.closeEntry();
            }
            out.finish();
        } catch (IOException e) {
            storage.revokeStorage(writeCtx);
            throw e;
        } catch (Exception e) {
            storage.revokeStorage(writeCtx);
            LOG.error(MessageFormat.format(
                    "Update metadata failed for [seriesPk={0}, instancePurgeState={1}, storageID={2}, storagePath={3}] ",
                    ctx.getSeriesMetadataUpdate().seriesPk, ctx.getSeriesMetadataUpdate().instancePurgeState,
                    ctx.getSeriesMetadataUpdate().storageID, ctx.getSeriesMetadataUpdate().storagePath),
                    e.getMessage());
            return;
        }
        try {
            storage.commitStorage(writeCtx);
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.Ben12345rocks</groupId>
	<artifactId>VotingPlugin</artifactId>
	<version>5.8.6</version>
	<packaging>jar</packaging>
	<name>VotingPlugin</name>
	<properties>
public void giveRewards(User user, boolean online) {
		new RewardBuilder(configVoteSites.getData(), configVoteSites.getEverySiteRewardPath()).setOnline(online)
				.withPlaceHolder("ServiceSite", getServiceSite()).withPlaceHolder("SiteName", getDisplayName())
				.withPlaceHolder("VoteDelay", "" + getVoteDelay()).withPlaceHolder("VoteURL", getVoteURL()).send(user);

	}

	/**
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void setIdValue(Object id)
	@Override
	public String toString()
	{
		return entity.toString();
	}
}
private void updateEntity(Entity entity)
			return null;
		});
	}
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    private static final char[] hex = "0123456789ABCDEF".toCharArray();

    static final DateFormat ISO8601_FORMAT;
    static {
        ISO8601_FORMAT = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'");
        ISO8601_FORMAT.setTimeZone(TimeZone.getTimeZone("UTC"));
    }

    private String sql;
    protected final int autoGeneratedKeys;
public void setDate(int parameterIndex, Date x) throws SQLException {

    @Override
    public void setDate(int parameterIndex, Date x, Calendar cal) throws SQLException {
        bindNullOrString(parameterIndex, x == null ? null : ISO8601_FORMAT.format(x));
    }

    @Override
public Date getDate(int columnIndex) throws SQLException {
        } else {
            try {
                String value = cursor.getString(columnIndex - 1);
                return new Date(BasePreparedStatement.ISO8601_FORMAT.parse(value).getTime());
            } catch (ParseException e) {
                throw new SQLException(e);
            }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public boolean hasNext() {
            } catch (IOException ex) {
                throw new EsHadoopIllegalStateException(String.format("Cannot create scroll for query [%!s(MISSING)/%!s(MISSING)]", query, body), ex);
            }
            // no longer needed
            body = null;
            query = null;
public String toString() {
    }

    public static class Scroll {
        static final Scroll EMPTY = new Scroll("", -1l, Collections.<Object[]> emptyList());
        
        private final String scrollId;
        private final long total;
        private final List<Object[]> hits;
private Scroll read(BytesArray input) {
        long totalHits = hitsTotal();
        // check hits/total
        if (totalHits == 0) {
            return Scroll.EMPTY;
        }

        // move to hits/hits
class AbstractScalaEsScalaSparkSQL(prefix: String, readMetadata: jl.Boolean, pus
    val dataFrame = sqc.createDataFrame(rowRDD, schema)
    dataFrame
  }

  @Test
  def testEsDataFrame50ReadAsDataSource() {
object AbstractScalaEsScalaSparkSQL {

    // no query                      meta, push, strict, filter, encode, query
    list.add(Array("default",        FALSE, TRUE,  FALSE, TRUE, FALSE, noQuery))
    list.add(Array("defaultstrict",  FALSE, TRUE,  TRUE,  TRUE, FALSE, noQuery))
    list.add(Array("defaultnopush",  FALSE, FALSE, FALSE, TRUE, FALSE, noQuery))
    list.add(Array("withmeta",       TRUE,  TRUE,  FALSE, TRUE, FALSE, noQuery))
    list.add(Array("withmetastrict", TRUE,  TRUE,  TRUE,  TRUE, FALSE, noQuery))
    list.add(Array("withmetanopush", TRUE,  FALSE, FALSE, TRUE, FALSE, noQuery))

    // disable double filtering                  meta, push, strict, filter, encode, query
    list.add(Array("default_skiphandled",        FALSE, TRUE,  FALSE, FALSE, FALSE, noQuery))
    list.add(Array("defaultstrict_skiphandled",  FALSE, TRUE,  TRUE,  FALSE, FALSE, noQuery))
    list.add(Array("defaultnopush_skiphandled",  FALSE, FALSE, FALSE, FALSE, FALSE, noQuery))
    list.add(Array("withmeta_skiphandled",       TRUE,  TRUE,  FALSE, FALSE, FALSE, noQuery))
    list.add(Array("withmetastrict_skiphandled", TRUE,  TRUE,  TRUE,  FALSE, FALSE, noQuery))
    list.add(Array("withmetanopush_skiphandled", TRUE,  FALSE, FALSE, FALSE, FALSE, noQuery))

    // uri query                              meta, push, strict, filter, encode, query
    list.add(Array("defaulturiquery",         FALSE, TRUE,  FALSE, TRUE, FALSE, uriQuery))
    list.add(Array("defaulturiquerystrict",   FALSE, TRUE,  TRUE,  TRUE, FALSE, uriQuery))
    list.add(Array("defaulturiquerynopush",   FALSE, FALSE, FALSE, TRUE, FALSE, uriQuery))
    list.add(Array("withmetauri_query",       TRUE,  TRUE,  FALSE, TRUE, FALSE, uriQuery))
    list.add(Array("withmetauri_querystrict", TRUE,  TRUE,  TRUE,  TRUE, FALSE, uriQuery))
    list.add(Array("withmetauri_querynopush", TRUE,  FALSE, FALSE, TRUE, FALSE, uriQuery))

    // disable double filtering                           meta, push, strict, filter, encode, query
    list.add(Array("defaulturiquery_skiphandled",         FALSE, TRUE,  FALSE, FALSE, FALSE, uriQuery))
    list.add(Array("defaulturiquerystrict_skiphandled",   FALSE, TRUE,  TRUE,  FALSE, FALSE, uriQuery))
    list.add(Array("defaulturiquerynopush_skiphandled",   FALSE, FALSE, FALSE, FALSE, FALSE, uriQuery))
    list.add(Array("withmetauri_query_skiphandled",       TRUE,  TRUE,  FALSE, FALSE, FALSE, uriQuery))
    list.add(Array("withmetauri_querystrict_skiphandled", TRUE,  TRUE,  TRUE,  FALSE, FALSE, uriQuery))
    list.add(Array("withmetauri_querynopush_skiphandled", TRUE,  FALSE, FALSE, FALSE, FALSE, uriQuery))

    // dsl query                             meta, push, strict, filter, encode, query
    list.add(Array("defaultdslquery",        FALSE, TRUE,  FALSE, TRUE, FALSE, dslQuery))
    list.add(Array("defaultstrictdslquery",  FALSE, TRUE,  TRUE,  TRUE, FALSE, dslQuery))
    list.add(Array("defaultnopushdslquery",  FALSE, FALSE, FALSE, TRUE, FALSE, dslQuery))
    list.add(Array("withmetadslquery",       TRUE,  TRUE,  FALSE, TRUE, FALSE, dslQuery))
    list.add(Array("withmetastrictdslquery", TRUE,  TRUE,  TRUE,  TRUE, FALSE, dslQuery))
    list.add(Array("withmetanopushdslquery", TRUE,  FALSE, FALSE, TRUE, FALSE, dslQuery))

    // disable double filtering                          meta, push, strict, filter, encode, query
    list.add(Array("defaultdslquery_skiphandled",        FALSE, TRUE,  FALSE, FALSE, FALSE, dslQuery))
    list.add(Array("defaultstrictdslquery_skiphandled",  FALSE, TRUE,  TRUE,  FALSE, FALSE, dslQuery))
    list.add(Array("defaultnopushdslquery_skiphandled",  FALSE, FALSE, FALSE, FALSE, FALSE, dslQuery))
    list.add(Array("withmetadslquery_skiphandled",       TRUE,  TRUE,  FALSE, FALSE, FALSE, dslQuery))
    list.add(Array("withmetastrictdslquery_skiphandled", TRUE,  TRUE,  TRUE,  FALSE, FALSE, dslQuery))
    list.add(Array("withmetanopushdslquery_skiphandled", TRUE,  FALSE, FALSE, FALSE, FALSE, dslQuery))

    // unicode                                      meta, push, strict, filter, encode, query
    list.add(Array("default_" + "בְּדִיק" + "_",        FALSE, TRUE,  FALSE, TRUE, TRUE, noQuery))
    list.add(Array("defaultstrict_" + "בְּדִיק" + "_",  FALSE, TRUE,  TRUE,  TRUE, TRUE, noQuery))
    list.add(Array("defaultnopush_" + "בְּדִיק" + "_",  FALSE, FALSE, FALSE, TRUE, TRUE, noQuery))
    list.add(Array("withmeta_" + "בְּדִיק" + "_",       TRUE,  TRUE,  FALSE, TRUE, TRUE, noQuery))
    list.add(Array("withmetastrict_" + "בְּדִיק" + "_", TRUE,  TRUE,  TRUE,  TRUE, TRUE, noQuery))
    list.add(Array("withmetanopush_" + "בְּדִיק" + "_", TRUE,  FALSE, FALSE, TRUE, TRUE, noQuery))

    // disable double filtering                                 meta, push, strict, filter, encode, query
    list.add(Array("default_skiphandled_" + "בְּדִיק" + "_",        FALSE, TRUE,  FALSE, FALSE, TRUE, noQuery))
    list.add(Array("defaultstrict_skiphandled_" + "בְּדִיק" + "_",  FALSE, TRUE,  TRUE,  FALSE, TRUE, noQuery))
    list.add(Array("defaultnopush_skiphandled_" + "בְּדִיק" + "_",  FALSE, FALSE, FALSE, FALSE, TRUE, noQuery))
    list.add(Array("withmeta_skiphandled_" + "בְּדִיק" + "_",       TRUE,  TRUE,  FALSE, FALSE, TRUE, noQuery))
    list.add(Array("withmetastrict_skiphandled_" + "בְּדִיק" + "_", TRUE,  TRUE,  TRUE,  FALSE, TRUE, noQuery))
    list.add(Array("withmetanopush_skiphandled_" + "בְּדִיק" + "_", TRUE,  FALSE, FALSE, FALSE, TRUE, noQuery))

    list
  }
class AbstractScalaEsScalaSparkSQL(prefix: String, readMetadata: jl.Boolean, pus
  }

  @Test
  def testEsDataFrameReadAsDataSourceWithMetadata() {
    assumeTrue(readMetadata)

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public static void requirePrivilege(Enum<?> privilegeEnum, boolean allowSystem,
     * @see #hasPrivilege(Privilege)
     */
    public static void requirePrivilege(int privilegeLevel, boolean allowSystem, AAAContext context) {
        Principal user = context.getPrincipal(allowSystem);
        requirePrivilege(user, privilegeLevel, context);
    }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import android.view.ViewGroup;
import android.widget.Button;

import org.fraunhofer.cese.madcap.authentication.AuthenticationProvider;

import javax.inject.Inject;
public View onCreateView(LayoutInflater inflater, ViewGroup container,


        contactMadcapButton = (Button) view.findViewById(R.id.contactMadcapButton);
        contactMadcapButton.setOnClickListener(new View.OnClickListener(){
            /**
             * Called when a view has been clicked.
             *
             * @param v The view that was clicked.
             */
            @Override
            public void onClick(View v) {
                Intent i = new Intent(Intent.ACTION_SEND);
                i.setType("message/rfc822");
                i.putExtra(Intent.EXTRA_EMAIL  , new String[]{getString(R.string.contactEmail)});
                i.putExtra(Intent.EXTRA_SUBJECT, "Pocket Security Contact");
                i.putExtra(Intent.EXTRA_TEXT   , "Hello Pocket Security Team, \n \n (write your question here.) \n" +
                        " \n \n " + authenticationProvider.getLastSignedInUsersName()+" \n" +
                        " \n Reference User ID: "+ authenticationProvider.getUserId()+" (please do not remove this)");
                try {
                    startActivity(Intent.createChooser(i, "Send mail..."));
                } catch (android.content.ActivityNotFoundException ex) {
public void onClick(View v) {
        });

        onlineHelpButton = (Button) view.findViewById(R.id.onlineHelpButton);
        onlineHelpButton.setOnClickListener(new View.OnClickListener(){

            /**
             * Called when a view has been clicked.
import android.widget.Switch;
import android.widget.TextView;

import org.fraunhofer.cese.madcap.authentication.AuthenticationProvider;
import org.fraunhofer.cese.madcap.cache.UploadStatusGuiListener;
import org.fraunhofer.cese.madcap.services.DataCollectionService;
public View onCreateView(LayoutInflater inflater, ViewGroup container,

        //Parse the greeting information
        nameTextView = (TextView) view.findViewById(R.id.usernameTextview);
        if (authenticationProvider.getLastSignedInUsersName() != null) {
            nameTextView.setText(authenticationProvider.getLastSignedInUsersName());
        }

        collectionDataStatusText = (TextView) view.findViewById(R.id.collectionDataStatusText);
import android.os.Bundle;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.util.Log;

import com.google.android.gms.auth.api.Auth;
import com.google.android.gms.auth.api.signin.GoogleSignInAccount;
import com.google.android.gms.common.api.OptionalPendingResult;
import com.google.android.gms.common.api.ResultCallback;
import com.google.android.gms.common.api.Status;
import com.google.api.client.googleapis.extensions.android.gms.auth.GoogleAccountCredential;

import org.fraunhofer.cese.madcap.MyApplication;

public void onResult(@NonNull Status r) {
    }

    /**
     * Retrieves the currently logged in User Id.
     *
     * @return User ID.
     */
    @SuppressWarnings("ConstantConditions")
    @Nullable
    public String getUserId() {
        return (user == null) ? null : user.getId();
    }

    /**
     * Makes the Signed in User accessable.
     *
     * @return the last users name.
     */
    @SuppressWarnings({"TypeMayBeWeakened", "ConstantConditions"})
    @Nullable
    public String getLastSignedInUsersName() {
        return (user == null) ? null : (user.getGivenName() + ' ' + user.getFamilyName());
    }

    /**
     * Gets the currently signed in user.
     *
     * @return the signed in user.
public GoogleSignInAccount getUser() {
     */
    synchronized void setUser(@Nullable GoogleSignInAccount user) {
        if(this.user != null) {
            this.lastLoggedInUser = this.user;
            MyApplication.madcapLogger.d(TAG,"lastLoggedInUser is now: "+lastLoggedInUser);
        }
        this.user = user;

import android.util.Log;

import org.fraunhofer.cese.madcap.authentication.AuthenticationProvider;

import java.util.UUID;

    @Override
    public void save(Probe probe) {
        Log.d(TAG, "UID "+authenticationProvider.getUserId());
        if (authenticationProvider.getUserId() != null) {
            CacheEntry probeEntry = new CacheEntry();
            probeEntry.setId(UUID.randomUUID().toString());
            probeEntry.setTimestamp(probe.getDate());
            probeEntry.setUserID(authenticationProvider.getUserId());
            probeEntry.setProbeType(probe.getType());
            probeEntry.setSensorData(probe.toString());

public void onMessageReceived(RemoteMessage remoteMessage) {
        if (remoteMessage.getData().size() > 0) {
            MyApplication.madcapLogger.d(TAG, "Message data payload: " + remoteMessage.getData());
            SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(this);
            if (authenticationProvider.getUserId() != null && prefs.getBoolean(getString(R.string.data_collection_pref), true)) {
                processIncomingMessage(remoteMessage.getData());
            }
        }
import android.support.v4.app.NotificationCompat;
import android.support.v4.app.TaskStackBuilder;

import com.google.android.gms.awareness.FenceApi;
import com.google.android.gms.awareness.SnapshotApi;
import com.google.android.gms.common.api.GoogleApiClient;
    AudioReceiverFactory audioReceiverFactory;



    /**
     * Return the communication channel to the service.  May return null if
     * clients can not bind to the service.  The returned
public void onCreate() {

    }

    @Override
    public void onDestroy() {
        MyApplication.madcapLogger.d(TAG, "onDestroy");
        super.onDestroy();

        DataCollectionProbe probe = new DataCollectionProbe();
        probe.setState(DataCollectionProbe.OFF);
        probe.setDate(System.currentTimeMillis());
        manualProbeUploader.uploadManual(probe, getApplication(), cache);

        stopHearthBeat();

public boolean onUnbind(Intent intent) {
    public int onStartCommand(Intent intent, int flags, int startId) {
        MyApplication.madcapLogger.d(TAG, "OnStartCommand. Intent callee: " + (intent == null ? "null" : intent.getStringExtra("callee")));

        DataCollectionProbe probe = new DataCollectionProbe();
        probe.setState(DataCollectionProbe.ON);
        probe.setDate(System.currentTimeMillis());
        manualProbeUploader.uploadManual(probe, getApplication(), cache);

        startForeground(NOTIFICATION_ID, getRunNotification());

private void startHearthBeat() {
     * Stops the reverse Hearthbeat.
     */
    private void stopHearthBeat() {
        if(hearthBeatScheduler != null){
            hearthBeatScheduler.shutdown();
        }
    }
public int requestUpload() {
    }



    /**
     * Returns the number of entities currently held in the cache.
     * <p>
public void progressUpdate(int value) {

    public void setUploadStatusGuiListener(UploadStatusGuiListener uploadStatusGuiListener) {
        this.uploadStatusGuiListener = uploadStatusGuiListener;
        if(uploadStatusGuiListener != null){
            uploadStatusGuiListener.restoreLastUpload();
        }
    }
public void run() {
        long lastHearthbeat = prefs.getLong(application.getString(R.string.last_hearthbeat), currentTime);

        if(intervallTooLong(lastHearthbeat, currentTime, delta, interval)){
            ReverseHeartBeatProbe deathStart = new ReverseHeartBeatProbe();
            deathStart.setDate(lastHearthbeat);
            deathStart.setKind(ReverseHeartBeatProbe.DEATH_START);
            manualProbeUploader.uploadManual(deathStart, application, cache);

            ReverseHeartBeatProbe deathEnd = new ReverseHeartBeatProbe();
            deathEnd.setDate(currentTime);
            deathEnd.setKind(ReverseHeartBeatProbe.DEATH_END);
            manualProbeUploader.uploadManual(deathEnd, application, cache);
        }


import android.app.Application;
import android.os.AsyncTask;
import android.util.Log;

import com.google.common.collect.ImmutableList;
import com.google.firebase.crash.FirebaseCrash;

import org.fraunhofer.cese.madcap.MyApplication;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.LinkedList;
import java.util.List;
import java.util.UUID;

import javax.inject.Inject;

    public ManualProbeUploadTask(Application application, Cache cache) {
        this.application = application;
        ((MyApplication) application).getComponent().inject(this);

        cacheFactory = new CacheFactory(cache, authenticationProvider);
public ManualProbeUploadTask(Application application, Cache cache) {
     * @see #onPostExecute
     * @see #publishProgress
     */
    @Override
    protected Void doInBackground(Probe... params) {
        Probe probe = params[0];

        ProbeSaveResult saveResult = new ProbeSaveResult();
        saveResult.setSaved(new ArrayList<String>(1));
        saveResult.setAlreadyExists(new ArrayList<String>(1));

        List<ProbeEntry> toUpload = new LinkedList<>();

        ProbeEntry probeEntry = new ProbeEntry();
        probeEntry.setId(UUID.randomUUID().toString());
        probeEntry.setTimestamp(probe.getDate());
        probeEntry.setUserID(authenticationProvider.getUserId());
        probeEntry.setProbeType(probe.getType());
        probeEntry.setSensorData(probe.toString());

        toUpload.add(probeEntry);

        ProbeDataSet dataSet = new ProbeDataSet();
        dataSet.setTimestamp(Calendar.getInstance().getTimeInMillis());
        dataSet.setEntryList(toUpload);

        ProbeSaveResult remoteResult;

        if (probeEntry.getUserID() != null) {
            try {
                ProbeEndpoint appEngineApi = endpointApiBuilder.build(application);
                remoteResult = appEngineApi.insertProbeDataset(dataSet).execute();

                Log.d(TAG, "Manual upload succeeded");

                if (remoteResult.getSaved() != null) {
                    saveResult.getSaved().addAll(ImmutableList.copyOf(remoteResult.getSaved()));
                }

                if (remoteResult.getAlreadyExists() != null) {
                    saveResult.getAlreadyExists().addAll(ImmutableList.copyOf(remoteResult.getAlreadyExists()));
                }
            } catch (IOException e) {
                Log.d(TAG, "Manual DataCollectionProbe upload failed. Save now to cache.");
                cacheFactory.save(probe);
            }
        } else {
            FirebaseCrash.report(new Exception("Attempt to save an DataCollectionEnty with a null user"));
        }


        return null;
    }
}
package edu.umd.fcmd.sensorlisteners.model;

import android.util.Log;

/**
 * Created by MMueller on 12/13/2016.
 *
 *  Model class that indicates if DataCollection is
 *  running or not.
 */
public class DataCollectionProbe extends Probe {
    private final String TAG = getClass().getSimpleName();

    public static final String ON = "ON";
    public static final String OFF = "OFF";
    private String state;

    /**
     * Gets the state.
     * @return DataCollectionProbe.ON or DataCollectionProbe.OFF
     */
    public String getState() {
        return state;
    }

    /**
     * Sets the state
     * @param state DataCollectionProbe.ON or DataCollectionProbe.OFF
     */
    public void setState(String state) {
        Log.d(TAG, "Set DataCollectionProbe state to "+state);
        this.state = state;
    }

    /**
     * Gets the type of an state e.g. Accelerometer
     *
     * @return the type of state.
public String getType() {
        return "DataCollection";
    }

    /**
     * Returns a string representation of the object. In general, the
     * {@code toString} method returns a string that
     * "textually represents" this object. The result should
     * be a concise but informative representation that is easy for a
     * person to read.
     * It is recommended that all subclasses override this method.
     * <p>
     * The {@code toString} method for class {@code Object}
     * returns a string consisting of the name of the class of which the
     * object is an instance, the at-sign character `{@code @}', and
     * the unsigned hexadecimal representation of the hash code of the
     * object. In other words, this method returns a string equal to the
     * value of:
     * <blockquote>
     * <pre>
     * getClass().getName() + '@' + Integer.toHexString(hashCode())
     * </pre></blockquote>
     *
     * @return a string representation of the object.
     */
    @Override
    public String toString() {
        return "{\"state\": " + state +

/**
 * Created by MMueller on 1/4/2017.
 *
 * Model class for reverse hearthbeats. Probe shows that in
 * the modelled period there have been no alive signs of the
 * application.
 *
 * This probe rocks.
 */
public class ReverseHeartBeatProbe extends Probe {
    public static final String DEATH_START = "DEATHSTART";
    public static final String DEATH_END = "DEATHEND";

    private String kind;

    /**
     * Gets the kind.
     * @return the kind.
     */
    public String getKind() {
        return kind;
    }

    /**
     * Sets the kind.
     * @param kind the kind.
     */
    public void setKind(String kind) {
        this.kind = kind;
    }

    /**
     * Gets the type of an kind e.g. Accelerometer
     *
     * @return the type of kind.
public String getType() {
        return "ReverseHeartBeat";
    }

    /**
     * Returns a string representation of the object. In general, the
     * {@code toString} method returns a string that
     * "textually represents" this object. The result should
     * be a concise but informative representation that is easy for a
     * person to read.
     * It is recommended that all subclasses override this method.
     * <p>
     * The {@code toString} method for class {@code Object}
     * returns a string consisting of the name of the class of which the
     * object is an instance, the at-sign character `{@code @}', and
     * the unsigned hexadecimal representation of the hash code of the
     * object. In other words, this method returns a string equal to the
     * value of:
     * <blockquote>
     * <pre>
     * getClass().getName() + '@' + Integer.toHexString(hashCode())
     * </pre></blockquote>
     *
     * @return a string representation of the object.
     */
    @Override
    public String toString() {
        return "{\"kind\": " + "\"" +kind +"\""+
                '}';
    }
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void run() {
        throw e;
      }
    } finally {
      TraceCompat.endSection();
    }
  }
void cancel() {

    isCancelled = true;
    decodeJob.cancel();
    boolean isPendingJobRemoved = diskCacheExecutor.remove(decodeJob)
        || sourceExecutor.remove(decodeJob)
        || sourceUnlimitedExecutor.remove(decodeJob);
    listener.onEngineJobCancelled(this, key);

    if (isPendingJobRemoved) {
      release(true /*isRemovedFromQueue*/);
    }
  }

  // Exposed for testing.
public void onLoadFailed(GlideException e) {

  @Override
  public void reschedule(DecodeJob<?> job) {
    if (isCancelled) {
      MAIN_THREAD_HANDLER.obtainMessage(MSG_CANCELLED, this).sendToTarget();
    } else {
      getActiveSourceExecutor().execute(job);
    }
  }

  @Synthetic
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import org.plantuml.idea.lang.settings.PlantUmlSettings;
import org.plantuml.idea.plantuml.PlantUml;
import org.plantuml.idea.plantuml.PlantUmlIncludes;

import java.io.File;
import java.util.ArrayList;
public FileAnnotationResult doAnnotate(PsiFile file) {
    private SyntaxResult checkSyntax(PsiFile file, String source) {

        try {
            File baseDir = new File(file.getVirtualFile().getParent().getPath());
            FileSystem.getInstance().setCurrentDir(baseDir);
            PlantUmlIncludes.commitIncludes(source, baseDir);
            return SyntaxChecker.checkSyntaxFair(source);
        } finally {
            FileSystem.getInstance().reset();
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import com.google.inject.Inject;
import com.intellij.lexer.Lexer;
import com.intellij.openapi.fileTypes.SyntaxHighlighter;
import com.intellij.openapi.fileTypes.SyntaxHighlighterFactory;
import com.intellij.openapi.project.Project;
import org.metaborg.intellij.idea.languages.IIdeaLanguageManager;
import org.metaborg.intellij.idea.languages.ILanguageBindingManager;
import org.metaborg.intellij.idea.languages.MetaborgIdeaLanguage;
import org.metaborg.intellij.idea.parsing.elements.SpoofaxTokenTypeManager;
import org.metaborg.intellij.resources.IIntelliJResourceService;

public SyntaxHighlighter getSyntaxHighlighter(
        @Nullable final FileObject file = this.resourceService.resolve(virtualFile);

        if (file != null) {
            implementation = this.identifierService.identify(file);
        }
        else if (virtualFile instanceof LightVirtualFile) {
            final com.intellij.lang.Language ideaLanguage = ((LightVirtualFile)virtualFile).getLanguage();
else if (virtualFile instanceof LightVirtualFile) {
        }

        if (implementation == null){
            // FIXME: What to do? Can I return null to get the default highlighting?
            return null;
        }

        @Nullable final IProject metaborgProject = null;  // FIXME: Get IProject from Project
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
protected void onCreate(@Nullable Bundle savedInstanceState) {
            public void run() {
                //Thread to check which checkbox is enabled
                while (true) {
                    if (isCH1Selected && !isCH2Selected && !isCH3Selected && !isMICSelected){
                        captureTask = new CaptureTask();
                        captureTask.execute("CH1");
                        synchronized (lock){
public void run() {

                    }

                    if (isCH2Selected && !isCH1Selected && !isCH3Selected && !isMICSelected){
                        captureTask = new CaptureTask();
                        captureTask.execute("CH2");
                        synchronized (lock){
public void run() {

                    }

                    if (isCH3Selected && !isCH1Selected && !isCH2Selected && !isMICSelected){
                        {
                            captureTask = new CaptureTask();
                            captureTask.execute("CH3");
public void run() {
                        }
                    }

                    if (isMICSelected && !isCH1Selected && !isCH2Selected && !isCH3Selected){
                        captureTask = new CaptureTask();
                        captureTask.execute("MIC");
                        synchronized (lock){
public void run() {

                    }

                    if (isCH1Selected && isCH2Selected && !isCH3Selected && !isMICSelected){
                        captureTask2 = new CaptureTaskTwo();
                        captureTask2.execute("CH1");
                        synchronized (lock){
public void run() {
                        }
                    }

                    if (isCH3Selected && isCH2Selected && !isCH1Selected && !isMICSelected){
                        captureTask2 = new CaptureTaskTwo();
                        captureTask2.execute("CH3");
                        synchronized (lock){
public void run() {
                        }
                    }

                    if (isMICSelected && isCH2Selected && !isCH3Selected && !isCH1Selected){
                        captureTask2 = new CaptureTaskTwo();
                        captureTask2.execute("MIC");
                        synchronized (lock){
public void run() {
                        }
                    }

                    if (isCH1Selected && isCH2Selected && isCH3Selected && isMICSelected){
                        captureTask3 = new CaptureTaskThree();
                        captureTask3.execute("CH1");
                        synchronized (lock){
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    <artifactId>Plan</artifactId>
    <version>2.0.0</version>
    <packaging>jar</packaging>
    <repositories>
        <repository>
            <id>org.bukkit</id>
            <url>org/bukkit/craftbukkit/1.10.2-R0.1-SNAPSHOT/craftbukkit-1.10.2-R0.1-SNAPSHOT.jar</url>
        </repository>
    </repositories>
    <dependencies>
        <dependency>
            <groupId>org.bukkit</groupId>
public void setGeoLocation(String geoLocation) {
        this.geoLocation = geoLocation;
    }

}
public UserData(UserData data) {
        sessions.addAll(data.getSessions());
    }

    /**
     *
     * @param ip
public void handleChangeEvent(GameMode newGM, UserData data) {
        long lastSwap = data.getLastGmSwapTime();
        long playTime = data.getPlayTime();
        GameMode oldGM = data.getLastGamemode();
        data.setGMTime(oldGM, times.get(oldGM) + (playTime - lastSwap));

        data.setLastGamemode(newGM);

        data.setLastGmSwapTime(playTime);
    }

name: Plan
author: Rsl1122
main: main.java.com.djrapitops.plan.Plan
version: 2.8.3

softdepend:
- OnTime
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
private void internalPerformTranslogRecovery(boolean skipTranslogRecovery, boole

    private boolean assertMaxUnsafeAutoIdInCommit() throws IOException {
        final Map<String, String> userData = SegmentInfos.readLatestCommit(store.directory()).getUserData();
        if (recoveryState().getRecoverySource().getType() == RecoverySource.Type.PEER) {
            // as of 5.5.0, the engine stores the maxUnsafeAutoIdTimestamp in the commit point.
            // This should have baked into the commit by the primary we recover from, regardless of the index age.
            assert userData.containsKey(InternalEngine.MAX_UNSAFE_AUTO_ID_TIMESTAMP_COMMIT_ID) :
                "recovery from remote but " + InternalEngine.MAX_UNSAFE_AUTO_ID_TIMESTAMP_COMMIT_ID + " is not found in commit";
        } else if (recoveryState().getRecoverySource().getType() == RecoverySource.Type.EXISTING_STORE &&
            indexSettings.getIndexVersionCreated().onOrAfter(Version.V_5_5_0_UNRELEASED)) {
            assert userData.containsKey(InternalEngine.MAX_UNSAFE_AUTO_ID_TIMESTAMP_COMMIT_ID) :
                "opening index which was created post 5.5.0 but " + InternalEngine.MAX_UNSAFE_AUTO_ID_TIMESTAMP_COMMIT_ID
                    + " is not found in commit";
        }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
********************************************
*            version history
********************************************
1.3.9
* #323 Random issue: Cannot instantiate interface org.osgl.inject.ScopeCache$SingletonScope
* #322 CLI: Print out the real exception instead of `InvocationTargetException`
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 * @see PropertyTransformer
 * @see PropertyTransformers
 */
public class LeaseAwareVaultPropertySource extends
		EnumerablePropertySource<VaultOperations> {

	private final static Log logger = LogFactory
			.getLog(LeaseAwareVaultPropertySource.class);
public LeaseAwareVaultPropertySource(String name,

		this.secretLeaseContainer = secretLeaseContainer;
		this.requestedSecret = requestedSecret;
		this.propertyTransformer = propertyTransformer;
		this.leaseListener = new LeaseListenerAdapter() {
			@Override
			public void onLeaseEvent(SecretLeaseEvent leaseEvent) {
public VaultPropertySource(String name, VaultOperations vaultOperations, String
		Assert.notNull(propertyTransformer, "PropertyTransformer must not be null");

		this.path = path;
		this.propertyTransformer = propertyTransformer;

		loadProperties();
	}
public static PropertyTransformer noop() {
	}

	/**
	 * @param propertyNamePrefix the prefix to add to each property name.
	 * @return {@link PropertyTransformer} to add {@code propertyNamePrefix} to each
	 * property name.
public PropertyTransformer andThen(final PropertyTransformer after) {
			return new PropertyTransformerSupport() {

				@Override
				public Map<String, String> transformProperties(Map<String, String> input) {

					Map<String, String> processed = that.transformProperties(input);
					return after.transformProperties(processed);
public static PropertyTransformer instance() {
	}

	/**
	 * {@link PropertyTransformer} that adds a prefix to each key name.
	 */
	static class KeyPrefixPropertyTransformer extends PropertyTransformerSupport {

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.ApplicationContext;
import org.springframework.core.env.Environment;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringRunner;
	@Autowired
	Environment env;

	@Autowired
	ApplicationContext context;

	@Value("${myapp}")
	String myapp;

public void shouldLoadProperties() {
		assertThat(vaultPropertySource.getProperty("key")).isEqualTo("value");
		assertThat(vaultPropertySource.getProperty("integer")).isEqualTo("1");
		assertThat(vaultPropertySource.getProperty("complex.key")).isEqualTo("value");
	}

	@Test
private void prepareResponse() {
		Map<String, Object> data = new LinkedHashMap<String, Object>();
		data.put("key", "value");
		data.put("integer", 1);
		data.put("complex", Collections.singletonMap("key", "value"));

		VaultResponse vaultResponse = new VaultResponse();
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 */
package org.jooby.ebean;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Properties;
import java.util.Set;
import java.util.function.Consumer;

import org.jooby.Env;
import org.jooby.internal.ebean.EbeanManaged;
import org.jooby.jdbc.Jdbc;

import com.google.inject.Binder;
import com.google.inject.Key;
import com.typesafe.config.Config;
import io.ebean.EbeanServer;
import io.ebean.config.ContainerConfig;
import io.ebean.config.ServerConfig;

/**
 * <h1>ebean module</h1>
 */
public class Ebeanby extends Jdbc {

  private Set<String> packages = new HashSet<>();

  static {
    // Turn off ebean shutdown hook:
public Ebeanby(final String name) {
  public Ebeanby() {
  }

  /**
   * <p>
   * Add one ore more packages. Packages are used by the agent enhancement (if present) and to
   * search for entities via class path search when classes have not been explicitly specified.
   * </p>
   *
   * @param packages Packages to enhancement and search for.
   * @return This module.
   */
  public Ebeanby packages(final String... packages) {
    Arrays.stream(packages).forEach(this.packages::add);
    return this;
  }

  @Override
  public void configure(final Env env, final Config conf, final Binder binder) {
    configure(env, conf, binder, (name, ds) -> {
      ServerConfig config = new ServerConfig();

      this.packages.add(conf.getString("application.ns"));

      EbeanEnhancer.newEnhancer().run(packages);

      config.setName(name);

      packages.forEach(config::addPackage);

      Config cprops = conf.getConfig("ebean");
      if (conf.hasPath("ebean." + name)) {
        cprops = conf.getConfig("ebean." + name)
public void configure(final Env env, final Config conf, final Binder binder) {

      callback(config, conf);

      EbeanManaged server = new EbeanManaged(conf, config);
      env.onStart(server::start);
      env.onStop(server::stop);
public void configure(final Env env, final Config conf, final Binder binder) {
      }
      keys.generate(EbeanServer.class, name, provider);
    });
  }

  @Override
private Properties props(final Config config) {
    });
    return props;
  }
}
ebean.debug.sql=true
ebean.debug.lazyload=false

ebean.disableClasspathSearch = true
ebean.search.packages = ${application.ns}

# -------------------------------------------------------------
# Transaction Logging
import static org.easymock.EasyMock.expect;
import static org.easymock.EasyMock.isA;

import java.util.Properties;

import javax.sql.DataSource;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

import com.google.common.collect.Sets;
import com.google.inject.Binder;
import com.google.inject.Key;
    expect(env.onStop(isA(CheckedRunnable.class))).andReturn(env);
  };

  @Test
  public void configure() throws Exception {
    new MockUnit(Env.class, Binder.class)
public void configure() throws Exception {
        .expect(hikariDataSource())
        .expect(serviceKey("db"))
        .expect(containerConfig)
        .expect(serverConfig(true))
        .expect(enhancer("my.model"))
        .expect(ebeanProperties())
        .expect(binder)
        .expect(onStop)
        .run(unit -> {
          new Ebeanby("db")
              .configure(unit.get(Env.class), config(), unit.get(Binder.class));
public void configureWith2Names() throws Exception {
          ServerConfig serverConfig = unit.mockConstructor(ServerConfig.class);

          serverConfig.setName("mydb");
          serverConfig.addPackage("my.model");
          serverConfig.setContainerConfig(unit.get(ContainerConfig.class));
          serverConfig.setDataSource(isA(DataSource.class));
          serverConfig.loadFromProperties(isA(Properties.class));
public void configureWith2Names() throws Exception {

          unit.registerMock(ServerConfig.class, serverConfig);
        })
        .expect(enhancer("my.model"))
        .expect(ebeanProperties())
        .expect(unit -> {
          Binder binder = unit.get(Binder.class);
public void configureWith2Names() throws Exception {
          expect(binder.bind(Key.get(EbeanServer.class, Names.named("mydb")))).andReturn(lbbES);
        })
        .expect(onStop)
        .run(unit -> {
          new Ebeanby("db")
              .configure(unit.get(Env.class), config()
public void configureWith2Names() throws Exception {
  }

  @Test
  public void configureWithPackages() throws Exception {
    new MockUnit(Env.class, Binder.class)
        .expect(props("com.ibm.db2.jcc.DB2SimpleDataSource", "jdbc:db2://127.0.0.1/db",
            "db2.db", null, "", false))
        .expect(hikariConfig())
        .expect(hikariDataSource())
        .expect(serviceKey("db"))
        .expect(ebeanProperties())
        .expect(containerConfig)
        .expect(serverConfig(true))
        .expect(enhancer("otro.package", "my.model"))
        .expect(binder)
        .expect(unit -> {
          ServerConfig conf = unit.get(ServerConfig.class);
          conf.addPackage("otro.package");
        })
        .expect(onStop)
        .run(unit -> {
          new Ebeanby()
              .packages("otro.package")
              .configure(unit.get(Env.class), config(), unit.get(Binder.class));
        });
  }

  @Test
  public void configureCallback() throws Exception {
    new MockUnit(Env.class, Binder.class)
        .expect(props("com.ibm.db2.jcc.DB2SimpleDataSource", "jdbc:db2://127.0.0.1/db",
public void configureCallback() throws Exception {
        .expect(serviceKey("db"))
        .expect(ebeanProperties())
        .expect(containerConfig)
        .expect(serverConfig(true))
        .expect(enhancer("my.model"))
        .expect(binder)
        .expect(unit -> {
          ServerConfig conf = unit.get(ServerConfig.class);
          conf.setName("xx");
        })
        .expect(onStop)
        .run(unit -> {
          new Ebeanby()
              .doWith((final ServerConfig conf) -> {
public void configureCustomOption() throws Exception {
          expect(props.setProperty("ebean.debug.sql", "true")).andReturn(null);
          expect(props.setProperty("ebean.debug.lazyload", "false")).andReturn(null);
          expect(props.setProperty("ebean.disableClasspathSearch", "true")).andReturn(null);
          expect(props.setProperty("ebean.search.packages", "my.model")).andReturn(null);
          unit.registerMock(Properties.class, props);
        })
        .expect(containerConfig)
        .expect(serverConfig(false))
        .expect(enhancer("my.model"))
        .expect(binder)
        .expect(onStop)
        .run(unit -> {
          Config customConfig = config().withValue("ebean.db.defaultServer",
              ConfigValueFactory.fromAnyRef(false));
private Block enhancer(final String... packages) {
    };
  }

  private Block serverConfig(final boolean defaultServer) {
    return unit -> {
      ServerConfig serverConfig = unit.mockConstructor(ServerConfig.class);

      serverConfig.setName("db");
      serverConfig.addPackage("my.model");
      serverConfig.setContainerConfig(unit.get(ContainerConfig.class));
      serverConfig.setDataSource(isA(DataSource.class));
      serverConfig.loadFromProperties(isA(Properties.class));
private Block ebeanProperties() {
      expect(props.setProperty("ebean.debug.sql", "true")).andReturn(null);
      expect(props.setProperty("ebean.debug.lazyload", "false")).andReturn(null);
      expect(props.setProperty("ebean.disableClasspathSearch", "true")).andReturn(null);
      expect(props.setProperty("ebean.search.packages", "my.model")).andReturn(null);
      unit.registerMock(Properties.class, props);
    };
  }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
static BigDecimal getAvailableBalance(final AppContext ctx, final ZonkyApi api)
        final BigDecimal balance = Remote.getAvailableBalance(ctx, zonky);
        final ExecutorService executor = Executors.newWorkStealingPool();
        final Investor i = new Investor(zonky, balance, executor);
        executor.shutdownNow();
        return Remote.getInvestingFunction(ctx, availableLoans).apply(i);
    }

    private final AuthenticationHandler auth;
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
repositories {
        name = "CoFH Maven"
        url = "http://maven.covers1624.net"
    }
	maven {
        url = "http://chickenbones.net/maven"
    }
}

dependencies {
processResources
    }
}

sourceSets {
    main {
		java {
            exclude '**/me/jacky1356400/exchangers/item/powered/*'
		}
	}
}
org.gradle.jvmargs=-Xmx4G
mc_version=1.12
forge_version=14.21.1.2396
mod_version=2.1
@Mod(modid = Data.MODID, version = Data.VERSION, name = Data.MODNAME, dependencies = Exchangers.DEPENDS, useMetadata = true)
public class Exchangers {

	public static final String DEPENDS = "after:redstoneflux;after:enderio;after:thermalfoundation;after:thermalexpansion;after:mekanism;";

	public static Logger logger = LogManager.getLogger("Exchangers");


import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraftforge.common.capabilities.CapabilityInject;
import net.minecraftforge.energy.IEnergyStorage;

public class EnergyHelper {

    @CapabilityInject (IEnergyStorage.class)

    public static ItemStack setDefaultEnergyTag(ItemStack container, int energy) {

        if (!container.hasTagCompound()) {
public void onItemRegistry(RegistryEvent.Register<Item> e) {

	@SubscribeEvent
	public void onRecipeRegistry(RegistryEvent.Register<IRecipe> e) {
		initRecipes();
		e.getRegistry().registerAll(Data.RECIPES.toArray(new IRecipe[0]));
	}
public void preInit(FMLPreInitializationEvent e) {
		File configDir = e.getModConfigurationDirectory();
		config = new Configuration(new File(configDir.getPath(), "exchangers.cfg"));
		Config.readConfig();
		/*
		if ((Config.enderIOModule = true) && (Loader.isModLoaded(Data.EIO))) {
			EnderIOIntegration.init();
		}
		*/
		if ((Config.thermalExpansionModule = true) && (Loader.isModLoaded(Data.THERMAL))) {
			ThermalExpansionIntegration.init();
		}
		/*
		if ((Config.mekanismModule = true) && (Loader.isModLoaded(Data.MEK))) {
			MekanismIntegration.init();
		}
		*/
		MinecraftForge.EVENT_BUS.register(new ModRegistry());
		PacketHandler.registerMessages(Data.MODID);
	}
	public static final String EIO = "enderio";
	public static final String MEK = "mekanism";
	public static final String THERMAL = "thermalexpansion";
	public static final String VERSION = "1.12-2.1";
	public static final String MODID = "exchangers";
	public static final String MODNAME = "Exchangers";
	public static final CreativeTabs TAB = new CreativeTabs(MODID) {
  "modid": "exchangers",
  "name": "Exchangers",
  "description": "Block Exchangers.",
  "version": "1.12-2.1",
  "mcversion": "1.12",
  "url": "https://github.com/Jacky1356400/Exchangers",
  "updateUrl": "",
  "authorList": ["Jacky1356400", "Shadows_of_Fire", "Turkey2349"],
  "credits": "ThatGamerBlue, ColossalPercy, JCOnline_ and many other people that helped the development of this mod!",
  "logoFile": "assets/exchangers/logo.png",
  "screenshots": [],
  "dependencies": []
}
]
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
configure(rootProject) { project ->

	testRuntime "ch.qos.logback:logback-classic:$logbackVersion"
	// Testing
	testCompile "org.hamcrest:hamcrest-library:1.3" , "org.testng:testng:6.8.5"
  }


protected final boolean isInboundDone() {
		return inbound.inboundDone || !channel.isActive();
	}


	/**
	 * Return true if inbound traffic is not expected anymore
	 *
protected final boolean isInboundCancelled() {
		return inbound.isCancelled() || !channel.isActive();
	}

	/**
	 * Return true if inbound traffic is not expected anymore
	 *
protected final boolean isOutboundDone() {
		return outboundSubscription == Operators.cancelledSubscription() || !channel.isActive();
	}

	/**
	 * Connector handler provided by user
	 *
	public final void fireContextActive(NettyContext context) {
		if(!fired) {
			fired = true;
			sink.success(context);
		}
	}

final boolean drainReceiver() {
					if (ex != null) {
						parent.context.fireContextError(ex);
					}
					else {
						parent.context.fireContextActive(parent);
					}
	public void fireContextActive(NettyContext context) {
		if (!fired) {
			fired = true;
			sink.success(context);
		}
	}

static HttpOperations bindHttp(Channel channel,
	}

	@Override
	public HttpClientRequest addCookie(Cookie cookie) {
		if (!hasSentHeaders()) {
			this.requestHeaders.add(HttpHeaderNames.COOKIE,
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        List<Long> playersOnline = new ArrayList<>();
        List<String> labels = new ArrayList<>();

        for (Long start : sessionStarts) {
            if (start < nowMinusScale) {
                sessionStarts.add(nowMinusScale);
            }
        }

        long lastPValue = 0;
        long lastSavedPValue = -1;
        long lastSaveI = 0;
name: Plan
author: Rsl1122
main: main.java.com.djrapitops.plan.Plan
version: 3.0.1

softdepend:
- OnTime
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
private static String removeDotAndComma(final String str) {
     */
    boolean getLoginStatus(@Nullable final String page) {
        if (StringUtils.isBlank(page)) {
            Log.e("Login.checkLogin: No page given");
            return false;
        }
        assert page != null;
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import org.bukkit.scheduler.BukkitRunnable;
import org.bukkit.scheduler.BukkitTask;
import static org.bukkit.Bukkit.getOfflinePlayer;
import static org.bukkit.Bukkit.getOfflinePlayer;

/**
 * This Class contains the Cache.
public void process(UserData data) {
     */
    public void saveCommandUse() {
        try {
            db.saveCommandUse(commandUse);
        } catch (SQLException | NullPointerException e) {
            Log.toLog(this.getClass().getName(), e);
        }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Minor fixes
package com.wildex999.tickdynamic.commands;

import com.mojang.realmsclient.gui.ChatFormatting;
import com.wildex999.tickdynamic.TickDynamicMod;
import mcp.MethodsReturnNonnullByDefault;
import net.minecraft.command.ICommand;
import net.minecraft.command.ICommandSender;
import net.minecraft.server.MinecraftServer;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.text.TextComponentString;

import javax.annotation.ParametersAreNonnullByDefault;
import java.util.ArrayList;
public List getAliases() {
	public void execute(MinecraftServer server, ICommandSender sender, String[] args) {
		if (args.length == 1) {
			if (mod.enabled)
				sender.sendMessage(new TextComponentString("Tick Dynamic is currently " + ChatFormatting.GREEN + " Enabled!"));
			else
				sender.sendMessage(new TextComponentString("Tick Dynamic is currently " + ChatFormatting.RED + " Disabled!"));
			sender.sendMessage(new TextComponentString("Usage: " + getUsage(sender)));
			return;
		}

		if (args[1].equals("yes") || args[1].equals("y")) {
			if (mod.enabled) {
				sender.sendMessage(new TextComponentString(ChatFormatting.GREEN + "Tick Dynamic is already enabled!"));
				return;
			}
			mod.enabled = true;
			sender.sendMessage(new TextComponentString("Tick Dynamic is now " + ChatFormatting.GREEN + "Enabled!"));
			return;
		} else if (args[1].equals("no") || args[1].equals("n")) {
			if (!mod.enabled) {
				sender.sendMessage(new TextComponentString(ChatFormatting.RED + "Tick Dynamic is already disabled!"));
				return;
			}
			mod.enabled = false;
			sender.sendMessage(new TextComponentString("Tick Dynamic is now " + ChatFormatting.RED + "Disabled!"));
			return;
		}

package com.wildex999.tickdynamic.commands;

import com.mojang.realmsclient.gui.ChatFormatting;
import com.wildex999.tickdynamic.TickDynamicMod;
import net.minecraft.command.CommandException;
import net.minecraft.command.ICommand;
import net.minecraft.command.ICommandSender;
import net.minecraft.server.MinecraftServer;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.text.TextComponentString;

import java.text.DecimalFormat;
import java.util.*;
public void execute(MinecraftServer server, ICommandSender sender, String[] args
		//Send it over to subCommand handler
		ICommand subHandler = subCommandHandlers.get(args[0]);
		if (subHandler == null) {
			sender.sendMessage(new TextComponentString(ChatFormatting.RED + "No handler for the command " + ChatFormatting.ITALIC + args[0]));
			return;
		}
		subHandler.execute(server, sender, args);
public static String getTPSFormatted(TickDynamicMod mod) {
		String color;

		if (mod.averageTPS >= 19)
			color = ChatFormatting.GREEN.toString();
		else if (mod.averageTPS > 10)
			color = ChatFormatting.YELLOW.toString();
		else
			color = ChatFormatting.RED.toString();

		DecimalFormat tpsFormat = new DecimalFormat("#.00");
		tpsOut = color + tpsFormat.format(mod.averageTPS) + ChatFormatting.RESET;
		return tpsOut;
	}

package com.wildex999.tickdynamic.commands;

import com.mojang.realmsclient.gui.ChatFormatting;
import com.wildex999.tickdynamic.TickDynamicMod;
import com.wildex999.tickdynamic.timemanager.TimeManager;
import com.wildex999.tickdynamic.timemanager.TimedGroup;
import net.minecraft.server.MinecraftServer;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.text.TextComponentString;
import net.minecraft.world.WorldServer;
import org.apache.commons.lang3.StringUtils;

public void execute(MinecraftServer server, ICommandSender sender, String[] args
			try {
				currentPage = Integer.parseInt(args[1]);
				if (currentPage <= 0) {
					sender.sendMessage(new TextComponentString(ChatFormatting.RED + "Page number must be 1 and up, got: " + args[1]));
					currentPage = 1;
				}
			} catch (Exception e) {
				sender.sendMessage(new TextComponentString(ChatFormatting.RED + "Expected a page number, got: " + args[1]));
				return;
			}
		}
public void execute(MinecraftServer server, ICommandSender sender, String[] args
			if (world == null || worldManager == null)
				continue;

			outputBuilder.append(ChatFormatting.GRAY + "| ").append(ChatFormatting.RESET).append(world.provider.getDimensionType().getName());
			String usedTime = decimalFormat.format(worldManager.getTimeUsedAverage() / (double) TimeManager.timeMilisecond);
			String maxTime = decimalFormat.format(worldManager.getTimeMax() / (double) TimeManager.timeMilisecond);
			outputBuilder.append(ChatFormatting.GRAY + " || ").append(ChatFormatting.RESET).append(usedTime).append("/").append(maxTime);
			outputBuilder.append(ChatFormatting.GRAY + " || ").append(ChatFormatting.RESET).append(worldManager.getSliceMax()).append("\n");
		}

		if (currentPage == maxPages) {
			//Add Other
			TimedGroup other = mod.getTimedGroup("other");
			if (other != null) {
				outputBuilder.append(ChatFormatting.GRAY + "| ").append(ChatFormatting.RESET + "(Other)");
				String usedTime = decimalFormat.format(other.getTimeUsedAverage() / (double) TimeManager.timeMilisecond);
				outputBuilder.append(ChatFormatting.GRAY + " || ").append(ChatFormatting.RESET).append(usedTime);
				outputBuilder.append(ChatFormatting.GRAY + " || ").append(ChatFormatting.RESET).append("N/A\n");
			}

			//Add External
			TimedGroup external = mod.getTimedGroup("external");
			if (other != null) {
				outputBuilder.append(ChatFormatting.GRAY + "| ").append(ChatFormatting.RESET + "(External)");
				String usedTime = decimalFormat.format(external.getTimeUsedAverage() / (double) TimeManager.timeMilisecond);
				outputBuilder.append(ChatFormatting.GRAY + " || ").append(ChatFormatting.RESET).append(usedTime);
				outputBuilder.append(ChatFormatting.GRAY + " || ").append(ChatFormatting.RESET).append("N/A\n");
			}
		}

public void execute(MinecraftServer server, ICommandSender sender, String[] args
	}

	public void writeHeader(StringBuilder builder) {
		builder.append(ChatFormatting.GREEN + "Worlds list with time. Usage: tickdynamic worldList [page]\n");

		builder.append(ChatFormatting.GRAY + "+").append(StringUtils.repeat("=", borderWidth)).append("+\n");
		builder.append(ChatFormatting.GRAY + "| ").append(ChatFormatting.GOLD + "World").append(ChatFormatting.GRAY);

		builder.append(" || ").append(ChatFormatting.GOLD + "Time(Used/Allocated)").append(ChatFormatting.GRAY);
		builder.append(" || ").append(ChatFormatting.GOLD + "MaxSlices").append(ChatFormatting.GRAY);
		builder.append("\n");
	}

	public void writeFooter(StringBuilder builder) {
		if (maxPages == 0)
			builder.append(ChatFormatting.GRAY + "+").append(StringUtils.repeat("=", borderWidth)).append("+\n");
		else {
			String pagesStr = ChatFormatting.GREEN + "Page " + currentPage + "/" + maxPages;
			int pagesLength = getVisibleLength(pagesStr);
			int otherLength = borderWidth - pagesLength;
			builder.append(ChatFormatting.GRAY + "+").append(StringUtils.repeat("=", otherLength / 2));
			builder.append(pagesStr);
			builder.append(ChatFormatting.GRAY).append(StringUtils.repeat("=", otherLength / 2)).append("+\n");
		}
	}

package com.wildex999.tickdynamic.commands;

import com.mojang.realmsclient.gui.ChatFormatting;
import com.wildex999.tickdynamic.TickDynamicMod;
import com.wildex999.tickdynamic.listinject.EntityGroup;
import com.wildex999.tickdynamic.listinject.ListManager;
import net.minecraft.server.MinecraftServer;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.text.TextComponentString;
import net.minecraft.world.World;
import net.minecraftforge.common.DimensionManager;
import org.apache.commons.lang3.StringUtils;
public void execute(MinecraftServer server, ICommandSender sender, String[] args
			try {
				currentPage = Integer.parseInt(args[2]);
				if (currentPage <= 0) {
					sender.sendMessage(new TextComponentString(ChatFormatting.RED + "Page number must be 1 and up, got: " + args[2]));
					currentPage = 1;
				}
			} catch (Exception e) {
				sender.sendMessage(new TextComponentString(ChatFormatting.RED + "Expected a page number, got: " + args[2]));
				return;
			}
		}
public void execute(MinecraftServer server, ICommandSender sender, String[] args
		try {
			worldDim = Integer.parseInt(worldDimStr);
		} catch (Exception e) {
			sender.sendMessage(new TextComponentString(ChatFormatting.RED + "Expected a world dimension(Ex: dim0 or just 0), got: " + worldDimStr));
			return;
		}
		world = DimensionManager.getWorld(worldDim);

		if (world == null) {
			sender.sendMessage(new TextComponentString(ChatFormatting.RED + "No world with dimension id: " + worldDimStr));
			return;
		}

private void addGroupsFromList(List<EntityGroup> targetList, ListManager worldLi
	}

	private void writeHeader(StringBuilder builder) {
		builder.append(ChatFormatting.GREEN + "Groups for world: ").append(ChatFormatting.RESET).append(world.provider.getDimensionType().getName()).
				append("(DIM: ").append(world.provider.getDimension()).append(")\n");

		builder.append(ChatFormatting.GRAY + "+").append(StringUtils.repeat("=", borderWidth)).append("+\n");
		builder.append(ChatFormatting.GRAY + "| ").append(ChatFormatting.GOLD + "Group").append(ChatFormatting.GRAY);

		builder.append(" || ").append(ChatFormatting.GOLD + "Time(Avg.)").append(ChatFormatting.GRAY);
		builder.append(" || ").append(ChatFormatting.GOLD + "EntitiesRun(Avg.)").append(ChatFormatting.GRAY);
		builder.append(" || ").append(ChatFormatting.GOLD + "MaxSlices").append(ChatFormatting.GRAY);
		builder.append(" || ").append(ChatFormatting.GOLD + "TPS(Avg.)").append(ChatFormatting.GRAY);
		builder.append("\n");
	}

	private void writeGroup(StringBuilder builder, EntityGroup group) {
		TimedEntities timedGroup = group.timedGroup;
		builder.append(ChatFormatting.GRAY + "| ").append(ChatFormatting.RESET).append(group.getName());

		if (timedGroup == null) { //No Timed data
			builder.append(ChatFormatting.RED + " N/A\n");
			return;
		}

		String usedTime = decimalFormat.format(timedGroup.getTimeUsedAverage() / (double) TimeManager.timeMilisecond);
		String maxTime = decimalFormat.format(timedGroup.getTimeMax() / (double) TimeManager.timeMilisecond);
		builder.append(ChatFormatting.GRAY + " || ").append(ChatFormatting.RESET).append(usedTime).append("/").append(maxTime);

		int runObjects = timedGroup.getObjectsRunAverage();
		int countObjects = group.entities.size();
		builder.append(ChatFormatting.GRAY + " || ").append(ChatFormatting.RESET).append(runObjects).append("/").append(countObjects);
		builder.append(ChatFormatting.GRAY + " || ").append(ChatFormatting.RESET).append(timedGroup.getSliceMax());

		//TPS coloring
		String color;
		if (timedGroup.averageTPS >= 19)
			color = ChatFormatting.GREEN.toString();
		else if (timedGroup.averageTPS > 10)
			color = ChatFormatting.YELLOW.toString();
		else
			color = ChatFormatting.RED.toString();
		builder.append(ChatFormatting.GRAY + " || ").append(color).append(decimalFormat.format(timedGroup.averageTPS)).append(ChatFormatting.RESET + "TPS");

		builder.append("\n");
	}

	private void writeFooter(StringBuilder builder) {
		if (maxPages == 0)
			builder.append(ChatFormatting.GRAY + "+").append(StringUtils.repeat("=", borderWidth)).append("+\n");
		else {
			String pagesStr = ChatFormatting.GREEN + "Page " + currentPage + "/" + maxPages;
			int pagesLength = getVisibleLength(pagesStr);
			int otherLength = borderWidth - pagesLength;
			builder.append(ChatFormatting.GRAY + "+").append(StringUtils.repeat("=", otherLength / 2));
			builder.append(pagesStr);
			builder.append(ChatFormatting.GRAY).append(StringUtils.repeat("=", otherLength / 2)).append("+\n");
		}
	}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
dependencies {
    compile 'com.marklogic:ml-app-deployer:2.0'
    compile 'commons-io:commons-io:2.4'
    compile 'org.apache.commons:commons-csv:1.2'
    compile('com.marklogic:mlcp:8.0-5') {
        exclude module : 'servlet-api'
        exclude group: 'com.google.guava', module: 'guava'
    }
    compile 'com.google.guava:guava:19.0'
    testCompile 'org.springframework.batch:spring-batch-test:3.0.6.RELEASE'
    testCompile 'junit:junit:4.12'
    testCompile 'xmlunit:xmlunit:1.3'
package com.marklogic.hub;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.marklogic.contentpump.ContentPump;
import com.marklogic.contentpump.utilities.OptionsFileUtil;

public class DataHubContentPump extends ContentPump {
    private final static Logger LOGGER = LoggerFactory.getLogger(DataHubContentPump.class);

    private String[] arguments;

    public DataHubContentPump(List<String> arguments) {
        this(arguments.toArray(new String[0]));
    }

    public DataHubContentPump(String[] arguments) {
        this.arguments = arguments;
    }

    /**
     * Run the Content Pump.
     *
     * @throws IOException
     */
    public void execute() throws IOException {
        String[] expandedArgs = null;

        PrintStream sysout = System.out;
        PrintStream mlcpOutputStream = null;
        BufferedReader mlcpBufferedReader = null;
        File mlcpOutputFile = null;
        try {
            // redirect standard output
            mlcpOutputFile = File.createTempFile("mlcp", ".txt");
            mlcpOutputStream = new PrintStream(mlcpOutputFile);
            System.setOut(mlcpOutputStream);

            // run mlcp
            expandedArgs = OptionsFileUtil.expandArguments(arguments);
            runCommand(expandedArgs);
        } catch (Throwable ex) {
            LOG.error("Error while expanding arguments", ex);
            System.err.println(ex.getMessage());
            System.err.println("Try 'mlcp help' for usage.");
        } finally {
            // close the mlcp output stream
            if (mlcpOutputStream != null) {
                mlcpOutputStream.close();
            }

            // revert to the original standard output
            System.setOut(sysout);
        }

        // read the mlcp output and get any error message
        StringBuilder errorMessage = new StringBuilder();
        try {
            String regex = "([^\\s]*) \\s (\\[ [^ \\] ]*? \\]) \\s ([^\\s]*) \\s ([^\\s]*) \\s - \\s (.*)";
            Pattern pattern = Pattern.compile(regex, Pattern.COMMENTS);

            mlcpBufferedReader = new BufferedReader(new InputStreamReader(new FileInputStream(mlcpOutputFile)));
            String line = null;
            while ((line = mlcpBufferedReader.readLine()) != null) {
                Matcher matcher = pattern.matcher(line);
                if (matcher.matches()) {
                    String logLevel = matcher.groupCount() >= 3 ? matcher.group(3) : "";
                    String message = matcher.groupCount() >= 5 ? matcher.group(5) : "";
                    if (logLevel.toLowerCase().equals("error")) {
                        if (errorMessage.length() > 0) {
                            errorMessage.append("\r\n");
                        }
                        errorMessage.append(message);
                    }
                }
            }
        } catch (PatternSyntaxException e) {
            LOGGER.error("Unexpected error", e);
        } catch (FileNotFoundException e) {
            LOGGER.error("Unexpected error", e);
        } catch (IOException e) {
            LOGGER.error("Unexpected error", e);
        } finally {
            if (mlcpBufferedReader != null) {
                try {
                    mlcpBufferedReader.close();
                } catch (IOException e) {
                    // intentionally empty
                }
            }

            // delete the temporary file
            mlcpOutputFile.delete();
        }

        if (errorMessage.length() > 0) {
            throw new IOException("Load data failed with:\r\n" + errorMessage.toString());
        }
    }
}
import com.marklogic.client.io.Format;
import com.marklogic.client.io.StringHandle;
import com.marklogic.client.util.RequestParameters;
import com.marklogic.hub.Mlcp.SourceOptions;
import com.marklogic.hub.collector.Collector;
import com.marklogic.hub.collector.ServerCollector;
import com.marklogic.hub.flow.Flow;
public JobExecution runFlow(Flow flow, int batchSize, JobExecutionListener liste
        }
    }

    public void runInputFlow(Flow flow, HubConfig config) {
        try {
            Mlcp mlcp = new Mlcp(config.host, config.stagingPort, config.adminUsername, config.adminPassword);
            SourceOptions sourceOptions = new SourceOptions(
                    flow.getEntityName(), flow.getName(),
                    FlowType.INPUT.toString(),
                    flow.getDataFormat());
            sourceOptions.setInputFileType("documents");
            sourceOptions.setTransformModule("/com.marklogic.hub/mlcp-flow-transform.xqy");
            sourceOptions.setTransformNamespace("http://marklogic.com/data-hub/mlcp-flow-transform");
            mlcp.addSourceDirectory(config.modulesPath, sourceOptions);
            mlcp.loadContent();
        }
        catch (IOException | JSONException e) {
            LOGGER.error(
                    "Error encountered while trying to run flow:  "
                            + flow.getEntityName() + " > " + flow.getName(), e);
        }
    }

    public void runFlowsInParallel(Flow ... flows) {

    }
/*
 * Copyright 2012-2016 MarkLogic Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.marklogic.hub;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.codehaus.jettison.json.JSONArray;
import org.codehaus.jettison.json.JSONException;
import org.codehaus.jettison.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.marklogic.client.io.Format;

public class Mlcp {

    public static final String DOCUMENT_TYPE_KEY = "-document_type";
    public static final String INPUT_FILE_PATH_KEY = "-input_file_path";
    public static final String INPUT_FILE_TYPE_KEY = "-input_file_type";
    public static final String OUTPUT_URI_REPLACE_KEY = "-output_uri_replace";
    public static final String MODE_KEY = "-mode";
    public static final String HOST_KEY = "-host";
    public static final String PORT_KEY = "-port";
    public static final String USERNAME_KEY = "-username";
    public static final String PASSWORD_KEY = "-password";

   	private static final Logger LOGGER = LoggerFactory.getLogger(Mlcp.class);
	private static final String DEFAULT_HADOOP_HOME_DIR = "./hadoop/";

	private List<MlcpSource> sources = new ArrayList<>();

	private String host;

	private int port;

	private String user;

	private String password;

	public Mlcp(String host, int port, String user, String password) throws IOException {
		this.host = host;
		this.port = port;
		this.user = user;
		this.password = password;

		setHadoopHomeDir();
	}

	public void addSourceDirectory(String directoryPath, SourceOptions options) {
		MlcpSource source = new MlcpSource(directoryPath, options);
		sources.add(source);
	}

	public void loadContent() throws IOException, JSONException {
		for (MlcpSource source : sources) {
			try {
				List<String> arguments = getMlcpOptions(source);

				LOGGER.info(arguments.toString());
				DataHubContentPump contentPump = new DataHubContentPump(arguments);
				contentPump.execute();
			} catch (IOException e) {
				throw new IOException(
						"Cannot load data from: " + source.getSourcePath() + " due to: " + e.getMessage());
			}
		}
	}

	protected void setHadoopHomeDir() throws IOException {
		String home = System.getProperty("hadoop.home.dir");
		if (home == null) {
			home = DEFAULT_HADOOP_HOME_DIR;
		}
		System.setProperty("hadoop.home.dir", new File(home).getCanonicalPath());
	}

	public static class MlcpSource {
		private String sourcePath;
		private SourceOptions sourceOptions;

		public MlcpSource(String sourcePath, SourceOptions sourceOptions) {
			this.sourcePath = sourcePath;
			this.sourceOptions = sourceOptions;
		}

		public String getSourcePath() {
			return sourcePath;
		}

        public List<String> getMlcpArguments() throws IOException, JSONException {
			File file = new File(sourcePath);
			String canonicalPath = file.getCanonicalPath();

			List<String> arguments = new ArrayList<>();

			arguments.add(INPUT_FILE_PATH_KEY);
			arguments.add(canonicalPath);

			arguments.add(OUTPUT_URI_REPLACE_KEY);
			arguments.add("\""+canonicalPath+",''\"");

			arguments.add(INPUT_FILE_TYPE_KEY);
            arguments.add(sourceOptions.getInputFileType());


            String other = sourceOptions.getOtherOptions();
            if (other != null) {
                addOtherArguments(arguments, other);
            }

			//add document type only if it does not exist in the list
			if(!arguments.contains(DOCUMENT_TYPE_KEY)) {
			    arguments.add(DOCUMENT_TYPE_KEY);
			    arguments.add(sourceOptions.getDataFormat());
			}

			String transformModule = sourceOptions.getTransformModule();
			if (transformModule != null) {
    			arguments.add("-transform_module");
    	        arguments.add("\"" + transformModule +"\"");
    	        arguments.add("-transform_namespace");
    	        arguments.add("\"" + sourceOptions.getTransformNamespace() +"\"");
    	        arguments.add("-transform_param");
    	        arguments.add("\"" + sourceOptions.getTransformParams() + "\"");
			}

			return arguments;
		}

        private void addOtherArguments(List<String> arguments,
                String otherOptions) throws JSONException {
            JSONArray jsonArray = new JSONArray(otherOptions);
            for (int i = 0; i < jsonArray.length(); i++) {
                JSONObject jsonObject = jsonArray.getJSONObject(i);
                @SuppressWarnings("rawtypes")
                Iterator keysIterator = jsonObject.keys();
                while(keysIterator.hasNext()) {
                    String key = (String)keysIterator.next();
                    arguments.add(key);
                    arguments.add(jsonObject.getString(key));
                }

            }

        }
	}

	public static class SourceOptions {
		private String entityName;
		private String flowName;
		private String flowType;
		private String dataFormat = "json";
		private String inputFileType;
		private String otherOptions;
		private String transformModule;
		private String transformNamespace;

		public SourceOptions(String entityName, String flowName, String flowType, Format dataFormat) {
			this.entityName = entityName;
			this.flowName = flowName;
			this.flowType = flowType;

			if (dataFormat.equals(Format.XML)) {
				this.dataFormat = "xml";
			} else if (dataFormat.equals(Format.JSON)) {
				this.dataFormat = "json";
			}
		}

		public String getEntityName() {
			return entityName;
		}

		public String getFlowName() {
			return flowName;
		}

		public String getFlowType() {
			return flowType;
		}

		public String getDataFormat() {
			return dataFormat;
		}

		public String getInputFileType() {
			return inputFileType;
		}

		public void setInputFileType(String inputFileType) {
			this.inputFileType = inputFileType;
		}

		public String getOtherOptions() {
            return otherOptions;
        }

        public void setOtherOptions(String otherOptions) {
            this.otherOptions = otherOptions;
        }

        protected String getTransformParams() {
            return String.format(
                    "<params><entity-name>%!s(MISSING)</entity-name><flow-name>%!s(MISSING)</flow-name><flow-type>%!s(MISSING)</flow-type></params>",
                    entityName, flowName, flowType);
        }

        public String getTransformModule() {
            return transformModule;
        }

        public void setTransformModule(String transformModule) {
            this.transformModule = transformModule;
        }

        public String getTransformNamespace() {
            return transformNamespace;
        }

        public void setTransformNamespace(String transformNamespace) {
            this.transformNamespace = transformNamespace;
        }
	}

    public List<String> getMlcpOptions(MlcpSource source) throws IOException, JSONException {
        List<String> mlcpOptions = new ArrayList<>();

        mlcpOptions.add("import");
        mlcpOptions.add(MODE_KEY);
        mlcpOptions.add("local");
        mlcpOptions.add(HOST_KEY);
        mlcpOptions.add(host);
        mlcpOptions.add(PORT_KEY);
        mlcpOptions.add(Integer.toString(port));
        mlcpOptions.add(USERNAME_KEY);
        mlcpOptions.add(user);
        mlcpOptions.add(PASSWORD_KEY);
        mlcpOptions.add(password);

        List<String> sourceArguments = source.getMlcpArguments();
        mlcpOptions.addAll(sourceArguments);

        return mlcpOptions;
    }
}

import java.io.File;
import java.io.IOException;
import java.net.URL;

import javax.xml.parsers.ParserConfigurationException;

public static void teardown() throws IOException {
    @Test
    public void runFlows() throws IOException, ParserConfigurationException, SAXException {
        FlowManager fm = new FlowManager(stagingClient);
        Flow inputFlow = fm.getFlow(ENTITY, "testinput", FlowType.INPUT);
        Flow harmonizeFlow = fm.getFlow(ENTITY, "testharmonize",
                FlowType.HARMONIZE);

        URL url = HubTestBase.class.getClassLoader().getResource("e2e-test/input");
        HubConfig config = getHubConfig(url.getPath());
        fm.runInputFlow(inputFlow, config);

        assertXMLEqual(getXmlFromResource("e2e-test/staged.xml"), stagingDocMgr.read("/input.xml").next().getContent(new DOMHandle()).get());

        JobFinishedListener harmonizeFlowListener = new JobFinishedListener();
        fm.runFlow(harmonizeFlow, 10, harmonizeFlowListener);

import java.io.File;
import java.io.IOException;
import java.net.URL;

import javax.xml.parsers.ParserConfigurationException;

public static void teardown() throws IOException {
    @Test
    public void runFlows() throws IOException, ParserConfigurationException, SAXException {
        FlowManager fm = new FlowManager(stagingClient);
        Flow inputFlow = fm.getFlow(ENTITY, "testinput", FlowType.INPUT);
        Flow harmonizeFlow = fm.getFlow(ENTITY, "testharmonize",
                FlowType.HARMONIZE);

        URL url = HubTestBase.class.getClassLoader().getResource("e2e-test/input");
        HubConfig config = getHubConfig(url.getPath());
        fm.runInputFlow(inputFlow, config);

        assertXMLEqual(getXmlFromResource("e2e-test/staged.xml"), stagingDocMgr.read("/input.xml").next().getContent(new DOMHandle()).get());

        JobFinishedListener harmonizeFlowListener = new JobFinishedListener();
        fm.runFlow(harmonizeFlow, 10, harmonizeFlowListener);
protected static Document getModulesDocument(String uri) {
    protected static Document getXmlFromResource(String resourceName) throws IOException, ParserConfigurationException, SAXException {
        InputStream inputStream = HubTestBase.class.getClassLoader().getResourceAsStream(resourceName);
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();

        factory.setNamespaceAware(true);
        DocumentBuilder builder = factory.newDocumentBuilder();

<envelope xmlns="http://marklogic.com/data-hub/envelope">
  <headers></headers>
  <triples></triples>
  <content>
    <testing xmlns="">123</testing>
  </content>
</envelope>
package com.marklogic.gradle.task

import org.gradle.api.tasks.TaskAction

class EnableDebuggingTask extends DefaultTask {

    @TaskAction
    void enableDebugging() {
package com.marklogic.gradle.task

import org.gradle.api.tasks.TaskAction

class EnableTracingTask extends DefaultTask {

    @TaskAction
    void enableTracing() {
package com.marklogic.gradle.task

import com.marklogic.hub.Tracing;
import com.marklogic.hub.HubConfig;

dependencies {
    compile project(':marklogic-data-hub')
    compile('io.springfox:springfox-swagger2:2.4.0')
    compile('org.webjars.bower:angular-swagger-ui:0.3.1')
    providedRuntime('org.springframework.boot:spring-boot-starter-tomcat')
    testCompile('junit:junit')
}
public String getFlowMlcpOptionsFromFile(String entityName, String flowName) thr
	    if(file.exists()) {
	        return Files.toString(file, Charsets.UTF_8);
	    }
	    return null;
    }

	public HubConfig getHubConfig() {
package com.marklogic.hub.model;

public class FlowOptionsModel {
    private String entityName;
    private String flowName;
    private String inputPath;
    private String inputFileType;
    private String otherOptions;

    public String getEntityName() {
        return entityName;
    }

    public String getFlowName() {
        return flowName;
    }

    public String getInputPath() {
        return inputPath;
    }

    public String getOtherOptions() {
        return otherOptions;
    }

    public void setOtherOptions(String otherOptions) {
        this.otherOptions = otherOptions;
    }

    public void setEntityName(String entityName) {
        this.entityName = entityName;
    }

    public void setFlowName(String flowName) {
        this.flowName = flowName;
    }

    public void setInputPath(String inputPath) {
        this.inputPath = inputPath;
    }

    public String getInputFileType() {
        return inputFileType;
    }

    public void setInputFileType(String inputFileType) {
        this.inputFileType = inputFileType;
    }

    
}

import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.codehaus.jettison.json.JSONException;
import org.codehaus.jettison.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.batch.core.JobExecution;
import org.springframework.batch.core.JobExecutionListener;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;

import com.marklogic.client.DatabaseClient;
import com.marklogic.client.DatabaseClientFactory;
import com.marklogic.client.DatabaseClientFactory.Authentication;
import com.marklogic.client.io.Format;
import com.marklogic.hub.FlowManager;
import com.marklogic.hub.Mlcp;
import com.marklogic.hub.Mlcp.MlcpSource;
import com.marklogic.hub.Mlcp.SourceOptions;
import com.marklogic.hub.PluginFormat;
import com.marklogic.hub.config.EnvironmentConfiguration;
import com.marklogic.hub.exception.FlowManagerException;
import com.marklogic.hub.factory.FlowModelFactory;
import com.marklogic.hub.flow.Flow;
import com.marklogic.hub.flow.FlowType;
import com.marklogic.hub.model.FlowModel;
import com.marklogic.hub.model.FlowOptionsModel;

@Service
public class FlowManagerService {

    private static final Logger LOGGER = LoggerFactory
            .getLogger(FlowManagerService.class);
    
    private static final String NEW_LINE = "\n";

    private static final String DASH = "-";

    @Autowired
    private EnvironmentConfiguration environmentConfiguration;

public FlowModel createFlow(String entityName, String flowName,
        return flowModel;
    }

    public void loadData(FlowOptionsModel flowOptionsModel) throws IOException, JSONException {
        SourceOptions sourceOptions = createSourceOptionsInstance(flowOptionsModel);
        Mlcp mlcp = createMlcpInstance(flowOptionsModel,sourceOptions);
        mlcp.loadContent();
    }
    
    private SourceOptions createSourceOptionsInstance(FlowOptionsModel flowOptionsModel) {
        Flow flow = getFlow(flowOptionsModel.getEntityName(), flowOptionsModel.getFlowName());
        
        SourceOptions sourceOptions = new SourceOptions(
                flowOptionsModel.getEntityName(), flowOptionsModel.getFlowName(),
                FlowType.INPUT.toString(),
                flow.getDataFormat());

        sourceOptions.setInputFileType(flowOptionsModel.getInputFileType());
        sourceOptions.setOtherOptions(flowOptionsModel.getOtherOptions());
        
        return sourceOptions;
    }
    
    private Mlcp createMlcpInstance(FlowOptionsModel flowOptionsModel, SourceOptions sourceOptions) throws IOException {
        Mlcp mlcp = new Mlcp(
                environmentConfiguration.getMLHost()
                ,Integer.parseInt(environmentConfiguration.getMLStagingPort())
                ,environmentConfiguration.getMLUsername()
                ,environmentConfiguration.getMLPassword()
                );
        mlcp.addSourceDirectory(flowOptionsModel.getInputPath(), sourceOptions);
        return mlcp;
    }
    
    public String buildMlcpConfigContent(FlowOptionsModel flowOptionsModel) throws IOException, JSONException {
        SourceOptions sourceOptions = createSourceOptionsInstance(flowOptionsModel);
        Mlcp mlcp = createMlcpInstance(flowOptionsModel,sourceOptions);
        List<String> mlcpOptions = mlcp.getMlcpOptions(new MlcpSource(flowOptionsModel.getInputPath(), sourceOptions));
        return StringUtils.collectionToDelimitedString(mlcpOptions, NEW_LINE);
    }
    
    public void populateMlcpOptions(FlowOptionsModel flowOptionsModel, String optionsFileContent) {
        //put options to map to have option key-value pairs
        String[] options = StringUtils.delimitedListToStringArray(optionsFileContent, NEW_LINE);
        Map<String,String> optionsMap = new HashMap<String,String>();
        String key = null;
        for (String option : options) {
            if(option.startsWith(DASH)) {
                key = option;
            } else {
                optionsMap.put(key, option);
            }
        }
        
        //populate the flowOptionsModel
        LOGGER.debug("Options for flow with entity name "+ flowOptionsModel.getEntityName() + 
                " and flow name "+ flowOptionsModel.getFlowName());
        //start with the required options
        String inputPath = optionsMap.get(Mlcp.INPUT_FILE_PATH_KEY);
        String inputFileType = optionsMap.get(Mlcp.INPUT_FILE_TYPE_KEY);
        LOGGER.debug("{" + Mlcp.INPUT_FILE_PATH_KEY + ": "+ inputPath + "," + Mlcp.INPUT_FILE_TYPE_KEY + ":" + inputFileType + "}");
        flowOptionsModel.setInputPath(inputPath);
        flowOptionsModel.setInputFileType(inputFileType);
        
        //then the other options
        //by removing the unnecessary options from the map
        optionsMap.remove(Mlcp.INPUT_FILE_PATH_KEY);
        optionsMap.remove(Mlcp.INPUT_FILE_TYPE_KEY);
        optionsMap.remove(null);
        optionsMap.remove(Mlcp.MODE_KEY);
        optionsMap.remove(Mlcp.HOST_KEY);
        optionsMap.remove(Mlcp.PORT_KEY);
        optionsMap.remove(Mlcp.USERNAME_KEY);
        optionsMap.remove(Mlcp.PASSWORD_KEY);
        //then converting the map to a json string
        String otherOptions = new JSONObject(optionsMap).toString();
        LOGGER.debug("Other options = "+ otherOptions);
        flowOptionsModel.setOtherOptions(otherOptions);
        
    }
}
package com.marklogic.hub.web.controller.api;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.math.BigInteger;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;

import org.springframework.batch.core.JobExecution;
import org.springframework.batch.core.JobExecutionListener;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.InputStreamResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.util.StringUtils;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.marklogic.hub.config.EnvironmentConfiguration;
import com.marklogic.hub.flow.Flow;
import com.marklogic.hub.flow.FlowType;

    private static final Logger LOGGER = LoggerFactory
            .getLogger(FlowApiController.class);
    
    private static final String MLCP_OPTIONS_FILENAME = "mlcpOptions.txt";

    @Autowired
    private EnvironmentConfiguration environmentConfiguration;
public void cancel(BasicFuture<?> resultFuture) {

            @Override
            public void run(BasicFuture<?> resultFuture) {
                final Flow flow = flowManagerService.getFlow(runFlow.getEntityName(), runFlow.getFlowName());
                // TODO update and move BATCH SIZE TO a constant or config - confirm
                // desired behavior
                this.jobExecution = flowManagerService.runFlow(flow, 100, new JobExecutionListener() {
public void afterJob(JobExecution jobExecution) {
    }

    @RequestMapping(value="/run/input", method = RequestMethod.POST)
    public BigInteger runInputFlow(@RequestBody FlowOptionsModel flowOptionsModel) throws IOException, JSONException {
        
        saveMlcpOptionsToFile(flowOptionsModel);
        
        CancellableTask task = new CancellableTask() {

            @Override
public void cancel(BasicFuture<?> resultFuture) {
            @Override
            public void run(BasicFuture<?> resultFuture) {
                try {
                    flowManagerService.loadData(flowOptionsModel);

                    resultFuture.completed(null);
                }
                
                catch (IOException | JSONException e) {
                    LOGGER.error("Error encountered while trying to run flow:  "
                            + flowOptionsModel.getEntityName() + " > " + flowOptionsModel.getFlowName(),
                            e);
                    resultFuture.failed(e);
                }
            }
        };
        
        return taskManagerService.addTask(task);
    }
    
    @RequestMapping(value = "/options", method = RequestMethod.GET, produces = { MediaType.APPLICATION_JSON_UTF8_VALUE })
    @ResponseBody
    public FlowOptionsModel getPreviousLoadOptions(HttpServletRequest request) throws IOException {
        String entityName = request.getParameter("entityName");
        String flowName = request.getParameter("flowName");
        return loadMlcpOptionsFromFile(entityName,flowName);
    }
    
    private FlowOptionsModel loadMlcpOptionsFromFile(String entityName, String flowName) throws IOException {
        FlowOptionsModel flowOptionsModel = new FlowOptionsModel();
        flowOptionsModel.setEntityName(entityName);
        flowOptionsModel.setFlowName(flowName);
        flowOptionsModel.setInputPath(".");
        flowOptionsModel.setInputFileType("documents");
        String optionsFileContent = environmentConfiguration.getFlowMlcpOptionsFromFile(entityName, flowName);
        if(optionsFileContent != null) {
            flowManagerService.populateMlcpOptions(flowOptionsModel, optionsFileContent);
        }
        return flowOptionsModel;
    }

    private void saveMlcpOptionsToFile(FlowOptionsModel flowOptionsModel) throws IOException, JSONException {
        String mlcpOptionsFileContent = flowManagerService.buildMlcpConfigContent(flowOptionsModel);
        environmentConfiguration.saveOrUpdateFlowMlcpOptionsToFile(flowOptionsModel.getEntityName(), 
                flowOptionsModel.getFlowName(), mlcpOptionsFileContent);
    }

    @RequestMapping(value = "/runInParallel", method = RequestMethod.POST)
public void runFlowsInParallel(HttpServletRequest request) {
        flowManagerService.runFlowsInParallel(flows.toArray(new Flow[flows
                .size()]));
    }
    
    @RequestMapping(value = "/options/download", method = RequestMethod.POST, consumes = { MediaType.APPLICATION_JSON_UTF8_VALUE }, produces = { MediaType.TEXT_PLAIN_VALUE })
    public ResponseEntity<InputStreamResource> downloadMlcpConfig(@RequestBody FlowOptionsModel flowOptionsModel) throws IOException, NumberFormatException, JSONException {
        String mlcpConfigContent = flowManagerService.buildMlcpConfigContent(flowOptionsModel);
        byte[] contentBytes = mlcpConfigContent.getBytes(StandardCharsets.UTF_8);
        InputStream inputStream = new ByteArrayInputStream(contentBytes);
        HttpHeaders headers = new HttpHeaders();
        addRemoveCachingInHeaders(headers);
        headers.add("content-disposition", "attachment; filename=" + MLCP_OPTIONS_FILENAME);
        return ResponseEntity
              .ok()
              .contentLength(contentBytes.length)
              .contentType(MediaType.TEXT_PLAIN)
              .headers(headers)
              .body(new InputStreamResource(inputStream));
    }

    private void addRemoveCachingInHeaders(HttpHeaders headers) {
        headers.add("Cache-Control", "no-cache, no-store, must-revalidate");
        headers.add("Pragma", "no-cache");
        headers.add("Expires", "0");
    }
}
package com.marklogic.hub.web.controller.api;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.marklogic.hub.config.EnvironmentConfiguration;
import com.marklogic.hub.model.SearchPathModel;
import com.marklogic.hub.util.FileUtil;
import com.marklogic.hub.web.controller.BaseController;

	private static final Logger LOGGER = LoggerFactory.getLogger(UtilController.class);

	@Autowired
	private EnvironmentConfiguration environmentConfiguration;

	@RequestMapping(value = "/searchPath", method = RequestMethod.POST, consumes = {
			MediaType.APPLICATION_JSON_UTF8_VALUE }, produces = { MediaType.APPLICATION_JSON_UTF8_VALUE })
	public Map searchPath(@RequestBody SearchPathModel searchPathModel) {
		return searchPathUnix(searchPathModel.getPath());
	}

	public Map searchPathUnix(String searchPath) {

		LOGGER.debug("Search Path:" + searchPath);
		List<SearchPathModel> paths = new ArrayList<SearchPathModel>();
		if (StringUtils.isEmpty(searchPath)) {
			File[] roots = File.listRoots();
			for (int i = 0; i < roots.length; i++) {
				LOGGER.debug("Path:" + roots[i].getAbsolutePath());
				paths.add(new SearchPathModel(roots[i].getAbsolutePath(), roots[i].getAbsolutePath()));
			}
		} else {
			if (!searchPath.equals("/")) {
				searchPath = searchPath + java.io.File.separator;
			}

			List<String> folders = FileUtil.listDirectFolders(searchPath);
			for (String folder : folders) {
				String path = searchPath + folder;
				LOGGER.debug("Path:" + path);
				paths.add(new SearchPathModel(path, folder));
			}
		}

		Map returnValue = new HashMap();

		returnValue.put("paths", paths);



888b     d888                  888      888                       d8b               8888888b.           888                  888    888          888
8888b   d8888                  888      888                       Y8P               888  "Y88b          888                  888    888          888
88888b.d88888                  888      888                                         888    888          888                  888    888          888
888Y88888P888  8888b.  888d888 888  888 888      .d88b.   .d88b.  888  .d8888b      888    888  8888b.  888888  8888b.       8888888888 888  888 88888b.
888 Y888P 888     "88b 888P"   888 .88P 888     d88""88b d88P"88b 888 d88P"         888    888     "88b 888        "88b      888    888 888  888 888 "88b
888  Y8P  888 .d888888 888     888888K  888     888  888 888  888 888 888           888    888 .d888888 888    .d888888      888    888 888  888 888  888
888   "   888 888  888 888     888 "88b 888     Y88..88P Y88b 888 888 Y88b.         888  .d88P 888  888 Y88b.  888  888      888    888 Y88b 888 888 d88P
888       888 "Y888888 888     888  888 88888888 "Y88P"   "Y88888 888  "Y8888P      8888888P"  "Y888888  "Y888 "Y888888      888    888  "Y88888 88888P"
                                                              888
                                                         Y8b d88P
                                                          "Y88P"
    </div>
    <div id="sitemenu" class="col-xs-6 col-sm-6 col-md-6 dropdown" ng-if="status != null">
      <button type="submit" name="installUserModules" class="btn btn-primary" ng-if="status.installed" ng-click="installUserModules()" ng-disabled="action.type != null">Deploy to server</button>
      <button type="submit" name="uninstall" class="btn btn-primary" ng-if="status.installed" ng-click="uninstall()" ng-disabled="action.type != null">Uninstall</button>
      <button class="btn btn-default dropdown-toggle" type="button" id="headerDropdownMenu" data-toggle="dropdown" aria-expanded="true">
        Welcome {{status.mlUsername}}! <span class="caret"></span>
      </button>
  angular.module('dhib.quickstart.directives.header', [])
    .directive('header', HeaderDirective);

  function HeaderDirective($http, $location, $mdDialog, DataHub) {
    return {
      restrict: 'E',
      templateUrl : function(element, attrs) {
        };

        scope.uninstall = function (ev) {
          var confirm = $mdDialog.confirm().title('Confirm Uninstall')
            .textContent('Do you really want to continue uninstalling data hub?')
            .ariaLabel('Uninstall')
            .targetEvent(ev)
            .ok('Yes')
            .cancel('No');
          $mdDialog.show(confirm).then(function() {
            DataHub.preUninstall();
          }, function() {
            //do nothing
          });
        };

        scope.installUserModules = function () {
  angular.module('dhib.quickstart.directives.notification', [])
    .directive('notification', NotificationDirective);

  function NotificationDirective($http, $location, $mdDialog, DataHub, $rootScope, $timeout) {

    return {
      restrict: 'E',
          messageType: '',
          message: ''
        };
        
      }
    };
  }
    'angularBootstrapNavTree',
    'ngAnimate',
    'ui.bootstrap',
    'ngMaterial',
    'treeControl',
    //'angucomplete-alt'
    'ngSanitize',
    'swaggerUi'
  ];
  angular.module('quickStartApp', dependencies)
    .factory('$exceptionHandler', ExceptionHandler)
      displayMessage: displayMessage,
      searchPath: searchPath,
      showApiDoc: showApiDoc,
      getPreviousOptions: getPreviousOptions,
      getJsonFile: getJsonFile,
      downloadMlcpOptionsFile: downloadMlcpOptionsFile
    });

    function login(loginForm) {
        'params': params
      });
    }
    
    function getJsonFile(filePath) {
      return $http.get(filePath);
    }
    
    function downloadMlcpOptionsFile(data) {
      return $http.post('api/flows/options/download', data);
    }

  }

  function TaskManagerService($http, $q, $route) {
  angular.module('dhib.quickstart.service.modal', ['ui.bootstrap'])
    .filter('GetByFieldAndValue', GetByFieldAndValue)
    .service('ModalService', ModalService)
    .controller('loadDataModalController', LoadDataModalController)
    .controller('entityModalController', EntityModalController)
    .controller('flowModalController', FlowModalController);

    var self = this;

    angular.extend(self, {
      openLoadDataModal: openLoadDataModal,
      openEntityModal: openEntityModal,
      openFlowModal: openFlowModal
    });

    function openLoadDataModal(options) {
      var modalInstance = $uibModal.open({
        animation: true,
        templateUrl: 'top/modal/loadDataModal.html',
        controller: 'loadDataModalController',
        size: 'lg',
        backdrop: 'static',
        keyboard: true,
        resolve: {
          'options': function() {
            return options;
          }
        }
      });

      return modalInstance.result;
    }

    function openEntityModal() {
      var modalInstance = $uibModal.open({
        animation: true,
    }
  }

  function LoadDataModalController($scope, $uibModalInstance, $filter, DataHub, options) {
    $scope.loadDataForm = options;
    $scope.mlcpInitialCommand = '';
    $scope.mlcpCommand = '';
    $scope.groups = [];

    $scope.ok = function() {
      $uibModalInstance.close($scope.loadDataForm);
    };

    $scope.cancel = function() {
      $uibModalInstance.dismiss();
    };

    $scope.download = function() {
      $scope.loading = true;
      DataHub.downloadMlcpOptionsFile($scope.loadDataForm)
        .success(function(data) {
          var anchor = angular.element('<a/>');
          anchor.attr({
            href: 'data:attachment/csv;charset=utf-8,' + encodeURI(data),
            target: '_blank',
            download: 'mlcpOptions.txt'
          })[0].click();
        })
        .then(function() {
          $scope.loading = false;
        });
    };

    $scope.onSelection = function(node, selected) {
      $scope.loadDataForm.inputPath = node.path;
    };

    $scope.onNodeToggle = function(node, expanded) {
      if (expanded) {
        $scope.searchPath(node.path, node);
      }
    };

    function isLeaf(node) {
      return false;
    }

    $scope.treeOptions = {
      nodeChildren: 'children',
      dirSelectable: true,
      multiSelection: false,
      isLeaf: isLeaf,
      injectClasses: {
        ul: 'a1',
        li: 'a2',
        liSelected: 'a7',
        iExpanded: 'a3',
        iCollapsed: 'a4',
        iLeaf: 'a5',
        label: 'a6',
        labelSelected: 'a8'
      }
    };

    $scope.searchPath = function(basePath, node) {
      DataHub.searchPath(basePath).success(function(data) {
        $scope.updateMlcpCommand();
        $scope.loadTree(data, node);
      });
    };

    $scope.loadTree = function(data, node) {
      if (node == null) { // jshint ignore:line
        //initialize root
        $scope.dataForTheTree = data.paths.slice();
      } else {
        node.children = data.paths;
      }
      $scope.showInputPathTreeBrowser = true;
    };

    $scope.searchPathThenHideTree = function(basePath, node) {
      DataHub.searchPath(basePath).success(function(data) {
        $scope.loadTree(data, node);
      })
      .then(function() {
        $scope.showInputPathTreeBrowser = false;
      });
    };

    $scope.dataForTheTree = [];

    $scope.searchPathThenHideTree($scope.loadDataForm.inputPath);
    $scope.mlcpInitialCommand = constructInitialMlcpCommand(DataHub);

    $scope.updateMlcpCommand = function() {
      $scope.mlcpCommand = updateMlcpCommand($scope.mlcpInitialCommand, $scope.loadDataForm, $scope.groups);
    };

    $scope.loadSettings = function() {
      DataHub.getJsonFile('/json/inputOptions.json')
        .success(function(data) {
          var updatedData = JSON.stringify(data).replace(/{{entityName}}/g, $scope.loadDataForm.entityName)
            .replace(/{{flowName}}/g, $scope.loadDataForm.flowName);
          var jsonObj = $.parseJSON(updatedData);
          $scope.groups = jsonObj.groups;
          //load previous settings to $scope.groups based on $scope.loadDataForm.otherOptions
          updateGroupsBasedOnPreviousSettings($scope.groups, $scope.loadDataForm.otherOptions);
          addReadOnlyLengthToGroupSettingWithDefaultValue($scope.groups);
        })
        .then(function () {
          $scope.updateMlcpCommand();
        });
    };

    $scope.loadSettings();

    $scope.isText = function(type) {
      if(type === 'string' || type === 'comma-list' || type === 'number' || type === 'character') {
        return true;
      } else {
        return false;
      }
    };

    $scope.hideInputPathTreeBrowser = function() {
      $scope.showInputPathTreeBrowser = false;
    };

    $scope.showBasedOnCategoryAndInputFileType = function(category, inputFileType) {
      return showBasedOnCategoryAndInputFileType(category, inputFileType);
    };

    $scope.showIfHasNoFilterFieldOrWithSpecifiedValue = function(field,value,collection) {
      if(angular.isUndefined(field) || $filter('GetByFieldAndValue')(field,value,collection)) {
        return true;
      }
      return false;
    };

    $scope.makeDefaultValueReadOnlyIfApplicable = function($event) {
      var elem = $event.currentTarget;
      var readOnlyLengthData = elem.getAttribute('data-read-only-length');
      if(readOnlyLengthData) {
        var readOnlyLength = parseInt(readOnlyLengthData);
        if (($event.which !== 37 && ($event.which !== 39)) &&
          ((elem.selectionStart < readOnlyLength) ||
            ((elem.selectionStart === readOnlyLength) &&
              ($event.which === 8)))) {
          $event.preventDefault();
          return false;
        }
      }
    };
  }

  /*
   * update $scope.groups and add a ReadOnlyLength
   * for options with default value to disable removal of default value
   * for options with type 'comma-list', set it to the length of the default value
   * for options with type 'string', set it to -1 which means it should be readonly
   */
  function addReadOnlyLengthToGroupSettingWithDefaultValue(groups) {
    $.each(groups, function(i, group) {
      $.each(group.settings, function(i, setting) {
        if(setting.Value) {
          if(setting.Type === 'comma-list') {
            setting.ReadOnlyLength = setting.Value.length;
          }
          else if(setting.Type === 'string') {
            setting.ReadOnlyLength = -1;
          }
        }
      });
    });
  }

  function updateGroupsBasedOnPreviousSettings(groups, otherOptions) {
    if(otherOptions !== null) {
      var optionsMap = $.parseJSON(otherOptions);
      $.each(groups, function(i, group) {
        $.each(group.settings, function(i, setting) {
          if(optionsMap[setting.Field]) {
            var value = optionsMap[setting.Field].replace(/"/g, '');
            setting.Value = value;
          }
        });
      });
    }
  }

  function showBasedOnCategoryAndInputFileType(category, inputFileType) {
    if(category === 'Delimited text options' && inputFileType !== 'delimited_text') {
      return false;
    } else if(category === 'Aggregate XML options' && inputFileType !== 'aggregates') {
      return false;
    }
    return true;
  }

  function constructInitialMlcpCommand(DataHub) {
    var mlcpCommand = 'mlcp';
    var mlcpExtension = '.sh';
    if ( navigator.appVersion.indexOf('Win') !== -1 ) {
      mlcpExtension = '.bat';
    }
    mlcpCommand += mlcpExtension + ' import -mode local';
    mlcpCommand += ' -host ' + DataHub.status.mlHost;
    mlcpCommand += ' -port ' + DataHub.status.mlStagingRestPort;
    mlcpCommand += ' -username ' + DataHub.status.mlUsername;
    mlcpCommand += ' -password ' + DataHub.status.mlPassword;
    return mlcpCommand;
  }

  function updateMlcpCommand(initialMlcpCommand, loadDataForm, groups) {
    var mlcpCommand = initialMlcpCommand;
    mlcpCommand += ' -input_file_path ' + loadDataForm.inputPath;
    mlcpCommand += ' -input_file_type ' + loadDataForm.inputFileType;
    mlcpCommand += ' -output_uri_replace "' + loadDataForm.inputPath + ',\'\'"';

    var otherOptions = [];
    $.each(groups, function(i, group) {
      if(showBasedOnCategoryAndInputFileType(group.category, loadDataForm.inputFileType)) {
        $.each(group.settings, function(i, setting) {
          if(setting.Value) {
            var key = setting.Field;
            var value = '"' + setting.Value + '"';
            mlcpCommand += ' ' + key + ' ' + value;
            var option = {};
            option[key] = value;
            otherOptions.push(option);
          }
        });
      }
    });

    loadDataForm.otherOptions = otherOptions.length > 0 ? JSON.stringify(otherOptions) : null;
    return mlcpCommand;
  }

  function EntityModalController($scope, $uibModalInstance, DataHub) {
    $scope.entityForm = {
      pluginFormat: 'sjs',
ul.nav.abn-tree i {
}

.caption {
	font-style: italic;
	font-weight: normal;
}

.code {
	font-weight: normal;
    font-family: sans-serif;
}

section {
	border: 1px solid #ccc;
	padding: 6px 12px;
	border-radius: 4px;
    -webkit-box-shadow: inset 0 1px 1px rgba(0,0,0,.075);
    box-shadow: inset 0 1px 1px rgba(0,0,0,.075);
}
div.api-doc > div {
#img_logo {
    margin: 0pt 10px;
    height: 50px;
}

  <meta http-equiv="pragma" content="no-cache" />

  <!-- Angular -->
  <script src="lib/angular.js/js/angular.js"></script>
  <script src="lib/angular.js/js/angular-route.js"></script>
  <script src="lib/angular.js/js/angular-animate.js"></script>
  <script src="lib/angular.js/js/ui-bootstrap-tpls-1.2.4.js"></script>
  <script src="lib/angular.js/js/angular-aria.min.js"></script>
  <script src="lib/angular.js/js/angular-material.min.js"></script>
  <script src="lib/angular.js/js/angular-sanitize.min.js"></script>

  <!-- tree control -->
  <script type="text/javascript" src="lib/angular-tree-control/angular-tree-control.js"></script>
  <script src="lib/bootstrap-3.3.6-dist/js/bootstrap.min.js"></script>
  <script src="lib/abn_tree/js/abn_tree_directive.js"></script>

  <!-- angular-swagger-ui JS -->
  <script src="webjars/angular-swagger-ui/0.3.1/dist/scripts/swagger-ui.min.js"></script>

  <script src="app/services/dataHubService.js"></script>
  <script src="app/services/modalService.js"></script>

  <script src="app/directives/headerDirective.js"></script>
  <script src="app/directives/footerDirective.js"></script>
  <script src="app/directives/spinnerDirective.js"></script>
  <link href="lib/bootstrap-3.3.6-dist/css/bootstrap.min.css" rel="stylesheet"></link>
  <link href="lib/font-awesome/css/font-awesome.min.css" rel="stylesheet"></link>
  <link href="lib/abn_tree/css/abn_tree.css" rel="stylesheet"></link>
  <link href="lib/angular.js/css/angular-material.min.css" rel="stylesheet"></link>

  <!-- angular-swagger-ui CSS -->
  <link href="webjars/angular-swagger-ui/0.3.1/dist/css/swagger-ui.min.css" rel="stylesheet" >
{ "groups" : [{
   "category": "General options",
   "settings": [
	  {
        "Label": "Output collections",
        "Field": "-output_collections",
        "Type": "comma-list",
        "Description": "A comma separated list of collection URIs. Loaded documents are added to these collections.",
        "Value": "{{entityName}},{{flowName}},input"
     },
     {
        "Label": "Output permissions",
        "Field": "-output_permissions",
        "Type": "comma-list",
        "Description": "A comma separated list of (role,capability) pairs to apply to loaded documents. Default: The default permissions associated with the user inserting the document. Example: -output_permissions role1,read,role2,update",
        "Value": "rest-reader,read,rest-writer,update"
     },
     {   
        "Label": "Output URI prefix",
        "Field": "-output_uri_prefix",
        "Type": "string",
        "Description": "URI prefix to the id specified by -output_idname. Used to construct output document URIs."
    },  
    {
        "Label": "Output URI suffix",
        "Field": "-output_uri_suffix",
        "Type": "string",
        "Description": "URI suffix to the id specified by -output_idname. Used to construct output document URIs."
    },
    {
        "Label": "Document type",
        "Field": "-document_type",
        "Type": "type",
        "Description": "The type of document to create when -input_file_type is documents or sequencefile. Accepted values: mixed (documents only), xml, json, text, binary. Default: mixed for documents, xml for sequencefile.",
        "Options": [
          {
            "label": "mixed (documents only)",
            "value": "mixed"
          },
          {
            "label": "xml (default for sequence file)",
            "value": "xml"
          },
          {
            "label": "json",
            "value": "json"
          },
          {
            "label": "text",
            "value": "text"
          },
          {
            "label": "binary",
            "value": "binary"
          }
        ]
    },
    {
        "Label": "Input files are compressed?",
        "Field": "-input_compressed",
        "Type": "boolean",
        "Description": "Whether or not the source data is compressed. Default: false.",
        "Placeholder Value": "whether or not the source data is compressed"
    },
    {
        "Label": "Input files codec",
        "Field": "-input_compression_codec",
        "Type": "type",
        "Description": "When -input_compressed is true, the code used for compression. Accepted values: zip, gzip.",
        "Options": [
          {
            "label": "zip",
            "value": "zip"
          },
          {
            "label": "gzip",
            "value": "gzip"
          }
        ],
        "FilterField": "-input_compressed",
        "FilterValue": "true"
    },
    {
        "Label": "Namespace",
        "Field": "-namespace",
        "Type": "string",
        "Description": "The default namespace for all XML documents created during loading.",
        "Placeholder Value": "default namespace for all XML documents created during loading"
    },
    {
        "Label": "XML repair level",
        "Field": "-xml_repair_level",
        "Type": "string",
        "Description": "The degree of repair to attempt on XML documents in order to create well-formed XML. Accepted values: default,full, none. Default: default, which depends on the configured MarkLogic Server default XQuery version: In XQuery 1.0 and 1.0-ml the default is none. In XQuery 0.9-ml the default is full.",
        "Placeholder Value": "default, full, or none"
    },
    {
        "Label": "Thread count",
        "Field": "-thread_count",
        "Type": "number",
        "Description": "The number of threads to spawn for concurrent loading. The total number of threads spawned by the process can be larger than this number, but this option caps the number of concurrent sessions with MarkLogic Server. Only available in local mode. Default: 4.",
        "Placeholder Value": "default is 4"
    },
    {
        "Label": "Batch size",
        "Field": "-batch_size",
        "Type": "number",
        "Description": "The number of documents to process in a single request to MarkLogic Server. This option is ignored when you use -transform_module; a transform always sets the batch size to 1. Default: 100.",
        "Placeholder Value": "default is 100; set to 1 when transform is used"
    }
  ]
 },
 {
   "category": "Delimited text options",
   "caption": "If the selected file ends in .csv, .xls, or .xlsx, the server will assume that the input file type is \"delimited_text\".",
   "settings": [
    {
        "Label": "Delimiter",
        "Field": "-delimiter",
        "Type": "character",
        "Description": "When importing content with -input_file_type delimited_text, the delimiting character. Default: comma (,).",
        "Placeholder Value": "default is comma"
    },
    {
        "Label": "URI ID",
        "Field": "-delimited_uri_id",
        "Type": "string",
        "Description": "When importing content -input_file_type delimited_text, the column name that contributes to the id portion of the URI for inserted documents. Default: The first column.",
        "Placeholder Value": "default is first column"
    },
    {
        "Label": "Generate URI?",
        "Field": "-generate_uri",
        "Type": "boolean",
        "Description": "When importing content with -input_file_type delimited_text, whether or not MarkLogic Server should automatically generate document URIs. Default: false.",
        "Placeholder Value": "default is false for delimited_text, true for delimited_json"
    },
    {
        "Label": "Delimited root name",
        "Field": "-delimited_root_name",
        "Type": "string",
        "Description": "When importing content with -input_file_type delimited_text, the localname of the document root element. Default: root.",
        "Placeholder Value": "default is root"
    },
    {
        "Label": "Split input?",
        "Field": "-split_input",
        "Type": "boolean",
        "Description": "Whether or not to divide input data into logical chunks to support more concurrency. Only supported when -input_file_type is one of the following: delimited_text. Default: false for local mode, true for distributed mode. For details, see Improving Throughput with -split_input.",
        "Placeholder Value": "whether or not to divide input data into logical chunks to support more concurrency."
    }
  ]
 },
 {
   "category": "Aggregate XML options",
   "settings": [
   {
        "Label": "Aggregate record element",
        "Field": "-aggregate_record_element",
        "Type": "string",
        "Description": "When splitting an aggregate input file into multiple documents, the name of the element to use as the output document root. Default: The first child element under the root element."
    },
    {   
        "Label": "Aggregate record namespace",
        "Field": "-aggregate_record_namespace",
        "Type": "string",
        "Description": "The namespace of the element specificed by -aggregate_record_element_name. Default: No namespace."  
    },
    {
        "Label": "URI ID",
        "Field": "-aggregate_uri_id",
        "Type": "string",
        "Description": "When splitting an aggregate input file into multiple documents, the element or attribute name within the document root to use as the document URI. Default: In local mode, hashcode-seqnum, where the hashcode is derived from the split number; in distribute mode, taskid-seqnum.",
        "Placeholder Value": "name of the element from which to derive the document URI"
    }
   ]
 },
 {
   "category": "Transform options",
   "settings": [
    {
        "Label": "Transform module",
        "Field": "-transform_module",
        "Type": "string",
        "Description": "The path in the modules database or modules directory of a custom content transformation function installed on MarkLogic Server. This option is required to enable a custom transformation. For details, see Transforming Content During Ingestion.",
        "Value": "/com.marklogic.hub/mlcp-flow-transform.xqy"
    },
    {
        "Label": "Transform namespace",
        "Field": "-transform_namespace",
        "Type": "string",
        "Description": "The namespace URI of the custom content transformation function named by -transform_function. Ignored if-transform_module is not specified. Default: no namespace. For details, see Transforming Content During Ingestion.",
        "Value": "http://marklogic.com/data-hub/mlcp-flow-transform"
    },
    {
        "Label": "Transform param",
        "Field": "-transform_param",
        "Type": "string",
        "Description": "Optional extra data to pass through to a custom transformation function. Ignored if -transform_module is not specified. Default: no namespace. For details, see Transforming Content During Ingestion.",
        "Value": "<params><entity-name>{{entityName}}</entity-name><flow-name>{{flowName}}</flow-name><flow-type>input</flow-type></params>"
    }
   ]
 }]
}
The MIT License (MIT)

Copyright (c) 2013 Steve

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
Angular Tree Control
================

[![npm version](https://badge.fury.io/js/angular-tree-control.svg)](https://badge.fury.io/js/angular-tree-control)
[![Bower version](https://badge.fury.io/bo/angular-tree-control.svg)](http://badge.fury.io/bo/angular-tree-control)
[![Build Status](https://travis-ci.org/wix/angular-tree-control.png)](https://travis-ci.org/wix/angular-tree-control)
[![Coverage Status](https://coveralls.io/repos/wix/angular-tree-control/badge.png)](https://coveralls.io/r/wix/angular-tree-control)

Pure [AngularJS](http://www.angularjs.org) based tree control component.

[![ScreenShot](https://raw.github.com/wix/angular-tree-control/master/images/sample.png)](http://jsfiddle.net/8ApLX/5/)

To get started, check out [wix.github.io/angular-tree-control](http://wix.github.io/angular-tree-control/)

## Why yet another tree control

We have tried a number of tree controls built for angular and experience a of issues with each. As a result we decided
to build a new tree control with the following design guidelines

- Isolated scope - the tree control should not pollute the scope it is rendered at
- Does not change the tree data - some tree implementations mark on the tree data the selection and expansion of nodes
- Allows customization of the tree node label using the angular way - as an angular template
- Supports large trees with minimal overhead
- Reacts to changes in the tree data, updating the tree as required
- Supports css styling, with three built in styles

## Installation

**Bower**: `bower install angular-tree-control`

The tree control can be used as a Dom element or as an attribute.

Copy the script and css into your project and add a script and link tag to your page.

```html
<script type="text/javascript" src="/angular-tree-control.js"></script>
<!-- link for CSS when using the tree as a Dom element -->
<link rel="stylesheet" type="text/css" href="css/tree-control.css">
<!-- link for CSS when using the tree as an attribute -->
<link rel="stylesheet" type="text/css" href="css/tree-control-attribute.css">
```

Add a dependency to your application module.

```javascript
angular.module('myApp', ['treeControl']);
```

Add tree elements to your Angular template

```html
<!-- as a Dom element -->
<treecontrol class="tree-classic"
   tree-model="dataForTheTree"
   options="treeOptions"
   on-selection="showSelected(node)"
   selected-node="node1">
   employee: {{node.name}} age {{node.age}}
</treecontrol>
<!-- as an attribute -->
<div treecontrol class="tree-classic"
   tree-model="dataForTheTree"
   options="treeOptions"
   on-selection="showSelected(node)"
   selected-node="node1">
   employee: {{node.name}} age {{node.age}}
</div>
```

and add the data for the tree

```javascript
$scope.treeOptions = {
    nodeChildren: "children",
    dirSelectable: true,
    injectClasses: {
        ul: "a1",
        li: "a2",
        liSelected: "a7",
        iExpanded: "a3",
        iCollapsed: "a4",
        iLeaf: "a5",
        label: "a6",
        labelSelected: "a8"
    }
}
$scope.dataForTheTree =
[
	{ "name" : "Joe", "age" : "21", "children" : [
		{ "name" : "Smith", "age" : "42", "children" : [] },
		{ "name" : "Gary", "age" : "21", "children" : [
			{ "name" : "Jenifer", "age" : "23", "children" : [
				{ "name" : "Dani", "age" : "32", "children" : [] },
				{ "name" : "Max", "age" : "34", "children" : [] }
			]}
		]}
	]},
	{ "name" : "Albert", "age" : "33", "children" : [] },
	{ "name" : "Ron", "age" : "29", "children" : [] }
];
```


## Usage

Attributes of angular treecontrol

- `treecontrol` : the treeview element.
- element content : the template to evaluate against each node (and the parent scope of the tree) for the node label.
- `tree-model` : [Node|Array[Node]] the tree data on the `$scope`. This can be an array of nodes or a single node.
- `selected-node` : [Node], used when `multiSelection=false`. Binding for the selected node in the tree. Updating this value updates the selection displayed in the tree. Selecting a node in the tree will update this value.
- `selected-nodes` : [Array[Node]], used when `multiSelection=true`. Binding for the selected nodes in the tree. Updating this value updates the selection displayed in the tree. Selecting a node in the tree will update this value.
- `expanded-nodes` : [Array[Node]] binding for the expanded nodes in the tree. Updating this value updates the nodes that are expanded in the tree.
- `on-selection` : `(node, selected)` callback called whenever selecting a node in the tree. The callback expression can use the selected node (`node`) and a boolean which indicates if the node was selected or deselected (`selected`).
- `on-node-toggle` : `(node, expanded)` callback called whenever a node expands or collapses in the tree. The callback expression can use the toggled node (`node`) and a boolean which indicates expansion or collapse (`expanded`).
- `options` : different options to customize the tree control.
  - `multiSelection` : [Boolean] enable multiple nodes selection in the tree.
  - `nodeChildren` : the name of the property of each node that holds the node children. Defaults to 'children'.
  - `dirSelectable` : are directories (nodes with children) selectable? If not, clicking on the dir label will expand and contact the dir. Defaults to `true`.
  - `allowDeselect` : are nodes deselectable? If not, clicking on the label will not deselect node. Defaults to `true`.
  - `equality` : the function used to determine equality between old nodes and new ones when checking whether a replacement node should be expanded and/or marked as selected. Defaults to a function which uses `angular.equals()` on everything except the property indicated in `nodeChildren`.
  - `isLeaf` : function (node) -> boolean used to determine if a node is a leaf or branch. The default function checks for existence of children of the node to determine leaf or branch.
  - `injectClasses` : allows to inject additional CSS classes into the tree DOM
    - `ul` : inject classes into the ul elements
    - `li` : inject classes into the li elements
    - `liSelected` : inject classes into the li elements only when the node is selected
    - `iExpanded` : inject classes into the 'i' element for the expanded nodes
    - `iCollapsed` : inject classes into the 'i' element for the collapsed nodes
    - `iLeaf` : inject classes into the 'i' element for leaf nodes
    - `label` : inhject classes into the div element around the label
    - `labelSelected` : inject classes into the div element around the label only when the node is selected
- `order-by` : value for ng-repeat to use for ordering sibling nodes
- `reverse-order` : whether or not to reverse the ordering of sibling nodes based on the value of `order-by`
- `filter-expression` : value for ng-repeat to use for filtering the sibling nodes
- `filter-comparator` : value for ng-repeat to use for comparing nodes with the filter expression

### The tree labels

The Angular Tree control uses a similar paradigm to ng-repeat in that it allows using the current node as well as values from
the parent scope. The current node is injected into the scope used to render the label as the ```node``` member (unlike ng-repeat, we
do not allow to name the current node item in the transcluded scope).

In order to render a template that takes a value ```X``` from the parent scope of the tree and value ```Y``` from the current node, use the following template
```{{X}} {{node.Y}}```


## Styling

The angular-tree-control renders to the following DOM structure
```html
<treecontrol class="tree-classic">
  <ul>
    <li class="tree-expanded">
      <i class="tree-branch-head"></i>
      <i class="tree-leaf-head"></i>
      <div class="tree-label">
         ... label - expanded angular template is in the treecontrol element ...
      </div>
      <treeitem>
        <ul>
          <li class="tree-leaf">
            <i class="tree-branch-head"></i>
            <i class="tree-leaf-head"></i>
            <div class="tree-label tree-selected">
              ... label - expanded angular template is in the treecontrol element ...
            </div>
          </li>
          <li class="tree-leaf">
            <i class="tree-branch-head"></i>
            <i class="tree-leaf-head"></i>
            <div class="tree-label">
              ... label - expanded angular template is in the treecontrol element ...
            </div>
          </li>
        </ul>
      </treeitem>
    </li>
  </ul>
</treecontrol>
```

The following CSS classes are used in the built-in styles for the tree-control.
Additional classes can be added using the options.injectClasses member (see above)

- tree-expanded, tree-collapsed, tree-leaf - are placed on the 'ul' element
- tree-branch-head, tree-leaf-head - are placed on the 'i' elements. We use those classes to place the icons for the tree
- tree-selected - placed on the div around the label


## Reference

This tree control is based in part on the angular.treeview component
* angular.treeview: http://ngmodules.org/modules/angular.treeview

## License

The MIT License.

See [LICENSE](https://github.com/wix/angular-tree-control/blob/master/LICENSE)
{
  "name": "angular-tree-control",
  "version": "0.2.20",
  "author": "Yoav Abrahami",
  "contributors": [
    "Benjamin Orozco <benoror@gmail.com>"
  ],
  "main": [
    "./angular-tree-control.js",
    "./css/tree-control.css"
  ],
  "ignore": [
    "Gruntfile.js",
    "package.json",
    "test",
    "karma.conf.js"
  ],
  "dependencies": {
    "angular": "~1.4.4"
  },
  "devDependencies": {
    "angular-mocks": "~1.4.4",
    "jquery": "~2.0.3",
    "bootstrap": "~3.1.1",
    "angular-bootstrap": "~0.11.0",
    "google-code-prettify": "1.0.1"
  }
}
/**
 * @license AngularJS v1.2.29-build.589+sha.14c50a1
 * (c) 2010-2014 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function(window, angular, undefined) {

'use strict';

/**
 * @ngdoc object
 * @name angular.mock
 * @description
 *
 * Namespace from 'angular-mocks.js' which contains testing related code.
 */
angular.mock = {};

/**
 * ! This is a private undocumented service !
 *
 * @name $browser
 *
 * @description
 * This service is a mock implementation of {@link ng.$browser}. It provides fake
 * implementation for commonly used browser apis that are hard to test, e.g. setTimeout, xhr,
 * cookies, etc...
 *
 * The api of this service is the same as that of the real {@link ng.$browser $browser}, except
 * that there are several helper methods available which can be used in tests.
 */
angular.mock.$BrowserProvider = function() {
  this.$get = function() {
    return new angular.mock.$Browser();
  };
};

angular.mock.$Browser = function() {
  var self = this;

  this.isMock = true;
  self.$$url = "http://server/";
  self.$$lastUrl = self.$$url; // used by url polling fn
  self.pollFns = [];

  // TODO(vojta): remove this temporary api
  self.$$completeOutstandingRequest = angular.noop;
  self.$$incOutstandingRequestCount = angular.noop;


  // register url polling fn

  self.onUrlChange = function(listener) {
    self.pollFns.push(
      function() {
        if (self.$$lastUrl != self.$$url) {
          self.$$lastUrl = self.$$url;
          listener(self.$$url);
        }
      }
    );

    return listener;
  };

  self.$$checkUrlChange = angular.noop;

  self.cookieHash = {};
  self.lastCookieHash = {};
  self.deferredFns = [];
  self.deferredNextId = 0;

  self.defer = function(fn, delay) {
    delay = delay || 0;
    self.deferredFns.push({time:(self.defer.now + delay), fn:fn, id: self.deferredNextId});
    self.deferredFns.sort(function(a,b){ return a.time - b.time;});
    return self.deferredNextId++;
  };


  /**
   * @name $browser#defer.now
   *
   * @description
   * Current milliseconds mock time.
   */
  self.defer.now = 0;


  self.defer.cancel = function(deferId) {
    var fnIndex;

    angular.forEach(self.deferredFns, function(fn, index) {
      if (fn.id === deferId) fnIndex = index;
    });

    if (fnIndex !== undefined) {
      self.deferredFns.splice(fnIndex, 1);
      return true;
    }

    return false;
  };


  /**
   * @name $browser#defer.flush
   *
   * @description
   * Flushes all pending requests and executes the defer callbacks.
   *
   * @param {number=} number of milliseconds to flush. See {@link #defer.now}
   */
  self.defer.flush = function(delay) {
    if (angular.isDefined(delay)) {
      self.defer.now += delay;
    } else {
      if (self.deferredFns.length) {
        self.defer.now = self.deferredFns[self.deferredFns.length-1].time;
      } else {
        throw new Error('No deferred tasks to be flushed');
      }
    }

    while (self.deferredFns.length && self.deferredFns[0].time <= self.defer.now) {
      self.deferredFns.shift().fn();
    }
  };

  self.$$baseHref = '';
  self.baseHref = function() {
    return this.$$baseHref;
  };
};
angular.mock.$Browser.prototype = {

/**
  * @name $browser#poll
  *
  * @description
  * run all fns in pollFns
  */
  poll: function poll() {
    angular.forEach(this.pollFns, function(pollFn){
      pollFn();
    });
  },

  addPollFn: function(pollFn) {
    this.pollFns.push(pollFn);
    return pollFn;
  },

  url: function(url, replace) {
    if (url) {
      this.$$url = url;
      return this;
    }

    return this.$$url;
  },

  cookies:  function(name, value) {
    if (name) {
      if (angular.isUndefined(value)) {
        delete this.cookieHash[name];
      } else {
        if (angular.isString(value) &&       //strings only
            value.length <= 4096) {          //strict cookie storage limits
          this.cookieHash[name] = value;
        }
      }
    } else {
      if (!angular.equals(this.cookieHash, this.lastCookieHash)) {
        this.lastCookieHash = angular.copy(this.cookieHash);
        this.cookieHash = angular.copy(this.cookieHash);
      }
      return this.cookieHash;
    }
  },

  notifyWhenNoOutstandingRequests: function(fn) {
    fn();
  }
};


/**
 * @ngdoc provider
 * @name $exceptionHandlerProvider
 *
 * @description
 * Configures the mock implementation of {@link ng.$exceptionHandler} to rethrow or to log errors
 * passed into the `$exceptionHandler`.
 */

/**
 * @ngdoc service
 * @name $exceptionHandler
 *
 * @description
 * Mock implementation of {@link ng.$exceptionHandler} that rethrows or logs errors passed
 * into it. See {@link ngMock.$exceptionHandlerProvider $exceptionHandlerProvider} for configuration
 * information.
 *
 *
 * ```js
 *   describe('$exceptionHandlerProvider', function() {
 *
 *     it('should capture log messages and exceptions', function() {
 *
 *       module(function($exceptionHandlerProvider) {
 *         $exceptionHandlerProvider.mode('log');
 *       });
 *
 *       inject(function($log, $exceptionHandler, $timeout) {
 *         $timeout(function() { $log.log(1); });
 *         $timeout(function() { $log.log(2); throw 'banana peel'; });
 *         $timeout(function() { $log.log(3); });
 *         expect($exceptionHandler.errors).toEqual([]);
 *         expect($log.assertEmpty());
 *         $timeout.flush();
 *         expect($exceptionHandler.errors).toEqual(['banana peel']);
 *         expect($log.log.logs).toEqual([[1], [2], [3]]);
 *       });
 *     });
 *   });
 * ```
 */

angular.mock.$ExceptionHandlerProvider = function() {
  var handler;

  /**
   * @ngdoc method
   * @name $exceptionHandlerProvider#mode
   *
   * @description
   * Sets the logging mode.
   *
   * @param {string} mode Mode of operation, defaults to `rethrow`.
   *
   *   - `rethrow`: If any errors are passed into the handler in tests, it typically
   *                means that there is a bug in the application or test, so this mock will
   *                make these tests fail.
   *   - `log`: Sometimes it is desirable to test that an error is thrown, for this case the `log`
   *            mode stores an array of errors in `$exceptionHandler.errors`, to allow later
   *            assertion of them. See {@link ngMock.$log#assertEmpty assertEmpty()} and
   *            {@link ngMock.$log#reset reset()}
   */
  this.mode = function(mode) {
    switch(mode) {
      case 'rethrow':
        handler = function(e) {
          throw e;
        };
        break;
      case 'log':
        var errors = [];

        handler = function(e) {
          if (arguments.length == 1) {
            errors.push(e);
          } else {
            errors.push([].slice.call(arguments, 0));
          }
        };

        handler.errors = errors;
        break;
      default:
        throw new Error("Unknown mode '" + mode + "', only 'log'/'rethrow' modes are allowed!");
    }
  };

  this.$get = function() {
    return handler;
  };

  this.mode('rethrow');
};


/**
 * @ngdoc service
 * @name $log
 *
 * @description
 * Mock implementation of {@link ng.$log} that gathers all logged messages in arrays
 * (one array per logging level). These arrays are exposed as `logs` property of each of the
 * level-specific log function, e.g. for level `error` the array is exposed as `$log.error.logs`.
 *
 */
angular.mock.$LogProvider = function() {
  var debug = true;

  function concat(array1, array2, index) {
    return array1.concat(Array.prototype.slice.call(array2, index));
  }

  this.debugEnabled = function(flag) {
    if (angular.isDefined(flag)) {
      debug = flag;
      return this;
    } else {
      return debug;
    }
  };

  this.$get = function () {
    var $log = {
      log: function() { $log.log.logs.push(concat([], arguments, 0)); },
      warn: function() { $log.warn.logs.push(concat([], arguments, 0)); },
      info: function() { $log.info.logs.push(concat([], arguments, 0)); },
      error: function() { $log.error.logs.push(concat([], arguments, 0)); },
      debug: function() {
        if (debug) {
          $log.debug.logs.push(concat([], arguments, 0));
        }
      }
    };

    /**
     * @ngdoc method
     * @name $log#reset
     *
     * @description
     * Reset all of the logging arrays to empty.
     */
    $log.reset = function () {
      /**
       * @ngdoc property
       * @name $log#log.logs
       *
       * @description
       * Array of messages logged using {@link ngMock.$log#log}.
       *
       * @example
       * ```js
       * $log.log('Some Log');
       * var first = $log.log.logs.unshift();
       * ```
       */
      $log.log.logs = [];
      /**
       * @ngdoc property
       * @name $log#info.logs
       *
       * @description
       * Array of messages logged using {@link ngMock.$log#info}.
       *
       * @example
       * ```js
       * $log.info('Some Info');
       * var first = $log.info.logs.unshift();
       * ```
       */
      $log.info.logs = [];
      /**
       * @ngdoc property
       * @name $log#warn.logs
       *
       * @description
       * Array of messages logged using {@link ngMock.$log#warn}.
       *
       * @example
       * ```js
       * $log.warn('Some Warning');
       * var first = $log.warn.logs.unshift();
       * ```
       */
      $log.warn.logs = [];
      /**
       * @ngdoc property
       * @name $log#error.logs
       *
       * @description
       * Array of messages logged using {@link ngMock.$log#error}.
       *
       * @example
       * ```js
       * $log.error('Some Error');
       * var first = $log.error.logs.unshift();
       * ```
       */
      $log.error.logs = [];
        /**
       * @ngdoc property
       * @name $log#debug.logs
       *
       * @description
       * Array of messages logged using {@link ngMock.$log#debug}.
       *
       * @example
       * ```js
       * $log.debug('Some Error');
       * var first = $log.debug.logs.unshift();
       * ```
       */
      $log.debug.logs = [];
    };

    /**
     * @ngdoc method
     * @name $log#assertEmpty
     *
     * @description
     * Assert that the all of the logging methods have no logged messages. If messages present, an
     * exception is thrown.
     */
    $log.assertEmpty = function() {
      var errors = [];
      angular.forEach(['error', 'warn', 'info', 'log', 'debug'], function(logLevel) {
        angular.forEach($log[logLevel].logs, function(log) {
          angular.forEach(log, function (logItem) {
            errors.push('MOCK $log (' + logLevel + '): ' + String(logItem) + '\n' +
                        (logItem.stack || ''));
          });
        });
      });
      if (errors.length) {
        errors.unshift("Expected $log to be empty! Either a message was logged unexpectedly, or "+
          "an expected log message was not checked and removed:");
        errors.push('');
        throw new Error(errors.join('\n---------\n'));
      }
    };

    $log.reset();
    return $log;
  };
};


/**
 * @ngdoc service
 * @name $interval
 *
 * @description
 * Mock implementation of the $interval service.
 *
 * Use {@link ngMock.$interval#flush `$interval.flush(millis)`} to
 * move forward by `millis` milliseconds and trigger any functions scheduled to run in that
 * time.
 *
 * @param {function()} fn A function that should be called repeatedly.
 * @param {number} delay Number of milliseconds between each function call.
 * @param {number=} [count=0] Number of times to repeat. If not set, or 0, will repeat
 *   indefinitely.
 * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise
 *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.
 * @returns {promise} A promise which will be notified on each iteration.
 */
angular.mock.$IntervalProvider = function() {
  this.$get = ['$rootScope', '$q',
       function($rootScope,   $q) {
    var repeatFns = [],
        nextRepeatId = 0,
        now = 0;

    var $interval = function(fn, delay, count, invokeApply) {
      var deferred = $q.defer(),
          promise = deferred.promise,
          iteration = 0,
          skipApply = (angular.isDefined(invokeApply) && !invokeApply);

      count = (angular.isDefined(count)) ? count : 0;
      promise.then(null, null, fn);

      promise.$$intervalId = nextRepeatId;

      function tick() {
        deferred.notify(iteration++);

        if (count > 0 && iteration >= count) {
          var fnIndex;
          deferred.resolve(iteration);

          angular.forEach(repeatFns, function(fn, index) {
            if (fn.id === promise.$$intervalId) fnIndex = index;
          });

          if (fnIndex !== undefined) {
            repeatFns.splice(fnIndex, 1);
          }
        }

        if (!skipApply) $rootScope.$apply();
      }

      repeatFns.push({
        nextTime:(now + delay),
        delay: delay,
        fn: tick,
        id: nextRepeatId,
        deferred: deferred
      });
      repeatFns.sort(function(a,b){ return a.nextTime - b.nextTime;});

      nextRepeatId++;
      return promise;
    };
    /**
     * @ngdoc method
     * @name $interval#cancel
     *
     * @description
     * Cancels a task associated with the `promise`.
     *
     * @param {promise} promise A promise from calling the `$interval` function.
     * @returns {boolean} Returns `true` if the task was successfully cancelled.
     */
    $interval.cancel = function(promise) {
      if(!promise) return false;
      var fnIndex;

      angular.forEach(repeatFns, function(fn, index) {
        if (fn.id === promise.$$intervalId) fnIndex = index;
      });

      if (fnIndex !== undefined) {
        repeatFns[fnIndex].deferred.reject('canceled');
        repeatFns.splice(fnIndex, 1);
        return true;
      }

      return false;
    };

    /**
     * @ngdoc method
     * @name $interval#flush
     * @description
     *
     * Runs interval tasks scheduled to be run in the next `millis` milliseconds.
     *
     * @param {number=} millis maximum timeout amount to flush up until.
     *
     * @return {number} The amount of time moved forward.
     */
    $interval.flush = function(millis) {
      now += millis;
      while (repeatFns.length && repeatFns[0].nextTime <= now) {
        var task = repeatFns[0];
        task.fn();
        task.nextTime += task.delay;
        repeatFns.sort(function(a,b){ return a.nextTime - b.nextTime;});
      }
      return millis;
    };

    return $interval;
  }];
};


/* jshint -W101 */
/* The R_ISO8061_STR regex is never going to fit into the 100 char limit!
 * This directive should go inside the anonymous function but a bug in JSHint means that it would
 * not be enacted early enough to prevent the warning.
 */
var R_ISO8061_STR = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?:\:?(\d\d)(?:\:?(\d\d)(?:\.(\d{3}))?)?)?(Z|([+-])(\d\d):?(\d\d)))?$/;

function jsonStringToDate(string) {
  var match;
  if (match = string.match(R_ISO8061_STR)) {
    var date = new Date(0),
        tzHour = 0,
        tzMin  = 0;
    if (match[9]) {
      tzHour = int(match[9] + match[10]);
      tzMin = int(match[9] + match[11]);
    }
    date.setUTCFullYear(int(match[1]), int(match[2]) - 1, int(match[3]));
    date.setUTCHours(int(match[4]||0) - tzHour,
                     int(match[5]||0) - tzMin,
                     int(match[6]||0),
                     int(match[7]||0));
    return date;
  }
  return string;
}

function int(str) {
  return parseInt(str, 10);
}

function padNumber(num, digits, trim) {
  var neg = '';
  if (num < 0) {
    neg =  '-';
    num = -num;
  }
  num = '' + num;
  while(num.length < digits) num = '0' + num;
  if (trim)
    num = num.substr(num.length - digits);
  return neg + num;
}


/**
 * @ngdoc type
 * @name angular.mock.TzDate
 * @description
 *
 * *NOTE*: this is not an injectable instance, just a globally available mock class of `Date`.
 *
 * Mock of the Date type which has its timezone specified via constructor arg.
 *
 * The main purpose is to create Date-like instances with timezone fixed to the specified timezone
 * offset, so that we can test code that depends on local timezone settings without dependency on
 * the time zone settings of the machine where the code is running.
 *
 * @param {number} offset Offset of the *desired* timezone in hours (fractions will be honored)
 * @param {(number|string)} timestamp Timestamp representing the desired time in *UTC*
 *
 * @example
 * !!!! WARNING !!!!!
 * This is not a complete Date object so only methods that were implemented can be called safely.
 * To make matters worse, TzDate instances inherit stuff from Date via a prototype.
 *
 * We do our best to intercept calls to "unimplemented" methods, but since the list of methods is
 * incomplete we might be missing some non-standard methods. This can result in errors like:
 * "Date.prototype.foo called on incompatible Object".
 *
 * ```js
 * var newYearInBratislava = new TzDate(-1, '2009-12-31T23:00:00Z');
 * newYearInBratislava.getTimezoneOffset() => -60;
 * newYearInBratislava.getFullYear() => 2010;
 * newYearInBratislava.getMonth() => 0;
 * newYearInBratislava.getDate() => 1;
 * newYearInBratislava.getHours() => 0;
 * newYearInBratislava.getMinutes() => 0;
 * newYearInBratislava.getSeconds() => 0;
 * ```
 *
 */
angular.mock.TzDate = function (offset, timestamp) {
  var self = new Date(0);
  if (angular.isString(timestamp)) {
    var tsStr = timestamp;

    self.origDate = jsonStringToDate(timestamp);

    timestamp = self.origDate.getTime();
    if (isNaN(timestamp))
      throw {
        name: "Illegal Argument",
        message: "Arg '" + tsStr + "' passed into TzDate constructor is not a valid date string"
      };
  } else {
    self.origDate = new Date(timestamp);
  }

  var localOffset = new Date(timestamp).getTimezoneOffset();
  self.offsetDiff = localOffset*60*1000 - offset*1000*60*60;
  self.date = new Date(timestamp + self.offsetDiff);

  self.getTime = function() {
    return self.date.getTime() - self.offsetDiff;
  };

  self.toLocaleDateString = function() {
    return self.date.toLocaleDateString();
  };

  self.getFullYear = function() {
    return self.date.getFullYear();
  };

  self.getMonth = function() {
    return self.date.getMonth();
  };

  self.getDate = function() {
    return self.date.getDate();
  };

  self.getHours = function() {
    return self.date.getHours();
  };

  self.getMinutes = function() {
    return self.date.getMinutes();
  };

  self.getSeconds = function() {
    return self.date.getSeconds();
  };

  self.getMilliseconds = function() {
    return self.date.getMilliseconds();
  };

  self.getTimezoneOffset = function() {
    return offset * 60;
  };

  self.getUTCFullYear = function() {
    return self.origDate.getUTCFullYear();
  };

  self.getUTCMonth = function() {
    return self.origDate.getUTCMonth();
  };

  self.getUTCDate = function() {
    return self.origDate.getUTCDate();
  };

  self.getUTCHours = function() {
    return self.origDate.getUTCHours();
  };

  self.getUTCMinutes = function() {
    return self.origDate.getUTCMinutes();
  };

  self.getUTCSeconds = function() {
    return self.origDate.getUTCSeconds();
  };

  self.getUTCMilliseconds = function() {
    return self.origDate.getUTCMilliseconds();
  };

  self.getDay = function() {
    return self.date.getDay();
  };

  // provide this method only on browsers that already have it
  if (self.toISOString) {
    self.toISOString = function() {
      return padNumber(self.origDate.getUTCFullYear(), 4) + '-' +
            padNumber(self.origDate.getUTCMonth() + 1, 2) + '-' +
            padNumber(self.origDate.getUTCDate(), 2) + 'T' +
            padNumber(self.origDate.getUTCHours(), 2) + ':' +
            padNumber(self.origDate.getUTCMinutes(), 2) + ':' +
            padNumber(self.origDate.getUTCSeconds(), 2) + '.' +
            padNumber(self.origDate.getUTCMilliseconds(), 3) + 'Z';
    };
  }

  //hide all methods not implemented in this mock that the Date prototype exposes
  var unimplementedMethods = ['getUTCDay',
      'getYear', 'setDate', 'setFullYear', 'setHours', 'setMilliseconds',
      'setMinutes', 'setMonth', 'setSeconds', 'setTime', 'setUTCDate', 'setUTCFullYear',
      'setUTCHours', 'setUTCMilliseconds', 'setUTCMinutes', 'setUTCMonth', 'setUTCSeconds',
      'setYear', 'toDateString', 'toGMTString', 'toJSON', 'toLocaleFormat', 'toLocaleString',
      'toLocaleTimeString', 'toSource', 'toString', 'toTimeString', 'toUTCString', 'valueOf'];

  angular.forEach(unimplementedMethods, function(methodName) {
    self[methodName] = function() {
      throw new Error("Method '" + methodName + "' is not implemented in the TzDate mock");
    };
  });

  return self;
};

//make "tzDateInstance instanceof Date" return true
angular.mock.TzDate.prototype = Date.prototype;
/* jshint +W101 */

angular.mock.animate = angular.module('ngAnimateMock', ['ng'])

  .config(['$provide', function($provide) {

    var reflowQueue = [];
    $provide.value('$$animateReflow', function(fn) {
      var index = reflowQueue.length;
      reflowQueue.push(fn);
      return function cancel() {
        reflowQueue.splice(index, 1);
      };
    });

    $provide.decorator('$animate', function($delegate, $$asyncCallback) {
      var animate = {
        queue : [],
        enabled : $delegate.enabled,
        triggerCallbacks : function() {
          $$asyncCallback.flush();
        },
        triggerReflow : function() {
          angular.forEach(reflowQueue, function(fn) {
            fn();
          });
          reflowQueue = [];
        }
      };

      angular.forEach(
        ['enter','leave','move','addClass','removeClass','setClass'], function(method) {
        animate[method] = function() {
          animate.queue.push({
            event : method,
            element : arguments[0],
            args : arguments
          });
          $delegate[method].apply($delegate, arguments);
        };
      });

      return animate;
    });

  }]);


/**
 * @ngdoc function
 * @name angular.mock.dump
 * @description
 *
 * *NOTE*: this is not an injectable instance, just a globally available function.
 *
 * Method for serializing common angular objects (scope, elements, etc..) into strings, useful for
 * debugging.
 *
 * This method is also available on window, where it can be used to display objects on debug
 * console.
 *
 * @param {*} object - any object to turn into string.
 * @return {string} a serialized string of the argument
 */
angular.mock.dump = function(object) {
  return serialize(object);

  function serialize(object) {
    var out;

    if (angular.isElement(object)) {
      object = angular.element(object);
      out = angular.element('<div></div>');
      angular.forEach(object, function(element) {
        out.append(angular.element(element).clone());
      });
      out = out.html();
    } else if (angular.isArray(object)) {
      out = [];
      angular.forEach(object, function(o) {
        out.push(serialize(o));
      });
      out = '[ ' + out.join(', ') + ' ]';
    } else if (angular.isObject(object)) {
      if (angular.isFunction(object.$eval) && angular.isFunction(object.$apply)) {
        out = serializeScope(object);
      } else if (object instanceof Error) {
        out = object.stack || ('' + object.name + ': ' + object.message);
      } else {
        // TODO(i): this prevents methods being logged,
        // we should have a better way to serialize objects
        out = angular.toJson(object, true);
      }
    } else {
      out = String(object);
    }

    return out;
  }

  function serializeScope(scope, offset) {
    offset = offset ||  '  ';
    var log = [offset + 'Scope(' + scope.$id + '): {'];
    for ( var key in scope ) {
      if (Object.prototype.hasOwnProperty.call(scope, key) && !key.match(/^(\$|this)/)) {
        log.push('  ' + key + ': ' + angular.toJson(scope[key]));
      }
    }
    var child = scope.$$childHead;
    while(child) {
      log.push(serializeScope(child, offset + '  '));
      child = child.$$nextSibling;
    }
    log.push('}');
    return log.join('\n' + offset);
  }
};

/**
 * @ngdoc service
 * @name $httpBackend
 * @description
 * Fake HTTP backend implementation suitable for unit testing applications that use the
 * {@link ng.$http $http service}.
 *
 * *Note*: For fake HTTP backend implementation suitable for end-to-end testing or backend-less
 * development please see {@link ngMockE2E.$httpBackend e2e $httpBackend mock}.
 *
 * During unit testing, we want our unit tests to run quickly and have no external dependencies so
 * we don’t want to send [XHR](https://developer.mozilla.org/en/xmlhttprequest) or
 * [JSONP](http://en.wikipedia.org/wiki/JSONP) requests to a real server. All we really need is
 * to verify whether a certain request has been sent or not, or alternatively just let the
 * application make requests, respond with pre-trained responses and assert that the end result is
 * what we expect it to be.
 *
 * This mock implementation can be used to respond with static or dynamic responses via the
 * `expect` and `when` apis and their shortcuts (`expectGET`, `whenPOST`, etc).
 *
 * When an Angular application needs some data from a server, it calls the $http service, which
 * sends the request to a real server using $httpBackend service. With dependency injection, it is
 * easy to inject $httpBackend mock (which has the same API as $httpBackend) and use it to verify
 * the requests and respond with some testing data without sending a request to a real server.
 *
 * There are two ways to specify what test data should be returned as http responses by the mock
 * backend when the code under test makes http requests:
 *
 * - `$httpBackend.expect` - specifies a request expectation
 * - `$httpBackend.when` - specifies a backend definition
 *
 *
 * # Request Expectations vs Backend Definitions
 *
 * Request expectations provide a way to make assertions about requests made by the application and
 * to define responses for those requests. The test will fail if the expected requests are not made
 * or they are made in the wrong order.
 *
 * Backend definitions allow you to define a fake backend for your application which doesn't assert
 * if a particular request was made or not, it just returns a trained response if a request is made.
 * The test will pass whether or not the request gets made during testing.
 *
 *
 * <table class="table">
 *   <tr><th width="220px"></th><th>Request expectations</th><th>Backend definitions</th></tr>
 *   <tr>
 *     <th>Syntax</th>
 *     <td>.expect(...).respond(...)</td>
 *     <td>.when(...).respond(...)</td>
 *   </tr>
 *   <tr>
 *     <th>Typical usage</th>
 *     <td>strict unit tests</td>
 *     <td>loose (black-box) unit testing</td>
 *   </tr>
 *   <tr>
 *     <th>Fulfills multiple requests</th>
 *     <td>NO</td>
 *     <td>YES</td>
 *   </tr>
 *   <tr>
 *     <th>Order of requests matters</th>
 *     <td>YES</td>
 *     <td>NO</td>
 *   </tr>
 *   <tr>
 *     <th>Request required</th>
 *     <td>YES</td>
 *     <td>NO</td>
 *   </tr>
 *   <tr>
 *     <th>Response required</th>
 *     <td>optional (see below)</td>
 *     <td>YES</td>
 *   </tr>
 * </table>
 *
 * In cases where both backend definitions and request expectations are specified during unit
 * testing, the request expectations are evaluated first.
 *
 * If a request expectation has no response specified, the algorithm will search your backend
 * definitions for an appropriate response.
 *
 * If a request didn't match any expectation or if the expectation doesn't have the response
 * defined, the backend definitions are evaluated in sequential order to see if any of them match
 * the request. The response from the first matched definition is returned.
 *
 *
 * # Flushing HTTP requests
 *
 * The $httpBackend used in production always responds to requests asynchronously. If we preserved
 * this behavior in unit testing, we'd have to create async unit tests, which are hard to write,
 * to follow and to maintain. But neither can the testing mock respond synchronously; that would
 * change the execution of the code under test. For this reason, the mock $httpBackend has a
 * `flush()` method, which allows the test to explicitly flush pending requests. This preserves
 * the async api of the backend, while allowing the test to execute synchronously.
 *
 *
 * # Unit testing with mock $httpBackend
 * The following code shows how to setup and use the mock backend when unit testing a controller.
 * First we create the controller under test:
 *
  ```js
  // The controller code
  function MyController($scope, $http) {
    var authToken;

    $http.get('/auth.py').success(function(data, status, headers) {
      authToken = headers('A-Token');
      $scope.user = data;
    });

    $scope.saveMessage = function(message) {
      var headers = { 'Authorization': authToken };
      $scope.status = 'Saving...';

      $http.post('/add-msg.py', message, { headers: headers } ).success(function(response) {
        $scope.status = '';
      }).error(function() {
        $scope.status = 'ERROR!';
      });
    };
  }
  ```
 *
 * Now we setup the mock backend and create the test specs:
 *
  ```js
    // testing controller
    describe('MyController', function() {
       var $httpBackend, $rootScope, createController;

       beforeEach(inject(function($injector) {
         // Set up the mock http service responses
         $httpBackend = $injector.get('$httpBackend');
         // backend definition common for all tests
         $httpBackend.when('GET', '/auth.py').respond({userId: 'userX'}, {'A-Token': 'xxx'});

         // Get hold of a scope (i.e. the root scope)
         $rootScope = $injector.get('$rootScope');
         // The $controller service is used to create instances of controllers
         var $controller = $injector.get('$controller');

         createController = function() {
           return $controller('MyController', {'$scope' : $rootScope });
         };
       }));


       afterEach(function() {
         $httpBackend.verifyNoOutstandingExpectation();
         $httpBackend.verifyNoOutstandingRequest();
       });


       it('should fetch authentication token', function() {
         $httpBackend.expectGET('/auth.py');
         var controller = createController();
         $httpBackend.flush();
       });


       it('should send msg to server', function() {
         var controller = createController();
         $httpBackend.flush();

         // now you don’t care about the authentication, but
         // the controller will still send the request and
         // $httpBackend will respond without you having to
         // specify the expectation and response for this request

         $httpBackend.expectPOST('/add-msg.py', 'message content').respond(201, '');
         $rootScope.saveMessage('message content');
         expect($rootScope.status).toBe('Saving...');
         $httpBackend.flush();
         expect($rootScope.status).toBe('');
       });


       it('should send auth header', function() {
         var controller = createController();
         $httpBackend.flush();

         $httpBackend.expectPOST('/add-msg.py', undefined, function(headers) {
           // check if the header was send, if it wasn't the expectation won't
           // match the request and the test will fail
           return headers['Authorization'] == 'xxx';
         }).respond(201, '');

         $rootScope.saveMessage('whatever');
         $httpBackend.flush();
       });
    });
   ```
 */
angular.mock.$HttpBackendProvider = function() {
  this.$get = ['$rootScope', createHttpBackendMock];
};

/**
 * General factory function for $httpBackend mock.
 * Returns instance for unit testing (when no arguments specified):
 *   - passing through is disabled
 *   - auto flushing is disabled
 *
 * Returns instance for e2e testing (when `$delegate` and `$browser` specified):
 *   - passing through (delegating request to real backend) is enabled
 *   - auto flushing is enabled
 *
 * @param {Object=} $delegate Real $httpBackend instance (allow passing through if specified)
 * @param {Object=} $browser Auto-flushing enabled if specified
 * @return {Object} Instance of $httpBackend mock
 */
function createHttpBackendMock($rootScope, $delegate, $browser) {
  var definitions = [],
      expectations = [],
      responses = [],
      responsesPush = angular.bind(responses, responses.push),
      copy = angular.copy;

  function createResponse(status, data, headers, statusText) {
    if (angular.isFunction(status)) return status;

    return function() {
      return angular.isNumber(status)
          ? [status, data, headers, statusText]
          : [200, status, data];
    };
  }

  // TODO(vojta): change params to: method, url, data, headers, callback
  function $httpBackend(method, url, data, callback, headers, timeout, withCredentials) {
    var xhr = new MockXhr(),
        expectation = expectations[0],
        wasExpected = false;

    function prettyPrint(data) {
      return (angular.isString(data) || angular.isFunction(data) || data instanceof RegExp)
          ? data
          : angular.toJson(data);
    }

    function wrapResponse(wrapped) {
      if (!$browser && timeout && timeout.then) timeout.then(handleTimeout);

      return handleResponse;

      function handleResponse() {
        var response = wrapped.response(method, url, data, headers);
        xhr.$$respHeaders = response[2];
        callback(copy(response[0]), copy(response[1]), xhr.getAllResponseHeaders(),
                 copy(response[3] || ''));
      }

      function handleTimeout() {
        for (var i = 0, ii = responses.length; i < ii; i++) {
          if (responses[i] === handleResponse) {
            responses.splice(i, 1);
            callback(-1, undefined, '');
            break;
          }
        }
      }
    }

    if (expectation && expectation.match(method, url)) {
      if (!expectation.matchData(data))
        throw new Error('Expected ' + expectation + ' with different data\n' +
            'EXPECTED: ' + prettyPrint(expectation.data) + '\nGOT:      ' + data);

      if (!expectation.matchHeaders(headers))
        throw new Error('Expected ' + expectation + ' with different headers\n' +
                        'EXPECTED: ' + prettyPrint(expectation.headers) + '\nGOT:      ' +
                        prettyPrint(headers));

      expectations.shift();

      if (expectation.response) {
        responses.push(wrapResponse(expectation));
        return;
      }
      wasExpected = true;
    }

    var i = -1, definition;
    while ((definition = definitions[++i])) {
      if (definition.match(method, url, data, headers || {})) {
        if (definition.response) {
          // if $browser specified, we do auto flush all requests
          ($browser ? $browser.defer : responsesPush)(wrapResponse(definition));
        } else if (definition.passThrough) {
          $delegate(method, url, data, callback, headers, timeout, withCredentials);
        } else throw new Error('No response defined !');
        return;
      }
    }
    throw wasExpected ?
        new Error('No response defined !') :
        new Error('Unexpected request: ' + method + ' ' + url + '\n' +
                  (expectation ? 'Expected ' + expectation : 'No more request expected'));
  }

  /**
   * @ngdoc method
   * @name $httpBackend#when
   * @description
   * Creates a new backend definition.
   *
   * @param {string} method HTTP method.
   * @param {string|RegExp} url HTTP url.
   * @param {(string|RegExp|function(string))=} data HTTP request body or function that receives
   *   data string and returns true if the data is as expected.
   * @param {(Object|function(Object))=} headers HTTP headers or function that receives http header
   *   object and returns true if the headers match the current definition.
   * @returns {requestHandler} Returns an object with a `respond` method that controls how a matched
   *   request is handled.
   *
   *  - respond –
   *      `{function([status,] data[, headers, statusText])
   *      | function(function(method, url, data, headers)}`
   *    – The respond method takes a set of static data to be returned or a function that can
   *    return an array containing response status (number), response data (string), response
   *    headers (Object), and the text for the status (string).
   */
  $httpBackend.when = function(method, url, data, headers) {
    var definition = new MockHttpExpectation(method, url, data, headers),
        chain = {
          respond: function(status, data, headers, statusText) {
            definition.response = createResponse(status, data, headers, statusText);
          }
        };

    if ($browser) {
      chain.passThrough = function() {
        definition.passThrough = true;
      };
    }

    definitions.push(definition);
    return chain;
  };

  /**
   * @ngdoc method
   * @name $httpBackend#whenGET
   * @description
   * Creates a new backend definition for GET requests. For more info see `when()`.
   *
   * @param {string|RegExp} url HTTP url.
   * @param {(Object|function(Object))=} headers HTTP headers.
   * @returns {requestHandler} Returns an object with a `respond` method that controls how a matched
   * request is handled.
   */

  /**
   * @ngdoc method
   * @name $httpBackend#whenHEAD
   * @description
   * Creates a new backend definition for HEAD requests. For more info see `when()`.
   *
   * @param {string|RegExp} url HTTP url.
   * @param {(Object|function(Object))=} headers HTTP headers.
   * @returns {requestHandler} Returns an object with a `respond` method that controls how a matched
   * request is handled.
   */

  /**
   * @ngdoc method
   * @name $httpBackend#whenDELETE
   * @description
   * Creates a new backend definition for DELETE requests. For more info see `when()`.
   *
   * @param {string|RegExp} url HTTP url.
   * @param {(Object|function(Object))=} headers HTTP headers.
   * @returns {requestHandler} Returns an object with a `respond` method that controls how a matched
   * request is handled.
   */

  /**
   * @ngdoc method
   * @name $httpBackend#whenPOST
   * @description
   * Creates a new backend definition for POST requests. For more info see `when()`.
   *
   * @param {string|RegExp} url HTTP url.
   * @param {(string|RegExp|function(string))=} data HTTP request body or function that receives
   *   data string and returns true if the data is as expected.
   * @param {(Object|function(Object))=} headers HTTP headers.
   * @returns {requestHandler} Returns an object with a `respond` method that controls how a matched
   * request is handled.
   */

  /**
   * @ngdoc method
   * @name $httpBackend#whenPUT
   * @description
   * Creates a new backend definition for PUT requests.  For more info see `when()`.
   *
   * @param {string|RegExp} url HTTP url.
   * @param {(string|RegExp|function(string))=} data HTTP request body or function that receives
   *   data string and returns true if the data is as expected.
   * @param {(Object|function(Object))=} headers HTTP headers.
   * @returns {requestHandler} Returns an object with a `respond` method that controls how a matched
   * request is handled.
   */

  /**
   * @ngdoc method
   * @name $httpBackend#whenPATCH
   * @description
   * Creates a new backend definition for PATCH requests.  For more info see `when()`.
   *
   * @param {string|RegExp} url HTTP url.
   * @param {(string|RegExp|function(string))=} data HTTP request body or function that receives
   *   data string and returns true if the data is as expected.
   * @param {(Object|function(Object))=} headers HTTP headers.
   * @returns {requestHandler} Returns an object with a `respond` method that controls how a matched
   * request is handled.
   */

  /**
   * @ngdoc method
   * @name $httpBackend#whenJSONP
   * @description
   * Creates a new backend definition for JSONP requests. For more info see `when()`.
   *
   * @param {string|RegExp} url HTTP url.
   * @returns {requestHandler} Returns an object with a `respond` method that controls how a matched
   * request is handled.
   */
  createShortMethods('when');


  /**
   * @ngdoc method
   * @name $httpBackend#expect
   * @description
   * Creates a new request expectation.
   *
   * @param {string} method HTTP method.
   * @param {string|RegExp} url HTTP url.
   * @param {(string|RegExp|function(string)|Object)=} data HTTP request body or function that
   *  receives data string and returns true if the data is as expected, or Object if request body
   *  is in JSON format.
   * @param {(Object|function(Object))=} headers HTTP headers or function that receives http header
   *   object and returns true if the headers match the current expectation.
   * @returns {requestHandler} Returns an object with a `respond` method that controls how a matched
   *  request is handled.
   *
   *  - respond –
   *    `{function([status,] data[, headers, statusText])
   *    | function(function(method, url, data, headers)}`
   *    – The respond method takes a set of static data to be returned or a function that can
   *    return an array containing response status (number), response data (string), response
   *    headers (Object), and the text for the status (string).
   */
  $httpBackend.expect = function(method, url, data, headers) {
    var expectation = new MockHttpExpectation(method, url, data, headers);
    expectations.push(expectation);
    return {
      respond: function (status, data, headers, statusText) {
        expectation.response = createResponse(status, data, headers, statusText);
      }
    };
  };


  /**
   * @ngdoc method
   * @name $httpBackend#expectGET
   * @description
   * Creates a new request expectation for GET requests. For more info see `expect()`.
   *
   * @param {string|RegExp} url HTTP url.
   * @param {Object=} headers HTTP headers.
   * @returns {requestHandler} Returns an object with a `respond` method that controls how a matched
   * request is handled. See #expect for more info.
   */

  /**
   * @ngdoc method
   * @name $httpBackend#expectHEAD
   * @description
   * Creates a new request expectation for HEAD requests. For more info see `expect()`.
   *
   * @param {string|RegExp} url HTTP url.
   * @param {Object=} headers HTTP headers.
   * @returns {requestHandler} Returns an object with a `respond` method that controls how a matched
   *   request is handled.
   */

  /**
   * @ngdoc method
   * @name $httpBackend#expectDELETE
   * @description
   * Creates a new request expectation for DELETE requests. For more info see `expect()`.
   *
   * @param {string|RegExp} url HTTP url.
   * @param {Object=} headers HTTP headers.
   * @returns {requestHandler} Returns an object with a `respond` method that controls how a matched
   *   request is handled.
   */

  /**
   * @ngdoc method
   * @name $httpBackend#expectPOST
   * @description
   * Creates a new request expectation for POST requests. For more info see `expect()`.
   *
   * @param {string|RegExp} url HTTP url.
   * @param {(string|RegExp|function(string)|Object)=} data HTTP request body or function that
   *  receives data string and returns true if the data is as expected, or Object if request body
   *  is in JSON format.
   * @param {Object=} headers HTTP headers.
   * @returns {requestHandler} Returns an object with a `respond` method that controls how a matched
   *   request is handled.
   */

  /**
   * @ngdoc method
   * @name $httpBackend#expectPUT
   * @description
   * Creates a new request expectation for PUT requests. For more info see `expect()`.
   *
   * @param {string|RegExp} url HTTP url.
   * @param {(string|RegExp|function(string)|Object)=} data HTTP request body or function that
   *  receives data string and returns true if the data is as expected, or Object if request body
   *  is in JSON format.
   * @param {Object=} headers HTTP headers.
   * @returns {requestHandler} Returns an object with a `respond` method that controls how a matched
   *   request is handled.
   */

  /**
   * @ngdoc method
   * @name $httpBackend#expectPATCH
   * @description
   * Creates a new request expectation for PATCH requests. For more info see `expect()`.
   *
   * @param {string|RegExp} url HTTP url.
   * @param {(string|RegExp|function(string)|Object)=} data HTTP request body or function that
   *  receives data string and returns true if the data is as expected, or Object if request body
   *  is in JSON format.
   * @param {Object=} headers HTTP headers.
   * @returns {requestHandler} Returns an object with a `respond` method that controls how a matched
   *   request is handled.
   */

  /**
   * @ngdoc method
   * @name $httpBackend#expectJSONP
   * @description
   * Creates a new request expectation for JSONP requests. For more info see `expect()`.
   *
   * @param {string|RegExp} url HTTP url.
   * @returns {requestHandler} Returns an object with a `respond` method that controls how a matched
   *   request is handled.
   */
  createShortMethods('expect');


  /**
   * @ngdoc method
   * @name $httpBackend#flush
   * @description
   * Flushes all pending requests using the trained responses.
   *
   * @param {number=} count Number of responses to flush (in the order they arrived). If undefined,
   *   all pending requests will be flushed. If there are no pending requests when the flush method
   *   is called an exception is thrown (as this typically a sign of programming error).
   */
  $httpBackend.flush = function(count) {
    $rootScope.$digest();
    if (!responses.length) throw new Error('No pending request to flush !');

    if (angular.isDefined(count)) {
      while (count--) {
        if (!responses.length) throw new Error('No more pending request to flush !');
        responses.shift()();
      }
    } else {
      while (responses.length) {
        responses.shift()();
      }
    }
    $httpBackend.verifyNoOutstandingExpectation();
  };


  /**
   * @ngdoc method
   * @name $httpBackend#verifyNoOutstandingExpectation
   * @description
   * Verifies that all of the requests defined via the `expect` api were made. If any of the
   * requests were not made, verifyNoOutstandingExpectation throws an exception.
   *
   * Typically, you would call this method following each test case that asserts requests using an
   * "afterEach" clause.
   *
   * ```js
   *   afterEach($httpBackend.verifyNoOutstandingExpectation);
   * ```
   */
  $httpBackend.verifyNoOutstandingExpectation = function() {
    $rootScope.$digest();
    if (expectations.length) {
      throw new Error('Unsatisfied requests: ' + expectations.join(', '));
    }
  };


  /**
   * @ngdoc method
   * @name $httpBackend#verifyNoOutstandingRequest
   * @description
   * Verifies that there are no outstanding requests that need to be flushed.
   *
   * Typically, you would call this method following each test case that asserts requests using an
   * "afterEach" clause.
   *
   * ```js
   *   afterEach($httpBackend.verifyNoOutstandingRequest);
   * ```
   */
  $httpBackend.verifyNoOutstandingRequest = function() {
    if (responses.length) {
      throw new Error('Unflushed requests: ' + responses.length);
    }
  };


  /**
   * @ngdoc method
   * @name $httpBackend#resetExpectations
   * @description
   * Resets all request expectations, but preserves all backend definitions. Typically, you would
   * call resetExpectations during a multiple-phase test when you want to reuse the same instance of
   * $httpBackend mock.
   */
  $httpBackend.resetExpectations = function() {
    expectations.length = 0;
    responses.length = 0;
  };

  return $httpBackend;


  function createShortMethods(prefix) {
    angular.forEach(['GET', 'DELETE', 'JSONP', 'HEAD'], function(method) {
     $httpBackend[prefix + method] = function(url, headers) {
       return $httpBackend[prefix](method, url, undefined, headers);
     };
    });

    angular.forEach(['PUT', 'POST', 'PATCH'], function(method) {
      $httpBackend[prefix + method] = function(url, data, headers) {
        return $httpBackend[prefix](method, url, data, headers);
      };
    });
  }
}

function MockHttpExpectation(method, url, data, headers) {

  this.data = data;
  this.headers = headers;

  this.match = function(m, u, d, h) {
    if (method != m) return false;
    if (!this.matchUrl(u)) return false;
    if (angular.isDefined(d) && !this.matchData(d)) return false;
    if (angular.isDefined(h) && !this.matchHeaders(h)) return false;
    return true;
  };

  this.matchUrl = function(u) {
    if (!url) return true;
    if (angular.isFunction(url.test)) return url.test(u);
    return url == u;
  };

  this.matchHeaders = function(h) {
    if (angular.isUndefined(headers)) return true;
    if (angular.isFunction(headers)) return headers(h);
    return angular.equals(headers, h);
  };

  this.matchData = function(d) {
    if (angular.isUndefined(data)) return true;
    if (data && angular.isFunction(data.test)) return data.test(d);
    if (data && angular.isFunction(data)) return data(d);
    if (data && !angular.isString(data)) {
      return angular.equals(angular.fromJson(angular.toJson(data)), angular.fromJson(d));
    }
    return data == d;
  };

  this.toString = function() {
    return method + ' ' + url;
  };
}

function createMockXhr() {
  return new MockXhr();
}

function MockXhr() {

  // hack for testing $http, $httpBackend
  MockXhr.$$lastInstance = this;

  this.open = function(method, url, async) {
    this.$$method = method;
    this.$$url = url;
    this.$$async = async;
    this.$$reqHeaders = {};
    this.$$respHeaders = {};
  };

  this.send = function(data) {
    this.$$data = data;
  };

  this.setRequestHeader = function(key, value) {
    this.$$reqHeaders[key] = value;
  };

  this.getResponseHeader = function(name) {
    // the lookup must be case insensitive,
    // that's why we try two quick lookups first and full scan last
    var header = this.$$respHeaders[name];
    if (header) return header;

    name = angular.lowercase(name);
    header = this.$$respHeaders[name];
    if (header) return header;

    header = undefined;
    angular.forEach(this.$$respHeaders, function(headerVal, headerName) {
      if (!header && angular.lowercase(headerName) == name) header = headerVal;
    });
    return header;
  };

  this.getAllResponseHeaders = function() {
    var lines = [];

    angular.forEach(this.$$respHeaders, function(value, key) {
      lines.push(key + ': ' + value);
    });
    return lines.join('\n');
  };

  this.abort = angular.noop;
}


/**
 * @ngdoc service
 * @name $timeout
 * @description
 *
 * This service is just a simple decorator for {@link ng.$timeout $timeout} service
 * that adds a "flush" and "verifyNoPendingTasks" methods.
 */

angular.mock.$TimeoutDecorator = function($delegate, $browser) {

  /**
   * @ngdoc method
   * @name $timeout#flush
   * @description
   *
   * Flushes the queue of pending tasks.
   *
   * @param {number=} delay maximum timeout amount to flush up until
   */
  $delegate.flush = function(delay) {
    $browser.defer.flush(delay);
  };

  /**
   * @ngdoc method
   * @name $timeout#verifyNoPendingTasks
   * @description
   *
   * Verifies that there are no pending tasks that need to be flushed.
   */
  $delegate.verifyNoPendingTasks = function() {
    if ($browser.deferredFns.length) {
      throw new Error('Deferred tasks to flush (' + $browser.deferredFns.length + '): ' +
          formatPendingTasksAsString($browser.deferredFns));
    }
  };

  function formatPendingTasksAsString(tasks) {
    var result = [];
    angular.forEach(tasks, function(task) {
      result.push('{id: ' + task.id + ', ' + 'time: ' + task.time + '}');
    });

    return result.join(', ');
  }

  return $delegate;
};

angular.mock.$RAFDecorator = function($delegate) {
  var queue = [];
  var rafFn = function(fn) {
    var index = queue.length;
    queue.push(fn);
    return function() {
      queue.splice(index, 1);
    };
  };

  rafFn.supported = $delegate.supported;

  rafFn.flush = function() {
    if(queue.length === 0) {
      throw new Error('No rAF callbacks present');
    }

    var length = queue.length;
    for(var i=0;i<length;i++) {
      queue[i]();
    }

    queue = [];
  };

  return rafFn;
};

angular.mock.$AsyncCallbackDecorator = function($delegate) {
  var callbacks = [];
  var addFn = function(fn) {
    callbacks.push(fn);
  };
  addFn.flush = function() {
    angular.forEach(callbacks, function(fn) {
      fn();
    });
    callbacks = [];
  };
  return addFn;
};

/**
 *
 */
angular.mock.$RootElementProvider = function() {
  this.$get = function() {
    return angular.element('<div ng-app></div>');
  };
};

/**
 * @ngdoc module
 * @name ngMock
 * @packageName angular-mocks
 * @description
 *
 * # ngMock
 *
 * The `ngMock` module provides support to inject and mock Angular services into unit tests.
 * In addition, ngMock also extends various core ng services such that they can be
 * inspected and controlled in a synchronous manner within test code.
 *
 *
 * <div doc-module-components="ngMock"></div>
 *
 */
angular.module('ngMock', ['ng']).provider({
  $browser: angular.mock.$BrowserProvider,
  $exceptionHandler: angular.mock.$ExceptionHandlerProvider,
  $log: angular.mock.$LogProvider,
  $interval: angular.mock.$IntervalProvider,
  $httpBackend: angular.mock.$HttpBackendProvider,
  $rootElement: angular.mock.$RootElementProvider
}).config(['$provide', function($provide) {
  $provide.decorator('$timeout', angular.mock.$TimeoutDecorator);
  $provide.decorator('$$rAF', angular.mock.$RAFDecorator);
  $provide.decorator('$$asyncCallback', angular.mock.$AsyncCallbackDecorator);
}]);

/**
 * @ngdoc module
 * @name ngMockE2E
 * @module ngMockE2E
 * @packageName angular-mocks
 * @description
 *
 * The `ngMockE2E` is an angular module which contains mocks suitable for end-to-end testing.
 * Currently there is only one mock present in this module -
 * the {@link ngMockE2E.$httpBackend e2e $httpBackend} mock.
 */
angular.module('ngMockE2E', ['ng']).config(['$provide', function($provide) {
  $provide.decorator('$httpBackend', angular.mock.e2e.$httpBackendDecorator);
}]);

/**
 * @ngdoc service
 * @name $httpBackend
 * @module ngMockE2E
 * @description
 * Fake HTTP backend implementation suitable for end-to-end testing or backend-less development of
 * applications that use the {@link ng.$http $http service}.
 *
 * *Note*: For fake http backend implementation suitable for unit testing please see
 * {@link ngMock.$httpBackend unit-testing $httpBackend mock}.
 *
 * This implementation can be used to respond with static or dynamic responses via the `when` api
 * and its shortcuts (`whenGET`, `whenPOST`, etc) and optionally pass through requests to the
 * real $httpBackend for specific requests (e.g. to interact with certain remote apis or to fetch
 * templates from a webserver).
 *
 * As opposed to unit-testing, in an end-to-end testing scenario or in scenario when an application
 * is being developed with the real backend api replaced with a mock, it is often desirable for
 * certain category of requests to bypass the mock and issue a real http request (e.g. to fetch
 * templates or static files from the webserver). To configure the backend with this behavior
 * use the `passThrough` request handler of `when` instead of `respond`.
 *
 * Additionally, we don't want to manually have to flush mocked out requests like we do during unit
 * testing. For this reason the e2e $httpBackend flushes mocked out requests
 * automatically, closely simulating the behavior of the XMLHttpRequest object.
 *
 * To setup the application to run with this http backend, you have to create a module that depends
 * on the `ngMockE2E` and your application modules and defines the fake backend:
 *
 * ```js
 *   myAppDev = angular.module('myAppDev', ['myApp', 'ngMockE2E']);
 *   myAppDev.run(function($httpBackend) {
 *     phones = [{name: 'phone1'}, {name: 'phone2'}];
 *
 *     // returns the current list of phones
 *     $httpBackend.whenGET('/phones').respond(phones);
 *
 *     // adds a new phone to the phones array
 *     $httpBackend.whenPOST('/phones').respond(function(method, url, data) {
 *       var phone = angular.fromJson(data);
 *       phones.push(phone);
 *       return [200, phone, {}];
 *     });
 *     $httpBackend.whenGET(/^\/templates\//).passThrough();
 *     //...
 *   });
 * ```
 *
 * Afterwards, bootstrap your app with this new module.
 */

/**
 * @ngdoc method
 * @name $httpBackend#when
 * @module ngMockE2E
 * @description
 * Creates a new backend definition.
 *
 * @param {string} method HTTP method.
 * @param {string|RegExp} url HTTP url.
 * @param {(string|RegExp)=} data HTTP request body.
 * @param {(Object|function(Object))=} headers HTTP headers or function that receives http header
 *   object and returns true if the headers match the current definition.
 * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that
 *   controls how a matched request is handled.
 *
 *  - respond –
 *    `{function([status,] data[, headers, statusText])
 *    | function(function(method, url, data, headers)}`
 *    – The respond method takes a set of static data to be returned or a function that can return
 *    an array containing response status (number), response data (string), response headers
 *    (Object), and the text for the status (string).
 *  - passThrough – `{function()}` – Any request matching a backend definition with
 *    `passThrough` handler will be passed through to the real backend (an XHR request will be made
 *    to the server.)
 */

/**
 * @ngdoc method
 * @name $httpBackend#whenGET
 * @module ngMockE2E
 * @description
 * Creates a new backend definition for GET requests. For more info see `when()`.
 *
 * @param {string|RegExp} url HTTP url.
 * @param {(Object|function(Object))=} headers HTTP headers.
 * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that
 *   controls how a matched request is handled.
 */

/**
 * @ngdoc method
 * @name $httpBackend#whenHEAD
 * @module ngMockE2E
 * @description
 * Creates a new backend definition for HEAD requests. For more info see `when()`.
 *
 * @param {string|RegExp} url HTTP url.
 * @param {(Object|function(Object))=} headers HTTP headers.
 * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that
 *   controls how a matched request is handled.
 */

/**
 * @ngdoc method
 * @name $httpBackend#whenDELETE
 * @module ngMockE2E
 * @description
 * Creates a new backend definition for DELETE requests. For more info see `when()`.
 *
 * @param {string|RegExp} url HTTP url.
 * @param {(Object|function(Object))=} headers HTTP headers.
 * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that
 *   controls how a matched request is handled.
 */

/**
 * @ngdoc method
 * @name $httpBackend#whenPOST
 * @module ngMockE2E
 * @description
 * Creates a new backend definition for POST requests. For more info see `when()`.
 *
 * @param {string|RegExp} url HTTP url.
 * @param {(string|RegExp)=} data HTTP request body.
 * @param {(Object|function(Object))=} headers HTTP headers.
 * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that
 *   controls how a matched request is handled.
 */

/**
 * @ngdoc method
 * @name $httpBackend#whenPUT
 * @module ngMockE2E
 * @description
 * Creates a new backend definition for PUT requests.  For more info see `when()`.
 *
 * @param {string|RegExp} url HTTP url.
 * @param {(string|RegExp)=} data HTTP request body.
 * @param {(Object|function(Object))=} headers HTTP headers.
 * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that
 *   controls how a matched request is handled.
 */

/**
 * @ngdoc method
 * @name $httpBackend#whenPATCH
 * @module ngMockE2E
 * @description
 * Creates a new backend definition for PATCH requests.  For more info see `when()`.
 *
 * @param {string|RegExp} url HTTP url.
 * @param {(string|RegExp)=} data HTTP request body.
 * @param {(Object|function(Object))=} headers HTTP headers.
 * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that
 *   controls how a matched request is handled.
 */

/**
 * @ngdoc method
 * @name $httpBackend#whenJSONP
 * @module ngMockE2E
 * @description
 * Creates a new backend definition for JSONP requests. For more info see `when()`.
 *
 * @param {string|RegExp} url HTTP url.
 * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that
 *   controls how a matched request is handled.
 */
angular.mock.e2e = {};
angular.mock.e2e.$httpBackendDecorator =
  ['$rootScope', '$delegate', '$browser', createHttpBackendMock];


angular.mock.clearDataCache = function() {
  var key,
      cache = angular.element.cache;

  for(key in cache) {
    if (Object.prototype.hasOwnProperty.call(cache,key)) {
      var handle = cache[key].handle;

      handle && angular.element(handle.elem).off();
      delete cache[key];
    }
  }
};


if(window.jasmine || window.mocha) {

  var currentSpec = null,
      isSpecRunning = function() {
        return !!currentSpec;
      };


  (window.beforeEach || window.setup)(function() {
    currentSpec = this;
  });

  (window.afterEach || window.teardown)(function() {
    var injector = currentSpec.$injector;

    angular.forEach(currentSpec.$modules, function(module) {
      if (module && module.$$hashKey) {
        module.$$hashKey = undefined;
      }
    });

    currentSpec.$injector = null;
    currentSpec.$modules = null;
    currentSpec = null;

    if (injector) {
      injector.get('$rootElement').off();
      injector.get('$browser').pollFns.length = 0;
    }

    angular.mock.clearDataCache();

    // clean up jquery's fragment cache
    angular.forEach(angular.element.fragments, function(val, key) {
      delete angular.element.fragments[key];
    });

    MockXhr.$$lastInstance = null;

    angular.forEach(angular.callbacks, function(val, key) {
      delete angular.callbacks[key];
    });
    angular.callbacks.counter = 0;
  });

  /**
   * @ngdoc function
   * @name angular.mock.module
   * @description
   *
   * *NOTE*: This function is also published on window for easy access.<br>
   * *NOTE*: This function is declared ONLY WHEN running tests with jasmine or mocha
   *
   * This function registers a module configuration code. It collects the configuration information
   * which will be used when the injector is created by {@link angular.mock.inject inject}.
   *
   * See {@link angular.mock.inject inject} for usage example
   *
   * @param {...(string|Function|Object)} fns any number of modules which are represented as string
   *        aliases or as anonymous module initialization functions. The modules are used to
   *        configure the injector. The 'ng' and 'ngMock' modules are automatically loaded. If an
   *        object literal is passed they will be registered as values in the module, the key being
   *        the module name and the value being what is returned.
   */
  window.module = angular.mock.module = function() {
    var moduleFns = Array.prototype.slice.call(arguments, 0);
    return isSpecRunning() ? workFn() : workFn;
    /////////////////////
    function workFn() {
      if (currentSpec.$injector) {
        throw new Error('Injector already created, can not register a module!');
      } else {
        var modules = currentSpec.$modules || (currentSpec.$modules = []);
        angular.forEach(moduleFns, function(module) {
          if (angular.isObject(module) && !angular.isArray(module)) {
            modules.push(function($provide) {
              angular.forEach(module, function(value, key) {
                $provide.value(key, value);
              });
            });
          } else {
            modules.push(module);
          }
        });
      }
    }
  };

  /**
   * @ngdoc function
   * @name angular.mock.inject
   * @description
   *
   * *NOTE*: This function is also published on window for easy access.<br>
   * *NOTE*: This function is declared ONLY WHEN running tests with jasmine or mocha
   *
   * The inject function wraps a function into an injectable function. The inject() creates new
   * instance of {@link auto.$injector $injector} per test, which is then used for
   * resolving references.
   *
   *
   * ## Resolving References (Underscore Wrapping)
   * Often, we would like to inject a reference once, in a `beforeEach()` block and reuse this
   * in multiple `it()` clauses. To be able to do this we must assign the reference to a variable
   * that is declared in the scope of the `describe()` block. Since we would, most likely, want
   * the variable to have the same name of the reference we have a problem, since the parameter
   * to the `inject()` function would hide the outer variable.
   *
   * To help with this, the injected parameters can, optionally, be enclosed with underscores.
   * These are ignored by the injector when the reference name is resolved.
   *
   * For example, the parameter `_myService_` would be resolved as the reference `myService`.
   * Since it is available in the function body as _myService_, we can then assign it to a variable
   * defined in an outer scope.
   *
   * ```
   * // Defined out reference variable outside
   * var myService;
   *
   * // Wrap the parameter in underscores
   * beforeEach( inject( function(_myService_){
   *   myService = _myService_;
   * }));
   *
   * // Use myService in a series of tests.
   * it('makes use of myService', function() {
   *   myService.doStuff();
   * });
   *
   * ```
   *
   * See also {@link angular.mock.module angular.mock.module}
   *
   * ## Example
   * Example of what a typical jasmine tests looks like with the inject method.
   * ```js
   *
   *   angular.module('myApplicationModule', [])
   *       .value('mode', 'app')
   *       .value('version', 'v1.0.1');
   *
   *
   *   describe('MyApp', function() {
   *
   *     // You need to load modules that you want to test,
   *     // it loads only the "ng" module by default.
   *     beforeEach(module('myApplicationModule'));
   *
   *
   *     // inject() is used to inject arguments of all given functions
   *     it('should provide a version', inject(function(mode, version) {
   *       expect(version).toEqual('v1.0.1');
   *       expect(mode).toEqual('app');
   *     }));
   *
   *
   *     // The inject and module method can also be used inside of the it or beforeEach
   *     it('should override a version and test the new version is injected', function() {
   *       // module() takes functions or strings (module aliases)
   *       module(function($provide) {
   *         $provide.value('version', 'overridden'); // override version here
   *       });
   *
   *       inject(function(version) {
   *         expect(version).toEqual('overridden');
   *       });
   *     });
   *   });
   *
   * ```
   *
   * @param {...Function} fns any number of functions which will be injected using the injector.
   */



  var ErrorAddingDeclarationLocationStack = function(e, errorForStack) {
    this.message = e.message;
    this.name = e.name;
    if (e.line) this.line = e.line;
    if (e.sourceId) this.sourceId = e.sourceId;
    if (e.stack && errorForStack)
      this.stack = e.stack + '\n' + errorForStack.stack;
    if (e.stackArray) this.stackArray = e.stackArray;
  };
  ErrorAddingDeclarationLocationStack.prototype.toString = Error.prototype.toString;

  window.inject = angular.mock.inject = function() {
    var blockFns = Array.prototype.slice.call(arguments, 0);
    var errorForStack = new Error('Declaration Location');
    return isSpecRunning() ? workFn.call(currentSpec) : workFn;
    /////////////////////
    function workFn() {
      var modules = currentSpec.$modules || [];

      modules.unshift('ngMock');
      modules.unshift('ng');
      var injector = currentSpec.$injector;
      if (!injector) {
        injector = currentSpec.$injector = angular.injector(modules);
      }
      for(var i = 0, ii = blockFns.length; i < ii; i++) {
        try {
          /* jshint -W040 *//* Jasmine explicitly provides a `this` object when calling functions */
          injector.invoke(blockFns[i] || angular.noop, this);
          /* jshint +W040 */
        } catch (e) {
          if (e.stack && errorForStack) {
            throw new ErrorAddingDeclarationLocationStack(e, errorForStack);
          }
          throw e;
        } finally {
          errorForStack = null;
        }
      }
    }
  };
}


})(window, window.angular);
/**
 * @license AngularJS v1.3.12-build.33+sha.d1b6480
 * (c) 2010-2014 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function(window, angular, undefined) {

'use strict';

/**
 * @ngdoc object
 * @name angular.mock
 * @description
 *
 * Namespace from 'angular-mocks.js' which contains testing related code.
 */
angular.mock = {};

/**
 * ! This is a private undocumented service !
 *
 * @name $browser
 *
 * @description
 * This service is a mock implementation of {@link ng.$browser}. It provides fake
 * implementation for commonly used browser apis that are hard to test, e.g. setTimeout, xhr,
 * cookies, etc...
 *
 * The api of this service is the same as that of the real {@link ng.$browser $browser}, except
 * that there are several helper methods available which can be used in tests.
 */
angular.mock.$BrowserProvider = function() {
  this.$get = function() {
    return new angular.mock.$Browser();
  };
};

angular.mock.$Browser = function() {
  var self = this;

  this.isMock = true;
  self.$$url = "http://server/";
  self.$$lastUrl = self.$$url; // used by url polling fn
  self.pollFns = [];

  // TODO(vojta): remove this temporary api
  self.$$completeOutstandingRequest = angular.noop;
  self.$$incOutstandingRequestCount = angular.noop;


  // register url polling fn

  self.onUrlChange = function(listener) {
    self.pollFns.push(
      function() {
        if (self.$$lastUrl !== self.$$url || self.$$state !== self.$$lastState) {
          self.$$lastUrl = self.$$url;
          self.$$lastState = self.$$state;
          listener(self.$$url, self.$$state);
        }
      }
    );

    return listener;
  };

  self.$$checkUrlChange = angular.noop;

  self.cookieHash = {};
  self.lastCookieHash = {};
  self.deferredFns = [];
  self.deferredNextId = 0;

  self.defer = function(fn, delay) {
    delay = delay || 0;
    self.deferredFns.push({time:(self.defer.now + delay), fn:fn, id: self.deferredNextId});
    self.deferredFns.sort(function(a, b) { return a.time - b.time;});
    return self.deferredNextId++;
  };


  /**
   * @name $browser#defer.now
   *
   * @description
   * Current milliseconds mock time.
   */
  self.defer.now = 0;


  self.defer.cancel = function(deferId) {
    var fnIndex;

    angular.forEach(self.deferredFns, function(fn, index) {
      if (fn.id === deferId) fnIndex = index;
    });

    if (fnIndex !== undefined) {
      self.deferredFns.splice(fnIndex, 1);
      return true;
    }

    return false;
  };


  /**
   * @name $browser#defer.flush
   *
   * @description
   * Flushes all pending requests and executes the defer callbacks.
   *
   * @param {number=} number of milliseconds to flush. See {@link #defer.now}
   */
  self.defer.flush = function(delay) {
    if (angular.isDefined(delay)) {
      self.defer.now += delay;
    } else {
      if (self.deferredFns.length) {
        self.defer.now = self.deferredFns[self.deferredFns.length - 1].time;
      } else {
        throw new Error('No deferred tasks to be flushed');
      }
    }

    while (self.deferredFns.length && self.deferredFns[0].time <= self.defer.now) {
      self.deferredFns.shift().fn();
    }
  };

  self.$$baseHref = '/';
  self.baseHref = function() {
    return this.$$baseHref;
  };
};
angular.mock.$Browser.prototype = {

/**
  * @name $browser#poll
  *
  * @description
  * run all fns in pollFns
  */
  poll: function poll() {
    angular.forEach(this.pollFns, function(pollFn) {
      pollFn();
    });
  },

  addPollFn: function(pollFn) {
    this.pollFns.push(pollFn);
    return pollFn;
  },

  url: function(url, replace, state) {
    if (angular.isUndefined(state)) {
      state = null;
    }
    if (url) {
      this.$$url = url;
      // Native pushState serializes & copies the object; simulate it.
      this.$$state = angular.copy(state);
      return this;
    }

    return this.$$url;
  },

  state: function() {
    return this.$$state;
  },

  cookies:  function(name, value) {
    if (name) {
      if (angular.isUndefined(value)) {
        delete this.cookieHash[name];
      } else {
        if (angular.isString(value) &&       //strings only
            value.length <= 4096) {          //strict cookie storage limits
          this.cookieHash[name] = value;
        }
      }
    } else {
      if (!angular.equals(this.cookieHash, this.lastCookieHash)) {
        this.lastCookieHash = angular.copy(this.cookieHash);
        this.cookieHash = angular.copy(this.cookieHash);
      }
      return this.cookieHash;
    }
  },

  notifyWhenNoOutstandingRequests: function(fn) {
    fn();
  }
};


/**
 * @ngdoc provider
 * @name $exceptionHandlerProvider
 *
 * @description
 * Configures the mock implementation of {@link ng.$exceptionHandler} to rethrow or to log errors
 * passed to the `$exceptionHandler`.
 */

/**
 * @ngdoc service
 * @name $exceptionHandler
 *
 * @description
 * Mock implementation of {@link ng.$exceptionHandler} that rethrows or logs errors passed
 * to it. See {@link ngMock.$exceptionHandlerProvider $exceptionHandlerProvider} for configuration
 * information.
 *
 *
 * ```js
 *   describe('$exceptionHandlerProvider', function() {
 *
 *     it('should capture log messages and exceptions', function() {
 *
 *       module(function($exceptionHandlerProvider) {
 *         $exceptionHandlerProvider.mode('log');
 *       });
 *
 *       inject(function($log, $exceptionHandler, $timeout) {
 *         $timeout(function() { $log.log(1); });
 *         $timeout(function() { $log.log(2); throw 'banana peel'; });
 *         $timeout(function() { $log.log(3); });
 *         expect($exceptionHandler.errors).toEqual([]);
 *         expect($log.assertEmpty());
 *         $timeout.flush();
 *         expect($exceptionHandler.errors).toEqual(['banana peel']);
 *         expect($log.log.logs).toEqual([[1], [2], [3]]);
 *       });
 *     });
 *   });
 * ```
 */

angular.mock.$ExceptionHandlerProvider = function() {
  var handler;

  /**
   * @ngdoc method
   * @name $exceptionHandlerProvider#mode
   *
   * @description
   * Sets the logging mode.
   *
   * @param {string} mode Mode of operation, defaults to `rethrow`.
   *
   *   - `log`: Sometimes it is desirable to test that an error is thrown, for this case the `log`
   *            mode stores an array of errors in `$exceptionHandler.errors`, to allow later
   *            assertion of them. See {@link ngMock.$log#assertEmpty assertEmpty()} and
   *            {@link ngMock.$log#reset reset()}
   *   - `rethrow`: If any errors are passed to the handler in tests, it typically means that there
   *                is a bug in the application or test, so this mock will make these tests fail.
   *                For any implementations that expect exceptions to be thrown, the `rethrow` mode
   *                will also maintain a log of thrown errors.
   */
  this.mode = function(mode) {

    switch (mode) {
      case 'log':
      case 'rethrow':
        var errors = [];
        handler = function(e) {
          if (arguments.length == 1) {
            errors.push(e);
          } else {
            errors.push([].slice.call(arguments, 0));
          }
          if (mode === "rethrow") {
            throw e;
          }
        };
        handler.errors = errors;
        break;
      default:
        throw new Error("Unknown mode '" + mode + "', only 'log'/'rethrow' modes are allowed!");
    }
  };

  this.$get = function() {
    return handler;
  };

  this.mode('rethrow');
};


/**
 * @ngdoc service
 * @name $log
 *
 * @description
 * Mock implementation of {@link ng.$log} that gathers all logged messages in arrays
 * (one array per logging level). These arrays are exposed as `logs` property of each of the
 * level-specific log function, e.g. for level `error` the array is exposed as `$log.error.logs`.
 *
 */
angular.mock.$LogProvider = function() {
  var debug = true;

  function concat(array1, array2, index) {
    return array1.concat(Array.prototype.slice.call(array2, index));
  }

  this.debugEnabled = function(flag) {
    if (angular.isDefined(flag)) {
      debug = flag;
      return this;
    } else {
      return debug;
    }
  };

  this.$get = function() {
    var $log = {
      log: function() { $log.log.logs.push(concat([], arguments, 0)); },
      warn: function() { $log.warn.logs.push(concat([], arguments, 0)); },
      info: function() { $log.info.logs.push(concat([], arguments, 0)); },
      error: function() { $log.error.logs.push(concat([], arguments, 0)); },
      debug: function() {
        if (debug) {
          $log.debug.logs.push(concat([], arguments, 0));
        }
      }
    };

    /**
     * @ngdoc method
     * @name $log#reset
     *
     * @description
     * Reset all of the logging arrays to empty.
     */
    $log.reset = function() {
      /**
       * @ngdoc property
       * @name $log#log.logs
       *
       * @description
       * Array of messages logged using {@link ng.$log#log `log()`}.
       *
       * @example
       * ```js
       * $log.log('Some Log');
       * var first = $log.log.logs.unshift();
       * ```
       */
      $log.log.logs = [];
      /**
       * @ngdoc property
       * @name $log#info.logs
       *
       * @description
       * Array of messages logged using {@link ng.$log#info `info()`}.
       *
       * @example
       * ```js
       * $log.info('Some Info');
       * var first = $log.info.logs.unshift();
       * ```
       */
      $log.info.logs = [];
      /**
       * @ngdoc property
       * @name $log#warn.logs
       *
       * @description
       * Array of messages logged using {@link ng.$log#warn `warn()`}.
       *
       * @example
       * ```js
       * $log.warn('Some Warning');
       * var first = $log.warn.logs.unshift();
       * ```
       */
      $log.warn.logs = [];
      /**
       * @ngdoc property
       * @name $log#error.logs
       *
       * @description
       * Array of messages logged using {@link ng.$log#error `error()`}.
       *
       * @example
       * ```js
       * $log.error('Some Error');
       * var first = $log.error.logs.unshift();
       * ```
       */
      $log.error.logs = [];
        /**
       * @ngdoc property
       * @name $log#debug.logs
       *
       * @description
       * Array of messages logged using {@link ng.$log#debug `debug()`}.
       *
       * @example
       * ```js
       * $log.debug('Some Error');
       * var first = $log.debug.logs.unshift();
       * ```
       */
      $log.debug.logs = [];
    };

    /**
     * @ngdoc method
     * @name $log#assertEmpty
     *
     * @description
     * Assert that all of the logging methods have no logged messages. If any messages are present,
     * an exception is thrown.
     */
    $log.assertEmpty = function() {
      var errors = [];
      angular.forEach(['error', 'warn', 'info', 'log', 'debug'], function(logLevel) {
        angular.forEach($log[logLevel].logs, function(log) {
          angular.forEach(log, function(logItem) {
            errors.push('MOCK $log (' + logLevel + '): ' + String(logItem) + '\n' +
                        (logItem.stack || ''));
          });
        });
      });
      if (errors.length) {
        errors.unshift("Expected $log to be empty! Either a message was logged unexpectedly, or " +
          "an expected log message was not checked and removed:");
        errors.push('');
        throw new Error(errors.join('\n---------\n'));
      }
    };

    $log.reset();
    return $log;
  };
};


/**
 * @ngdoc service
 * @name $interval
 *
 * @description
 * Mock implementation of the $interval service.
 *
 * Use {@link ngMock.$interval#flush `$interval.flush(millis)`} to
 * move forward by `millis` milliseconds and trigger any functions scheduled to run in that
 * time.
 *
 * @param {function()} fn A function that should be called repeatedly.
 * @param {number} delay Number of milliseconds between each function call.
 * @param {number=} [count=0] Number of times to repeat. If not set, or 0, will repeat
 *   indefinitely.
 * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise
 *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.
 * @returns {promise} A promise which will be notified on each iteration.
 */
angular.mock.$IntervalProvider = function() {
  this.$get = ['$browser', '$rootScope', '$q', '$$q',
       function($browser,   $rootScope,   $q,   $$q) {
    var repeatFns = [],
        nextRepeatId = 0,
        now = 0;

    var $interval = function(fn, delay, count, invokeApply) {
      var iteration = 0,
          skipApply = (angular.isDefined(invokeApply) && !invokeApply),
          deferred = (skipApply ? $$q : $q).defer(),
          promise = deferred.promise;

      count = (angular.isDefined(count)) ? count : 0;
      promise.then(null, null, fn);

      promise.$$intervalId = nextRepeatId;

      function tick() {
        deferred.notify(iteration++);

        if (count > 0 && iteration >= count) {
          var fnIndex;
          deferred.resolve(iteration);

          angular.forEach(repeatFns, function(fn, index) {
            if (fn.id === promise.$$intervalId) fnIndex = index;
          });

          if (fnIndex !== undefined) {
            repeatFns.splice(fnIndex, 1);
          }
        }

        if (skipApply) {
          $browser.defer.flush();
        } else {
          $rootScope.$apply();
        }
      }

      repeatFns.push({
        nextTime:(now + delay),
        delay: delay,
        fn: tick,
        id: nextRepeatId,
        deferred: deferred
      });
      repeatFns.sort(function(a, b) { return a.nextTime - b.nextTime;});

      nextRepeatId++;
      return promise;
    };
    /**
     * @ngdoc method
     * @name $interval#cancel
     *
     * @description
     * Cancels a task associated with the `promise`.
     *
     * @param {promise} promise A promise from calling the `$interval` function.
     * @returns {boolean} Returns `true` if the task was successfully cancelled.
     */
    $interval.cancel = function(promise) {
      if (!promise) return false;
      var fnIndex;

      angular.forEach(repeatFns, function(fn, index) {
        if (fn.id === promise.$$intervalId) fnIndex = index;
      });

      if (fnIndex !== undefined) {
        repeatFns[fnIndex].deferred.reject('canceled');
        repeatFns.splice(fnIndex, 1);
        return true;
      }

      return false;
    };

    /**
     * @ngdoc method
     * @name $interval#flush
     * @description
     *
     * Runs interval tasks scheduled to be run in the next `millis` milliseconds.
     *
     * @param {number=} millis maximum timeout amount to flush up until.
     *
     * @return {number} The amount of time moved forward.
     */
    $interval.flush = function(millis) {
      now += millis;
      while (repeatFns.length && repeatFns[0].nextTime <= now) {
        var task = repeatFns[0];
        task.fn();
        task.nextTime += task.delay;
        repeatFns.sort(function(a, b) { return a.nextTime - b.nextTime;});
      }
      return millis;
    };

    return $interval;
  }];
};


/* jshint -W101 */
/* The R_ISO8061_STR regex is never going to fit into the 100 char limit!
 * This directive should go inside the anonymous function but a bug in JSHint means that it would
 * not be enacted early enough to prevent the warning.
 */
var R_ISO8061_STR = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?:\:?(\d\d)(?:\:?(\d\d)(?:\.(\d{3}))?)?)?(Z|([+-])(\d\d):?(\d\d)))?$/;

function jsonStringToDate(string) {
  var match;
  if (match = string.match(R_ISO8061_STR)) {
    var date = new Date(0),
        tzHour = 0,
        tzMin  = 0;
    if (match[9]) {
      tzHour = int(match[9] + match[10]);
      tzMin = int(match[9] + match[11]);
    }
    date.setUTCFullYear(int(match[1]), int(match[2]) - 1, int(match[3]));
    date.setUTCHours(int(match[4] || 0) - tzHour,
                     int(match[5] || 0) - tzMin,
                     int(match[6] || 0),
                     int(match[7] || 0));
    return date;
  }
  return string;
}

function int(str) {
  return parseInt(str, 10);
}

function padNumber(num, digits, trim) {
  var neg = '';
  if (num < 0) {
    neg =  '-';
    num = -num;
  }
  num = '' + num;
  while (num.length < digits) num = '0' + num;
  if (trim)
    num = num.substr(num.length - digits);
  return neg + num;
}


/**
 * @ngdoc type
 * @name angular.mock.TzDate
 * @description
 *
 * *NOTE*: this is not an injectable instance, just a globally available mock class of `Date`.
 *
 * Mock of the Date type which has its timezone specified via constructor arg.
 *
 * The main purpose is to create Date-like instances with timezone fixed to the specified timezone
 * offset, so that we can test code that depends on local timezone settings without dependency on
 * the time zone settings of the machine where the code is running.
 *
 * @param {number} offset Offset of the *desired* timezone in hours (fractions will be honored)
 * @param {(number|string)} timestamp Timestamp representing the desired time in *UTC*
 *
 * @example
 * !!!! WARNING !!!!!
 * This is not a complete Date object so only methods that were implemented can be called safely.
 * To make matters worse, TzDate instances inherit stuff from Date via a prototype.
 *
 * We do our best to intercept calls to "unimplemented" methods, but since the list of methods is
 * incomplete we might be missing some non-standard methods. This can result in errors like:
 * "Date.prototype.foo called on incompatible Object".
 *
 * ```js
 * var newYearInBratislava = new TzDate(-1, '2009-12-31T23:00:00Z');
 * newYearInBratislava.getTimezoneOffset() => -60;
 * newYearInBratislava.getFullYear() => 2010;
 * newYearInBratislava.getMonth() => 0;
 * newYearInBratislava.getDate() => 1;
 * newYearInBratislava.getHours() => 0;
 * newYearInBratislava.getMinutes() => 0;
 * newYearInBratislava.getSeconds() => 0;
 * ```
 *
 */
angular.mock.TzDate = function(offset, timestamp) {
  var self = new Date(0);
  if (angular.isString(timestamp)) {
    var tsStr = timestamp;

    self.origDate = jsonStringToDate(timestamp);

    timestamp = self.origDate.getTime();
    if (isNaN(timestamp))
      throw {
        name: "Illegal Argument",
        message: "Arg '" + tsStr + "' passed into TzDate constructor is not a valid date string"
      };
  } else {
    self.origDate = new Date(timestamp);
  }

  var localOffset = new Date(timestamp).getTimezoneOffset();
  self.offsetDiff = localOffset * 60 * 1000 - offset * 1000 * 60 * 60;
  self.date = new Date(timestamp + self.offsetDiff);

  self.getTime = function() {
    return self.date.getTime() - self.offsetDiff;
  };

  self.toLocaleDateString = function() {
    return self.date.toLocaleDateString();
  };

  self.getFullYear = function() {
    return self.date.getFullYear();
  };

  self.getMonth = function() {
    return self.date.getMonth();
  };

  self.getDate = function() {
    return self.date.getDate();
  };

  self.getHours = function() {
    return self.date.getHours();
  };

  self.getMinutes = function() {
    return self.date.getMinutes();
  };

  self.getSeconds = function() {
    return self.date.getSeconds();
  };

  self.getMilliseconds = function() {
    return self.date.getMilliseconds();
  };

  self.getTimezoneOffset = function() {
    return offset * 60;
  };

  self.getUTCFullYear = function() {
    return self.origDate.getUTCFullYear();
  };

  self.getUTCMonth = function() {
    return self.origDate.getUTCMonth();
  };

  self.getUTCDate = function() {
    return self.origDate.getUTCDate();
  };

  self.getUTCHours = function() {
    return self.origDate.getUTCHours();
  };

  self.getUTCMinutes = function() {
    return self.origDate.getUTCMinutes();
  };

  self.getUTCSeconds = function() {
    return self.origDate.getUTCSeconds();
  };

  self.getUTCMilliseconds = function() {
    return self.origDate.getUTCMilliseconds();
  };

  self.getDay = function() {
    return self.date.getDay();
  };

  // provide this method only on browsers that already have it
  if (self.toISOString) {
    self.toISOString = function() {
      return padNumber(self.origDate.getUTCFullYear(), 4) + '-' +
            padNumber(self.origDate.getUTCMonth() + 1, 2) + '-' +
            padNumber(self.origDate.getUTCDate(), 2) + 'T' +
            padNumber(self.origDate.getUTCHours(), 2) + ':' +
            padNumber(self.origDate.getUTCMinutes(), 2) + ':' +
            padNumber(self.origDate.getUTCSeconds(), 2) + '.' +
            padNumber(self.origDate.getUTCMilliseconds(), 3) + 'Z';
    };
  }

  //hide all methods not implemented in this mock that the Date prototype exposes
  var unimplementedMethods = ['getUTCDay',
      'getYear', 'setDate', 'setFullYear', 'setHours', 'setMilliseconds',
      'setMinutes', 'setMonth', 'setSeconds', 'setTime', 'setUTCDate', 'setUTCFullYear',
      'setUTCHours', 'setUTCMilliseconds', 'setUTCMinutes', 'setUTCMonth', 'setUTCSeconds',
      'setYear', 'toDateString', 'toGMTString', 'toJSON', 'toLocaleFormat', 'toLocaleString',
      'toLocaleTimeString', 'toSource', 'toString', 'toTimeString', 'toUTCString', 'valueOf'];

  angular.forEach(unimplementedMethods, function(methodName) {
    self[methodName] = function() {
      throw new Error("Method '" + methodName + "' is not implemented in the TzDate mock");
    };
  });

  return self;
};

//make "tzDateInstance instanceof Date" return true
angular.mock.TzDate.prototype = Date.prototype;
/* jshint +W101 */

angular.mock.animate = angular.module('ngAnimateMock', ['ng'])

  .config(['$provide', function($provide) {

    var reflowQueue = [];
    $provide.value('$$animateReflow', function(fn) {
      var index = reflowQueue.length;
      reflowQueue.push(fn);
      return function cancel() {
        reflowQueue.splice(index, 1);
      };
    });

    $provide.decorator('$animate', ['$delegate', '$$asyncCallback', '$timeout', '$browser',
                            function($delegate,   $$asyncCallback,   $timeout,   $browser) {
      var animate = {
        queue: [],
        cancel: $delegate.cancel,
        enabled: $delegate.enabled,
        triggerCallbackEvents: function() {
          $$asyncCallback.flush();
        },
        triggerCallbackPromise: function() {
          $timeout.flush(0);
        },
        triggerCallbacks: function() {
          this.triggerCallbackEvents();
          this.triggerCallbackPromise();
        },
        triggerReflow: function() {
          angular.forEach(reflowQueue, function(fn) {
            fn();
          });
          reflowQueue = [];
        }
      };

      angular.forEach(
        ['animate','enter','leave','move','addClass','removeClass','setClass'], function(method) {
        animate[method] = function() {
          animate.queue.push({
            event: method,
            element: arguments[0],
            options: arguments[arguments.length - 1],
            args: arguments
          });
          return $delegate[method].apply($delegate, arguments);
        };
      });

      return animate;
    }]);

  }]);


/**
 * @ngdoc function
 * @name angular.mock.dump
 * @description
 *
 * *NOTE*: this is not an injectable instance, just a globally available function.
 *
 * Method for serializing common angular objects (scope, elements, etc..) into strings, useful for
 * debugging.
 *
 * This method is also available on window, where it can be used to display objects on debug
 * console.
 *
 * @param {*} object - any object to turn into string.
 * @return {string} a serialized string of the argument
 */
angular.mock.dump = function(object) {
  return serialize(object);

  function serialize(object) {
    var out;

    if (angular.isElement(object)) {
      object = angular.element(object);
      out = angular.element('<div></div>');
      angular.forEach(object, function(element) {
        out.append(angular.element(element).clone());
      });
      out = out.html();
    } else if (angular.isArray(object)) {
      out = [];
      angular.forEach(object, function(o) {
        out.push(serialize(o));
      });
      out = '[ ' + out.join(', ') + ' ]';
    } else if (angular.isObject(object)) {
      if (angular.isFunction(object.$eval) && angular.isFunction(object.$apply)) {
        out = serializeScope(object);
      } else if (object instanceof Error) {
        out = object.stack || ('' + object.name + ': ' + object.message);
      } else {
        // TODO(i): this prevents methods being logged,
        // we should have a better way to serialize objects
        out = angular.toJson(object, true);
      }
    } else {
      out = String(object);
    }

    return out;
  }

  function serializeScope(scope, offset) {
    offset = offset ||  '  ';
    var log = [offset + 'Scope(' + scope.$id + '): {'];
    for (var key in scope) {
      if (Object.prototype.hasOwnProperty.call(scope, key) && !key.match(/^(\$|this)/)) {
        log.push('  ' + key + ': ' + angular.toJson(scope[key]));
      }
    }
    var child = scope.$$childHead;
    while (child) {
      log.push(serializeScope(child, offset + '  '));
      child = child.$$nextSibling;
    }
    log.push('}');
    return log.join('\n' + offset);
  }
};

/**
 * @ngdoc service
 * @name $httpBackend
 * @description
 * Fake HTTP backend implementation suitable for unit testing applications that use the
 * {@link ng.$http $http service}.
 *
 * *Note*: For fake HTTP backend implementation suitable for end-to-end testing or backend-less
 * development please see {@link ngMockE2E.$httpBackend e2e $httpBackend mock}.
 *
 * During unit testing, we want our unit tests to run quickly and have no external dependencies so
 * we don’t want to send [XHR](https://developer.mozilla.org/en/xmlhttprequest) or
 * [JSONP](http://en.wikipedia.org/wiki/JSONP) requests to a real server. All we really need is
 * to verify whether a certain request has been sent or not, or alternatively just let the
 * application make requests, respond with pre-trained responses and assert that the end result is
 * what we expect it to be.
 *
 * This mock implementation can be used to respond with static or dynamic responses via the
 * `expect` and `when` apis and their shortcuts (`expectGET`, `whenPOST`, etc).
 *
 * When an Angular application needs some data from a server, it calls the $http service, which
 * sends the request to a real server using $httpBackend service. With dependency injection, it is
 * easy to inject $httpBackend mock (which has the same API as $httpBackend) and use it to verify
 * the requests and respond with some testing data without sending a request to a real server.
 *
 * There are two ways to specify what test data should be returned as http responses by the mock
 * backend when the code under test makes http requests:
 *
 * - `$httpBackend.expect` - specifies a request expectation
 * - `$httpBackend.when` - specifies a backend definition
 *
 *
 * # Request Expectations vs Backend Definitions
 *
 * Request expectations provide a way to make assertions about requests made by the application and
 * to define responses for those requests. The test will fail if the expected requests are not made
 * or they are made in the wrong order.
 *
 * Backend definitions allow you to define a fake backend for your application which doesn't assert
 * if a particular request was made or not, it just returns a trained response if a request is made.
 * The test will pass whether or not the request gets made during testing.
 *
 *
 * <table class="table">
 *   <tr><th width="220px"></th><th>Request expectations</th><th>Backend definitions</th></tr>
 *   <tr>
 *     <th>Syntax</th>
 *     <td>.expect(...).respond(...)</td>
 *     <td>.when(...).respond(...)</td>
 *   </tr>
 *   <tr>
 *     <th>Typical usage</th>
 *     <td>strict unit tests</td>
 *     <td>loose (black-box) unit testing</td>
 *   </tr>
 *   <tr>
 *     <th>Fulfills multiple requests</th>
 *     <td>NO</td>
 *     <td>YES</td>
 *   </tr>
 *   <tr>
 *     <th>Order of requests matters</th>
 *     <td>YES</td>
 *     <td>NO</td>
 *   </tr>
 *   <tr>
 *     <th>Request required</th>
 *     <td>YES</td>
 *     <td>NO</td>
 *   </tr>
 *   <tr>
 *     <th>Response required</th>
 *     <td>optional (see below)</td>
 *     <td>YES</td>
 *   </tr>
 * </table>
 *
 * In cases where both backend definitions and request expectations are specified during unit
 * testing, the request expectations are evaluated first.
 *
 * If a request expectation has no response specified, the algorithm will search your backend
 * definitions for an appropriate response.
 *
 * If a request didn't match any expectation or if the expectation doesn't have the response
 * defined, the backend definitions are evaluated in sequential order to see if any of them match
 * the request. The response from the first matched definition is returned.
 *
 *
 * # Flushing HTTP requests
 *
 * The $httpBackend used in production always responds to requests asynchronously. If we preserved
 * this behavior in unit testing, we'd have to create async unit tests, which are hard to write,
 * to follow and to maintain. But neither can the testing mock respond synchronously; that would
 * change the execution of the code under test. For this reason, the mock $httpBackend has a
 * `flush()` method, which allows the test to explicitly flush pending requests. This preserves
 * the async api of the backend, while allowing the test to execute synchronously.
 *
 *
 * # Unit testing with mock $httpBackend
 * The following code shows how to setup and use the mock backend when unit testing a controller.
 * First we create the controller under test:
 *
  ```js
  // The module code
  angular
    .module('MyApp', [])
    .controller('MyController', MyController);

  // The controller code
  function MyController($scope, $http) {
    var authToken;

    $http.get('/auth.py').success(function(data, status, headers) {
      authToken = headers('A-Token');
      $scope.user = data;
    });

    $scope.saveMessage = function(message) {
      var headers = { 'Authorization': authToken };
      $scope.status = 'Saving...';

      $http.post('/add-msg.py', message, { headers: headers } ).success(function(response) {
        $scope.status = '';
      }).error(function() {
        $scope.status = 'ERROR!';
      });
    };
  }
  ```
 *
 * Now we setup the mock backend and create the test specs:
 *
  ```js
    // testing controller
    describe('MyController', function() {
       var $httpBackend, $rootScope, createController, authRequestHandler;

       // Set up the module
       beforeEach(module('MyApp'));

       beforeEach(inject(function($injector) {
         // Set up the mock http service responses
         $httpBackend = $injector.get('$httpBackend');
         // backend definition common for all tests
         authRequestHandler = $httpBackend.when('GET', '/auth.py')
                                .respond({userId: 'userX'}, {'A-Token': 'xxx'});

         // Get hold of a scope (i.e. the root scope)
         $rootScope = $injector.get('$rootScope');
         // The $controller service is used to create instances of controllers
         var $controller = $injector.get('$controller');

         createController = function() {
           return $controller('MyController', {'$scope' : $rootScope });
         };
       }));


       afterEach(function() {
         $httpBackend.verifyNoOutstandingExpectation();
         $httpBackend.verifyNoOutstandingRequest();
       });


       it('should fetch authentication token', function() {
         $httpBackend.expectGET('/auth.py');
         var controller = createController();
         $httpBackend.flush();
       });


       it('should fail authentication', function() {

         // Notice how you can change the response even after it was set
         authRequestHandler.respond(401, '');

         $httpBackend.expectGET('/auth.py');
         var controller = createController();
         $httpBackend.flush();
         expect($rootScope.status).toBe('Failed...');
       });


       it('should send msg to server', function() {
         var controller = createController();
         $httpBackend.flush();

         // now you don’t care about the authentication, but
         // the controller will still send the request and
         // $httpBackend will respond without you having to
         // specify the expectation and response for this request

         $httpBackend.expectPOST('/add-msg.py', 'message content').respond(201, '');
         $rootScope.saveMessage('message content');
         expect($rootScope.status).toBe('Saving...');
         $httpBackend.flush();
         expect($rootScope.status).toBe('');
       });


       it('should send auth header', function() {
         var controller = createController();
         $httpBackend.flush();

         $httpBackend.expectPOST('/add-msg.py', undefined, function(headers) {
           // check if the header was send, if it wasn't the expectation won't
           // match the request and the test will fail
           return headers['Authorization'] == 'xxx';
         }).respond(201, '');

         $rootScope.saveMessage('whatever');
         $httpBackend.flush();
       });
    });
   ```
 */
angular.mock.$HttpBackendProvider = function() {
  this.$get = ['$rootScope', '$timeout', createHttpBackendMock];
};

/**
 * General factory function for $httpBackend mock.
 * Returns instance for unit testing (when no arguments specified):
 *   - passing through is disabled
 *   - auto flushing is disabled
 *
 * Returns instance for e2e testing (when `$delegate` and `$browser` specified):
 *   - passing through (delegating request to real backend) is enabled
 *   - auto flushing is enabled
 *
 * @param {Object=} $delegate Real $httpBackend instance (allow passing through if specified)
 * @param {Object=} $browser Auto-flushing enabled if specified
 * @return {Object} Instance of $httpBackend mock
 */
function createHttpBackendMock($rootScope, $timeout, $delegate, $browser) {
  var definitions = [],
      expectations = [],
      responses = [],
      responsesPush = angular.bind(responses, responses.push),
      copy = angular.copy;

  function createResponse(status, data, headers, statusText) {
    if (angular.isFunction(status)) return status;

    return function() {
      return angular.isNumber(status)
          ? [status, data, headers, statusText]
          : [200, status, data, headers];
    };
  }

  // TODO(vojta): change params to: method, url, data, headers, callback
  function $httpBackend(method, url, data, callback, headers, timeout, withCredentials) {
    var xhr = new MockXhr(),
        expectation = expectations[0],
        wasExpected = false;

    function prettyPrint(data) {
      return (angular.isString(data) || angular.isFunction(data) || data instanceof RegExp)
          ? data
          : angular.toJson(data);
    }

    function wrapResponse(wrapped) {
      if (!$browser && timeout) {
        timeout.then ? timeout.then(handleTimeout) : $timeout(handleTimeout, timeout);
      }

      return handleResponse;

      function handleResponse() {
        var response = wrapped.response(method, url, data, headers);
        xhr.$$respHeaders = response[2];
        callback(copy(response[0]), copy(response[1]), xhr.getAllResponseHeaders(),
                 copy(response[3] || ''));
      }

      function handleTimeout() {
        for (var i = 0, ii = responses.length; i < ii; i++) {
          if (responses[i] === handleResponse) {
            responses.splice(i, 1);
            callback(-1, undefined, '');
            break;
          }
        }
      }
    }

    if (expectation && expectation.match(method, url)) {
      if (!expectation.matchData(data))
        throw new Error('Expected ' + expectation + ' with different data\n' +
            'EXPECTED: ' + prettyPrint(expectation.data) + '\nGOT:      ' + data);

      if (!expectation.matchHeaders(headers))
        throw new Error('Expected ' + expectation + ' with different headers\n' +
                        'EXPECTED: ' + prettyPrint(expectation.headers) + '\nGOT:      ' +
                        prettyPrint(headers));

      expectations.shift();

      if (expectation.response) {
        responses.push(wrapResponse(expectation));
        return;
      }
      wasExpected = true;
    }

    var i = -1, definition;
    while ((definition = definitions[++i])) {
      if (definition.match(method, url, data, headers || {})) {
        if (definition.response) {
          // if $browser specified, we do auto flush all requests
          ($browser ? $browser.defer : responsesPush)(wrapResponse(definition));
        } else if (definition.passThrough) {
          $delegate(method, url, data, callback, headers, timeout, withCredentials);
        } else throw new Error('No response defined !');
        return;
      }
    }
    throw wasExpected ?
        new Error('No response defined !') :
        new Error('Unexpected request: ' + method + ' ' + url + '\n' +
                  (expectation ? 'Expected ' + expectation : 'No more request expected'));
  }

  /**
   * @ngdoc method
   * @name $httpBackend#when
   * @description
   * Creates a new backend definition.
   *
   * @param {string} method HTTP method.
   * @param {string|RegExp|function(string)} url HTTP url or function that receives the url
   *   and returns true if the url match the current definition.
   * @param {(string|RegExp|function(string))=} data HTTP request body or function that receives
   *   data string and returns true if the data is as expected.
   * @param {(Object|function(Object))=} headers HTTP headers or function that receives http header
   *   object and returns true if the headers match the current definition.
   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched
   *   request is handled. You can save this object for later use and invoke `respond` again in
   *   order to change how a matched request is handled.
   *
   *  - respond –
   *      `{function([status,] data[, headers, statusText])
   *      | function(function(method, url, data, headers)}`
   *    – The respond method takes a set of static data to be returned or a function that can
   *    return an array containing response status (number), response data (string), response
   *    headers (Object), and the text for the status (string). The respond method returns the
   *    `requestHandler` object for possible overrides.
   */
  $httpBackend.when = function(method, url, data, headers) {
    var definition = new MockHttpExpectation(method, url, data, headers),
        chain = {
          respond: function(status, data, headers, statusText) {
            definition.passThrough = undefined;
            definition.response = createResponse(status, data, headers, statusText);
            return chain;
          }
        };

    if ($browser) {
      chain.passThrough = function() {
        definition.response = undefined;
        definition.passThrough = true;
        return chain;
      };
    }

    definitions.push(definition);
    return chain;
  };

  /**
   * @ngdoc method
   * @name $httpBackend#whenGET
   * @description
   * Creates a new backend definition for GET requests. For more info see `when()`.
   *
   * @param {string|RegExp|function(string)} url HTTP url or function that receives the url
   *   and returns true if the url match the current definition.
   * @param {(Object|function(Object))=} headers HTTP headers.
   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched
   * request is handled. You can save this object for later use and invoke `respond` again in
   * order to change how a matched request is handled.
   */

  /**
   * @ngdoc method
   * @name $httpBackend#whenHEAD
   * @description
   * Creates a new backend definition for HEAD requests. For more info see `when()`.
   *
   * @param {string|RegExp|function(string)} url HTTP url or function that receives the url
   *   and returns true if the url match the current definition.
   * @param {(Object|function(Object))=} headers HTTP headers.
   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched
   * request is handled. You can save this object for later use and invoke `respond` again in
   * order to change how a matched request is handled.
   */

  /**
   * @ngdoc method
   * @name $httpBackend#whenDELETE
   * @description
   * Creates a new backend definition for DELETE requests. For more info see `when()`.
   *
   * @param {string|RegExp|function(string)} url HTTP url or function that receives the url
   *   and returns true if the url match the current definition.
   * @param {(Object|function(Object))=} headers HTTP headers.
   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched
   * request is handled. You can save this object for later use and invoke `respond` again in
   * order to change how a matched request is handled.
   */

  /**
   * @ngdoc method
   * @name $httpBackend#whenPOST
   * @description
   * Creates a new backend definition for POST requests. For more info see `when()`.
   *
   * @param {string|RegExp|function(string)} url HTTP url or function that receives the url
   *   and returns true if the url match the current definition.
   * @param {(string|RegExp|function(string))=} data HTTP request body or function that receives
   *   data string and returns true if the data is as expected.
   * @param {(Object|function(Object))=} headers HTTP headers.
   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched
   * request is handled. You can save this object for later use and invoke `respond` again in
   * order to change how a matched request is handled.
   */

  /**
   * @ngdoc method
   * @name $httpBackend#whenPUT
   * @description
   * Creates a new backend definition for PUT requests.  For more info see `when()`.
   *
   * @param {string|RegExp|function(string)} url HTTP url or function that receives the url
   *   and returns true if the url match the current definition.
   * @param {(string|RegExp|function(string))=} data HTTP request body or function that receives
   *   data string and returns true if the data is as expected.
   * @param {(Object|function(Object))=} headers HTTP headers.
   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched
   * request is handled. You can save this object for later use and invoke `respond` again in
   * order to change how a matched request is handled.
   */

  /**
   * @ngdoc method
   * @name $httpBackend#whenJSONP
   * @description
   * Creates a new backend definition for JSONP requests. For more info see `when()`.
   *
   * @param {string|RegExp|function(string)} url HTTP url or function that receives the url
   *   and returns true if the url match the current definition.
   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched
   * request is handled. You can save this object for later use and invoke `respond` again in
   * order to change how a matched request is handled.
   */
  createShortMethods('when');


  /**
   * @ngdoc method
   * @name $httpBackend#expect
   * @description
   * Creates a new request expectation.
   *
   * @param {string} method HTTP method.
   * @param {string|RegExp|function(string)} url HTTP url or function that receives the url
   *   and returns true if the url match the current definition.
   * @param {(string|RegExp|function(string)|Object)=} data HTTP request body or function that
   *  receives data string and returns true if the data is as expected, or Object if request body
   *  is in JSON format.
   * @param {(Object|function(Object))=} headers HTTP headers or function that receives http header
   *   object and returns true if the headers match the current expectation.
   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched
   *  request is handled. You can save this object for later use and invoke `respond` again in
   *  order to change how a matched request is handled.
   *
   *  - respond –
   *    `{function([status,] data[, headers, statusText])
   *    | function(function(method, url, data, headers)}`
   *    – The respond method takes a set of static data to be returned or a function that can
   *    return an array containing response status (number), response data (string), response
   *    headers (Object), and the text for the status (string). The respond method returns the
   *    `requestHandler` object for possible overrides.
   */
  $httpBackend.expect = function(method, url, data, headers) {
    var expectation = new MockHttpExpectation(method, url, data, headers),
        chain = {
          respond: function(status, data, headers, statusText) {
            expectation.response = createResponse(status, data, headers, statusText);
            return chain;
          }
        };

    expectations.push(expectation);
    return chain;
  };


  /**
   * @ngdoc method
   * @name $httpBackend#expectGET
   * @description
   * Creates a new request expectation for GET requests. For more info see `expect()`.
   *
   * @param {string|RegExp|function(string)} url HTTP url or function that receives the url
   *   and returns true if the url match the current definition.
   * @param {Object=} headers HTTP headers.
   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched
   * request is handled. You can save this object for later use and invoke `respond` again in
   * order to change how a matched request is handled. See #expect for more info.
   */

  /**
   * @ngdoc method
   * @name $httpBackend#expectHEAD
   * @description
   * Creates a new request expectation for HEAD requests. For more info see `expect()`.
   *
   * @param {string|RegExp|function(string)} url HTTP url or function that receives the url
   *   and returns true if the url match the current definition.
   * @param {Object=} headers HTTP headers.
   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched
   *   request is handled. You can save this object for later use and invoke `respond` again in
   *   order to change how a matched request is handled.
   */

  /**
   * @ngdoc method
   * @name $httpBackend#expectDELETE
   * @description
   * Creates a new request expectation for DELETE requests. For more info see `expect()`.
   *
   * @param {string|RegExp|function(string)} url HTTP url or function that receives the url
   *   and returns true if the url match the current definition.
   * @param {Object=} headers HTTP headers.
   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched
   *   request is handled. You can save this object for later use and invoke `respond` again in
   *   order to change how a matched request is handled.
   */

  /**
   * @ngdoc method
   * @name $httpBackend#expectPOST
   * @description
   * Creates a new request expectation for POST requests. For more info see `expect()`.
   *
   * @param {string|RegExp|function(string)} url HTTP url or function that receives the url
   *   and returns true if the url match the current definition.
   * @param {(string|RegExp|function(string)|Object)=} data HTTP request body or function that
   *  receives data string and returns true if the data is as expected, or Object if request body
   *  is in JSON format.
   * @param {Object=} headers HTTP headers.
   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched
   *   request is handled. You can save this object for later use and invoke `respond` again in
   *   order to change how a matched request is handled.
   */

  /**
   * @ngdoc method
   * @name $httpBackend#expectPUT
   * @description
   * Creates a new request expectation for PUT requests. For more info see `expect()`.
   *
   * @param {string|RegExp|function(string)} url HTTP url or function that receives the url
   *   and returns true if the url match the current definition.
   * @param {(string|RegExp|function(string)|Object)=} data HTTP request body or function that
   *  receives data string and returns true if the data is as expected, or Object if request body
   *  is in JSON format.
   * @param {Object=} headers HTTP headers.
   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched
   *   request is handled. You can save this object for later use and invoke `respond` again in
   *   order to change how a matched request is handled.
   */

  /**
   * @ngdoc method
   * @name $httpBackend#expectPATCH
   * @description
   * Creates a new request expectation for PATCH requests. For more info see `expect()`.
   *
   * @param {string|RegExp|function(string)} url HTTP url or function that receives the url
   *   and returns true if the url match the current definition.
   * @param {(string|RegExp|function(string)|Object)=} data HTTP request body or function that
   *  receives data string and returns true if the data is as expected, or Object if request body
   *  is in JSON format.
   * @param {Object=} headers HTTP headers.
   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched
   *   request is handled. You can save this object for later use and invoke `respond` again in
   *   order to change how a matched request is handled.
   */

  /**
   * @ngdoc method
   * @name $httpBackend#expectJSONP
   * @description
   * Creates a new request expectation for JSONP requests. For more info see `expect()`.
   *
   * @param {string|RegExp|function(string)} url HTTP url or function that receives the url
   *   and returns true if the url match the current definition.
   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched
   *   request is handled. You can save this object for later use and invoke `respond` again in
   *   order to change how a matched request is handled.
   */
  createShortMethods('expect');


  /**
   * @ngdoc method
   * @name $httpBackend#flush
   * @description
   * Flushes all pending requests using the trained responses.
   *
   * @param {number=} count Number of responses to flush (in the order they arrived). If undefined,
   *   all pending requests will be flushed. If there are no pending requests when the flush method
   *   is called an exception is thrown (as this typically a sign of programming error).
   */
  $httpBackend.flush = function(count, digest) {
    if (digest !== false) $rootScope.$digest();
    if (!responses.length) throw new Error('No pending request to flush !');

    if (angular.isDefined(count) && count !== null) {
      while (count--) {
        if (!responses.length) throw new Error('No more pending request to flush !');
        responses.shift()();
      }
    } else {
      while (responses.length) {
        responses.shift()();
      }
    }
    $httpBackend.verifyNoOutstandingExpectation(digest);
  };


  /**
   * @ngdoc method
   * @name $httpBackend#verifyNoOutstandingExpectation
   * @description
   * Verifies that all of the requests defined via the `expect` api were made. If any of the
   * requests were not made, verifyNoOutstandingExpectation throws an exception.
   *
   * Typically, you would call this method following each test case that asserts requests using an
   * "afterEach" clause.
   *
   * ```js
   *   afterEach($httpBackend.verifyNoOutstandingExpectation);
   * ```
   */
  $httpBackend.verifyNoOutstandingExpectation = function(digest) {
    if (digest !== false) $rootScope.$digest();
    if (expectations.length) {
      throw new Error('Unsatisfied requests: ' + expectations.join(', '));
    }
  };


  /**
   * @ngdoc method
   * @name $httpBackend#verifyNoOutstandingRequest
   * @description
   * Verifies that there are no outstanding requests that need to be flushed.
   *
   * Typically, you would call this method following each test case that asserts requests using an
   * "afterEach" clause.
   *
   * ```js
   *   afterEach($httpBackend.verifyNoOutstandingRequest);
   * ```
   */
  $httpBackend.verifyNoOutstandingRequest = function() {
    if (responses.length) {
      throw new Error('Unflushed requests: ' + responses.length);
    }
  };


  /**
   * @ngdoc method
   * @name $httpBackend#resetExpectations
   * @description
   * Resets all request expectations, but preserves all backend definitions. Typically, you would
   * call resetExpectations during a multiple-phase test when you want to reuse the same instance of
   * $httpBackend mock.
   */
  $httpBackend.resetExpectations = function() {
    expectations.length = 0;
    responses.length = 0;
  };

  return $httpBackend;


  function createShortMethods(prefix) {
    angular.forEach(['GET', 'DELETE', 'JSONP', 'HEAD'], function(method) {
     $httpBackend[prefix + method] = function(url, headers) {
       return $httpBackend[prefix](method, url, undefined, headers);
     };
    });

    angular.forEach(['PUT', 'POST', 'PATCH'], function(method) {
      $httpBackend[prefix + method] = function(url, data, headers) {
        return $httpBackend[prefix](method, url, data, headers);
      };
    });
  }
}

function MockHttpExpectation(method, url, data, headers) {

  this.data = data;
  this.headers = headers;

  this.match = function(m, u, d, h) {
    if (method != m) return false;
    if (!this.matchUrl(u)) return false;
    if (angular.isDefined(d) && !this.matchData(d)) return false;
    if (angular.isDefined(h) && !this.matchHeaders(h)) return false;
    return true;
  };

  this.matchUrl = function(u) {
    if (!url) return true;
    if (angular.isFunction(url.test)) return url.test(u);
    if (angular.isFunction(url)) return url(u);
    return url == u;
  };

  this.matchHeaders = function(h) {
    if (angular.isUndefined(headers)) return true;
    if (angular.isFunction(headers)) return headers(h);
    return angular.equals(headers, h);
  };

  this.matchData = function(d) {
    if (angular.isUndefined(data)) return true;
    if (data && angular.isFunction(data.test)) return data.test(d);
    if (data && angular.isFunction(data)) return data(d);
    if (data && !angular.isString(data)) {
      return angular.equals(angular.fromJson(angular.toJson(data)), angular.fromJson(d));
    }
    return data == d;
  };

  this.toString = function() {
    return method + ' ' + url;
  };
}

function createMockXhr() {
  return new MockXhr();
}

function MockXhr() {

  // hack for testing $http, $httpBackend
  MockXhr.$$lastInstance = this;

  this.open = function(method, url, async) {
    this.$$method = method;
    this.$$url = url;
    this.$$async = async;
    this.$$reqHeaders = {};
    this.$$respHeaders = {};
  };

  this.send = function(data) {
    this.$$data = data;
  };

  this.setRequestHeader = function(key, value) {
    this.$$reqHeaders[key] = value;
  };

  this.getResponseHeader = function(name) {
    // the lookup must be case insensitive,
    // that's why we try two quick lookups first and full scan last
    var header = this.$$respHeaders[name];
    if (header) return header;

    name = angular.lowercase(name);
    header = this.$$respHeaders[name];
    if (header) return header;

    header = undefined;
    angular.forEach(this.$$respHeaders, function(headerVal, headerName) {
      if (!header && angular.lowercase(headerName) == name) header = headerVal;
    });
    return header;
  };

  this.getAllResponseHeaders = function() {
    var lines = [];

    angular.forEach(this.$$respHeaders, function(value, key) {
      lines.push(key + ': ' + value);
    });
    return lines.join('\n');
  };

  this.abort = angular.noop;
}


/**
 * @ngdoc service
 * @name $timeout
 * @description
 *
 * This service is just a simple decorator for {@link ng.$timeout $timeout} service
 * that adds a "flush" and "verifyNoPendingTasks" methods.
 */

angular.mock.$TimeoutDecorator = ['$delegate', '$browser', function($delegate, $browser) {

  /**
   * @ngdoc method
   * @name $timeout#flush
   * @description
   *
   * Flushes the queue of pending tasks.
   *
   * @param {number=} delay maximum timeout amount to flush up until
   */
  $delegate.flush = function(delay) {
    $browser.defer.flush(delay);
  };

  /**
   * @ngdoc method
   * @name $timeout#verifyNoPendingTasks
   * @description
   *
   * Verifies that there are no pending tasks that need to be flushed.
   */
  $delegate.verifyNoPendingTasks = function() {
    if ($browser.deferredFns.length) {
      throw new Error('Deferred tasks to flush (' + $browser.deferredFns.length + '): ' +
          formatPendingTasksAsString($browser.deferredFns));
    }
  };

  function formatPendingTasksAsString(tasks) {
    var result = [];
    angular.forEach(tasks, function(task) {
      result.push('{id: ' + task.id + ', ' + 'time: ' + task.time + '}');
    });

    return result.join(', ');
  }

  return $delegate;
}];

angular.mock.$RAFDecorator = ['$delegate', function($delegate) {
  var queue = [];
  var rafFn = function(fn) {
    var index = queue.length;
    queue.push(fn);
    return function() {
      queue.splice(index, 1);
    };
  };

  rafFn.supported = $delegate.supported;

  rafFn.flush = function() {
    if (queue.length === 0) {
      throw new Error('No rAF callbacks present');
    }

    var length = queue.length;
    for (var i = 0; i < length; i++) {
      queue[i]();
    }

    queue = [];
  };

  return rafFn;
}];

angular.mock.$AsyncCallbackDecorator = ['$delegate', function($delegate) {
  var callbacks = [];
  var addFn = function(fn) {
    callbacks.push(fn);
  };
  addFn.flush = function() {
    angular.forEach(callbacks, function(fn) {
      fn();
    });
    callbacks = [];
  };
  return addFn;
}];

/**
 *
 */
angular.mock.$RootElementProvider = function() {
  this.$get = function() {
    return angular.element('<div ng-app></div>');
  };
};

/**
 * @ngdoc module
 * @name ngMock
 * @packageName angular-mocks
 * @description
 *
 * # ngMock
 *
 * The `ngMock` module provides support to inject and mock Angular services into unit tests.
 * In addition, ngMock also extends various core ng services such that they can be
 * inspected and controlled in a synchronous manner within test code.
 *
 *
 * <div doc-module-components="ngMock"></div>
 *
 */
angular.module('ngMock', ['ng']).provider({
  $browser: angular.mock.$BrowserProvider,
  $exceptionHandler: angular.mock.$ExceptionHandlerProvider,
  $log: angular.mock.$LogProvider,
  $interval: angular.mock.$IntervalProvider,
  $httpBackend: angular.mock.$HttpBackendProvider,
  $rootElement: angular.mock.$RootElementProvider
}).config(['$provide', function($provide) {
  $provide.decorator('$timeout', angular.mock.$TimeoutDecorator);
  $provide.decorator('$$rAF', angular.mock.$RAFDecorator);
  $provide.decorator('$$asyncCallback', angular.mock.$AsyncCallbackDecorator);
  $provide.decorator('$rootScope', angular.mock.$RootScopeDecorator);
}]);

/**
 * @ngdoc module
 * @name ngMockE2E
 * @module ngMockE2E
 * @packageName angular-mocks
 * @description
 *
 * The `ngMockE2E` is an angular module which contains mocks suitable for end-to-end testing.
 * Currently there is only one mock present in this module -
 * the {@link ngMockE2E.$httpBackend e2e $httpBackend} mock.
 */
angular.module('ngMockE2E', ['ng']).config(['$provide', function($provide) {
  $provide.decorator('$httpBackend', angular.mock.e2e.$httpBackendDecorator);
}]);

/**
 * @ngdoc service
 * @name $httpBackend
 * @module ngMockE2E
 * @description
 * Fake HTTP backend implementation suitable for end-to-end testing or backend-less development of
 * applications that use the {@link ng.$http $http service}.
 *
 * *Note*: For fake http backend implementation suitable for unit testing please see
 * {@link ngMock.$httpBackend unit-testing $httpBackend mock}.
 *
 * This implementation can be used to respond with static or dynamic responses via the `when` api
 * and its shortcuts (`whenGET`, `whenPOST`, etc) and optionally pass through requests to the
 * real $httpBackend for specific requests (e.g. to interact with certain remote apis or to fetch
 * templates from a webserver).
 *
 * As opposed to unit-testing, in an end-to-end testing scenario or in scenario when an application
 * is being developed with the real backend api replaced with a mock, it is often desirable for
 * certain category of requests to bypass the mock and issue a real http request (e.g. to fetch
 * templates or static files from the webserver). To configure the backend with this behavior
 * use the `passThrough` request handler of `when` instead of `respond`.
 *
 * Additionally, we don't want to manually have to flush mocked out requests like we do during unit
 * testing. For this reason the e2e $httpBackend flushes mocked out requests
 * automatically, closely simulating the behavior of the XMLHttpRequest object.
 *
 * To setup the application to run with this http backend, you have to create a module that depends
 * on the `ngMockE2E` and your application modules and defines the fake backend:
 *
 * ```js
 *   myAppDev = angular.module('myAppDev', ['myApp', 'ngMockE2E']);
 *   myAppDev.run(function($httpBackend) {
 *     phones = [{name: 'phone1'}, {name: 'phone2'}];
 *
 *     // returns the current list of phones
 *     $httpBackend.whenGET('/phones').respond(phones);
 *
 *     // adds a new phone to the phones array
 *     $httpBackend.whenPOST('/phones').respond(function(method, url, data) {
 *       var phone = angular.fromJson(data);
 *       phones.push(phone);
 *       return [200, phone, {}];
 *     });
 *     $httpBackend.whenGET(/^\/templates\//).passThrough();
 *     //...
 *   });
 * ```
 *
 * Afterwards, bootstrap your app with this new module.
 */

/**
 * @ngdoc method
 * @name $httpBackend#when
 * @module ngMockE2E
 * @description
 * Creates a new backend definition.
 *
 * @param {string} method HTTP method.
 * @param {string|RegExp|function(string)} url HTTP url or function that receives the url
 *   and returns true if the url match the current definition.
 * @param {(string|RegExp)=} data HTTP request body.
 * @param {(Object|function(Object))=} headers HTTP headers or function that receives http header
 *   object and returns true if the headers match the current definition.
 * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that
 *   control how a matched request is handled. You can save this object for later use and invoke
 *   `respond` or `passThrough` again in order to change how a matched request is handled.
 *
 *  - respond –
 *    `{function([status,] data[, headers, statusText])
 *    | function(function(method, url, data, headers)}`
 *    – The respond method takes a set of static data to be returned or a function that can return
 *    an array containing response status (number), response data (string), response headers
 *    (Object), and the text for the status (string).
 *  - passThrough – `{function()}` – Any request matching a backend definition with
 *    `passThrough` handler will be passed through to the real backend (an XHR request will be made
 *    to the server.)
 *  - Both methods return the `requestHandler` object for possible overrides.
 */

/**
 * @ngdoc method
 * @name $httpBackend#whenGET
 * @module ngMockE2E
 * @description
 * Creates a new backend definition for GET requests. For more info see `when()`.
 *
 * @param {string|RegExp|function(string)} url HTTP url or function that receives the url
 *   and returns true if the url match the current definition.
 * @param {(Object|function(Object))=} headers HTTP headers.
 * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that
 *   control how a matched request is handled. You can save this object for later use and invoke
 *   `respond` or `passThrough` again in order to change how a matched request is handled.
 */

/**
 * @ngdoc method
 * @name $httpBackend#whenHEAD
 * @module ngMockE2E
 * @description
 * Creates a new backend definition for HEAD requests. For more info see `when()`.
 *
 * @param {string|RegExp|function(string)} url HTTP url or function that receives the url
 *   and returns true if the url match the current definition.
 * @param {(Object|function(Object))=} headers HTTP headers.
 * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that
 *   control how a matched request is handled. You can save this object for later use and invoke
 *   `respond` or `passThrough` again in order to change how a matched request is handled.
 */

/**
 * @ngdoc method
 * @name $httpBackend#whenDELETE
 * @module ngMockE2E
 * @description
 * Creates a new backend definition for DELETE requests. For more info see `when()`.
 *
 * @param {string|RegExp|function(string)} url HTTP url or function that receives the url
 *   and returns true if the url match the current definition.
 * @param {(Object|function(Object))=} headers HTTP headers.
 * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that
 *   control how a matched request is handled. You can save this object for later use and invoke
 *   `respond` or `passThrough` again in order to change how a matched request is handled.
 */

/**
 * @ngdoc method
 * @name $httpBackend#whenPOST
 * @module ngMockE2E
 * @description
 * Creates a new backend definition for POST requests. For more info see `when()`.
 *
 * @param {string|RegExp|function(string)} url HTTP url or function that receives the url
 *   and returns true if the url match the current definition.
 * @param {(string|RegExp)=} data HTTP request body.
 * @param {(Object|function(Object))=} headers HTTP headers.
 * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that
 *   control how a matched request is handled. You can save this object for later use and invoke
 *   `respond` or `passThrough` again in order to change how a matched request is handled.
 */

/**
 * @ngdoc method
 * @name $httpBackend#whenPUT
 * @module ngMockE2E
 * @description
 * Creates a new backend definition for PUT requests.  For more info see `when()`.
 *
 * @param {string|RegExp|function(string)} url HTTP url or function that receives the url
 *   and returns true if the url match the current definition.
 * @param {(string|RegExp)=} data HTTP request body.
 * @param {(Object|function(Object))=} headers HTTP headers.
 * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that
 *   control how a matched request is handled. You can save this object for later use and invoke
 *   `respond` or `passThrough` again in order to change how a matched request is handled.
 */

/**
 * @ngdoc method
 * @name $httpBackend#whenPATCH
 * @module ngMockE2E
 * @description
 * Creates a new backend definition for PATCH requests.  For more info see `when()`.
 *
 * @param {string|RegExp|function(string)} url HTTP url or function that receives the url
 *   and returns true if the url match the current definition.
 * @param {(string|RegExp)=} data HTTP request body.
 * @param {(Object|function(Object))=} headers HTTP headers.
 * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that
 *   control how a matched request is handled. You can save this object for later use and invoke
 *   `respond` or `passThrough` again in order to change how a matched request is handled.
 */

/**
 * @ngdoc method
 * @name $httpBackend#whenJSONP
 * @module ngMockE2E
 * @description
 * Creates a new backend definition for JSONP requests. For more info see `when()`.
 *
 * @param {string|RegExp|function(string)} url HTTP url or function that receives the url
 *   and returns true if the url match the current definition.
 * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that
 *   control how a matched request is handled. You can save this object for later use and invoke
 *   `respond` or `passThrough` again in order to change how a matched request is handled.
 */
angular.mock.e2e = {};
angular.mock.e2e.$httpBackendDecorator =
  ['$rootScope', '$timeout', '$delegate', '$browser', createHttpBackendMock];


/**
 * @ngdoc type
 * @name $rootScope.Scope
 * @module ngMock
 * @description
 * {@link ng.$rootScope.Scope Scope} type decorated with helper methods useful for testing. These
 * methods are automatically available on any {@link ng.$rootScope.Scope Scope} instance when
 * `ngMock` module is loaded.
 *
 * In addition to all the regular `Scope` methods, the following helper methods are available:
 */
angular.mock.$RootScopeDecorator = ['$delegate', function($delegate) {

  var $rootScopePrototype = Object.getPrototypeOf($delegate);

  $rootScopePrototype.$countChildScopes = countChildScopes;
  $rootScopePrototype.$countWatchers = countWatchers;

  return $delegate;

  // ------------------------------------------------------------------------------------------ //

  /**
   * @ngdoc method
   * @name $rootScope.Scope#$countChildScopes
   * @module ngMock
   * @description
   * Counts all the direct and indirect child scopes of the current scope.
   *
   * The current scope is excluded from the count. The count includes all isolate child scopes.
   *
   * @returns {number} Total number of child scopes.
   */
  function countChildScopes() {
    // jshint validthis: true
    var count = 0; // exclude the current scope
    var pendingChildHeads = [this.$$childHead];
    var currentScope;

    while (pendingChildHeads.length) {
      currentScope = pendingChildHeads.shift();

      while (currentScope) {
        count += 1;
        pendingChildHeads.push(currentScope.$$childHead);
        currentScope = currentScope.$$nextSibling;
      }
    }

    return count;
  }


  /**
   * @ngdoc method
   * @name $rootScope.Scope#$countWatchers
   * @module ngMock
   * @description
   * Counts all the watchers of direct and indirect child scopes of the current scope.
   *
   * The watchers of the current scope are included in the count and so are all the watchers of
   * isolate child scopes.
   *
   * @returns {number} Total number of watchers.
   */
  function countWatchers() {
    // jshint validthis: true
    var count = this.$$watchers ? this.$$watchers.length : 0; // include the current scope
    var pendingChildHeads = [this.$$childHead];
    var currentScope;

    while (pendingChildHeads.length) {
      currentScope = pendingChildHeads.shift();

      while (currentScope) {
        count += currentScope.$$watchers ? currentScope.$$watchers.length : 0;
        pendingChildHeads.push(currentScope.$$childHead);
        currentScope = currentScope.$$nextSibling;
      }
    }

    return count;
  }
}];


if (window.jasmine || window.mocha) {

  var currentSpec = null,
      isSpecRunning = function() {
        return !!currentSpec;
      };


  (window.beforeEach || window.setup)(function() {
    currentSpec = this;
  });

  (window.afterEach || window.teardown)(function() {
    var injector = currentSpec.$injector;

    angular.forEach(currentSpec.$modules, function(module) {
      if (module && module.$$hashKey) {
        module.$$hashKey = undefined;
      }
    });

    currentSpec.$injector = null;
    currentSpec.$modules = null;
    currentSpec = null;

    if (injector) {
      injector.get('$rootElement').off();
      injector.get('$browser').pollFns.length = 0;
    }

    // clean up jquery's fragment cache
    angular.forEach(angular.element.fragments, function(val, key) {
      delete angular.element.fragments[key];
    });

    MockXhr.$$lastInstance = null;

    angular.forEach(angular.callbacks, function(val, key) {
      delete angular.callbacks[key];
    });
    angular.callbacks.counter = 0;
  });

  /**
   * @ngdoc function
   * @name angular.mock.module
   * @description
   *
   * *NOTE*: This function is also published on window for easy access.<br>
   * *NOTE*: This function is declared ONLY WHEN running tests with jasmine or mocha
   *
   * This function registers a module configuration code. It collects the configuration information
   * which will be used when the injector is created by {@link angular.mock.inject inject}.
   *
   * See {@link angular.mock.inject inject} for usage example
   *
   * @param {...(string|Function|Object)} fns any number of modules which are represented as string
   *        aliases or as anonymous module initialization functions. The modules are used to
   *        configure the injector. The 'ng' and 'ngMock' modules are automatically loaded. If an
   *        object literal is passed they will be registered as values in the module, the key being
   *        the module name and the value being what is returned.
   */
  window.module = angular.mock.module = function() {
    var moduleFns = Array.prototype.slice.call(arguments, 0);
    return isSpecRunning() ? workFn() : workFn;
    /////////////////////
    function workFn() {
      if (currentSpec.$injector) {
        throw new Error('Injector already created, can not register a module!');
      } else {
        var modules = currentSpec.$modules || (currentSpec.$modules = []);
        angular.forEach(moduleFns, function(module) {
          if (angular.isObject(module) && !angular.isArray(module)) {
            modules.push(function($provide) {
              angular.forEach(module, function(value, key) {
                $provide.value(key, value);
              });
            });
          } else {
            modules.push(module);
          }
        });
      }
    }
  };

  /**
   * @ngdoc function
   * @name angular.mock.inject
   * @description
   *
   * *NOTE*: This function is also published on window for easy access.<br>
   * *NOTE*: This function is declared ONLY WHEN running tests with jasmine or mocha
   *
   * The inject function wraps a function into an injectable function. The inject() creates new
   * instance of {@link auto.$injector $injector} per test, which is then used for
   * resolving references.
   *
   *
   * ## Resolving References (Underscore Wrapping)
   * Often, we would like to inject a reference once, in a `beforeEach()` block and reuse this
   * in multiple `it()` clauses. To be able to do this we must assign the reference to a variable
   * that is declared in the scope of the `describe()` block. Since we would, most likely, want
   * the variable to have the same name of the reference we have a problem, since the parameter
   * to the `inject()` function would hide the outer variable.
   *
   * To help with this, the injected parameters can, optionally, be enclosed with underscores.
   * These are ignored by the injector when the reference name is resolved.
   *
   * For example, the parameter `_myService_` would be resolved as the reference `myService`.
   * Since it is available in the function body as _myService_, we can then assign it to a variable
   * defined in an outer scope.
   *
   * ```
   * // Defined out reference variable outside
   * var myService;
   *
   * // Wrap the parameter in underscores
   * beforeEach( inject( function(_myService_){
   *   myService = _myService_;
   * }));
   *
   * // Use myService in a series of tests.
   * it('makes use of myService', function() {
   *   myService.doStuff();
   * });
   *
   * ```
   *
   * See also {@link angular.mock.module angular.mock.module}
   *
   * ## Example
   * Example of what a typical jasmine tests looks like with the inject method.
   * ```js
   *
   *   angular.module('myApplicationModule', [])
   *       .value('mode', 'app')
   *       .value('version', 'v1.0.1');
   *
   *
   *   describe('MyApp', function() {
   *
   *     // You need to load modules that you want to test,
   *     // it loads only the "ng" module by default.
   *     beforeEach(module('myApplicationModule'));
   *
   *
   *     // inject() is used to inject arguments of all given functions
   *     it('should provide a version', inject(function(mode, version) {
   *       expect(version).toEqual('v1.0.1');
   *       expect(mode).toEqual('app');
   *     }));
   *
   *
   *     // The inject and module method can also be used inside of the it or beforeEach
   *     it('should override a version and test the new version is injected', function() {
   *       // module() takes functions or strings (module aliases)
   *       module(function($provide) {
   *         $provide.value('version', 'overridden'); // override version here
   *       });
   *
   *       inject(function(version) {
   *         expect(version).toEqual('overridden');
   *       });
   *     });
   *   });
   *
   * ```
   *
   * @param {...Function} fns any number of functions which will be injected using the injector.
   */



  var ErrorAddingDeclarationLocationStack = function(e, errorForStack) {
    this.message = e.message;
    this.name = e.name;
    if (e.line) this.line = e.line;
    if (e.sourceId) this.sourceId = e.sourceId;
    if (e.stack && errorForStack)
      this.stack = e.stack + '\n' + errorForStack.stack;
    if (e.stackArray) this.stackArray = e.stackArray;
  };
  ErrorAddingDeclarationLocationStack.prototype.toString = Error.prototype.toString;

  window.inject = angular.mock.inject = function() {
    var blockFns = Array.prototype.slice.call(arguments, 0);
    var errorForStack = new Error('Declaration Location');
    return isSpecRunning() ? workFn.call(currentSpec) : workFn;
    /////////////////////
    function workFn() {
      var modules = currentSpec.$modules || [];
      var strictDi = !!currentSpec.$injectorStrict;
      modules.unshift('ngMock');
      modules.unshift('ng');
      var injector = currentSpec.$injector;
      if (!injector) {
        if (strictDi) {
          // If strictDi is enabled, annotate the providerInjector blocks
          angular.forEach(modules, function(moduleFn) {
            if (typeof moduleFn === "function") {
              angular.injector.$$annotate(moduleFn);
            }
          });
        }
        injector = currentSpec.$injector = angular.injector(modules, strictDi);
        currentSpec.$injectorStrict = strictDi;
      }
      for (var i = 0, ii = blockFns.length; i < ii; i++) {
        if (currentSpec.$injectorStrict) {
          // If the injector is strict / strictDi, and the spec wants to inject using automatic
          // annotation, then annotate the function here.
          injector.annotate(blockFns[i]);
        }
        try {
          /* jshint -W040 *//* Jasmine explicitly provides a `this` object when calling functions */
          injector.invoke(blockFns[i] || angular.noop, this);
          /* jshint +W040 */
        } catch (e) {
          if (e.stack && errorForStack) {
            throw new ErrorAddingDeclarationLocationStack(e, errorForStack);
          }
          throw e;
        } finally {
          errorForStack = null;
        }
      }
    }
  };


  angular.mock.inject.strictDi = function(value) {
    value = arguments.length ? !!value : true;
    return isSpecRunning() ? workFn() : workFn;

    function workFn() {
      if (value !== currentSpec.$injectorStrict) {
        if (currentSpec.$injector) {
          throw new Error('Injector already created, can not modify strict annotations');
        } else {
          currentSpec.$injectorStrict = value;
        }
      }
    }
  };
}


})(window, window.angular);



/*!
 * Bootstrap v3.1.1 (http://getbootstrap.com)
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 */

if (typeof jQuery === 'undefined') { throw new Error('Bootstrap\'s JavaScript requires jQuery') }

/* ========================================================================
 * Bootstrap: transition.js v3.1.1
 * http://getbootstrap.com/javascript/#transitions
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // CSS TRANSITION SUPPORT (Shoutout: http://www.modernizr.com/)
  // ============================================================

  function transitionEnd() {
    var el = document.createElement('bootstrap')

    var transEndEventNames = {
      'WebkitTransition' : 'webkitTransitionEnd',
      'MozTransition'    : 'transitionend',
      'OTransition'      : 'oTransitionEnd otransitionend',
      'transition'       : 'transitionend'
    }

    for (var name in transEndEventNames) {
      if (el.style[name] !== undefined) {
        return { end: transEndEventNames[name] }
      }
    }

    return false // explicit for ie8 (  ._.)
  }

  // http://blog.alexmaccaw.com/css-transitions
  $.fn.emulateTransitionEnd = function (duration) {
    var called = false, $el = this
    $(this).one($.support.transition.end, function () { called = true })
    var callback = function () { if (!called) $($el).trigger($.support.transition.end) }
    setTimeout(callback, duration)
    return this
  }

  $(function () {
    $.support.transition = transitionEnd()
  })

}(jQuery);

/* ========================================================================
 * Bootstrap: alert.js v3.1.1
 * http://getbootstrap.com/javascript/#alerts
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // ALERT CLASS DEFINITION
  // ======================

  var dismiss = '[data-dismiss="alert"]'
  var Alert   = function (el) {
    $(el).on('click', dismiss, this.close)
  }

  Alert.prototype.close = function (e) {
    var $this    = $(this)
    var selector = $this.attr('data-target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
    }

    var $parent = $(selector)

    if (e) e.preventDefault()

    if (!$parent.length) {
      $parent = $this.hasClass('alert') ? $this : $this.parent()
    }

    $parent.trigger(e = $.Event('close.bs.alert'))

    if (e.isDefaultPrevented()) return

    $parent.removeClass('in')

    function removeElement() {
      $parent.trigger('closed.bs.alert').remove()
    }

    $.support.transition && $parent.hasClass('fade') ?
      $parent
        .one($.support.transition.end, removeElement)
        .emulateTransitionEnd(150) :
      removeElement()
  }


  // ALERT PLUGIN DEFINITION
  // =======================

  var old = $.fn.alert

  $.fn.alert = function (option) {
    return this.each(function () {
      var $this = $(this)
      var data  = $this.data('bs.alert')

      if (!data) $this.data('bs.alert', (data = new Alert(this)))
      if (typeof option == 'string') data[option].call($this)
    })
  }

  $.fn.alert.Constructor = Alert


  // ALERT NO CONFLICT
  // =================

  $.fn.alert.noConflict = function () {
    $.fn.alert = old
    return this
  }


  // ALERT DATA-API
  // ==============

  $(document).on('click.bs.alert.data-api', dismiss, Alert.prototype.close)

}(jQuery);

/* ========================================================================
 * Bootstrap: button.js v3.1.1
 * http://getbootstrap.com/javascript/#buttons
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // BUTTON PUBLIC CLASS DEFINITION
  // ==============================

  var Button = function (element, options) {
    this.$element  = $(element)
    this.options   = $.extend({}, Button.DEFAULTS, options)
    this.isLoading = false
  }

  Button.DEFAULTS = {
    loadingText: 'loading...'
  }

  Button.prototype.setState = function (state) {
    var d    = 'disabled'
    var $el  = this.$element
    var val  = $el.is('input') ? 'val' : 'html'
    var data = $el.data()

    state = state + 'Text'

    if (!data.resetText) $el.data('resetText', $el[val]())

    $el[val](data[state] || this.options[state])

    // push to event loop to allow forms to submit
    setTimeout($.proxy(function () {
      if (state == 'loadingText') {
        this.isLoading = true
        $el.addClass(d).attr(d, d)
      } else if (this.isLoading) {
        this.isLoading = false
        $el.removeClass(d).removeAttr(d)
      }
    }, this), 0)
  }

  Button.prototype.toggle = function () {
    var changed = true
    var $parent = this.$element.closest('[data-toggle="buttons"]')

    if ($parent.length) {
      var $input = this.$element.find('input')
      if ($input.prop('type') == 'radio') {
        if ($input.prop('checked') && this.$element.hasClass('active')) changed = false
        else $parent.find('.active').removeClass('active')
      }
      if (changed) $input.prop('checked', !this.$element.hasClass('active')).trigger('change')
    }

    if (changed) this.$element.toggleClass('active')
  }


  // BUTTON PLUGIN DEFINITION
  // ========================

  var old = $.fn.button

  $.fn.button = function (option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.button')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.button', (data = new Button(this, options)))

      if (option == 'toggle') data.toggle()
      else if (option) data.setState(option)
    })
  }

  $.fn.button.Constructor = Button


  // BUTTON NO CONFLICT
  // ==================

  $.fn.button.noConflict = function () {
    $.fn.button = old
    return this
  }


  // BUTTON DATA-API
  // ===============

  $(document).on('click.bs.button.data-api', '[data-toggle^=button]', function (e) {
    var $btn = $(e.target)
    if (!$btn.hasClass('btn')) $btn = $btn.closest('.btn')
    $btn.button('toggle')
    e.preventDefault()
  })

}(jQuery);

/* ========================================================================
 * Bootstrap: carousel.js v3.1.1
 * http://getbootstrap.com/javascript/#carousel
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // CAROUSEL CLASS DEFINITION
  // =========================

  var Carousel = function (element, options) {
    this.$element    = $(element)
    this.$indicators = this.$element.find('.carousel-indicators')
    this.options     = options
    this.paused      =
    this.sliding     =
    this.interval    =
    this.$active     =
    this.$items      = null

    this.options.pause == 'hover' && this.$element
      .on('mouseenter', $.proxy(this.pause, this))
      .on('mouseleave', $.proxy(this.cycle, this))
  }

  Carousel.DEFAULTS = {
    interval: 5000,
    pause: 'hover',
    wrap: true
  }

  Carousel.prototype.cycle =  function (e) {
    e || (this.paused = false)

    this.interval && clearInterval(this.interval)

    this.options.interval
      && !this.paused
      && (this.interval = setInterval($.proxy(this.next, this), this.options.interval))

    return this
  }

  Carousel.prototype.getActiveIndex = function () {
    this.$active = this.$element.find('.item.active')
    this.$items  = this.$active.parent().children()

    return this.$items.index(this.$active)
  }

  Carousel.prototype.to = function (pos) {
    var that        = this
    var activeIndex = this.getActiveIndex()

    if (pos > (this.$items.length - 1) || pos < 0) return

    if (this.sliding)       return this.$element.one('slid.bs.carousel', function () { that.to(pos) })
    if (activeIndex == pos) return this.pause().cycle()

    return this.slide(pos > activeIndex ? 'next' : 'prev', $(this.$items[pos]))
  }

  Carousel.prototype.pause = function (e) {
    e || (this.paused = true)

    if (this.$element.find('.next, .prev').length && $.support.transition) {
      this.$element.trigger($.support.transition.end)
      this.cycle(true)
    }

    this.interval = clearInterval(this.interval)

    return this
  }

  Carousel.prototype.next = function () {
    if (this.sliding) return
    return this.slide('next')
  }

  Carousel.prototype.prev = function () {
    if (this.sliding) return
    return this.slide('prev')
  }

  Carousel.prototype.slide = function (type, next) {
    var $active   = this.$element.find('.item.active')
    var $next     = next || $active[type]()
    var isCycling = this.interval
    var direction = type == 'next' ? 'left' : 'right'
    var fallback  = type == 'next' ? 'first' : 'last'
    var that      = this

    if (!$next.length) {
      if (!this.options.wrap) return
      $next = this.$element.find('.item')[fallback]()
    }

    if ($next.hasClass('active')) return this.sliding = false

    var e = $.Event('slide.bs.carousel', { relatedTarget: $next[0], direction: direction })
    this.$element.trigger(e)
    if (e.isDefaultPrevented()) return

    this.sliding = true

    isCycling && this.pause()

    if (this.$indicators.length) {
      this.$indicators.find('.active').removeClass('active')
      this.$element.one('slid.bs.carousel', function () {
        var $nextIndicator = $(that.$indicators.children()[that.getActiveIndex()])
        $nextIndicator && $nextIndicator.addClass('active')
      })
    }

    if ($.support.transition && this.$element.hasClass('slide')) {
      $next.addClass(type)
      $next[0].offsetWidth // force reflow
      $active.addClass(direction)
      $next.addClass(direction)
      $active
        .one($.support.transition.end, function () {
          $next.removeClass([type, direction].join(' ')).addClass('active')
          $active.removeClass(['active', direction].join(' '))
          that.sliding = false
          setTimeout(function () { that.$element.trigger('slid.bs.carousel') }, 0)
        })
        .emulateTransitionEnd($active.css('transition-duration').slice(0, -1) * 1000)
    } else {
      $active.removeClass('active')
      $next.addClass('active')
      this.sliding = false
      this.$element.trigger('slid.bs.carousel')
    }

    isCycling && this.cycle()

    return this
  }


  // CAROUSEL PLUGIN DEFINITION
  // ==========================

  var old = $.fn.carousel

  $.fn.carousel = function (option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.carousel')
      var options = $.extend({}, Carousel.DEFAULTS, $this.data(), typeof option == 'object' && option)
      var action  = typeof option == 'string' ? option : options.slide

      if (!data) $this.data('bs.carousel', (data = new Carousel(this, options)))
      if (typeof option == 'number') data.to(option)
      else if (action) data[action]()
      else if (options.interval) data.pause().cycle()
    })
  }

  $.fn.carousel.Constructor = Carousel


  // CAROUSEL NO CONFLICT
  // ====================

  $.fn.carousel.noConflict = function () {
    $.fn.carousel = old
    return this
  }


  // CAROUSEL DATA-API
  // =================

  $(document).on('click.bs.carousel.data-api', '[data-slide], [data-slide-to]', function (e) {
    var $this   = $(this), href
    var $target = $($this.attr('data-target') || (href = $this.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '')) //strip for ie7
    var options = $.extend({}, $target.data(), $this.data())
    var slideIndex = $this.attr('data-slide-to')
    if (slideIndex) options.interval = false

    $target.carousel(options)

    if (slideIndex = $this.attr('data-slide-to')) {
      $target.data('bs.carousel').to(slideIndex)
    }

    e.preventDefault()
  })

  $(window).on('load', function () {
    $('[data-ride="carousel"]').each(function () {
      var $carousel = $(this)
      $carousel.carousel($carousel.data())
    })
  })

}(jQuery);

/* ========================================================================
 * Bootstrap: collapse.js v3.1.1
 * http://getbootstrap.com/javascript/#collapse
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // COLLAPSE PUBLIC CLASS DEFINITION
  // ================================

  var Collapse = function (element, options) {
    this.$element      = $(element)
    this.options       = $.extend({}, Collapse.DEFAULTS, options)
    this.transitioning = null

    if (this.options.parent) this.$parent = $(this.options.parent)
    if (this.options.toggle) this.toggle()
  }

  Collapse.DEFAULTS = {
    toggle: true
  }

  Collapse.prototype.dimension = function () {
    var hasWidth = this.$element.hasClass('width')
    return hasWidth ? 'width' : 'height'
  }

  Collapse.prototype.show = function () {
    if (this.transitioning || this.$element.hasClass('in')) return

    var startEvent = $.Event('show.bs.collapse')
    this.$element.trigger(startEvent)
    if (startEvent.isDefaultPrevented()) return

    var actives = this.$parent && this.$parent.find('> .panel > .in')

    if (actives && actives.length) {
      var hasData = actives.data('bs.collapse')
      if (hasData && hasData.transitioning) return
      actives.collapse('hide')
      hasData || actives.data('bs.collapse', null)
    }

    var dimension = this.dimension()

    this.$element
      .removeClass('collapse')
      .addClass('collapsing')
      [dimension](0)

    this.transitioning = 1

    var complete = function () {
      this.$element
        .removeClass('collapsing')
        .addClass('collapse in')
        [dimension]('auto')
      this.transitioning = 0
      this.$element.trigger('shown.bs.collapse')
    }

    if (!$.support.transition) return complete.call(this)

    var scrollSize = $.camelCase(['scroll', dimension].join('-'))

    this.$element
      .one($.support.transition.end, $.proxy(complete, this))
      .emulateTransitionEnd(350)
      [dimension](this.$element[0][scrollSize])
  }

  Collapse.prototype.hide = function () {
    if (this.transitioning || !this.$element.hasClass('in')) return

    var startEvent = $.Event('hide.bs.collapse')
    this.$element.trigger(startEvent)
    if (startEvent.isDefaultPrevented()) return

    var dimension = this.dimension()

    this.$element
      [dimension](this.$element[dimension]())
      [0].offsetHeight

    this.$element
      .addClass('collapsing')
      .removeClass('collapse')
      .removeClass('in')

    this.transitioning = 1

    var complete = function () {
      this.transitioning = 0
      this.$element
        .trigger('hidden.bs.collapse')
        .removeClass('collapsing')
        .addClass('collapse')
    }

    if (!$.support.transition) return complete.call(this)

    this.$element
      [dimension](0)
      .one($.support.transition.end, $.proxy(complete, this))
      .emulateTransitionEnd(350)
  }

  Collapse.prototype.toggle = function () {
    this[this.$element.hasClass('in') ? 'hide' : 'show']()
  }


  // COLLAPSE PLUGIN DEFINITION
  // ==========================

  var old = $.fn.collapse

  $.fn.collapse = function (option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.collapse')
      var options = $.extend({}, Collapse.DEFAULTS, $this.data(), typeof option == 'object' && option)

      if (!data && options.toggle && option == 'show') option = !option
      if (!data) $this.data('bs.collapse', (data = new Collapse(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  $.fn.collapse.Constructor = Collapse


  // COLLAPSE NO CONFLICT
  // ====================

  $.fn.collapse.noConflict = function () {
    $.fn.collapse = old
    return this
  }


  // COLLAPSE DATA-API
  // =================

  $(document).on('click.bs.collapse.data-api', '[data-toggle=collapse]', function (e) {
    var $this   = $(this), href
    var target  = $this.attr('data-target')
        || e.preventDefault()
        || (href = $this.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '') //strip for ie7
    var $target = $(target)
    var data    = $target.data('bs.collapse')
    var option  = data ? 'toggle' : $this.data()
    var parent  = $this.attr('data-parent')
    var $parent = parent && $(parent)

    if (!data || !data.transitioning) {
      if ($parent) $parent.find('[data-toggle=collapse][data-parent="' + parent + '"]').not($this).addClass('collapsed')
      $this[$target.hasClass('in') ? 'addClass' : 'removeClass']('collapsed')
    }

    $target.collapse(option)
  })

}(jQuery);

/* ========================================================================
 * Bootstrap: dropdown.js v3.1.1
 * http://getbootstrap.com/javascript/#dropdowns
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // DROPDOWN CLASS DEFINITION
  // =========================

  var backdrop = '.dropdown-backdrop'
  var toggle   = '[data-toggle=dropdown]'
  var Dropdown = function (element) {
    $(element).on('click.bs.dropdown', this.toggle)
  }

  Dropdown.prototype.toggle = function (e) {
    var $this = $(this)

    if ($this.is('.disabled, :disabled')) return

    var $parent  = getParent($this)
    var isActive = $parent.hasClass('open')

    clearMenus()

    if (!isActive) {
      if ('ontouchstart' in document.documentElement && !$parent.closest('.navbar-nav').length) {
        // if mobile we use a backdrop because click events don't delegate
        $('<div class="dropdown-backdrop"/>').insertAfter($(this)).on('click', clearMenus)
      }

      var relatedTarget = { relatedTarget: this }
      $parent.trigger(e = $.Event('show.bs.dropdown', relatedTarget))

      if (e.isDefaultPrevented()) return

      $parent
        .toggleClass('open')
        .trigger('shown.bs.dropdown', relatedTarget)

      $this.focus()
    }

    return false
  }

  Dropdown.prototype.keydown = function (e) {
    if (!/(38|40|27)/.test(e.keyCode)) return

    var $this = $(this)

    e.preventDefault()
    e.stopPropagation()

    if ($this.is('.disabled, :disabled')) return

    var $parent  = getParent($this)
    var isActive = $parent.hasClass('open')

    if (!isActive || (isActive && e.keyCode == 27)) {
      if (e.which == 27) $parent.find(toggle).focus()
      return $this.click()
    }

    var desc = ' li:not(.divider):visible a'
    var $items = $parent.find('[role=menu]' + desc + ', [role=listbox]' + desc)

    if (!$items.length) return

    var index = $items.index($items.filter(':focus'))

    if (e.keyCode == 38 && index > 0)                 index--                        // up
    if (e.keyCode == 40 && index < $items.length - 1) index++                        // down
    if (!~index)                                      index = 0

    $items.eq(index).focus()
  }

  function clearMenus(e) {
    $(backdrop).remove()
    $(toggle).each(function () {
      var $parent = getParent($(this))
      var relatedTarget = { relatedTarget: this }
      if (!$parent.hasClass('open')) return
      $parent.trigger(e = $.Event('hide.bs.dropdown', relatedTarget))
      if (e.isDefaultPrevented()) return
      $parent.removeClass('open').trigger('hidden.bs.dropdown', relatedTarget)
    })
  }

  function getParent($this) {
    var selector = $this.attr('data-target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && /#[A-Za-z]/.test(selector) && selector.replace(/.*(?=#[^\s]*$)/, '') //strip for ie7
    }

    var $parent = selector && $(selector)

    return $parent && $parent.length ? $parent : $this.parent()
  }


  // DROPDOWN PLUGIN DEFINITION
  // ==========================

  var old = $.fn.dropdown

  $.fn.dropdown = function (option) {
    return this.each(function () {
      var $this = $(this)
      var data  = $this.data('bs.dropdown')

      if (!data) $this.data('bs.dropdown', (data = new Dropdown(this)))
      if (typeof option == 'string') data[option].call($this)
    })
  }

  $.fn.dropdown.Constructor = Dropdown


  // DROPDOWN NO CONFLICT
  // ====================

  $.fn.dropdown.noConflict = function () {
    $.fn.dropdown = old
    return this
  }


  // APPLY TO STANDARD DROPDOWN ELEMENTS
  // ===================================

  $(document)
    .on('click.bs.dropdown.data-api', clearMenus)
    .on('click.bs.dropdown.data-api', '.dropdown form', function (e) { e.stopPropagation() })
    .on('click.bs.dropdown.data-api', toggle, Dropdown.prototype.toggle)
    .on('keydown.bs.dropdown.data-api', toggle + ', [role=menu], [role=listbox]', Dropdown.prototype.keydown)

}(jQuery);

/* ========================================================================
 * Bootstrap: modal.js v3.1.1
 * http://getbootstrap.com/javascript/#modals
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // MODAL CLASS DEFINITION
  // ======================

  var Modal = function (element, options) {
    this.options   = options
    this.$element  = $(element)
    this.$backdrop =
    this.isShown   = null

    if (this.options.remote) {
      this.$element
        .find('.modal-content')
        .load(this.options.remote, $.proxy(function () {
          this.$element.trigger('loaded.bs.modal')
        }, this))
    }
  }

  Modal.DEFAULTS = {
    backdrop: true,
    keyboard: true,
    show: true
  }

  Modal.prototype.toggle = function (_relatedTarget) {
    return this[!this.isShown ? 'show' : 'hide'](_relatedTarget)
  }

  Modal.prototype.show = function (_relatedTarget) {
    var that = this
    var e    = $.Event('show.bs.modal', { relatedTarget: _relatedTarget })

    this.$element.trigger(e)

    if (this.isShown || e.isDefaultPrevented()) return

    this.isShown = true

    this.escape()

    this.$element.on('click.dismiss.bs.modal', '[data-dismiss="modal"]', $.proxy(this.hide, this))

    this.backdrop(function () {
      var transition = $.support.transition && that.$element.hasClass('fade')

      if (!that.$element.parent().length) {
        that.$element.appendTo(document.body) // don't move modals dom position
      }

      that.$element
        .show()
        .scrollTop(0)

      if (transition) {
        that.$element[0].offsetWidth // force reflow
      }

      that.$element
        .addClass('in')
        .attr('aria-hidden', false)

      that.enforceFocus()

      var e = $.Event('shown.bs.modal', { relatedTarget: _relatedTarget })

      transition ?
        that.$element.find('.modal-dialog') // wait for modal to slide in
          .one($.support.transition.end, function () {
            that.$element.focus().trigger(e)
          })
          .emulateTransitionEnd(300) :
        that.$element.focus().trigger(e)
    })
  }

  Modal.prototype.hide = function (e) {
    if (e) e.preventDefault()

    e = $.Event('hide.bs.modal')

    this.$element.trigger(e)

    if (!this.isShown || e.isDefaultPrevented()) return

    this.isShown = false

    this.escape()

    $(document).off('focusin.bs.modal')

    this.$element
      .removeClass('in')
      .attr('aria-hidden', true)
      .off('click.dismiss.bs.modal')

    $.support.transition && this.$element.hasClass('fade') ?
      this.$element
        .one($.support.transition.end, $.proxy(this.hideModal, this))
        .emulateTransitionEnd(300) :
      this.hideModal()
  }

  Modal.prototype.enforceFocus = function () {
    $(document)
      .off('focusin.bs.modal') // guard against infinite focus loop
      .on('focusin.bs.modal', $.proxy(function (e) {
        if (this.$element[0] !== e.target && !this.$element.has(e.target).length) {
          this.$element.focus()
        }
      }, this))
  }

  Modal.prototype.escape = function () {
    if (this.isShown && this.options.keyboard) {
      this.$element.on('keyup.dismiss.bs.modal', $.proxy(function (e) {
        e.which == 27 && this.hide()
      }, this))
    } else if (!this.isShown) {
      this.$element.off('keyup.dismiss.bs.modal')
    }
  }

  Modal.prototype.hideModal = function () {
    var that = this
    this.$element.hide()
    this.backdrop(function () {
      that.removeBackdrop()
      that.$element.trigger('hidden.bs.modal')
    })
  }

  Modal.prototype.removeBackdrop = function () {
    this.$backdrop && this.$backdrop.remove()
    this.$backdrop = null
  }

  Modal.prototype.backdrop = function (callback) {
    var animate = this.$element.hasClass('fade') ? 'fade' : ''

    if (this.isShown && this.options.backdrop) {
      var doAnimate = $.support.transition && animate

      this.$backdrop = $('<div class="modal-backdrop ' + animate + '" />')
        .appendTo(document.body)

      this.$element.on('click.dismiss.bs.modal', $.proxy(function (e) {
        if (e.target !== e.currentTarget) return
        this.options.backdrop == 'static'
          ? this.$element[0].focus.call(this.$element[0])
          : this.hide.call(this)
      }, this))

      if (doAnimate) this.$backdrop[0].offsetWidth // force reflow

      this.$backdrop.addClass('in')

      if (!callback) return

      doAnimate ?
        this.$backdrop
          .one($.support.transition.end, callback)
          .emulateTransitionEnd(150) :
        callback()

    } else if (!this.isShown && this.$backdrop) {
      this.$backdrop.removeClass('in')

      $.support.transition && this.$element.hasClass('fade') ?
        this.$backdrop
          .one($.support.transition.end, callback)
          .emulateTransitionEnd(150) :
        callback()

    } else if (callback) {
      callback()
    }
  }


  // MODAL PLUGIN DEFINITION
  // =======================

  var old = $.fn.modal

  $.fn.modal = function (option, _relatedTarget) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.modal')
      var options = $.extend({}, Modal.DEFAULTS, $this.data(), typeof option == 'object' && option)

      if (!data) $this.data('bs.modal', (data = new Modal(this, options)))
      if (typeof option == 'string') data[option](_relatedTarget)
      else if (options.show) data.show(_relatedTarget)
    })
  }

  $.fn.modal.Constructor = Modal


  // MODAL NO CONFLICT
  // =================

  $.fn.modal.noConflict = function () {
    $.fn.modal = old
    return this
  }


  // MODAL DATA-API
  // ==============

  $(document).on('click.bs.modal.data-api', '[data-toggle="modal"]', function (e) {
    var $this   = $(this)
    var href    = $this.attr('href')
    var $target = $($this.attr('data-target') || (href && href.replace(/.*(?=#[^\s]+$)/, ''))) //strip for ie7
    var option  = $target.data('bs.modal') ? 'toggle' : $.extend({ remote: !/#/.test(href) && href }, $target.data(), $this.data())

    if ($this.is('a')) e.preventDefault()

    $target
      .modal(option, this)
      .one('hide', function () {
        $this.is(':visible') && $this.focus()
      })
  })

  $(document)
    .on('show.bs.modal', '.modal', function () { $(document.body).addClass('modal-open') })
    .on('hidden.bs.modal', '.modal', function () { $(document.body).removeClass('modal-open') })

}(jQuery);

/* ========================================================================
 * Bootstrap: tooltip.js v3.1.1
 * http://getbootstrap.com/javascript/#tooltip
 * Inspired by the original jQuery.tipsy by Jason Frame
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // TOOLTIP PUBLIC CLASS DEFINITION
  // ===============================

  var Tooltip = function (element, options) {
    this.type       =
    this.options    =
    this.enabled    =
    this.timeout    =
    this.hoverState =
    this.$element   = null

    this.init('tooltip', element, options)
  }

  Tooltip.DEFAULTS = {
    animation: true,
    placement: 'top',
    selector: false,
    template: '<div class="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
    trigger: 'hover focus',
    title: '',
    delay: 0,
    html: false,
    container: false
  }

  Tooltip.prototype.init = function (type, element, options) {
    this.enabled  = true
    this.type     = type
    this.$element = $(element)
    this.options  = this.getOptions(options)

    var triggers = this.options.trigger.split(' ')

    for (var i = triggers.length; i--;) {
      var trigger = triggers[i]

      if (trigger == 'click') {
        this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this))
      } else if (trigger != 'manual') {
        var eventIn  = trigger == 'hover' ? 'mouseenter' : 'focusin'
        var eventOut = trigger == 'hover' ? 'mouseleave' : 'focusout'

        this.$element.on(eventIn  + '.' + this.type, this.options.selector, $.proxy(this.enter, this))
        this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this))
      }
    }

    this.options.selector ?
      (this._options = $.extend({}, this.options, { trigger: 'manual', selector: '' })) :
      this.fixTitle()
  }

  Tooltip.prototype.getDefaults = function () {
    return Tooltip.DEFAULTS
  }

  Tooltip.prototype.getOptions = function (options) {
    options = $.extend({}, this.getDefaults(), this.$element.data(), options)

    if (options.delay && typeof options.delay == 'number') {
      options.delay = {
        show: options.delay,
        hide: options.delay
      }
    }

    return options
  }

  Tooltip.prototype.getDelegateOptions = function () {
    var options  = {}
    var defaults = this.getDefaults()

    this._options && $.each(this._options, function (key, value) {
      if (defaults[key] != value) options[key] = value
    })

    return options
  }

  Tooltip.prototype.enter = function (obj) {
    var self = obj instanceof this.constructor ?
      obj : $(obj.currentTarget)[this.type](this.getDelegateOptions()).data('bs.' + this.type)

    clearTimeout(self.timeout)

    self.hoverState = 'in'

    if (!self.options.delay || !self.options.delay.show) return self.show()

    self.timeout = setTimeout(function () {
      if (self.hoverState == 'in') self.show()
    }, self.options.delay.show)
  }

  Tooltip.prototype.leave = function (obj) {
    var self = obj instanceof this.constructor ?
      obj : $(obj.currentTarget)[this.type](this.getDelegateOptions()).data('bs.' + this.type)

    clearTimeout(self.timeout)

    self.hoverState = 'out'

    if (!self.options.delay || !self.options.delay.hide) return self.hide()

    self.timeout = setTimeout(function () {
      if (self.hoverState == 'out') self.hide()
    }, self.options.delay.hide)
  }

  Tooltip.prototype.show = function () {
    var e = $.Event('show.bs.' + this.type)

    if (this.hasContent() && this.enabled) {
      this.$element.trigger(e)

      if (e.isDefaultPrevented()) return
      var that = this;

      var $tip = this.tip()

      this.setContent()

      if (this.options.animation) $tip.addClass('fade')

      var placement = typeof this.options.placement == 'function' ?
        this.options.placement.call(this, $tip[0], this.$element[0]) :
        this.options.placement

      var autoToken = /\s?auto?\s?/i
      var autoPlace = autoToken.test(placement)
      if (autoPlace) placement = placement.replace(autoToken, '') || 'top'

      $tip
        .detach()
        .css({ top: 0, left: 0, display: 'block' })
        .addClass(placement)

      this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element)

      var pos          = this.getPosition()
      var actualWidth  = $tip[0].offsetWidth
      var actualHeight = $tip[0].offsetHeight

      if (autoPlace) {
        var $parent = this.$element.parent()

        var orgPlacement = placement
        var docScroll    = document.documentElement.scrollTop || document.body.scrollTop
        var parentWidth  = this.options.container == 'body' ? window.innerWidth  : $parent.outerWidth()
        var parentHeight = this.options.container == 'body' ? window.innerHeight : $parent.outerHeight()
        var parentLeft   = this.options.container == 'body' ? 0 : $parent.offset().left

        placement = placement == 'bottom' && pos.top   + pos.height  + actualHeight - docScroll > parentHeight  ? 'top'    :
                    placement == 'top'    && pos.top   - docScroll   - actualHeight < 0                         ? 'bottom' :
                    placement == 'right'  && pos.right + actualWidth > parentWidth                              ? 'left'   :
                    placement == 'left'   && pos.left  - actualWidth < parentLeft                               ? 'right'  :
                    placement

        $tip
          .removeClass(orgPlacement)
          .addClass(placement)
      }

      var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight)

      this.applyPlacement(calculatedOffset, placement)
      this.hoverState = null

      var complete = function() {
        that.$element.trigger('shown.bs.' + that.type)
      }

      $.support.transition && this.$tip.hasClass('fade') ?
        $tip
          .one($.support.transition.end, complete)
          .emulateTransitionEnd(150) :
        complete()
    }
  }

  Tooltip.prototype.applyPlacement = function (offset, placement) {
    var replace
    var $tip   = this.tip()
    var width  = $tip[0].offsetWidth
    var height = $tip[0].offsetHeight

    // manually read margins because getBoundingClientRect includes difference
    var marginTop = parseInt($tip.css('margin-top'), 10)
    var marginLeft = parseInt($tip.css('margin-left'), 10)

    // we must check for NaN for ie 8/9
    if (isNaN(marginTop))  marginTop  = 0
    if (isNaN(marginLeft)) marginLeft = 0

    offset.top  = offset.top  + marginTop
    offset.left = offset.left + marginLeft

    // $.fn.offset doesn't round pixel values
    // so we use setOffset directly with our own function B-0
    $.offset.setOffset($tip[0], $.extend({
      using: function (props) {
        $tip.css({
          top: Math.round(props.top),
          left: Math.round(props.left)
        })
      }
    }, offset), 0)

    $tip.addClass('in')

    // check to see if placing tip in new offset caused the tip to resize itself
    var actualWidth  = $tip[0].offsetWidth
    var actualHeight = $tip[0].offsetHeight

    if (placement == 'top' && actualHeight != height) {
      replace = true
      offset.top = offset.top + height - actualHeight
    }

    if (/bottom|top/.test(placement)) {
      var delta = 0

      if (offset.left < 0) {
        delta       = offset.left * -2
        offset.left = 0

        $tip.offset(offset)

        actualWidth  = $tip[0].offsetWidth
        actualHeight = $tip[0].offsetHeight
      }

      this.replaceArrow(delta - width + actualWidth, actualWidth, 'left')
    } else {
      this.replaceArrow(actualHeight - height, actualHeight, 'top')
    }

    if (replace) $tip.offset(offset)
  }

  Tooltip.prototype.replaceArrow = function (delta, dimension, position) {
    this.arrow().css(position, delta ? (50 * (1 - delta / dimension) + '%!'(MISSING)) : '')
  }

  Tooltip.prototype.setContent = function () {
    var $tip  = this.tip()
    var title = this.getTitle()

    $tip.find('.tooltip-inner')[this.options.html ? 'html' : 'text'](title)
    $tip.removeClass('fade in top bottom left right')
  }

  Tooltip.prototype.hide = function () {
    var that = this
    var $tip = this.tip()
    var e    = $.Event('hide.bs.' + this.type)

    function complete() {
      if (that.hoverState != 'in') $tip.detach()
      that.$element.trigger('hidden.bs.' + that.type)
    }

    this.$element.trigger(e)

    if (e.isDefaultPrevented()) return

    $tip.removeClass('in')

    $.support.transition && this.$tip.hasClass('fade') ?
      $tip
        .one($.support.transition.end, complete)
        .emulateTransitionEnd(150) :
      complete()

    this.hoverState = null

    return this
  }

  Tooltip.prototype.fixTitle = function () {
    var $e = this.$element
    if ($e.attr('title') || typeof($e.attr('data-original-title')) != 'string') {
      $e.attr('data-original-title', $e.attr('title') || '').attr('title', '')
    }
  }

  Tooltip.prototype.hasContent = function () {
    return this.getTitle()
  }

  Tooltip.prototype.getPosition = function () {
    var el = this.$element[0]
    return $.extend({}, (typeof el.getBoundingClientRect == 'function') ? el.getBoundingClientRect() : {
      width: el.offsetWidth,
      height: el.offsetHeight
    }, this.$element.offset())
  }

  Tooltip.prototype.getCalculatedOffset = function (placement, pos, actualWidth, actualHeight) {
    return placement == 'bottom' ? { top: pos.top + pos.height,   left: pos.left + pos.width / 2 - actualWidth / 2  } :
           placement == 'top'    ? { top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2  } :
           placement == 'left'   ? { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth } :
        /* placement == 'right' */ { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width   }
  }

  Tooltip.prototype.getTitle = function () {
    var title
    var $e = this.$element
    var o  = this.options

    title = $e.attr('data-original-title')
      || (typeof o.title == 'function' ? o.title.call($e[0]) :  o.title)

    return title
  }

  Tooltip.prototype.tip = function () {
    return this.$tip = this.$tip || $(this.options.template)
  }

  Tooltip.prototype.arrow = function () {
    return this.$arrow = this.$arrow || this.tip().find('.tooltip-arrow')
  }

  Tooltip.prototype.validate = function () {
    if (!this.$element[0].parentNode) {
      this.hide()
      this.$element = null
      this.options  = null
    }
  }

  Tooltip.prototype.enable = function () {
    this.enabled = true
  }

  Tooltip.prototype.disable = function () {
    this.enabled = false
  }

  Tooltip.prototype.toggleEnabled = function () {
    this.enabled = !this.enabled
  }

  Tooltip.prototype.toggle = function (e) {
    var self = e ? $(e.currentTarget)[this.type](this.getDelegateOptions()).data('bs.' + this.type) : this
    self.tip().hasClass('in') ? self.leave(self) : self.enter(self)
  }

  Tooltip.prototype.destroy = function () {
    clearTimeout(this.timeout)
    this.hide().$element.off('.' + this.type).removeData('bs.' + this.type)
  }


  // TOOLTIP PLUGIN DEFINITION
  // =========================

  var old = $.fn.tooltip

  $.fn.tooltip = function (option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.tooltip')
      var options = typeof option == 'object' && option

      if (!data && option == 'destroy') return
      if (!data) $this.data('bs.tooltip', (data = new Tooltip(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  $.fn.tooltip.Constructor = Tooltip


  // TOOLTIP NO CONFLICT
  // ===================

  $.fn.tooltip.noConflict = function () {
    $.fn.tooltip = old
    return this
  }

}(jQuery);

/* ========================================================================
 * Bootstrap: popover.js v3.1.1
 * http://getbootstrap.com/javascript/#popovers
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // POPOVER PUBLIC CLASS DEFINITION
  // ===============================

  var Popover = function (element, options) {
    this.init('popover', element, options)
  }

  if (!$.fn.tooltip) throw new Error('Popover requires tooltip.js')

  Popover.DEFAULTS = $.extend({}, $.fn.tooltip.Constructor.DEFAULTS, {
    placement: 'right',
    trigger: 'click',
    content: '',
    template: '<div class="popover"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'
  })


  // NOTE: POPOVER EXTENDS tooltip.js
  // ================================

  Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype)

  Popover.prototype.constructor = Popover

  Popover.prototype.getDefaults = function () {
    return Popover.DEFAULTS
  }

  Popover.prototype.setContent = function () {
    var $tip    = this.tip()
    var title   = this.getTitle()
    var content = this.getContent()

    $tip.find('.popover-title')[this.options.html ? 'html' : 'text'](title)
    $tip.find('.popover-content')[ // we use append for html objects to maintain js events
      this.options.html ? (typeof content == 'string' ? 'html' : 'append') : 'text'
    ](content)

    $tip.removeClass('fade top bottom left right in')

    // IE8 doesn't accept hiding via the `:empty` pseudo selector, we have to do
    // this manually by checking the contents.
    if (!$tip.find('.popover-title').html()) $tip.find('.popover-title').hide()
  }

  Popover.prototype.hasContent = function () {
    return this.getTitle() || this.getContent()
  }

  Popover.prototype.getContent = function () {
    var $e = this.$element
    var o  = this.options

    return $e.attr('data-content')
      || (typeof o.content == 'function' ?
            o.content.call($e[0]) :
            o.content)
  }

  Popover.prototype.arrow = function () {
    return this.$arrow = this.$arrow || this.tip().find('.arrow')
  }

  Popover.prototype.tip = function () {
    if (!this.$tip) this.$tip = $(this.options.template)
    return this.$tip
  }


  // POPOVER PLUGIN DEFINITION
  // =========================

  var old = $.fn.popover

  $.fn.popover = function (option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.popover')
      var options = typeof option == 'object' && option

      if (!data && option == 'destroy') return
      if (!data) $this.data('bs.popover', (data = new Popover(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  $.fn.popover.Constructor = Popover


  // POPOVER NO CONFLICT
  // ===================

  $.fn.popover.noConflict = function () {
    $.fn.popover = old
    return this
  }

}(jQuery);

/* ========================================================================
 * Bootstrap: scrollspy.js v3.1.1
 * http://getbootstrap.com/javascript/#scrollspy
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // SCROLLSPY CLASS DEFINITION
  // ==========================

  function ScrollSpy(element, options) {
    var href
    var process  = $.proxy(this.process, this)

    this.$element       = $(element).is('body') ? $(window) : $(element)
    this.$body          = $('body')
    this.$scrollElement = this.$element.on('scroll.bs.scroll-spy.data-api', process)
    this.options        = $.extend({}, ScrollSpy.DEFAULTS, options)
    this.selector       = (this.options.target
      || ((href = $(element).attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '')) //strip for ie7
      || '') + ' .nav li > a'
    this.offsets        = $([])
    this.targets        = $([])
    this.activeTarget   = null

    this.refresh()
    this.process()
  }

  ScrollSpy.DEFAULTS = {
    offset: 10
  }

  ScrollSpy.prototype.refresh = function () {
    var offsetMethod = this.$element[0] == window ? 'offset' : 'position'

    this.offsets = $([])
    this.targets = $([])

    var self     = this
    var $targets = this.$body
      .find(this.selector)
      .map(function () {
        var $el   = $(this)
        var href  = $el.data('target') || $el.attr('href')
        var $href = /^#./.test(href) && $(href)

        return ($href
          && $href.length
          && $href.is(':visible')
          && [[ $href[offsetMethod]().top + (!$.isWindow(self.$scrollElement.get(0)) && self.$scrollElement.scrollTop()), href ]]) || null
      })
      .sort(function (a, b) { return a[0] - b[0] })
      .each(function () {
        self.offsets.push(this[0])
        self.targets.push(this[1])
      })
  }

  ScrollSpy.prototype.process = function () {
    var scrollTop    = this.$scrollElement.scrollTop() + this.options.offset
    var scrollHeight = this.$scrollElement[0].scrollHeight || this.$body[0].scrollHeight
    var maxScroll    = scrollHeight - this.$scrollElement.height()
    var offsets      = this.offsets
    var targets      = this.targets
    var activeTarget = this.activeTarget
    var i

    if (scrollTop >= maxScroll) {
      return activeTarget != (i = targets.last()[0]) && this.activate(i)
    }

    if (activeTarget && scrollTop <= offsets[0]) {
      return activeTarget != (i = targets[0]) && this.activate(i)
    }

    for (i = offsets.length; i--;) {
      activeTarget != targets[i]
        && scrollTop >= offsets[i]
        && (!offsets[i + 1] || scrollTop <= offsets[i + 1])
        && this.activate( targets[i] )
    }
  }

  ScrollSpy.prototype.activate = function (target) {
    this.activeTarget = target

    $(this.selector)
      .parentsUntil(this.options.target, '.active')
      .removeClass('active')

    var selector = this.selector +
        '[data-target="' + target + '"],' +
        this.selector + '[href="' + target + '"]'

    var active = $(selector)
      .parents('li')
      .addClass('active')

    if (active.parent('.dropdown-menu').length) {
      active = active
        .closest('li.dropdown')
        .addClass('active')
    }

    active.trigger('activate.bs.scrollspy')
  }


  // SCROLLSPY PLUGIN DEFINITION
  // ===========================

  var old = $.fn.scrollspy

  $.fn.scrollspy = function (option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.scrollspy')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.scrollspy', (data = new ScrollSpy(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  $.fn.scrollspy.Constructor = ScrollSpy


  // SCROLLSPY NO CONFLICT
  // =====================

  $.fn.scrollspy.noConflict = function () {
    $.fn.scrollspy = old
    return this
  }


  // SCROLLSPY DATA-API
  // ==================

  $(window).on('load', function () {
    $('[data-spy="scroll"]').each(function () {
      var $spy = $(this)
      $spy.scrollspy($spy.data())
    })
  })

}(jQuery);

/* ========================================================================
 * Bootstrap: tab.js v3.1.1
 * http://getbootstrap.com/javascript/#tabs
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // TAB CLASS DEFINITION
  // ====================

  var Tab = function (element) {
    this.element = $(element)
  }

  Tab.prototype.show = function () {
    var $this    = this.element
    var $ul      = $this.closest('ul:not(.dropdown-menu)')
    var selector = $this.data('target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') //strip for ie7
    }

    if ($this.parent('li').hasClass('active')) return

    var previous = $ul.find('.active:last a')[0]
    var e        = $.Event('show.bs.tab', {
      relatedTarget: previous
    })

    $this.trigger(e)

    if (e.isDefaultPrevented()) return

    var $target = $(selector)

    this.activate($this.parent('li'), $ul)
    this.activate($target, $target.parent(), function () {
      $this.trigger({
        type: 'shown.bs.tab',
        relatedTarget: previous
      })
    })
  }

  Tab.prototype.activate = function (element, container, callback) {
    var $active    = container.find('> .active')
    var transition = callback
      && $.support.transition
      && $active.hasClass('fade')

    function next() {
      $active
        .removeClass('active')
        .find('> .dropdown-menu > .active')
        .removeClass('active')

      element.addClass('active')

      if (transition) {
        element[0].offsetWidth // reflow for transition
        element.addClass('in')
      } else {
        element.removeClass('fade')
      }

      if (element.parent('.dropdown-menu')) {
        element.closest('li.dropdown').addClass('active')
      }

      callback && callback()
    }

    transition ?
      $active
        .one($.support.transition.end, next)
        .emulateTransitionEnd(150) :
      next()

    $active.removeClass('in')
  }


  // TAB PLUGIN DEFINITION
  // =====================

  var old = $.fn.tab

  $.fn.tab = function ( option ) {
    return this.each(function () {
      var $this = $(this)
      var data  = $this.data('bs.tab')

      if (!data) $this.data('bs.tab', (data = new Tab(this)))
      if (typeof option == 'string') data[option]()
    })
  }

  $.fn.tab.Constructor = Tab


  // TAB NO CONFLICT
  // ===============

  $.fn.tab.noConflict = function () {
    $.fn.tab = old
    return this
  }


  // TAB DATA-API
  // ============

  $(document).on('click.bs.tab.data-api', '[data-toggle="tab"], [data-toggle="pill"]', function (e) {
    e.preventDefault()
    $(this).tab('show')
  })

}(jQuery);

/* ========================================================================
 * Bootstrap: affix.js v3.1.1
 * http://getbootstrap.com/javascript/#affix
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // AFFIX CLASS DEFINITION
  // ======================

  var Affix = function (element, options) {
    this.options = $.extend({}, Affix.DEFAULTS, options)
    this.$window = $(window)
      .on('scroll.bs.affix.data-api', $.proxy(this.checkPosition, this))
      .on('click.bs.affix.data-api',  $.proxy(this.checkPositionWithEventLoop, this))

    this.$element     = $(element)
    this.affixed      =
    this.unpin        =
    this.pinnedOffset = null

    this.checkPosition()
  }

  Affix.RESET = 'affix affix-top affix-bottom'

  Affix.DEFAULTS = {
    offset: 0
  }

  Affix.prototype.getPinnedOffset = function () {
    if (this.pinnedOffset) return this.pinnedOffset
    this.$element.removeClass(Affix.RESET).addClass('affix')
    var scrollTop = this.$window.scrollTop()
    var position  = this.$element.offset()
    return (this.pinnedOffset = position.top - scrollTop)
  }

  Affix.prototype.checkPositionWithEventLoop = function () {
    setTimeout($.proxy(this.checkPosition, this), 1)
  }

  Affix.prototype.checkPosition = function () {
    if (!this.$element.is(':visible')) return

    var scrollHeight = $(document).height()
    var scrollTop    = this.$window.scrollTop()
    var position     = this.$element.offset()
    var offset       = this.options.offset
    var offsetTop    = offset.top
    var offsetBottom = offset.bottom

    if (this.affixed == 'top') position.top += scrollTop

    if (typeof offset != 'object')         offsetBottom = offsetTop = offset
    if (typeof offsetTop == 'function')    offsetTop    = offset.top(this.$element)
    if (typeof offsetBottom == 'function') offsetBottom = offset.bottom(this.$element)

    var affix = this.unpin   != null && (scrollTop + this.unpin <= position.top) ? false :
                offsetBottom != null && (position.top + this.$element.height() >= scrollHeight - offsetBottom) ? 'bottom' :
                offsetTop    != null && (scrollTop <= offsetTop) ? 'top' : false

    if (this.affixed === affix) return
    if (this.unpin) this.$element.css('top', '')

    var affixType = 'affix' + (affix ? '-' + affix : '')
    var e         = $.Event(affixType + '.bs.affix')

    this.$element.trigger(e)

    if (e.isDefaultPrevented()) return

    this.affixed = affix
    this.unpin = affix == 'bottom' ? this.getPinnedOffset() : null

    this.$element
      .removeClass(Affix.RESET)
      .addClass(affixType)
      .trigger($.Event(affixType.replace('affix', 'affixed')))

    if (affix == 'bottom') {
      this.$element.offset({ top: scrollHeight - offsetBottom - this.$element.height() })
    }
  }


  // AFFIX PLUGIN DEFINITION
  // =======================

  var old = $.fn.affix

  $.fn.affix = function (option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.affix')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.affix', (data = new Affix(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  $.fn.affix.Constructor = Affix


  // AFFIX NO CONFLICT
  // =================

  $.fn.affix.noConflict = function () {
    $.fn.affix = old
    return this
  }


  // AFFIX DATA-API
  // ==============

  $(window).on('load', function () {
    $('[data-spy="affix"]').each(function () {
      var $spy = $(this)
      var data = $spy.data()

      data.offset = data.offset || {}

      if (data.offsetBottom) data.offset.bottom = data.offsetBottom
      if (data.offsetTop)    data.offset.top    = data.offsetTop

      $spy.affix(data)
    })
  })

}(jQuery);

/* Pretty printing styles. Used with prettify.js. */
/* Customization from the prettify.css default style*/

/* SPAN elements with the classes below are added by prettyprint. */
.pln { color: #000 }  /* plain text */

@media screen {
  .str { color: #d14 }  /* string content */
  .kwd { color: #008;font-weight: bold; }  /* a keyword */
  .com { color: #11880d }  /* a comment */
  .typ { color: #900;font-weight: bold; }  /* a type name */
  .lit { color: #099 }  /* a literal value */
  /* punctuation, lisp open bracket, lisp close bracket */
  .pun, .opn, .clo { color: #0086B3 }
  .tag { color: #008 }  /* a markup tag name */
  .atn { color: #008080 }  /* a markup attribute name */
  .atv { color: #d14 }  /* a markup attribute value */
  .dec, .var { color: #606 }  /* a declaration; a variable name */
  .fun { color: red }  /* a function name */
}

/* Use higher contrast and text-weight for printable form. */
@media print, projection {
  .str { color: #060 }
  .kwd { color: #006; font-weight: bold }
  .com { color: #600; font-style: italic }
  .typ { color: #404; font-weight: bold }
  .lit { color: #044 }
  .pun, .opn, .clo { color: #440 }
  .tag { color: #006; font-weight: bold }
  .atn { color: #404 }
  .atv { color: #060 }
}

/* Put a border around prettyprinted code snippets. */
pre.prettyprint { padding: 2px; border: 1px solid #888 }

/* Specify class=linenums on a pre to get line numbering */
ol.linenums { margin-top: 0; margin-bottom: 0 } /* IE indents via margin-left */
li.L0,
li.L1,
li.L2,
li.L3,
li.L5,
li.L6,
li.L7,
li.L8 { list-style-type: none }
/* Alternate shading for lines */
li.L1,
li.L3,
li.L5,
li.L7,
li.L9 { background: #eee }
// Copyright (C) 2006 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


/**
 * @fileoverview
 * some functions for browser-side pretty printing of code contained in html.
 *
 * <p>
 * For a fairly comprehensive set of languages see the
 * <a href="http://google-code-prettify.googlecode.com/svn/trunk/README.html#langs">README</a>
 * file that came with this source.  At a minimum, the lexer should work on a
 * number of languages including C and friends, Java, Python, Bash, SQL, HTML,
 * XML, CSS, Javascript, and Makefiles.  It works passably on Ruby, PHP and Awk
 * and a subset of Perl, but, because of commenting conventions, doesn't work on
 * Smalltalk, Lisp-like, or CAML-like languages without an explicit lang class.
 * <p>
 * Usage: <ol>
 * <li> include this source file in an html page via
 *   {@code <script type="text/javascript" src="/path/to/prettify.js"></script>}
 * <li> define style rules.  See the example page for examples.
 * <li> mark the {@code <pre>} and {@code <code>} tags in your source with
 *    {@code class=prettyprint.}
 *    You can also use the (html deprecated) {@code <xmp>} tag, but the pretty
 *    printer needs to do more substantial DOM manipulations to support that, so
 *    some css styles may not be preserved.
 * </ol>
 * That's it.  I wanted to keep the API as simple as possible, so there's no
 * need to specify which language the code is in, but if you wish, you can add
 * another class to the {@code <pre>} or {@code <code>} element to specify the
 * language, as in {@code <pre class="prettyprint lang-java">}.  Any class that
 * starts with "lang-" followed by a file extension, specifies the file type.
 * See the "lang-*.js" files in this directory for code that implements
 * per-language file handlers.
 * <p>
 * Change log:<br>
 * cbeust, 2006/08/22
 * <blockquote>
 *   Java annotations (start with "@") are now captured as literals ("lit")
 * </blockquote>
 * @requires console
 */

// JSLint declarations
/*global console, document, navigator, setTimeout, window, define */

/**
 * Split {@code prettyPrint} into multiple timeouts so as not to interfere with
 * UI events.
 * If set to {@code false}, {@code prettyPrint()} is synchronous.
 */
window['PR_SHOULD_USE_CONTINUATION'] = true;

/**
 * Find all the {@code <pre>} and {@code <code>} tags in the DOM with
 * {@code class=prettyprint} and prettify them.
 *
 * @param {Function?} opt_whenDone if specified, called when the last entry
 *     has been finished.
 */
var prettyPrintOne;
/**
 * Pretty print a chunk of code.
 *
 * @param {string} sourceCodeHtml code as html
 * @return {string} code as html, but prettier
 */
var prettyPrint;


(function () {
  var win = window;
  // Keyword lists for various languages.
  // We use things that coerce to strings to make them compact when minified
  // and to defeat aggressive optimizers that fold large string constants.
  var FLOW_CONTROL_KEYWORDS = ["break,continue,do,else,for,if,return,while"];
  var C_KEYWORDS = [FLOW_CONTROL_KEYWORDS,"auto,case,char,const,default," + 
      "double,enum,extern,float,goto,int,long,register,short,signed,sizeof," +
      "static,struct,switch,typedef,union,unsigned,void,volatile"];
  var COMMON_KEYWORDS = [C_KEYWORDS,"catch,class,delete,false,import," +
      "new,operator,private,protected,public,this,throw,true,try,typeof"];
  var CPP_KEYWORDS = [COMMON_KEYWORDS,"alignof,align_union,asm,axiom,bool," +
      "concept,concept_map,const_cast,constexpr,decltype," +
      "dynamic_cast,explicit,export,friend,inline,late_check," +
      "mutable,namespace,nullptr,reinterpret_cast,static_assert,static_cast," +
      "template,typeid,typename,using,virtual,where"];
  var JAVA_KEYWORDS = [COMMON_KEYWORDS,
      "abstract,boolean,byte,extends,final,finally,implements,import," +
      "instanceof,null,native,package,strictfp,super,synchronized,throws," +
      "transient"];
  var CSHARP_KEYWORDS = [JAVA_KEYWORDS,
      "as,base,by,checked,decimal,delegate,descending,dynamic,event," +
      "fixed,foreach,from,group,implicit,in,interface,internal,into,is,let," +
      "lock,object,out,override,orderby,params,partial,readonly,ref,sbyte," +
      "sealed,stackalloc,string,select,uint,ulong,unchecked,unsafe,ushort," +
      "var,virtual,where"];
  var COFFEE_KEYWORDS = "all,and,by,catch,class,else,extends,false,finally," +
      "for,if,in,is,isnt,loop,new,no,not,null,of,off,on,or,return,super,then," +
      "throw,true,try,unless,until,when,while,yes";
  var JSCRIPT_KEYWORDS = [COMMON_KEYWORDS,
      "debugger,eval,export,function,get,null,set,undefined,var,with," +
      "Infinity,NaN"];
  var PERL_KEYWORDS = "caller,delete,die,do,dump,elsif,eval,exit,foreach,for," +
      "goto,if,import,last,local,my,next,no,our,print,package,redo,require," +
      "sub,undef,unless,until,use,wantarray,while,BEGIN,END";
  var PYTHON_KEYWORDS = [FLOW_CONTROL_KEYWORDS, "and,as,assert,class,def,del," +
      "elif,except,exec,finally,from,global,import,in,is,lambda," +
      "nonlocal,not,or,pass,print,raise,try,with,yield," +
      "False,True,None"];
  var RUBY_KEYWORDS = [FLOW_CONTROL_KEYWORDS, "alias,and,begin,case,class," +
      "def,defined,elsif,end,ensure,false,in,module,next,nil,not,or,redo," +
      "rescue,retry,self,super,then,true,undef,unless,until,when,yield," +
      "BEGIN,END"];
  var SH_KEYWORDS = [FLOW_CONTROL_KEYWORDS, "case,done,elif,esac,eval,fi," +
      "function,in,local,set,then,until"];
  var ALL_KEYWORDS = [
      CPP_KEYWORDS, CSHARP_KEYWORDS, JSCRIPT_KEYWORDS, PERL_KEYWORDS +
      PYTHON_KEYWORDS, RUBY_KEYWORDS, SH_KEYWORDS];
  var C_TYPES = /^(DIR|FILE|vector|(de|priority_)?queue|list|stack|(const_)?iterator|(multi)?(set|map)|bitset|u?(int|float)\d*)\b/;

  // token style names.  correspond to css classes
  /**
   * token style for a string literal
   * @const
   */
  var PR_STRING = 'str';
  /**
   * token style for a keyword
   * @const
   */
  var PR_KEYWORD = 'kwd';
  /**
   * token style for a comment
   * @const
   */
  var PR_COMMENT = 'com';
  /**
   * token style for a type
   * @const
   */
  var PR_TYPE = 'typ';
  /**
   * token style for a literal value.  e.g. 1, null, true.
   * @const
   */
  var PR_LITERAL = 'lit';
  /**
   * token style for a punctuation string.
   * @const
   */
  var PR_PUNCTUATION = 'pun';
  /**
   * token style for plain text.
   * @const
   */
  var PR_PLAIN = 'pln';

  /**
   * token style for an sgml tag.
   * @const
   */
  var PR_TAG = 'tag';
  /**
   * token style for a markup declaration such as a DOCTYPE.
   * @const
   */
  var PR_DECLARATION = 'dec';
  /**
   * token style for embedded source.
   * @const
   */
  var PR_SOURCE = 'src';
  /**
   * token style for an sgml attribute name.
   * @const
   */
  var PR_ATTRIB_NAME = 'atn';
  /**
   * token style for an sgml attribute value.
   * @const
   */
  var PR_ATTRIB_VALUE = 'atv';

  /**
   * A class that indicates a section of markup that is not code, e.g. to allow
   * embedding of line numbers within code listings.
   * @const
   */
  var PR_NOCODE = 'nocode';



/**
 * A set of tokens that can precede a regular expression literal in
 * javascript
 * http://web.archive.org/web/20070717142515/http://www.mozilla.org/js/language/js20/rationale/syntax.html
 * has the full list, but I've removed ones that might be problematic when
 * seen in languages that don't support regular expression literals.
 *
 * <p>Specifically, I've removed any keywords that can't precede a regexp
 * literal in a syntactically legal javascript program, and I've removed the
 * "in" keyword since it's not a keyword in many languages, and might be used
 * as a count of inches.
 *
 * <p>The link above does not accurately describe EcmaScript rules since
 * it fails to distinguish between (a=++/b/i) and (a++/b/i) but it works
 * very well in practice.
 *
 * @private
 * @const
 */
var REGEXP_PRECEDER_PATTERN = '(?:^^\\.?|[+-]|[!=]=?=?|\\#|%!=(MISSING)?|&&?=?|\\(|\\*=?|[+\\-]=|->|\\/=?|::?|<<?=?|>>?>?=?|,|;|\\?|@|\\[|~|{|\\^\\^?=?|\\|\\|?=?|break|case|continue|delete|do|else|finally|instanceof|return|throw|try|typeof)\\s*';

// CAVEAT: this does not properly handle the case where a regular
// expression immediately follows another since a regular expression may
// have flags for case-sensitivity and the like.  Having regexp tokens
// adjacent is not valid in any language I'm aware of, so I'm punting.
// TODO: maybe style special characters inside a regexp as punctuation.


  /**
   * Given a group of {@link RegExp}s, returns a {@code RegExp} that globally
   * matches the union of the sets of strings matched by the input RegExp.
   * Since it matches globally, if the input strings have a start-of-input
   * anchor (/^.../), it is ignored for the purposes of unioning.
   * @param {Array.<RegExp>} regexs non multiline, non-global regexs.
   * @return {RegExp} a global regex.
   */
  function combinePrefixPatterns(regexs) {
    var capturedGroupIndex = 0;
  
    var needToFoldCase = false;
    var ignoreCase = false;
    for (var i = 0, n = regexs.length; i < n; ++i) {
      var regex = regexs[i];
      if (regex.ignoreCase) {
        ignoreCase = true;
      } else if (/[a-z]/i.test(regex.source.replace(
                     /\\u[0-9a-f]{4}|\\x[0-9a-f]{2}|\\[^ux]/gi, ''))) {
        needToFoldCase = true;
        ignoreCase = false;
        break;
      }
    }
  
    var escapeCharToCodeUnit = {
      'b': 8,
      't': 9,
      'n': 0xa,
      'v': 0xb,
      'f': 0xc,
      'r': 0xd
    };
  
    function decodeEscape(charsetPart) {
      var cc0 = charsetPart.charCodeAt(0);
      if (cc0 !== 92 /* \\ */) {
        return cc0;
      }
      var c1 = charsetPart.charAt(1);
      cc0 = escapeCharToCodeUnit[c1];
      if (cc0) {
        return cc0;
      } else if ('0' <= c1 && c1 <= '7') {
        return parseInt(charsetPart.substring(1), 8);
      } else if (c1 === 'u' || c1 === 'x') {
        return parseInt(charsetPart.substring(2), 16);
      } else {
        return charsetPart.charCodeAt(1);
      }
    }
  
    function encodeEscape(charCode) {
      if (charCode < 0x20) {
        return (charCode < 0x10 ? '\\x0' : '\\x') + charCode.toString(16);
      }
      var ch = String.fromCharCode(charCode);
      return (ch === '\\' || ch === '-' || ch === ']' || ch === '^')
          ? "\\" + ch : ch;
    }
  
    function caseFoldCharset(charSet) {
      var charsetParts = charSet.substring(1, charSet.length - 1).match(
          new RegExp(
              '\\\\u[0-9A-Fa-f]{4}'
              + '|\\\\x[0-9A-Fa-f]{2}'
              + '|\\\\[0-3][0-7]{0,2}'
              + '|\\\\[0-7]{1,2}'
              + '|\\\\[\\s\\S]'
              + '|-'
              + '|[^-\\\\]',
              'g'));
      var ranges = [];
      var inverse = charsetParts[0] === '^';
  
      var out = ['['];
      if (inverse) { out.push('^'); }
  
      for (var i = inverse ? 1 : 0, n = charsetParts.length; i < n; ++i) {
        var p = charsetParts[i];
        if (/\\[bdsw]/i.test(p)) {  // Don't muck with named groups.
          out.push(p);
        } else {
          var start = decodeEscape(p);
          var end;
          if (i + 2 < n && '-' === charsetParts[i + 1]) {
            end = decodeEscape(charsetParts[i + 2]);
            i += 2;
          } else {
            end = start;
          }
          ranges.push([start, end]);
          // If the range might intersect letters, then expand it.
          // This case handling is too simplistic.
          // It does not deal with non-latin case folding.
          // It works for latin source code identifiers though.
          if (!(end < 65 || start > 122)) {
            if (!(end < 65 || start > 90)) {
              ranges.push([Math.max(65, start) | 32, Math.min(end, 90) | 32]);
            }
            if (!(end < 97 || start > 122)) {
              ranges.push([Math.max(97, start) & ~32, Math.min(end, 122) & ~32]);
            }
          }
        }
      }
  
      // [[1, 10], [3, 4], [8, 12], [14, 14], [16, 16], [17, 17]]
      // -> [[1, 12], [14, 14], [16, 17]]
      ranges.sort(function (a, b) { return (a[0] - b[0]) || (b[1]  - a[1]); });
      var consolidatedRanges = [];
      var lastRange = [];
      for (var i = 0; i < ranges.length; ++i) {
        var range = ranges[i];
        if (range[0] <= lastRange[1] + 1) {
          lastRange[1] = Math.max(lastRange[1], range[1]);
        } else {
          consolidatedRanges.push(lastRange = range);
        }
      }
  
      for (var i = 0; i < consolidatedRanges.length; ++i) {
        var range = consolidatedRanges[i];
        out.push(encodeEscape(range[0]));
        if (range[1] > range[0]) {
          if (range[1] + 1 > range[0]) { out.push('-'); }
          out.push(encodeEscape(range[1]));
        }
      }
      out.push(']');
      return out.join('');
    }
  
    function allowAnywhereFoldCaseAndRenumberGroups(regex) {
      // Split into character sets, escape sequences, punctuation strings
      // like ('(', '(?:', ')', '^'), and runs of characters that do not
      // include any of the above.
      var parts = regex.source.match(
          new RegExp(
              '(?:'
              + '\\[(?:[^\\x5C\\x5D]|\\\\[\\s\\S])*\\]'  // a character set
              + '|\\\\u[A-Fa-f0-9]{4}'  // a unicode escape
              + '|\\\\x[A-Fa-f0-9]{2}'  // a hex escape
              + '|\\\\[0-9]+'  // a back-reference or octal escape
              + '|\\\\[^ux0-9]'  // other escape sequence
              + '|\\(\\?[:!=]'  // start of a non-capturing group
              + '|[\\(\\)\\^]'  // start/end of a group, or line start
              + '|[^\\x5B\\x5C\\(\\)\\^]+'  // run of other characters
              + ')',
              'g'));
      var n = parts.length;
  
      // Maps captured group numbers to the number they will occupy in
      // the output or to -1 if that has not been determined, or to
      // undefined if they need not be capturing in the output.
      var capturedGroups = [];
  
      // Walk over and identify back references to build the capturedGroups
      // mapping.
      for (var i = 0, groupIndex = 0; i < n; ++i) {
        var p = parts[i];
        if (p === '(') {
          // groups are 1-indexed, so max group index is count of '('
          ++groupIndex;
        } else if ('\\' === p.charAt(0)) {
          var decimalValue = +p.substring(1);
          if (decimalValue) {
            if (decimalValue <= groupIndex) {
              capturedGroups[decimalValue] = -1;
            } else {
              // Replace with an unambiguous escape sequence so that
              // an octal escape sequence does not turn into a backreference
              // to a capturing group from an earlier regex.
              parts[i] = encodeEscape(decimalValue);
            }
          }
        }
      }
  
      // Renumber groups and reduce capturing groups to non-capturing groups
      // where possible.
      for (var i = 1; i < capturedGroups.length; ++i) {
        if (-1 === capturedGroups[i]) {
          capturedGroups[i] = ++capturedGroupIndex;
        }
      }
      for (var i = 0, groupIndex = 0; i < n; ++i) {
        var p = parts[i];
        if (p === '(') {
          ++groupIndex;
          if (!capturedGroups[groupIndex]) {
            parts[i] = '(?:';
          }
        } else if ('\\' === p.charAt(0)) {
          var decimalValue = +p.substring(1);
          if (decimalValue && decimalValue <= groupIndex) {
            parts[i] = '\\' + capturedGroups[decimalValue];
          }
        }
      }
  
      // Remove any prefix anchors so that the output will match anywhere.
      // ^^ really does mean an anchored match though.
      for (var i = 0; i < n; ++i) {
        if ('^' === parts[i] && '^' !== parts[i + 1]) { parts[i] = ''; }
      }
  
      // Expand letters to groups to handle mixing of case-sensitive and
      // case-insensitive patterns if necessary.
      if (regex.ignoreCase && needToFoldCase) {
        for (var i = 0; i < n; ++i) {
          var p = parts[i];
          var ch0 = p.charAt(0);
          if (p.length >= 2 && ch0 === '[') {
            parts[i] = caseFoldCharset(p);
          } else if (ch0 !== '\\') {
            // TODO: handle letters in numeric escapes.
            parts[i] = p.replace(
                /[a-zA-Z]/g,
                function (ch) {
                  var cc = ch.charCodeAt(0);
                  return '[' + String.fromCharCode(cc & ~32, cc | 32) + ']';
                });
          }
        }
      }
  
      return parts.join('');
    }
  
    var rewritten = [];
    for (var i = 0, n = regexs.length; i < n; ++i) {
      var regex = regexs[i];
      if (regex.global || regex.multiline) { throw new Error('' + regex); }
      rewritten.push(
          '(?:' + allowAnywhereFoldCaseAndRenumberGroups(regex) + ')');
    }
  
    return new RegExp(rewritten.join('|'), ignoreCase ? 'gi' : 'g');
  }


  /**
   * Split markup into a string of source code and an array mapping ranges in
   * that string to the text nodes in which they appear.
   *
   * <p>
   * The HTML DOM structure:</p>
   * <pre>
   * (Element   "p"
   *   (Element "b"
   *     (Text  "print "))       ; #1
   *   (Text    "'Hello '")      ; #2
   *   (Element "br")            ; #3
   *   (Text    "  + 'World';")) ; #4
   * </pre>
   * <p>
   * corresponds to the HTML
   * {@code <p><b>print </b>'Hello '<br>  + 'World';</p>}.</p>
   *
   * <p>
   * It will produce the output:</p>
   * <pre>
   * {
   *   sourceCode: "print 'Hello '\n  + 'World';",
   *   //                     1          2
   *   //           012345678901234 5678901234567
   *   spans: [0, #1, 6, #2, 14, #3, 15, #4]
   * }
   * </pre>
   * <p>
   * where #1 is a reference to the {@code "print "} text node above, and so
   * on for the other text nodes.
   * </p>
   *
   * <p>
   * The {@code} spans array is an array of pairs.  Even elements are the start
   * indices of substrings, and odd elements are the text nodes (or BR elements)
   * that contain the text for those substrings.
   * Substrings continue until the next index or the end of the source.
   * </p>
   *
   * @param {Node} node an HTML DOM subtree containing source-code.
   * @param {boolean} isPreformatted true if white-space in text nodes should
   *    be considered significant.
   * @return {Object} source code and the text nodes in which they occur.
   */
  function extractSourceSpans(node, isPreformatted) {
    var nocode = /(?:^|\s)nocode(?:\s|$)/;
  
    var chunks = [];
    var length = 0;
    var spans = [];
    var k = 0;
  
    function walk(node) {
      switch (node.nodeType) {
        case 1:  // Element
          if (nocode.test(node.className)) { return; }
          for (var child = node.firstChild; child; child = child.nextSibling) {
            walk(child);
          }
          var nodeName = node.nodeName.toLowerCase();
          if ('br' === nodeName || 'li' === nodeName) {
            chunks[k] = '\n';
            spans[k << 1] = length++;
            spans[(k++ << 1) | 1] = node;
          }
          break;
        case 3: case 4:  // Text
          var text = node.nodeValue;
          if (text.length) {
            if (!isPreformatted) {
              text = text.replace(/[ \t\r\n]+/g, ' ');
            } else {
              text = text.replace(/\r\n?/g, '\n');  // Normalize newlines.
            }
            // TODO: handle tabs here?
            chunks[k] = text;
            spans[k << 1] = length;
            length += text.length;
            spans[(k++ << 1) | 1] = node;
          }
          break;
      }
    }
  
    walk(node);
  
    return {
      sourceCode: chunks.join('').replace(/\n$/, ''),
      spans: spans
    };
  }


  /**
   * Apply the given language handler to sourceCode and add the resulting
   * decorations to out.
   * @param {number} basePos the index of sourceCode within the chunk of source
   *    whose decorations are already present on out.
   */
  function appendDecorations(basePos, sourceCode, langHandler, out) {
    if (!sourceCode) { return; }
    var job = {
      sourceCode: sourceCode,
      basePos: basePos
    };
    langHandler(job);
    out.push.apply(out, job.decorations);
  }

  var notWs = /\S/;

  /**
   * Given an element, if it contains only one child element and any text nodes
   * it contains contain only space characters, return the sole child element.
   * Otherwise returns undefined.
   * <p>
   * This is meant to return the CODE element in {@code <pre><code ...>} when
   * there is a single child element that contains all the non-space textual
   * content, but not to return anything where there are multiple child elements
   * as in {@code <pre><code>...</code><code>...</code></pre>} or when there
   * is textual content.
   */
  function childContentWrapper(element) {
    var wrapper = undefined;
    for (var c = element.firstChild; c; c = c.nextSibling) {
      var type = c.nodeType;
      wrapper = (type === 1)  // Element Node
          ? (wrapper ? element : c)
          : (type === 3)  // Text Node
          ? (notWs.test(c.nodeValue) ? element : wrapper)
          : wrapper;
    }
    return wrapper === element ? undefined : wrapper;
  }

  /** Given triples of [style, pattern, context] returns a lexing function,
    * The lexing function interprets the patterns to find token boundaries and
    * returns a decoration list of the form
    * [index_0, style_0, index_1, style_1, ..., index_n, style_n]
    * where index_n is an index into the sourceCode, and style_n is a style
    * constant like PR_PLAIN.  index_n-1 <= index_n, and style_n-1 applies to
    * all characters in sourceCode[index_n-1:index_n].
    *
    * The stylePatterns is a list whose elements have the form
    * [style : string, pattern : RegExp, DEPRECATED, shortcut : string].
    *
    * Style is a style constant like PR_PLAIN, or can be a string of the
    * form 'lang-FOO', where FOO is a language extension describing the
    * language of the portion of the token in $1 after pattern executes.
    * E.g., if style is 'lang-lisp', and group 1 contains the text
    * '(hello (world))', then that portion of the token will be passed to the
    * registered lisp handler for formatting.
    * The text before and after group 1 will be restyled using this decorator
    * so decorators should take care that this doesn't result in infinite
    * recursion.  For example, the HTML lexer rule for SCRIPT elements looks
    * something like ['lang-js', /<[s]cript>(.+?)<\/script>/].  This may match
    * '<script>foo()<\/script>', which would cause the current decorator to
    * be called with '<script>' which would not match the same rule since
    * group 1 must not be empty, so it would be instead styled as PR_TAG by
    * the generic tag rule.  The handler registered for the 'js' extension would
    * then be called with 'foo()', and finally, the current decorator would
    * be called with '<\/script>' which would not match the original rule and
    * so the generic tag rule would identify it as a tag.
    *
    * Pattern must only match prefixes, and if it matches a prefix, then that
    * match is considered a token with the same style.
    *
    * Context is applied to the last non-whitespace, non-comment token
    * recognized.
    *
    * Shortcut is an optional string of characters, any of which, if the first
    * character, gurantee that this pattern and only this pattern matches.
    *
    * @param {Array} shortcutStylePatterns patterns that always start with
    *   a known character.  Must have a shortcut string.
    * @param {Array} fallthroughStylePatterns patterns that will be tried in
    *   order if the shortcut ones fail.  May have shortcuts.
    *
    * @return {function (Object)} a
    *   function that takes source code and returns a list of decorations.
    */
  function createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns) {
    var shortcuts = {};
    var tokenizer;
    (function () {
      var allPatterns = shortcutStylePatterns.concat(fallthroughStylePatterns);
      var allRegexs = [];
      var regexKeys = {};
      for (var i = 0, n = allPatterns.length; i < n; ++i) {
        var patternParts = allPatterns[i];
        var shortcutChars = patternParts[3];
        if (shortcutChars) {
          for (var c = shortcutChars.length; --c >= 0;) {
            shortcuts[shortcutChars.charAt(c)] = patternParts;
          }
        }
        var regex = patternParts[1];
        var k = '' + regex;
        if (!regexKeys.hasOwnProperty(k)) {
          allRegexs.push(regex);
          regexKeys[k] = null;
        }
      }
      allRegexs.push(/[\0-\uffff]/);
      tokenizer = combinePrefixPatterns(allRegexs);
    })();

    var nPatterns = fallthroughStylePatterns.length;

    /**
     * Lexes job.sourceCode and produces an output array job.decorations of
     * style classes preceded by the position at which they start in
     * job.sourceCode in order.
     *
     * @param {Object} job an object like <pre>{
     *    sourceCode: {string} sourceText plain text,
     *    basePos: {int} position of job.sourceCode in the larger chunk of
     *        sourceCode.
     * }</pre>
     */
    var decorate = function (job) {
      var sourceCode = job.sourceCode, basePos = job.basePos;
      /** Even entries are positions in source in ascending order.  Odd enties
        * are style markers (e.g., PR_COMMENT) that run from that position until
        * the end.
        * @type {Array.<number|string>}
        */
      var decorations = [basePos, PR_PLAIN];
      var pos = 0;  // index into sourceCode
      var tokens = sourceCode.match(tokenizer) || [];
      var styleCache = {};

      for (var ti = 0, nTokens = tokens.length; ti < nTokens; ++ti) {
        var token = tokens[ti];
        var style = styleCache[token];
        var match = void 0;

        var isEmbedded;
        if (typeof style === 'string') {
          isEmbedded = false;
        } else {
          var patternParts = shortcuts[token.charAt(0)];
          if (patternParts) {
            match = token.match(patternParts[1]);
            style = patternParts[0];
          } else {
            for (var i = 0; i < nPatterns; ++i) {
              patternParts = fallthroughStylePatterns[i];
              match = token.match(patternParts[1]);
              if (match) {
                style = patternParts[0];
                break;
              }
            }

            if (!match) {  // make sure that we make progress
              style = PR_PLAIN;
            }
          }

          isEmbedded = style.length >= 5 && 'lang-' === style.substring(0, 5);
          if (isEmbedded && !(match && typeof match[1] === 'string')) {
            isEmbedded = false;
            style = PR_SOURCE;
          }

          if (!isEmbedded) { styleCache[token] = style; }
        }

        var tokenStart = pos;
        pos += token.length;

        if (!isEmbedded) {
          decorations.push(basePos + tokenStart, style);
        } else {  // Treat group 1 as an embedded block of source code.
          var embeddedSource = match[1];
          var embeddedSourceStart = token.indexOf(embeddedSource);
          var embeddedSourceEnd = embeddedSourceStart + embeddedSource.length;
          if (match[2]) {
            // If embeddedSource can be blank, then it would match at the
            // beginning which would cause us to infinitely recurse on the
            // entire token, so we catch the right context in match[2].
            embeddedSourceEnd = token.length - match[2].length;
            embeddedSourceStart = embeddedSourceEnd - embeddedSource.length;
          }
          var lang = style.substring(5);
          // Decorate the left of the embedded source
          appendDecorations(
              basePos + tokenStart,
              token.substring(0, embeddedSourceStart),
              decorate, decorations);
          // Decorate the embedded source
          appendDecorations(
              basePos + tokenStart + embeddedSourceStart,
              embeddedSource,
              langHandlerForExtension(lang, embeddedSource),
              decorations);
          // Decorate the right of the embedded section
          appendDecorations(
              basePos + tokenStart + embeddedSourceEnd,
              token.substring(embeddedSourceEnd),
              decorate, decorations);
        }
      }
      job.decorations = decorations;
    };
    return decorate;
  }

  /** returns a function that produces a list of decorations from source text.
    *
    * This code treats ", ', and ` as string delimiters, and \ as a string
    * escape.  It does not recognize perl's qq() style strings.
    * It has no special handling for double delimiter escapes as in basic, or
    * the tripled delimiters used in python, but should work on those regardless
    * although in those cases a single string literal may be broken up into
    * multiple adjacent string literals.
    *
    * It recognizes C, C++, and shell style comments.
    *
    * @param {Object} options a set of optional parameters.
    * @return {function (Object)} a function that examines the source code
    *     in the input job and builds the decoration list.
    */
  function sourceDecorator(options) {
    var shortcutStylePatterns = [], fallthroughStylePatterns = [];
    if (options['tripleQuotedStrings']) {
      // '''multi-line-string''', 'single-line-string', and double-quoted
      shortcutStylePatterns.push(
          [PR_STRING,  /^(?:\'\'\'(?:[^\'\\]|\\[\s\S]|\'{1,2}(?=[^\']))*(?:\'\'\'|$)|\"\"\"(?:[^\"\\]|\\[\s\S]|\"{1,2}(?=[^\"]))*(?:\"\"\"|$)|\'(?:[^\\\']|\\[\s\S])*(?:\'|$)|\"(?:[^\\\"]|\\[\s\S])*(?:\"|$))/,
           null, '\'"']);
    } else if (options['multiLineStrings']) {
      // 'multi-line-string', "multi-line-string"
      shortcutStylePatterns.push(
          [PR_STRING,  /^(?:\'(?:[^\\\']|\\[\s\S])*(?:\'|$)|\"(?:[^\\\"]|\\[\s\S])*(?:\"|$)|\`(?:[^\\\`]|\\[\s\S])*(?:\`|$))/,
           null, '\'"`']);
    } else {
      // 'single-line-string', "single-line-string"
      shortcutStylePatterns.push(
          [PR_STRING,
           /^(?:\'(?:[^\\\'\r\n]|\\.)*(?:\'|$)|\"(?:[^\\\"\r\n]|\\.)*(?:\"|$))/,
           null, '"\'']);
    }
    if (options['verbatimStrings']) {
      // verbatim-string-literal production from the C# grammar.  See issue 93.
      fallthroughStylePatterns.push(
          [PR_STRING, /^@\"(?:[^\"]|\"\")*(?:\"|$)/, null]);
    }
    var hc = options['hashComments'];
    if (hc) {
      if (options['cStyleComments']) {
        if (hc > 1) {  // multiline hash comments
          shortcutStylePatterns.push(
              [PR_COMMENT, /^#(?:##(?:[^#]|#(?!##))*(?:###|$)|.*)/, null, '#']);
        } else {
          // Stop C preprocessor declarations at an unclosed open comment
          shortcutStylePatterns.push(
              [PR_COMMENT, /^#(?:(?:define|e(?:l|nd)if|else|error|ifn?def|include|line|pragma|undef|warning)\b|[^\r\n]*)/,
               null, '#']);
        }
        // #include <stdio.h>
        fallthroughStylePatterns.push(
            [PR_STRING,
             /^<(?:(?:(?:\.\.\/)*|\/?)(?:[\w-]+(?:\/[\w-]+)+)?[\w-]+\.h(?:h|pp|\+\+)?|[a-z]\w*)>/,
             null]);
      } else {
        shortcutStylePatterns.push([PR_COMMENT, /^#[^\r\n]*/, null, '#']);
      }
    }
    if (options['cStyleComments']) {
      fallthroughStylePatterns.push([PR_COMMENT, /^\/\/[^\r\n]*/, null]);
      fallthroughStylePatterns.push(
          [PR_COMMENT, /^\/\*[\s\S]*?(?:\*\/|$)/, null]);
    }
    if (options['regexLiterals']) {
      /**
       * @const
       */
      var REGEX_LITERAL = (
          // A regular expression literal starts with a slash that is
          // not followed by * or / so that it is not confused with
          // comments.
          '/(?=[^/*])'
          // and then contains any number of raw characters,
          + '(?:[^/\\x5B\\x5C]'
          // escape sequences (\x5C),
          +    '|\\x5C[\\s\\S]'
          // or non-nesting character sets (\x5B\x5D);
          +    '|\\x5B(?:[^\\x5C\\x5D]|\\x5C[\\s\\S])*(?:\\x5D|$))+'
          // finally closed by a /.
          + '/');
      fallthroughStylePatterns.push(
          ['lang-regex',
           new RegExp('^' + REGEXP_PRECEDER_PATTERN + '(' + REGEX_LITERAL + ')')
           ]);
    }

    var types = options['types'];
    if (types) {
      fallthroughStylePatterns.push([PR_TYPE, types]);
    }

    var keywords = ("" + options['keywords']).replace(/^ | $/g, '');
    if (keywords.length) {
      fallthroughStylePatterns.push(
          [PR_KEYWORD,
           new RegExp('^(?:' + keywords.replace(/[\s,]+/g, '|') + ')\\b'),
           null]);
    }

    shortcutStylePatterns.push([PR_PLAIN,       /^\s+/, null, ' \r\n\t\xA0']);

    var punctuation =
      // The Bash man page says

      // A word is a sequence of characters considered as a single
      // unit by GRUB. Words are separated by metacharacters,
      // which are the following plus space, tab, and newline: { }
      // | & $ ; < >
      // ...
      
      // A word beginning with # causes that word and all remaining
      // characters on that line to be ignored.

      // which means that only a '#' after /(?:^|[{}|&$;<>\s])/ starts a
      // comment but empirically
      // $ echo {#}
      // {#}
      // $ echo \$#
      // $#
      // $ echo }#
      // }#

      // so /(?:^|[|&;<>\s])/ is more appropriate.

      // http://gcc.gnu.org/onlinedocs/gcc-2.95.3/cpp_1.html#SEC3
      // suggests that this definition is compatible with a
      // default mode that tries to use a single token definition
      // to recognize both bash/python style comments and C
      // preprocessor directives.

      // This definition of punctuation does not include # in the list of
      // follow-on exclusions, so # will not be broken before if preceeded
      // by a punctuation character.  We could try to exclude # after
      // [|&;<>] but that doesn't seem to cause many major problems.
      // If that does turn out to be a problem, we should change the below
      // when hc is truthy to include # in the run of punctuation characters
      // only when not followint [|&;<>].
      /^.[^\s\w\.$@\'\"\`\/\\]*/;

    fallthroughStylePatterns.push(
        // TODO(mikesamuel): recognize non-latin letters and numerals in idents
        [PR_LITERAL,     /^@[a-z_$][a-z_$@0-9]*/i, null],
        [PR_TYPE,        /^(?:[@_]?[A-Z]+[a-z][A-Za-z_$@0-9]*|\w+_t\b)/, null],
        [PR_PLAIN,       /^[a-z_$][a-z_$@0-9]*/i, null],
        [PR_LITERAL,
         new RegExp(
             '^(?:'
             // A hex number
             + '0x[a-f0-9]+'
             // or an octal or decimal number,
             + '|(?:\\d(?:_\\d+)*\\d*(?:\\.\\d*)?|\\.\\d\\+)'
             // possibly in scientific notation
             + '(?:e[+\\-]?\\d+)?'
             + ')'
             // with an optional modifier like UL for unsigned long
             + '[a-z]*', 'i'),
         null, '0123456789'],
        // Don't treat escaped quotes in bash as starting strings.  See issue 144.
        [PR_PLAIN,       /^\\[\s\S]?/, null],
        [PR_PUNCTUATION, punctuation, null]);

    return createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns);
  }

  var decorateSource = sourceDecorator({
        'keywords': ALL_KEYWORDS,
        'hashComments': true,
        'cStyleComments': true,
        'multiLineStrings': true,
        'regexLiterals': true
      });

  /**
   * Given a DOM subtree, wraps it in a list, and puts each line into its own
   * list item.
   *
   * @param {Node} node modified in place.  Its content is pulled into an
   *     HTMLOListElement, and each line is moved into a separate list item.
   *     This requires cloning elements, so the input might not have unique
   *     IDs after numbering.
   * @param {boolean} isPreformatted true iff white-space in text nodes should
   *     be treated as significant.
   */
  function numberLines(node, opt_startLineNum, isPreformatted) {
    var nocode = /(?:^|\s)nocode(?:\s|$)/;
    var lineBreak = /\r\n?|\n/;
  
    var document = node.ownerDocument;
  
    var li = document.createElement('li');
    while (node.firstChild) {
      li.appendChild(node.firstChild);
    }
    // An array of lines.  We split below, so this is initialized to one
    // un-split line.
    var listItems = [li];
  
    function walk(node) {
      switch (node.nodeType) {
        case 1:  // Element
          if (nocode.test(node.className)) { break; }
          if ('br' === node.nodeName) {
            breakAfter(node);
            // Discard the <BR> since it is now flush against a </LI>.
            if (node.parentNode) {
              node.parentNode.removeChild(node);
            }
          } else {
            for (var child = node.firstChild; child; child = child.nextSibling) {
              walk(child);
            }
          }
          break;
        case 3: case 4:  // Text
          if (isPreformatted) {
            var text = node.nodeValue;
            var match = text.match(lineBreak);
            if (match) {
              var firstLine = text.substring(0, match.index);
              node.nodeValue = firstLine;
              var tail = text.substring(match.index + match[0].length);
              if (tail) {
                var parent = node.parentNode;
                parent.insertBefore(
                    document.createTextNode(tail), node.nextSibling);
              }
              breakAfter(node);
              if (!firstLine) {
                // Don't leave blank text nodes in the DOM.
                node.parentNode.removeChild(node);
              }
            }
          }
          break;
      }
    }
  
    // Split a line after the given node.
    function breakAfter(lineEndNode) {
      // If there's nothing to the right, then we can skip ending the line
      // here, and move root-wards since splitting just before an end-tag
      // would require us to create a bunch of empty copies.
      while (!lineEndNode.nextSibling) {
        lineEndNode = lineEndNode.parentNode;
        if (!lineEndNode) { return; }
      }
  
      function breakLeftOf(limit, copy) {
        // Clone shallowly if this node needs to be on both sides of the break.
        var rightSide = copy ? limit.cloneNode(false) : limit;
        var parent = limit.parentNode;
        if (parent) {
          // We clone the parent chain.
          // This helps us resurrect important styling elements that cross lines.
          // E.g. in <i>Foo<br>Bar</i>
          // should be rewritten to <li><i>Foo</i></li><li><i>Bar</i></li>.
          var parentClone = breakLeftOf(parent, 1);
          // Move the clone and everything to the right of the original
          // onto the cloned parent.
          var next = limit.nextSibling;
          parentClone.appendChild(rightSide);
          for (var sibling = next; sibling; sibling = next) {
            next = sibling.nextSibling;
            parentClone.appendChild(sibling);
          }
        }
        return rightSide;
      }
  
      var copiedListItem = breakLeftOf(lineEndNode.nextSibling, 0);
  
      // Walk the parent chain until we reach an unattached LI.
      for (var parent;
           // Check nodeType since IE invents document fragments.
           (parent = copiedListItem.parentNode) && parent.nodeType === 1;) {
        copiedListItem = parent;
      }
      // Put it on the list of lines for later processing.
      listItems.push(copiedListItem);
    }
  
    // Split lines while there are lines left to split.
    for (var i = 0;  // Number of lines that have been split so far.
         i < listItems.length;  // length updated by breakAfter calls.
         ++i) {
      walk(listItems[i]);
    }
  
    // Make sure numeric indices show correctly.
    if (opt_startLineNum === (opt_startLineNum|0)) {
      listItems[0].setAttribute('value', opt_startLineNum);
    }
  
    var ol = document.createElement('ol');
    ol.className = 'linenums';
    var offset = Math.max(0, ((opt_startLineNum - 1 /* zero index */)) | 0) || 0;
    for (var i = 0, n = listItems.length; i < n; ++i) {
      li = listItems[i];
      // Stick a class on the LIs so that stylesheets can
      // color odd/even rows, or any other row pattern that
      // is co-prime with 10.
      li.className = 'L' + ((i + offset) %!)(MISSING);
      if (!li.firstChild) {
        li.appendChild(document.createTextNode('\xA0'));
      }
      ol.appendChild(li);
    }
  
    node.appendChild(ol);
  }

  /**
   * Breaks {@code job.sourceCode} around style boundaries in
   * {@code job.decorations} and modifies {@code job.sourceNode} in place.
   * @param {Object} job like <pre>{
   *    sourceCode: {string} source as plain text,
   *    spans: {Array.<number|Node>} alternating span start indices into source
   *       and the text node or element (e.g. {@code <BR>}) corresponding to that
   *       span.
   *    decorations: {Array.<number|string} an array of style classes preceded
   *       by the position at which they start in job.sourceCode in order
   * }</pre>
   * @private
   */
  function recombineTagsAndDecorations(job) {
    var isIE8OrEarlier = /\bMSIE\s(\d+)/.exec(navigator.userAgent);
    isIE8OrEarlier = isIE8OrEarlier && +isIE8OrEarlier[1] <= 8;
    var newlineRe = /\n/g;
  
    var source = job.sourceCode;
    var sourceLength = source.length;
    // Index into source after the last code-unit recombined.
    var sourceIndex = 0;
  
    var spans = job.spans;
    var nSpans = spans.length;
    // Index into spans after the last span which ends at or before sourceIndex.
    var spanIndex = 0;
  
    var decorations = job.decorations;
    var nDecorations = decorations.length;
    // Index into decorations after the last decoration which ends at or before
    // sourceIndex.
    var decorationIndex = 0;
  
    // Remove all zero-length decorations.
    decorations[nDecorations] = sourceLength;
    var decPos, i;
    for (i = decPos = 0; i < nDecorations;) {
      if (decorations[i] !== decorations[i + 2]) {
        decorations[decPos++] = decorations[i++];
        decorations[decPos++] = decorations[i++];
      } else {
        i += 2;
      }
    }
    nDecorations = decPos;
  
    // Simplify decorations.
    for (i = decPos = 0; i < nDecorations;) {
      var startPos = decorations[i];
      // Conflate all adjacent decorations that use the same style.
      var startDec = decorations[i + 1];
      var end = i + 2;
      while (end + 2 <= nDecorations && decorations[end + 1] === startDec) {
        end += 2;
      }
      decorations[decPos++] = startPos;
      decorations[decPos++] = startDec;
      i = end;
    }
  
    nDecorations = decorations.length = decPos;
  
    var sourceNode = job.sourceNode;
    var oldDisplay;
    if (sourceNode) {
      oldDisplay = sourceNode.style.display;
      sourceNode.style.display = 'none';
    }
    try {
      var decoration = null;
      while (spanIndex < nSpans) {
        var spanStart = spans[spanIndex];
        var spanEnd = spans[spanIndex + 2] || sourceLength;
  
        var decEnd = decorations[decorationIndex + 2] || sourceLength;
  
        var end = Math.min(spanEnd, decEnd);
  
        var textNode = spans[spanIndex + 1];
        var styledText;
        if (textNode.nodeType !== 1  // Don't muck with <BR>s or <LI>s
            // Don't introduce spans around empty text nodes.
            && (styledText = source.substring(sourceIndex, end))) {
          // This may seem bizarre, and it is.  Emitting LF on IE causes the
          // code to display with spaces instead of line breaks.
          // Emitting Windows standard issue linebreaks (CRLF) causes a blank
          // space to appear at the beginning of every line but the first.
          // Emitting an old Mac OS 9 line separator makes everything spiffy.
          if (isIE8OrEarlier) {
            styledText = styledText.replace(newlineRe, '\r');
          }
          textNode.nodeValue = styledText;
          var document = textNode.ownerDocument;
          var span = document.createElement('span');
          span.className = decorations[decorationIndex + 1];
          var parentNode = textNode.parentNode;
          parentNode.replaceChild(span, textNode);
          span.appendChild(textNode);
          if (sourceIndex < spanEnd) {  // Split off a text node.
            spans[spanIndex + 1] = textNode
                // TODO: Possibly optimize by using '' if there's no flicker.
                = document.createTextNode(source.substring(end, spanEnd));
            parentNode.insertBefore(textNode, span.nextSibling);
          }
        }
  
        sourceIndex = end;
  
        if (sourceIndex >= spanEnd) {
          spanIndex += 2;
        }
        if (sourceIndex >= decEnd) {
          decorationIndex += 2;
        }
      }
    } finally {
      if (sourceNode) {
        sourceNode.style.display = oldDisplay;
      }
    }
  }


  /** Maps language-specific file extensions to handlers. */
  var langHandlerRegistry = {};
  /** Register a language handler for the given file extensions.
    * @param {function (Object)} handler a function from source code to a list
    *      of decorations.  Takes a single argument job which describes the
    *      state of the computation.   The single parameter has the form
    *      {@code {
    *        sourceCode: {string} as plain text.
    *        decorations: {Array.<number|string>} an array of style classes
    *                     preceded by the position at which they start in
    *                     job.sourceCode in order.
    *                     The language handler should assigned this field.
    *        basePos: {int} the position of source in the larger source chunk.
    *                 All positions in the output decorations array are relative
    *                 to the larger source chunk.
    *      } }
    * @param {Array.<string>} fileExtensions
    */
  function registerLangHandler(handler, fileExtensions) {
    for (var i = fileExtensions.length; --i >= 0;) {
      var ext = fileExtensions[i];
      if (!langHandlerRegistry.hasOwnProperty(ext)) {
        langHandlerRegistry[ext] = handler;
      } else if (win['console']) {
        console['warn']('cannot override language handler %!s(MISSING)', ext);
      }
    }
  }
  function langHandlerForExtension(extension, source) {
    if (!(extension && langHandlerRegistry.hasOwnProperty(extension))) {
      // Treat it as markup if the first non whitespace character is a < and
      // the last non-whitespace character is a >.
      extension = /^\s*</.test(source)
          ? 'default-markup'
          : 'default-code';
    }
    return langHandlerRegistry[extension];
  }
  registerLangHandler(decorateSource, ['default-code']);
  registerLangHandler(
      createSimpleLexer(
          [],
          [
           [PR_PLAIN,       /^[^<?]+/],
           [PR_DECLARATION, /^<!\w[^>]*(?:>|$)/],
           [PR_COMMENT,     /^<\!--[\s\S]*?(?:-\->|$)/],
           // Unescaped content in an unknown language
           ['lang-',        /^<\?([\s\S]+?)(?:\?>|$)/],
           ['lang-',        /^<%!((MISSING)[\s\S]+?)(?:%!>(MISSING)|$)/],
           [PR_PUNCTUATION, /^(?:<[%!?(MISSING)]|[%!?(MISSING)]>)/],
           ['lang-',        /^<xmp\b[^>]*>([\s\S]+?)<\/xmp\b[^>]*>/i],
           // Unescaped content in javascript.  (Or possibly vbscript).
           ['lang-js',      /^<script\b[^>]*>([\s\S]*?)(<\/script\b[^>]*>)/i],
           // Contains unescaped stylesheet content
           ['lang-css',     /^<style\b[^>]*>([\s\S]*?)(<\/style\b[^>]*>)/i],
           ['lang-in.tag',  /^(<\/?[a-z][^<>]*>)/i]
          ]),
      ['default-markup', 'htm', 'html', 'mxml', 'xhtml', 'xml', 'xsl']);
  registerLangHandler(
      createSimpleLexer(
          [
           [PR_PLAIN,        /^[\s]+/, null, ' \t\r\n'],
           [PR_ATTRIB_VALUE, /^(?:\"[^\"]*\"?|\'[^\']*\'?)/, null, '\"\'']
           ],
          [
           [PR_TAG,          /^^<\/?[a-z](?:[\w.:-]*\w)?|\/?>$/i],
           [PR_ATTRIB_NAME,  /^(?!style[\s=]|on)[a-z](?:[\w:-]*\w)?/i],
           ['lang-uq.val',   /^=\s*([^>\'\"\s]*(?:[^>\'\"\s\/]|\/(?=\s)))/],
           [PR_PUNCTUATION,  /^[=<>\/]+/],
           ['lang-js',       /^on\w+\s*=\s*\"([^\"]+)\"/i],
           ['lang-js',       /^on\w+\s*=\s*\'([^\']+)\'/i],
           ['lang-js',       /^on\w+\s*=\s*([^\"\'>\s]+)/i],
           ['lang-css',      /^style\s*=\s*\"([^\"]+)\"/i],
           ['lang-css',      /^style\s*=\s*\'([^\']+)\'/i],
           ['lang-css',      /^style\s*=\s*([^\"\'>\s]+)/i]
           ]),
      ['in.tag']);
  registerLangHandler(
      createSimpleLexer([], [[PR_ATTRIB_VALUE, /^[\s\S]+/]]), ['uq.val']);
  registerLangHandler(sourceDecorator({
          'keywords': CPP_KEYWORDS,
          'hashComments': true,
          'cStyleComments': true,
          'types': C_TYPES
        }), ['c', 'cc', 'cpp', 'cxx', 'cyc', 'm']);
  registerLangHandler(sourceDecorator({
          'keywords': 'null,true,false'
        }), ['json']);
  registerLangHandler(sourceDecorator({
          'keywords': CSHARP_KEYWORDS,
          'hashComments': true,
          'cStyleComments': true,
          'verbatimStrings': true,
          'types': C_TYPES
        }), ['cs']);
  registerLangHandler(sourceDecorator({
          'keywords': JAVA_KEYWORDS,
          'cStyleComments': true
        }), ['java']);
  registerLangHandler(sourceDecorator({
          'keywords': SH_KEYWORDS,
          'hashComments': true,
          'multiLineStrings': true
        }), ['bsh', 'csh', 'sh']);
  registerLangHandler(sourceDecorator({
          'keywords': PYTHON_KEYWORDS,
          'hashComments': true,
          'multiLineStrings': true,
          'tripleQuotedStrings': true
        }), ['cv', 'py']);
  registerLangHandler(sourceDecorator({
          'keywords': PERL_KEYWORDS,
          'hashComments': true,
          'multiLineStrings': true,
          'regexLiterals': true
        }), ['perl', 'pl', 'pm']);
  registerLangHandler(sourceDecorator({
          'keywords': RUBY_KEYWORDS,
          'hashComments': true,
          'multiLineStrings': true,
          'regexLiterals': true
        }), ['rb']);
  registerLangHandler(sourceDecorator({
          'keywords': JSCRIPT_KEYWORDS,
          'cStyleComments': true,
          'regexLiterals': true
        }), ['js']);
  registerLangHandler(sourceDecorator({
          'keywords': COFFEE_KEYWORDS,
          'hashComments': 3,  // ### style block comments
          'cStyleComments': true,
          'multilineStrings': true,
          'tripleQuotedStrings': true,
          'regexLiterals': true
        }), ['coffee']);
  registerLangHandler(
      createSimpleLexer([], [[PR_STRING, /^[\s\S]+/]]), ['regex']);

  function applyDecorator(job) {
    var opt_langExtension = job.langExtension;

    try {
      // Extract tags, and convert the source code to plain text.
      var sourceAndSpans = extractSourceSpans(job.sourceNode, job.pre);
      /** Plain text. @type {string} */
      var source = sourceAndSpans.sourceCode;
      job.sourceCode = source;
      job.spans = sourceAndSpans.spans;
      job.basePos = 0;

      // Apply the appropriate language handler
      langHandlerForExtension(opt_langExtension, source)(job);

      // Integrate the decorations and tags back into the source code,
      // modifying the sourceNode in place.
      recombineTagsAndDecorations(job);
    } catch (e) {
      if (win['console']) {
        console['log'](e && e['stack'] ? e['stack'] : e);
      }
    }
  }

  /**
   * @param sourceCodeHtml {string} The HTML to pretty print.
   * @param opt_langExtension {string} The language name to use.
   *     Typically, a filename extension like 'cpp' or 'java'.
   * @param opt_numberLines {number|boolean} True to number lines,
   *     or the 1-indexed number of the first line in sourceCodeHtml.
   */
  function prettyPrintOne(sourceCodeHtml, opt_langExtension, opt_numberLines) {
    var container = document.createElement('pre');
    // This could cause images to load and onload listeners to fire.
    // E.g. <img onerror="alert(1337)" src="nosuchimage.png">.
    // We assume that the inner HTML is from a trusted source.
    container.innerHTML = sourceCodeHtml;
    if (opt_numberLines) {
      numberLines(container, opt_numberLines, true);
    }

    var job = {
      langExtension: opt_langExtension,
      numberLines: opt_numberLines,
      sourceNode: container,
      pre: 1
    };
    applyDecorator(job);
    return container.innerHTML;
  }

  function prettyPrint(opt_whenDone) {
    function byTagName(tn) { return document.getElementsByTagName(tn); }
    // fetch a list of nodes to rewrite
    var codeSegments = [byTagName('pre'), byTagName('code'), byTagName('xmp')];
    var elements = [];
    for (var i = 0; i < codeSegments.length; ++i) {
      for (var j = 0, n = codeSegments[i].length; j < n; ++j) {
        elements.push(codeSegments[i][j]);
      }
    }
    codeSegments = null;

    var clock = Date;
    if (!clock['now']) {
      clock = { 'now': function () { return +(new Date); } };
    }

    // The loop is broken into a series of continuations to make sure that we
    // don't make the browser unresponsive when rewriting a large page.
    var k = 0;
    var prettyPrintingJob;

    var langExtensionRe = /\blang(?:uage)?-([\w.]+)(?!\S)/;
    var prettyPrintRe = /\bprettyprint\b/;
    var prettyPrintedRe = /\bprettyprinted\b/;
    var preformattedTagNameRe = /pre|xmp/i;
    var codeRe = /^code$/i;
    var preCodeXmpRe = /^(?:pre|code|xmp)$/i;

    function doWork() {
      var endTime = (win['PR_SHOULD_USE_CONTINUATION'] ?
                     clock['now']() + 250 /* ms */ :
                     Infinity);
      for (; k < elements.length && clock['now']() < endTime; k++) {
        var cs = elements[k];
        var className = cs.className;
        if (prettyPrintRe.test(className)
            // Don't redo this if we've already done it.
            // This allows recalling pretty print to just prettyprint elements
            // that have been added to the page since last call.
            && !prettyPrintedRe.test(className)) {

          // make sure this is not nested in an already prettified element
          var nested = false;
          for (var p = cs.parentNode; p; p = p.parentNode) {
            var tn = p.tagName;
            if (preCodeXmpRe.test(tn)
                && p.className && prettyPrintRe.test(p.className)) {
              nested = true;
              break;
            }
          }
          if (!nested) {
            // Mark done.  If we fail to prettyprint for whatever reason,
            // we shouldn't try again.
            cs.className += ' prettyprinted';

            // If the classes includes a language extensions, use it.
            // Language extensions can be specified like
            //     <pre class="prettyprint lang-cpp">
            // the language extension "cpp" is used to find a language handler
            // as passed to PR.registerLangHandler.
            // HTML5 recommends that a language be specified using "language-"
            // as the prefix instead.  Google Code Prettify supports both.
            // http://dev.w3.org/html5/spec-author-view/the-code-element.html
            var langExtension = className.match(langExtensionRe);
            // Support <pre class="prettyprint"><code class="language-c">
            var wrapper;
            if (!langExtension && (wrapper = childContentWrapper(cs))
                && codeRe.test(wrapper.tagName)) {
              langExtension = wrapper.className.match(langExtensionRe);
            }

            if (langExtension) { langExtension = langExtension[1]; }

            var preformatted;
            if (preformattedTagNameRe.test(cs.tagName)) {
              preformatted = 1;
            } else {
              var currentStyle = cs['currentStyle'];
              var whitespace = (
                  currentStyle
                  ? currentStyle['whiteSpace']
                  : (document.defaultView
                     && document.defaultView.getComputedStyle)
                  ? document.defaultView.getComputedStyle(cs, null)
                  .getPropertyValue('white-space')
                  : 0);
              preformatted = whitespace
                  && 'pre' === whitespace.substring(0, 3);
            }

            // Look for a class like linenums or linenums:<n> where <n> is the
            // 1-indexed number of the first line.
            var lineNums = cs.className.match(/\blinenums\b(?::(\d+))?/);
            lineNums = lineNums
                ? lineNums[1] && lineNums[1].length ? +lineNums[1] : true
                : false;
            if (lineNums) { numberLines(cs, lineNums, preformatted); }

            // do the pretty printing
            prettyPrintingJob = {
              langExtension: langExtension,
              sourceNode: cs,
              numberLines: lineNums,
              pre: preformatted
            };
            applyDecorator(prettyPrintingJob);
          }
        }
      }
      if (k < elements.length) {
        // finish up in a continuation
        setTimeout(doWork, 250);
      } else if (opt_whenDone) {
        opt_whenDone();
      }
    }

    doWork();
  }

  /**
   * Contains functions for creating and registering new language handlers.
   * @type {Object}
   */
  var PR = win['PR'] = {
        'createSimpleLexer': createSimpleLexer,
        'registerLangHandler': registerLangHandler,
        'sourceDecorator': sourceDecorator,
        'PR_ATTRIB_NAME': PR_ATTRIB_NAME,
        'PR_ATTRIB_VALUE': PR_ATTRIB_VALUE,
        'PR_COMMENT': PR_COMMENT,
        'PR_DECLARATION': PR_DECLARATION,
        'PR_KEYWORD': PR_KEYWORD,
        'PR_LITERAL': PR_LITERAL,
        'PR_NOCODE': PR_NOCODE,
        'PR_PLAIN': PR_PLAIN,
        'PR_PUNCTUATION': PR_PUNCTUATION,
        'PR_SOURCE': PR_SOURCE,
        'PR_STRING': PR_STRING,
        'PR_TAG': PR_TAG,
        'PR_TYPE': PR_TYPE,
        'prettyPrintOne': win['prettyPrintOne'] = prettyPrintOne,
        'prettyPrint': win['prettyPrint'] = prettyPrint
      };

  // Make PR available via the Asynchronous Module Definition (AMD) API.
  // Per https://github.com/amdjs/amdjs-api/wiki/AMD:
  // The Asynchronous Module Definition (AMD) API specifies a
  // mechanism for defining modules such that the module and its
  // dependencies can be asynchronously loaded.
  // ...
  // To allow a clear indicator that a global define function (as
  // needed for script src browser loading) conforms to the AMD API,
  // any global define function SHOULD have a property called "amd"
  // whose value is an object. This helps avoid conflict with any
  // other existing JavaScript code that could have defined a define()
  // function that does not conform to the AMD API.
  if (typeof define === "function" && define['amd']) {
    define(function () {
      return PR; 
    });
  }
})();


<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd" >
<svg xmlns="http://www.w3.org/2000/svg">
<metadata></metadata>
<defs>
<font id="glyphicons_halflingsregular" horiz-adv-x="1200" >
<font-face units-per-em="1200" ascent="960" descent="-240" />
<missing-glyph horiz-adv-x="500" />
<glyph />
<glyph />
<glyph unicode="&#xd;" />
<glyph unicode=" " />
<glyph unicode="*" d="M100 500v200h259l-183 183l141 141l183 -183v259h200v-259l183 183l141 -141l-183 -183h259v-200h-259l183 -183l-141 -141l-183 183v-259h-200v259l-183 -183l-141 141l183 183h-259z" />
<glyph unicode="+" d="M0 400v300h400v400h300v-400h400v-300h-400v-400h-300v400h-400z" />
<glyph unicode="&#xa0;" />
<glyph unicode="&#x2000;" horiz-adv-x="652" />
<glyph unicode="&#x2001;" horiz-adv-x="1304" />
<glyph unicode="&#x2002;" horiz-adv-x="652" />
<glyph unicode="&#x2003;" horiz-adv-x="1304" />
<glyph unicode="&#x2004;" horiz-adv-x="434" />
<glyph unicode="&#x2005;" horiz-adv-x="326" />
<glyph unicode="&#x2006;" horiz-adv-x="217" />
<glyph unicode="&#x2007;" horiz-adv-x="217" />
<glyph unicode="&#x2008;" horiz-adv-x="163" />
<glyph unicode="&#x2009;" horiz-adv-x="260" />
<glyph unicode="&#x200a;" horiz-adv-x="72" />
<glyph unicode="&#x202f;" horiz-adv-x="260" />
<glyph unicode="&#x205f;" horiz-adv-x="326" />
<glyph unicode="&#x20ac;" d="M100 500l100 100h113q0 47 5 100h-218l100 100h135q37 167 112 257q117 141 297 141q242 0 354 -189q60 -103 66 -209h-181q0 55 -25.5 99t-63.5 68t-75 36.5t-67 12.5q-24 0 -52.5 -10t-62.5 -32t-65.5 -67t-50.5 -107h379l-100 -100h-300q-6 -46 -6 -100h406l-100 -100 h-300q9 -74 33 -132t52.5 -91t62 -54.5t59 -29t46.5 -7.5q29 0 66 13t75 37t63.5 67.5t25.5 96.5h174q-31 -172 -128 -278q-107 -117 -274 -117q-205 0 -324 158q-36 46 -69 131.5t-45 205.5h-217z" />
<glyph unicode="&#x2212;" d="M200 400h900v300h-900v-300z" />
<glyph unicode="&#x25fc;" horiz-adv-x="500" d="M0 0z" />
<glyph unicode="&#x2601;" d="M-14 494q0 -80 56.5 -137t135.5 -57h750q120 0 205 86.5t85 207.5t-85 207t-205 86q-46 0 -90 -14q-44 97 -134.5 156.5t-200.5 59.5q-152 0 -260 -107.5t-108 -260.5q0 -25 2 -37q-66 -14 -108.5 -67.5t-42.5 -122.5z" />
<glyph unicode="&#x2709;" d="M0 100l400 400l200 -200l200 200l400 -400h-1200zM0 300v600l300 -300zM0 1100l600 -603l600 603h-1200zM900 600l300 300v-600z" />
<glyph unicode="&#x270f;" d="M-13 -13l333 112l-223 223zM187 403l214 -214l614 614l-214 214zM887 1103l214 -214l99 92q13 13 13 32.5t-13 33.5l-153 153q-15 13 -33 13t-33 -13z" />
<glyph unicode="&#xe001;" d="M0 1200h1200l-500 -550v-550h300v-100h-800v100h300v550z" />
<glyph unicode="&#xe002;" d="M14 84q18 -55 86 -75.5t147 5.5q65 21 109 69t44 90v606l600 155v-521q-64 16 -138 -7q-79 -26 -122.5 -83t-25.5 -111q18 -55 86 -75.5t147 4.5q70 23 111.5 63.5t41.5 95.5v881q0 10 -7 15.5t-17 2.5l-752 -193q-10 -3 -17 -12.5t-7 -19.5v-689q-64 17 -138 -7 q-79 -25 -122.5 -82t-25.5 -112z" />
<glyph unicode="&#xe003;" d="M23 693q0 200 142 342t342 142t342 -142t142 -342q0 -142 -78 -261l300 -300q7 -8 7 -18t-7 -18l-109 -109q-8 -7 -18 -7t-18 7l-300 300q-119 -78 -261 -78q-200 0 -342 142t-142 342zM176 693q0 -136 97 -233t234 -97t233.5 96.5t96.5 233.5t-96.5 233.5t-233.5 96.5 t-234 -97t-97 -233z" />
<glyph unicode="&#xe005;" d="M100 784q0 64 28 123t73 100.5t104.5 64t119 20.5t120 -38.5t104.5 -104.5q48 69 109.5 105t121.5 38t118.5 -20.5t102.5 -64t71 -100.5t27 -123q0 -57 -33.5 -117.5t-94 -124.5t-126.5 -127.5t-150 -152.5t-146 -174q-62 85 -145.5 174t-149.5 152.5t-126.5 127.5 t-94 124.5t-33.5 117.5z" />
<glyph unicode="&#xe006;" d="M-72 800h479l146 400h2l146 -400h472l-382 -278l145 -449l-384 275l-382 -275l146 447zM168 71l2 1z" />
<glyph unicode="&#xe007;" d="M-72 800h479l146 400h2l146 -400h472l-382 -278l145 -449l-384 275l-382 -275l146 447zM168 71l2 1zM237 700l196 -142l-73 -226l192 140l195 -141l-74 229l193 140h-235l-77 211l-78 -211h-239z" />
<glyph unicode="&#xe008;" d="M0 0v143l400 257v100q-37 0 -68.5 74.5t-31.5 125.5v200q0 124 88 212t212 88t212 -88t88 -212v-200q0 -51 -31.5 -125.5t-68.5 -74.5v-100l400 -257v-143h-1200z" />
<glyph unicode="&#xe009;" d="M0 0v1100h1200v-1100h-1200zM100 100h100v100h-100v-100zM100 300h100v100h-100v-100zM100 500h100v100h-100v-100zM100 700h100v100h-100v-100zM100 900h100v100h-100v-100zM300 100h600v400h-600v-400zM300 600h600v400h-600v-400zM1000 100h100v100h-100v-100z M1000 300h100v100h-100v-100zM1000 500h100v100h-100v-100zM1000 700h100v100h-100v-100zM1000 900h100v100h-100v-100z" />
<glyph unicode="&#xe010;" d="M0 50v400q0 21 14.5 35.5t35.5 14.5h400q21 0 35.5 -14.5t14.5 -35.5v-400q0 -21 -14.5 -35.5t-35.5 -14.5h-400q-21 0 -35.5 14.5t-14.5 35.5zM0 650v400q0 21 14.5 35.5t35.5 14.5h400q21 0 35.5 -14.5t14.5 -35.5v-400q0 -21 -14.5 -35.5t-35.5 -14.5h-400 q-21 0 -35.5 14.5t-14.5 35.5zM600 50v400q0 21 14.5 35.5t35.5 14.5h400q21 0 35.5 -14.5t14.5 -35.5v-400q0 -21 -14.5 -35.5t-35.5 -14.5h-400q-21 0 -35.5 14.5t-14.5 35.5zM600 650v400q0 21 14.5 35.5t35.5 14.5h400q21 0 35.5 -14.5t14.5 -35.5v-400 q0 -21 -14.5 -35.5t-35.5 -14.5h-400q-21 0 -35.5 14.5t-14.5 35.5z" />
<glyph unicode="&#xe011;" d="M0 50v200q0 21 14.5 35.5t35.5 14.5h200q21 0 35.5 -14.5t14.5 -35.5v-200q0 -21 -14.5 -35.5t-35.5 -14.5h-200q-21 0 -35.5 14.5t-14.5 35.5zM0 450v200q0 21 14.5 35.5t35.5 14.5h200q21 0 35.5 -14.5t14.5 -35.5v-200q0 -21 -14.5 -35.5t-35.5 -14.5h-200 q-21 0 -35.5 14.5t-14.5 35.5zM0 850v200q0 21 14.5 35.5t35.5 14.5h200q21 0 35.5 -14.5t14.5 -35.5v-200q0 -21 -14.5 -35.5t-35.5 -14.5h-200q-21 0 -35.5 14.5t-14.5 35.5zM400 50v200q0 21 14.5 35.5t35.5 14.5h200q21 0 35.5 -14.5t14.5 -35.5v-200q0 -21 -14.5 -35.5 t-35.5 -14.5h-200q-21 0 -35.5 14.5t-14.5 35.5zM400 450v200q0 21 14.5 35.5t35.5 14.5h200q21 0 35.5 -14.5t14.5 -35.5v-200q0 -21 -14.5 -35.5t-35.5 -14.5h-200q-21 0 -35.5 14.5t-14.5 35.5zM400 850v200q0 21 14.5 35.5t35.5 14.5h200q21 0 35.5 -14.5t14.5 -35.5 v-200q0 -21 -14.5 -35.5t-35.5 -14.5h-200q-21 0 -35.5 14.5t-14.5 35.5zM800 50v200q0 21 14.5 35.5t35.5 14.5h200q21 0 35.5 -14.5t14.5 -35.5v-200q0 -21 -14.5 -35.5t-35.5 -14.5h-200q-21 0 -35.5 14.5t-14.5 35.5zM800 450v200q0 21 14.5 35.5t35.5 14.5h200 q21 0 35.5 -14.5t14.5 -35.5v-200q0 -21 -14.5 -35.5t-35.5 -14.5h-200q-21 0 -35.5 14.5t-14.5 35.5zM800 850v200q0 21 14.5 35.5t35.5 14.5h200q21 0 35.5 -14.5t14.5 -35.5v-200q0 -21 -14.5 -35.5t-35.5 -14.5h-200q-21 0 -35.5 14.5t-14.5 35.5z" />
<glyph unicode="&#xe012;" d="M0 50v200q0 21 14.5 35.5t35.5 14.5h200q21 0 35.5 -14.5t14.5 -35.5v-200q0 -21 -14.5 -35.5t-35.5 -14.5h-200q-21 0 -35.5 14.5t-14.5 35.5zM0 450q0 -21 14.5 -35.5t35.5 -14.5h200q21 0 35.5 14.5t14.5 35.5v200q0 21 -14.5 35.5t-35.5 14.5h-200q-21 0 -35.5 -14.5 t-14.5 -35.5v-200zM0 850v200q0 21 14.5 35.5t35.5 14.5h200q21 0 35.5 -14.5t14.5 -35.5v-200q0 -21 -14.5 -35.5t-35.5 -14.5h-200q-21 0 -35.5 14.5t-14.5 35.5zM400 50v200q0 21 14.5 35.5t35.5 14.5h700q21 0 35.5 -14.5t14.5 -35.5v-200q0 -21 -14.5 -35.5 t-35.5 -14.5h-700q-21 0 -35.5 14.5t-14.5 35.5zM400 450v200q0 21 14.5 35.5t35.5 14.5h700q21 0 35.5 -14.5t14.5 -35.5v-200q0 -21 -14.5 -35.5t-35.5 -14.5h-700q-21 0 -35.5 14.5t-14.5 35.5zM400 850v200q0 21 14.5 35.5t35.5 14.5h700q21 0 35.5 -14.5t14.5 -35.5 v-200q0 -21 -14.5 -35.5t-35.5 -14.5h-700q-21 0 -35.5 14.5t-14.5 35.5z" />
<glyph unicode="&#xe013;" d="M29 454l419 -420l818 820l-212 212l-607 -607l-206 207z" />
<glyph unicode="&#xe014;" d="M106 318l282 282l-282 282l212 212l282 -282l282 282l212 -212l-282 -282l282 -282l-212 -212l-282 282l-282 -282z" />
<glyph unicode="&#xe015;" d="M23 693q0 200 142 342t342 142t342 -142t142 -342q0 -142 -78 -261l300 -300q7 -8 7 -18t-7 -18l-109 -109q-8 -7 -18 -7t-18 7l-300 300q-119 -78 -261 -78q-200 0 -342 142t-142 342zM176 693q0 -136 97 -233t234 -97t233.5 96.5t96.5 233.5t-96.5 233.5t-233.5 96.5 t-234 -97t-97 -233zM300 600v200h100v100h200v-100h100v-200h-100v-100h-200v100h-100z" />
<glyph unicode="&#xe016;" d="M23 694q0 200 142 342t342 142t342 -142t142 -342q0 -141 -78 -262l300 -299q7 -7 7 -18t-7 -18l-109 -109q-8 -8 -18 -8t-18 8l-300 300q-119 -78 -261 -78q-200 0 -342 142t-142 342zM176 694q0 -136 97 -233t234 -97t233.5 97t96.5 233t-96.5 233t-233.5 97t-234 -97 t-97 -233zM300 601h400v200h-400v-200z" />
<glyph unicode="&#xe017;" d="M23 600q0 183 105 331t272 210v-166q-103 -55 -165 -155t-62 -220q0 -177 125 -302t302 -125t302 125t125 302q0 120 -62 220t-165 155v166q167 -62 272 -210t105 -331q0 -118 -45.5 -224.5t-123 -184t-184 -123t-224.5 -45.5t-224.5 45.5t-184 123t-123 184t-45.5 224.5 zM500 750q0 -21 14.5 -35.5t35.5 -14.5h100q21 0 35.5 14.5t14.5 35.5v400q0 21 -14.5 35.5t-35.5 14.5h-100q-21 0 -35.5 -14.5t-14.5 -35.5v-400z" />
<glyph unicode="&#xe018;" d="M100 1h200v300h-200v-300zM400 1v500h200v-500h-200zM700 1v800h200v-800h-200zM1000 1v1200h200v-1200h-200z" />
<glyph unicode="&#xe019;" d="M26 601q0 -33 6 -74l151 -38l2 -6q14 -49 38 -93l3 -5l-80 -134q45 -59 105 -105l133 81l5 -3q45 -26 94 -39l5 -2l38 -151q40 -5 74 -5q27 0 74 5l38 151l6 2q46 13 93 39l5 3l134 -81q56 44 104 105l-80 134l3 5q24 44 39 93l1 6l152 38q5 40 5 74q0 28 -5 73l-152 38 l-1 6q-16 51 -39 93l-3 5l80 134q-44 58 -104 105l-134 -81l-5 3q-45 25 -93 39l-6 1l-38 152q-40 5 -74 5q-27 0 -74 -5l-38 -152l-5 -1q-50 -14 -94 -39l-5 -3l-133 81q-59 -47 -105 -105l80 -134l-3 -5q-25 -47 -38 -93l-2 -6l-151 -38q-6 -48 -6 -73zM385 601 q0 88 63 151t152 63t152 -63t63 -151q0 -89 -63 -152t-152 -63t-152 63t-63 152z" />
<glyph unicode="&#xe020;" d="M100 1025v50q0 10 7.5 17.5t17.5 7.5h275v100q0 41 29.5 70.5t70.5 29.5h300q41 0 70.5 -29.5t29.5 -70.5v-100h275q10 0 17.5 -7.5t7.5 -17.5v-50q0 -11 -7 -18t-18 -7h-1050q-11 0 -18 7t-7 18zM200 100v800h900v-800q0 -41 -29.5 -71t-70.5 -30h-700q-41 0 -70.5 30 t-29.5 71zM300 100h100v700h-100v-700zM500 100h100v700h-100v-700zM500 1100h300v100h-300v-100zM700 100h100v700h-100v-700zM900 100h100v700h-100v-700z" />
<glyph unicode="&#xe021;" d="M1 601l656 644l644 -644h-200v-600h-300v400h-300v-400h-300v600h-200z" />
<glyph unicode="&#xe022;" d="M100 25v1150q0 11 7 18t18 7h475v-500h400v-675q0 -11 -7 -18t-18 -7h-850q-11 0 -18 7t-7 18zM700 800v300l300 -300h-300z" />
<glyph unicode="&#xe023;" d="M4 600q0 162 80 299t217 217t299 80t299 -80t217 -217t80 -299t-80 -299t-217 -217t-299 -80t-299 80t-217 217t-80 299zM186 600q0 -171 121.5 -292.5t292.5 -121.5t292.5 121.5t121.5 292.5t-121.5 292.5t-292.5 121.5t-292.5 -121.5t-121.5 -292.5zM500 500v400h100 v-300h200v-100h-300z" />
<glyph unicode="&#xe024;" d="M-100 0l431 1200h209l-21 -300h162l-20 300h208l431 -1200h-538l-41 400h-242l-40 -400h-539zM488 500h224l-27 300h-170z" />
<glyph unicode="&#xe025;" d="M0 0v400h490l-290 300h200v500h300v-500h200l-290 -300h490v-400h-1100zM813 200h175v100h-175v-100z" />
<glyph unicode="&#xe026;" d="M1 600q0 122 47.5 233t127.5 191t191 127.5t233 47.5t233 -47.5t191 -127.5t127.5 -191t47.5 -233t-47.5 -233t-127.5 -191t-191 -127.5t-233 -47.5t-233 47.5t-191 127.5t-127.5 191t-47.5 233zM188 600q0 -170 121 -291t291 -121t291 121t121 291t-121 291t-291 121 t-291 -121t-121 -291zM350 600h150v300h200v-300h150l-250 -300z" />
<glyph unicode="&#xe027;" d="M4 600q0 162 80 299t217 217t299 80t299 -80t217 -217t80 -299t-80 -299t-217 -217t-299 -80t-299 80t-217 217t-80 299zM186 600q0 -171 121.5 -292.5t292.5 -121.5t292.5 121.5t121.5 292.5t-121.5 292.5t-292.5 121.5t-292.5 -121.5t-121.5 -292.5zM350 600l250 300 l250 -300h-150v-300h-200v300h-150z" />
<glyph unicode="&#xe028;" d="M0 25v475l200 700h800l199 -700l1 -475q0 -11 -7 -18t-18 -7h-1150q-11 0 -18 7t-7 18zM200 500h200l50 -200h300l50 200h200l-97 500h-606z" />
<glyph unicode="&#xe029;" d="M4 600q0 162 80 299t217 217t299 80t299 -80t217 -217t80 -299t-80 -299t-217 -217t-299 -80t-299 80t-217 217t-80 299zM186 600q0 -172 121.5 -293t292.5 -121t292.5 121t121.5 293q0 171 -121.5 292.5t-292.5 121.5t-292.5 -121.5t-121.5 -292.5zM500 397v401 l297 -200z" />
<glyph unicode="&#xe030;" d="M23 600q0 -118 45.5 -224.5t123 -184t184 -123t224.5 -45.5t224.5 45.5t184 123t123 184t45.5 224.5h-150q0 -177 -125 -302t-302 -125t-302 125t-125 302t125 302t302 125q136 0 246 -81l-146 -146h400v400l-145 -145q-157 122 -355 122q-118 0 -224.5 -45.5t-184 -123 t-123 -184t-45.5 -224.5z" />
<glyph unicode="&#xe031;" d="M23 600q0 118 45.5 224.5t123 184t184 123t224.5 45.5q198 0 355 -122l145 145v-400h-400l147 147q-112 80 -247 80q-177 0 -302 -125t-125 -302h-150zM100 0v400h400l-147 -147q112 -80 247 -80q177 0 302 125t125 302h150q0 -118 -45.5 -224.5t-123 -184t-184 -123 t-224.5 -45.5q-198 0 -355 122z" />
<glyph unicode="&#xe032;" d="M100 0h1100v1200h-1100v-1200zM200 100v900h900v-900h-900zM300 200v100h100v-100h-100zM300 400v100h100v-100h-100zM300 600v100h100v-100h-100zM300 800v100h100v-100h-100zM500 200h500v100h-500v-100zM500 400v100h500v-100h-500zM500 600v100h500v-100h-500z M500 800v100h500v-100h-500z" />
<glyph unicode="&#xe033;" d="M0 100v600q0 41 29.5 70.5t70.5 29.5h100v200q0 82 59 141t141 59h300q82 0 141 -59t59 -141v-200h100q41 0 70.5 -29.5t29.5 -70.5v-600q0 -41 -29.5 -70.5t-70.5 -29.5h-900q-41 0 -70.5 29.5t-29.5 70.5zM400 800h300v150q0 21 -14.5 35.5t-35.5 14.5h-200 q-21 0 -35.5 -14.5t-14.5 -35.5v-150z" />
<glyph unicode="&#xe034;" d="M100 0v1100h100v-1100h-100zM300 400q60 60 127.5 84t127.5 17.5t122 -23t119 -30t110 -11t103 42t91 120.5v500q-40 -81 -101.5 -115.5t-127.5 -29.5t-138 25t-139.5 40t-125.5 25t-103 -29.5t-65 -115.5v-500z" />
<glyph unicode="&#xe035;" d="M0 275q0 -11 7 -18t18 -7h50q11 0 18 7t7 18v300q0 127 70.5 231.5t184.5 161.5t245 57t245 -57t184.5 -161.5t70.5 -231.5v-300q0 -11 7 -18t18 -7h50q11 0 18 7t7 18v300q0 116 -49.5 227t-131 192.5t-192.5 131t-227 49.5t-227 -49.5t-192.5 -131t-131 -192.5 t-49.5 -227v-300zM200 20v460q0 8 6 14t14 6h160q8 0 14 -6t6 -14v-460q0 -8 -6 -14t-14 -6h-160q-8 0 -14 6t-6 14zM800 20v460q0 8 6 14t14 6h160q8 0 14 -6t6 -14v-460q0 -8 -6 -14t-14 -6h-160q-8 0 -14 6t-6 14z" />
<glyph unicode="&#xe036;" d="M0 400h300l300 -200v800l-300 -200h-300v-400zM688 459l141 141l-141 141l71 71l141 -141l141 141l71 -71l-141 -141l141 -141l-71 -71l-141 141l-141 -141z" />
<glyph unicode="&#xe037;" d="M0 400h300l300 -200v800l-300 -200h-300v-400zM700 857l69 53q111 -135 111 -310q0 -169 -106 -302l-67 54q86 110 86 248q0 146 -93 257z" />
<glyph unicode="&#xe038;" d="M0 401v400h300l300 200v-800l-300 200h-300zM702 858l69 53q111 -135 111 -310q0 -170 -106 -303l-67 55q86 110 86 248q0 145 -93 257zM889 951l7 -8q123 -151 123 -344q0 -189 -119 -339l-7 -8l81 -66l6 8q142 178 142 405q0 230 -144 408l-6 8z" />
<glyph unicode="&#xe039;" d="M0 0h500v500h-200v100h-100v-100h-200v-500zM0 600h100v100h400v100h100v100h-100v300h-500v-600zM100 100v300h300v-300h-300zM100 800v300h300v-300h-300zM200 200v100h100v-100h-100zM200 900h100v100h-100v-100zM500 500v100h300v-300h200v-100h-100v-100h-200v100 h-100v100h100v200h-200zM600 0v100h100v-100h-100zM600 1000h100v-300h200v-300h300v200h-200v100h200v500h-600v-200zM800 800v300h300v-300h-300zM900 0v100h300v-100h-300zM900 900v100h100v-100h-100zM1100 200v100h100v-100h-100z" />
<glyph unicode="&#xe040;" d="M0 200h100v1000h-100v-1000zM100 0v100h300v-100h-300zM200 200v1000h100v-1000h-100zM500 0v91h100v-91h-100zM500 200v1000h200v-1000h-200zM700 0v91h100v-91h-100zM800 200v1000h100v-1000h-100zM900 0v91h200v-91h-200zM1000 200v1000h200v-1000h-200z" />
<glyph unicode="&#xe041;" d="M0 700l1 475q0 10 7.5 17.5t17.5 7.5h474l700 -700l-500 -500zM148 953q0 -42 29 -71q30 -30 71.5 -30t71.5 30q29 29 29 71t-29 71q-30 30 -71.5 30t-71.5 -30q-29 -29 -29 -71z" />
<glyph unicode="&#xe042;" d="M1 700l1 475q0 11 7 18t18 7h474l700 -700l-500 -500zM148 953q0 -42 30 -71q29 -30 71 -30t71 30q30 29 30 71t-30 71q-29 30 -71 30t-71 -30q-30 -29 -30 -71zM701 1200h100l700 -700l-500 -500l-50 50l450 450z" />
<glyph unicode="&#xe043;" d="M100 0v1025l175 175h925v-1000l-100 -100v1000h-750l-100 -100h750v-1000h-900z" />
<glyph unicode="&#xe044;" d="M200 0l450 444l450 -443v1150q0 20 -14.5 35t-35.5 15h-800q-21 0 -35.5 -15t-14.5 -35v-1151z" />
<glyph unicode="&#xe045;" d="M0 100v700h200l100 -200h600l100 200h200v-700h-200v200h-800v-200h-200zM253 829l40 -124h592l62 124l-94 346q-2 11 -10 18t-18 7h-450q-10 0 -18 -7t-10 -18zM281 24l38 152q2 10 11.5 17t19.5 7h500q10 0 19.5 -7t11.5 -17l38 -152q2 -10 -3.5 -17t-15.5 -7h-600 q-10 0 -15.5 7t-3.5 17z" />
<glyph unicode="&#xe046;" d="M0 200q0 -41 29.5 -70.5t70.5 -29.5h1000q41 0 70.5 29.5t29.5 70.5v600q0 41 -29.5 70.5t-70.5 29.5h-150q-4 8 -11.5 21.5t-33 48t-53 61t-69 48t-83.5 21.5h-200q-41 0 -82 -20.5t-70 -50t-52 -59t-34 -50.5l-12 -20h-150q-41 0 -70.5 -29.5t-29.5 -70.5v-600z M356 500q0 100 72 172t172 72t172 -72t72 -172t-72 -172t-172 -72t-172 72t-72 172zM494 500q0 -44 31 -75t75 -31t75 31t31 75t-31 75t-75 31t-75 -31t-31 -75zM900 700v100h100v-100h-100z" />
<glyph unicode="&#xe047;" d="M53 0h365v66q-41 0 -72 11t-49 38t1 71l92 234h391l82 -222q16 -45 -5.5 -88.5t-74.5 -43.5v-66h417v66q-34 1 -74 43q-18 19 -33 42t-21 37l-6 13l-385 998h-93l-399 -1006q-24 -48 -52 -75q-12 -12 -33 -25t-36 -20l-15 -7v-66zM416 521l178 457l46 -140l116 -317h-340 z" />
<glyph unicode="&#xe048;" d="M100 0v89q41 7 70.5 32.5t29.5 65.5v827q0 28 -1 39.5t-5.5 26t-15.5 21t-29 14t-49 14.5v71l471 -1q120 0 213 -88t93 -228q0 -55 -11.5 -101.5t-28 -74t-33.5 -47.5t-28 -28l-12 -7q8 -3 21.5 -9t48 -31.5t60.5 -58t47.5 -91.5t21.5 -129q0 -84 -59 -156.5t-142 -111 t-162 -38.5h-500zM400 200h161q89 0 153 48.5t64 132.5q0 90 -62.5 154.5t-156.5 64.5h-159v-400zM400 700h139q76 0 130 61.5t54 138.5q0 82 -84 130.5t-239 48.5v-379z" />
<glyph unicode="&#xe049;" d="M200 0v57q77 7 134.5 40.5t65.5 80.5l173 849q10 56 -10 74t-91 37q-6 1 -10.5 2.5t-9.5 2.5v57h425l2 -57q-33 -8 -62 -25.5t-46 -37t-29.5 -38t-17.5 -30.5l-5 -12l-128 -825q-10 -52 14 -82t95 -36v-57h-500z" />
<glyph unicode="&#xe050;" d="M-75 200h75v800h-75l125 167l125 -167h-75v-800h75l-125 -167zM300 900v300h150h700h150v-300h-50q0 29 -8 48.5t-18.5 30t-33.5 15t-39.5 5.5t-50.5 1h-200v-850l100 -50v-100h-400v100l100 50v850h-200q-34 0 -50.5 -1t-40 -5.5t-33.5 -15t-18.5 -30t-8.5 -48.5h-49z " />
<glyph unicode="&#xe051;" d="M33 51l167 125v-75h800v75l167 -125l-167 -125v75h-800v-75zM100 901v300h150h700h150v-300h-50q0 29 -8 48.5t-18 30t-33.5 15t-40 5.5t-50.5 1h-200v-650l100 -50v-100h-400v100l100 50v650h-200q-34 0 -50.5 -1t-39.5 -5.5t-33.5 -15t-18.5 -30t-8 -48.5h-50z" />
<glyph unicode="&#xe052;" d="M0 50q0 -20 14.5 -35t35.5 -15h1100q21 0 35.5 15t14.5 35v100q0 21 -14.5 35.5t-35.5 14.5h-1100q-21 0 -35.5 -14.5t-14.5 -35.5v-100zM0 350q0 -20 14.5 -35t35.5 -15h800q21 0 35.5 15t14.5 35v100q0 21 -14.5 35.5t-35.5 14.5h-800q-21 0 -35.5 -14.5t-14.5 -35.5 v-100zM0 650q0 -20 14.5 -35t35.5 -15h1000q21 0 35.5 15t14.5 35v100q0 21 -14.5 35.5t-35.5 14.5h-1000q-21 0 -35.5 -14.5t-14.5 -35.5v-100zM0 950q0 -20 14.5 -35t35.5 -15h600q21 0 35.5 15t14.5 35v100q0 21 -14.5 35.5t-35.5 14.5h-600q-21 0 -35.5 -14.5 t-14.5 -35.5v-100z" />
<glyph unicode="&#xe053;" d="M0 50q0 -20 14.5 -35t35.5 -15h1100q21 0 35.5 15t14.5 35v100q0 21 -14.5 35.5t-35.5 14.5h-1100q-21 0 -35.5 -14.5t-14.5 -35.5v-100zM0 650q0 -20 14.5 -35t35.5 -15h1100q21 0 35.5 15t14.5 35v100q0 21 -14.5 35.5t-35.5 14.5h-1100q-21 0 -35.5 -14.5t-14.5 -35.5 v-100zM200 350q0 -20 14.5 -35t35.5 -15h700q21 0 35.5 15t14.5 35v100q0 21 -14.5 35.5t-35.5 14.5h-700q-21 0 -35.5 -14.5t-14.5 -35.5v-100zM200 950q0 -20 14.5 -35t35.5 -15h700q21 0 35.5 15t14.5 35v100q0 21 -14.5 35.5t-35.5 14.5h-700q-21 0 -35.5 -14.5 t-14.5 -35.5v-100z" />
<glyph unicode="&#xe054;" d="M0 50v100q0 21 14.5 35.5t35.5 14.5h1100q21 0 35.5 -14.5t14.5 -35.5v-100q0 -20 -14.5 -35t-35.5 -15h-1100q-21 0 -35.5 15t-14.5 35zM100 650v100q0 21 14.5 35.5t35.5 14.5h1000q21 0 35.5 -14.5t14.5 -35.5v-100q0 -20 -14.5 -35t-35.5 -15h-1000q-21 0 -35.5 15 t-14.5 35zM300 350v100q0 21 14.5 35.5t35.5 14.5h800q21 0 35.5 -14.5t14.5 -35.5v-100q0 -20 -14.5 -35t-35.5 -15h-800q-21 0 -35.5 15t-14.5 35zM500 950v100q0 21 14.5 35.5t35.5 14.5h600q21 0 35.5 -14.5t14.5 -35.5v-100q0 -20 -14.5 -35t-35.5 -15h-600 q-21 0 -35.5 15t-14.5 35z" />
<glyph unicode="&#xe055;" d="M0 50v100q0 21 14.5 35.5t35.5 14.5h1100q21 0 35.5 -14.5t14.5 -35.5v-100q0 -20 -14.5 -35t-35.5 -15h-1100q-21 0 -35.5 15t-14.5 35zM0 350v100q0 21 14.5 35.5t35.5 14.5h1100q21 0 35.5 -14.5t14.5 -35.5v-100q0 -20 -14.5 -35t-35.5 -15h-1100q-21 0 -35.5 15 t-14.5 35zM0 650v100q0 21 14.5 35.5t35.5 14.5h1100q21 0 35.5 -14.5t14.5 -35.5v-100q0 -20 -14.5 -35t-35.5 -15h-1100q-21 0 -35.5 15t-14.5 35zM0 950v100q0 21 14.5 35.5t35.5 14.5h1100q21 0 35.5 -14.5t14.5 -35.5v-100q0 -20 -14.5 -35t-35.5 -15h-1100 q-21 0 -35.5 15t-14.5 35z" />
<glyph unicode="&#xe056;" d="M0 50v100q0 21 14.5 35.5t35.5 14.5h100q21 0 35.5 -14.5t14.5 -35.5v-100q0 -20 -14.5 -35t-35.5 -15h-100q-21 0 -35.5 15t-14.5 35zM0 350v100q0 21 14.5 35.5t35.5 14.5h100q21 0 35.5 -14.5t14.5 -35.5v-100q0 -20 -14.5 -35t-35.5 -15h-100q-21 0 -35.5 15 t-14.5 35zM0 650v100q0 21 14.5 35.5t35.5 14.5h100q21 0 35.5 -14.5t14.5 -35.5v-100q0 -20 -14.5 -35t-35.5 -15h-100q-21 0 -35.5 15t-14.5 35zM0 950v100q0 21 14.5 35.5t35.5 14.5h100q21 0 35.5 -14.5t14.5 -35.5v-100q0 -20 -14.5 -35t-35.5 -15h-100q-21 0 -35.5 15 t-14.5 35zM300 50v100q0 21 14.5 35.5t35.5 14.5h800q21 0 35.5 -14.5t14.5 -35.5v-100q0 -20 -14.5 -35t-35.5 -15h-800q-21 0 -35.5 15t-14.5 35zM300 350v100q0 21 14.5 35.5t35.5 14.5h800q21 0 35.5 -14.5t14.5 -35.5v-100q0 -20 -14.5 -35t-35.5 -15h-800 q-21 0 -35.5 15t-14.5 35zM300 650v100q0 21 14.5 35.5t35.5 14.5h800q21 0 35.5 -14.5t14.5 -35.5v-100q0 -20 -14.5 -35t-35.5 -15h-800q-21 0 -35.5 15t-14.5 35zM300 950v100q0 21 14.5 35.5t35.5 14.5h800q21 0 35.5 -14.5t14.5 -35.5v-100q0 -20 -14.5 -35t-35.5 -15 h-800q-21 0 -35.5 15t-14.5 35z" />
<glyph unicode="&#xe057;" d="M-101 500v100h201v75l166 -125l-166 -125v75h-201zM300 0h100v1100h-100v-1100zM500 50q0 -20 14.5 -35t35.5 -15h600q20 0 35 15t15 35v100q0 21 -15 35.5t-35 14.5h-600q-21 0 -35.5 -14.5t-14.5 -35.5v-100zM500 350q0 -20 14.5 -35t35.5 -15h300q20 0 35 15t15 35 v100q0 21 -15 35.5t-35 14.5h-300q-21 0 -35.5 -14.5t-14.5 -35.5v-100zM500 650q0 -20 14.5 -35t35.5 -15h500q20 0 35 15t15 35v100q0 21 -15 35.5t-35 14.5h-500q-21 0 -35.5 -14.5t-14.5 -35.5v-100zM500 950q0 -20 14.5 -35t35.5 -15h100q20 0 35 15t15 35v100 q0 21 -15 35.5t-35 14.5h-100q-21 0 -35.5 -14.5t-14.5 -35.5v-100z" />
<glyph unicode="&#xe058;" d="M1 50q0 -20 14.5 -35t35.5 -15h600q20 0 35 15t15 35v100q0 21 -15 35.5t-35 14.5h-600q-21 0 -35.5 -14.5t-14.5 -35.5v-100zM1 350q0 -20 14.5 -35t35.5 -15h300q20 0 35 15t15 35v100q0 21 -15 35.5t-35 14.5h-300q-21 0 -35.5 -14.5t-14.5 -35.5v-100zM1 650 q0 -20 14.5 -35t35.5 -15h500q20 0 35 15t15 35v100q0 21 -15 35.5t-35 14.5h-500q-21 0 -35.5 -14.5t-14.5 -35.5v-100zM1 950q0 -20 14.5 -35t35.5 -15h100q20 0 35 15t15 35v100q0 21 -15 35.5t-35 14.5h-100q-21 0 -35.5 -14.5t-14.5 -35.5v-100zM801 0v1100h100v-1100 h-100zM934 550l167 -125v75h200v100h-200v75z" />
<glyph unicode="&#xe059;" d="M0 275v650q0 31 22 53t53 22h750q31 0 53 -22t22 -53v-650q0 -31 -22 -53t-53 -22h-750q-31 0 -53 22t-22 53zM900 600l300 300v-600z" />
<glyph unicode="&#xe060;" d="M0 44v1012q0 18 13 31t31 13h1112q19 0 31.5 -13t12.5 -31v-1012q0 -18 -12.5 -31t-31.5 -13h-1112q-18 0 -31 13t-13 31zM100 263l247 182l298 -131l-74 156l293 318l236 -288v500h-1000v-737zM208 750q0 56 39 95t95 39t95 -39t39 -95t-39 -95t-95 -39t-95 39t-39 95z " />
<glyph unicode="&#xe062;" d="M148 745q0 124 60.5 231.5t165 172t226.5 64.5q123 0 227 -63t164.5 -169.5t60.5 -229.5t-73 -272q-73 -114 -166.5 -237t-150.5 -189l-57 -66q-10 9 -27 26t-66.5 70.5t-96 109t-104 135.5t-100.5 155q-63 139 -63 262zM342 772q0 -107 75.5 -182.5t181.5 -75.5 q107 0 182.5 75.5t75.5 182.5t-75.5 182t-182.5 75t-182 -75.5t-75 -181.5z" />
<glyph unicode="&#xe063;" d="M1 600q0 122 47.5 233t127.5 191t191 127.5t233 47.5t233 -47.5t191 -127.5t127.5 -191t47.5 -233t-47.5 -233t-127.5 -191t-191 -127.5t-233 -47.5t-233 47.5t-191 127.5t-127.5 191t-47.5 233zM173 600q0 -177 125.5 -302t301.5 -125v854q-176 0 -301.5 -125 t-125.5 -302z" />
<glyph unicode="&#xe064;" d="M117 406q0 94 34 186t88.5 172.5t112 159t115 177t87.5 194.5q21 -71 57.5 -142.5t76 -130.5t83 -118.5t82 -117t70 -116t50 -125.5t18.5 -136q0 -89 -39 -165.5t-102 -126.5t-140 -79.5t-156 -33.5q-114 6 -211.5 53t-161.5 139t-64 210zM243 414q14 -82 59.5 -136 t136.5 -80l16 98q-7 6 -18 17t-34 48t-33 77q-15 73 -14 143.5t10 122.5l9 51q-92 -110 -119.5 -185t-12.5 -156z" />
<glyph unicode="&#xe065;" d="M0 400v300q0 165 117.5 282.5t282.5 117.5q366 -6 397 -14l-186 -186h-311q-41 0 -70.5 -29.5t-29.5 -70.5v-500q0 -41 29.5 -70.5t70.5 -29.5h500q41 0 70.5 29.5t29.5 70.5v125l200 200v-225q0 -165 -117.5 -282.5t-282.5 -117.5h-300q-165 0 -282.5 117.5 t-117.5 282.5zM436 341l161 50l412 412l-114 113l-405 -405zM995 1015l113 -113l113 113l-21 85l-92 28z" />
<glyph unicode="&#xe066;" d="M0 400v300q0 165 117.5 282.5t282.5 117.5h261l2 -80q-133 -32 -218 -120h-145q-41 0 -70.5 -29.5t-29.5 -70.5v-500q0 -41 29.5 -70.5t70.5 -29.5h500q41 0 70.5 29.5t29.5 70.5l200 153v-53q0 -165 -117.5 -282.5t-282.5 -117.5h-300q-165 0 -282.5 117.5t-117.5 282.5 zM423 524q30 38 81.5 64t103 35.5t99 14t77.5 3.5l29 -1v-209l360 324l-359 318v-216q-7 0 -19 -1t-48 -8t-69.5 -18.5t-76.5 -37t-76.5 -59t-62 -88t-39.5 -121.5z" />
<glyph unicode="&#xe067;" d="M0 400v300q0 165 117.5 282.5t282.5 117.5h300q61 0 127 -23l-178 -177h-349q-41 0 -70.5 -29.5t-29.5 -70.5v-500q0 -41 29.5 -70.5t70.5 -29.5h500q41 0 70.5 29.5t29.5 70.5v69l200 200v-169q0 -165 -117.5 -282.5t-282.5 -117.5h-300q-165 0 -282.5 117.5 t-117.5 282.5zM342 632l283 -284l567 567l-137 137l-430 -431l-146 147z" />
<glyph unicode="&#xe068;" d="M0 603l300 296v-198h200v200h-200l300 300l295 -300h-195v-200h200v198l300 -296l-300 -300v198h-200v-200h195l-295 -300l-300 300h200v200h-200v-198z" />
<glyph unicode="&#xe069;" d="M200 50v1000q0 21 14.5 35.5t35.5 14.5h100q21 0 35.5 -14.5t14.5 -35.5v-437l500 487v-1100l-500 488v-438q0 -21 -14.5 -35.5t-35.5 -14.5h-100q-21 0 -35.5 14.5t-14.5 35.5z" />
<glyph unicode="&#xe070;" d="M0 50v1000q0 21 14.5 35.5t35.5 14.5h100q21 0 35.5 -14.5t14.5 -35.5v-437l500 487v-487l500 487v-1100l-500 488v-488l-500 488v-438q0 -21 -14.5 -35.5t-35.5 -14.5h-100q-21 0 -35.5 14.5t-14.5 35.5z" />
<glyph unicode="&#xe071;" d="M136 550l564 550v-487l500 487v-1100l-500 488v-488z" />
<glyph unicode="&#xe072;" d="M200 0l900 550l-900 550v-1100z" />
<glyph unicode="&#xe073;" d="M200 150q0 -21 14.5 -35.5t35.5 -14.5h200q21 0 35.5 14.5t14.5 35.5v800q0 21 -14.5 35.5t-35.5 14.5h-200q-21 0 -35.5 -14.5t-14.5 -35.5v-800zM600 150q0 -21 14.5 -35.5t35.5 -14.5h200q21 0 35.5 14.5t14.5 35.5v800q0 21 -14.5 35.5t-35.5 14.5h-200 q-21 0 -35.5 -14.5t-14.5 -35.5v-800z" />
<glyph unicode="&#xe074;" d="M200 150q0 -20 14.5 -35t35.5 -15h800q21 0 35.5 15t14.5 35v800q0 21 -14.5 35.5t-35.5 14.5h-800q-21 0 -35.5 -14.5t-14.5 -35.5v-800z" />
<glyph unicode="&#xe075;" d="M0 0v1100l500 -487v487l564 -550l-564 -550v488z" />
<glyph unicode="&#xe076;" d="M0 0v1100l500 -487v487l500 -487v437q0 21 14.5 35.5t35.5 14.5h100q21 0 35.5 -14.5t14.5 -35.5v-1000q0 -21 -14.5 -35.5t-35.5 -14.5h-100q-21 0 -35.5 14.5t-14.5 35.5v438l-500 -488v488z" />
<glyph unicode="&#xe077;" d="M300 0v1100l500 -487v437q0 21 14.5 35.5t35.5 14.5h100q21 0 35.5 -14.5t14.5 -35.5v-1000q0 -21 -14.5 -35.5t-35.5 -14.5h-100q-21 0 -35.5 14.5t-14.5 35.5v438z" />
<glyph unicode="&#xe078;" d="M100 250v100q0 21 14.5 35.5t35.5 14.5h1000q21 0 35.5 -14.5t14.5 -35.5v-100q0 -21 -14.5 -35.5t-35.5 -14.5h-1000q-21 0 -35.5 14.5t-14.5 35.5zM100 500h1100l-550 564z" />
<glyph unicode="&#xe079;" d="M185 599l592 -592l240 240l-353 353l353 353l-240 240z" />
<glyph unicode="&#xe080;" d="M272 194l353 353l-353 353l241 240l572 -571l21 -22l-1 -1v-1l-592 -591z" />
<glyph unicode="&#xe081;" d="M3 600q0 162 80 299.5t217.5 217.5t299.5 80t299.5 -80t217.5 -217.5t80 -299.5t-80 -299.5t-217.5 -217.5t-299.5 -80t-299.5 80t-217.5 217.5t-80 299.5zM300 500h200v-200h200v200h200v200h-200v200h-200v-200h-200v-200z" />
<glyph unicode="&#xe082;" d="M3 600q0 162 80 299.5t217.5 217.5t299.5 80t299.5 -80t217.5 -217.5t80 -299.5t-80 -299.5t-217.5 -217.5t-299.5 -80t-299.5 80t-217.5 217.5t-80 299.5zM300 500h600v200h-600v-200z" />
<glyph unicode="&#xe083;" d="M3 600q0 162 80 299.5t217.5 217.5t299.5 80t299.5 -80t217.5 -217.5t80 -299.5t-80 -299.5t-217.5 -217.5t-299.5 -80t-299.5 80t-217.5 217.5t-80 299.5zM246 459l213 -213l141 142l141 -142l213 213l-142 141l142 141l-213 212l-141 -141l-141 142l-212 -213l141 -141 z" />
<glyph unicode="&#xe084;" d="M3 600q0 162 80 299.5t217.5 217.5t299.5 80t299.5 -80t217.5 -217.5t80 -299.5t-80 -299.5t-217.5 -217.5t-299.5 -80t-299.5 80t-217.5 217.5t-80 299.5zM270 551l276 -277l411 411l-175 174l-236 -236l-102 102z" />
<glyph unicode="&#xe085;" d="M3 600q0 162 80 299.5t217.5 217.5t299.5 80t299.5 -80t217.5 -217.5t80 -299.5t-80 -299.5t-217.5 -217.5t-299.5 -80t-299.5 80t-217.5 217.5t-80 299.5zM364 700h143q4 0 11.5 -1t11 -1t6.5 3t3 9t1 11t3.5 8.5t3.5 6t5.5 4t6.5 2.5t9 1.5t9 0.5h11.5h12.5 q19 0 30 -10t11 -26q0 -22 -4 -28t-27 -22q-5 -1 -12.5 -3t-27 -13.5t-34 -27t-26.5 -46t-11 -68.5h200q5 3 14 8t31.5 25.5t39.5 45.5t31 69t14 94q0 51 -17.5 89t-42 58t-58.5 32t-58.5 15t-51.5 3q-50 0 -90.5 -12t-75 -38.5t-53.5 -74.5t-19 -114zM500 300h200v100h-200 v-100z" />
<glyph unicode="&#xe086;" d="M3 600q0 162 80 299.5t217.5 217.5t299.5 80t299.5 -80t217.5 -217.5t80 -299.5t-80 -299.5t-217.5 -217.5t-299.5 -80t-299.5 80t-217.5 217.5t-80 299.5zM400 300h400v100h-100v300h-300v-100h100v-200h-100v-100zM500 800h200v100h-200v-100z" />
<glyph unicode="&#xe087;" d="M0 500v200h195q31 125 98.5 199.5t206.5 100.5v200h200v-200q54 -20 113 -60t112.5 -105.5t71.5 -134.5h203v-200h-203q-25 -102 -116.5 -186t-180.5 -117v-197h-200v197q-140 27 -208 102.5t-98 200.5h-194zM290 500q24 -73 79.5 -127.5t130.5 -78.5v206h200v-206 q149 48 201 206h-201v200h200q-25 74 -75.5 127t-124.5 77v-204h-200v203q-75 -23 -130 -77t-79 -126h209v-200h-210z" />
<glyph unicode="&#xe088;" d="M4 600q0 162 80 299t217 217t299 80t299 -80t217 -217t80 -299t-80 -299t-217 -217t-299 -80t-299 80t-217 217t-80 299zM186 600q0 -171 121.5 -292.5t292.5 -121.5t292.5 121.5t121.5 292.5t-121.5 292.5t-292.5 121.5t-292.5 -121.5t-121.5 -292.5zM356 465l135 135 l-135 135l109 109l135 -135l135 135l109 -109l-135 -135l135 -135l-109 -109l-135 135l-135 -135z" />
<glyph unicode="&#xe089;" d="M4 600q0 162 80 299t217 217t299 80t299 -80t217 -217t80 -299t-80 -299t-217 -217t-299 -80t-299 80t-217 217t-80 299zM186 600q0 -171 121.5 -292.5t292.5 -121.5t292.5 121.5t121.5 292.5t-121.5 292.5t-292.5 121.5t-292.5 -121.5t-121.5 -292.5zM322 537l141 141 l87 -87l204 205l142 -142l-346 -345z" />
<glyph unicode="&#xe090;" d="M4 600q0 162 80 299t217 217t299 80t299 -80t217 -217t80 -299t-80 -299t-217 -217t-299 -80t-299 80t-217 217t-80 299zM186 600q0 -115 62 -215l568 567q-100 62 -216 62q-171 0 -292.5 -121.5t-121.5 -292.5zM391 245q97 -59 209 -59q171 0 292.5 121.5t121.5 292.5 q0 112 -59 209z" />
<glyph unicode="&#xe091;" d="M0 547l600 453v-300h600v-300h-600v-301z" />
<glyph unicode="&#xe092;" d="M0 400v300h600v300l600 -453l-600 -448v301h-600z" />
<glyph unicode="&#xe093;" d="M204 600l450 600l444 -600h-298v-600h-300v600h-296z" />
<glyph unicode="&#xe094;" d="M104 600h296v600h300v-600h298l-449 -600z" />
<glyph unicode="&#xe095;" d="M0 200q6 132 41 238.5t103.5 193t184 138t271.5 59.5v271l600 -453l-600 -448v301q-95 -2 -183 -20t-170 -52t-147 -92.5t-100 -135.5z" />
<glyph unicode="&#xe096;" d="M0 0v400l129 -129l294 294l142 -142l-294 -294l129 -129h-400zM635 777l142 -142l294 294l129 -129v400h-400l129 -129z" />
<glyph unicode="&#xe097;" d="M34 176l295 295l-129 129h400v-400l-129 130l-295 -295zM600 600v400l129 -129l295 295l142 -141l-295 -295l129 -130h-400z" />
<glyph unicode="&#xe101;" d="M23 600q0 118 45.5 224.5t123 184t184 123t224.5 45.5t224.5 -45.5t184 -123t123 -184t45.5 -224.5t-45.5 -224.5t-123 -184t-184 -123t-224.5 -45.5t-224.5 45.5t-184 123t-123 184t-45.5 224.5zM456 851l58 -302q4 -20 21.5 -34.5t37.5 -14.5h54q20 0 37.5 14.5 t21.5 34.5l58 302q4 20 -8 34.5t-32 14.5h-207q-21 0 -33 -14.5t-8 -34.5zM500 300h200v100h-200v-100z" />
<glyph unicode="&#xe102;" d="M0 800h100v-200h400v300h200v-300h400v200h100v100h-111q1 1 1 6.5t-1.5 15t-3.5 17.5l-34 172q-11 39 -41.5 63t-69.5 24q-32 0 -61 -17l-239 -144q-22 -13 -40 -35q-19 24 -40 36l-238 144q-33 18 -62 18q-39 0 -69.5 -23t-40.5 -61l-35 -177q-2 -8 -3 -18t-1 -15v-6 h-111v-100zM100 0h400v400h-400v-400zM200 900q-3 0 14 48t36 96l18 47l213 -191h-281zM700 0v400h400v-400h-400zM731 900l202 197q5 -12 12 -32.5t23 -64t25 -72t7 -28.5h-269z" />
<glyph unicode="&#xe103;" d="M0 -22v143l216 193q-9 53 -13 83t-5.5 94t9 113t38.5 114t74 124q47 60 99.5 102.5t103 68t127.5 48t145.5 37.5t184.5 43.5t220 58.5q0 -189 -22 -343t-59 -258t-89 -181.5t-108.5 -120t-122 -68t-125.5 -30t-121.5 -1.5t-107.5 12.5t-87.5 17t-56.5 7.5l-99 -55z M238.5 300.5q19.5 -6.5 86.5 76.5q55 66 367 234q70 38 118.5 69.5t102 79t99 111.5t86.5 148q22 50 24 60t-6 19q-7 5 -17 5t-26.5 -14.5t-33.5 -39.5q-35 -51 -113.5 -108.5t-139.5 -89.5l-61 -32q-369 -197 -458 -401q-48 -111 -28.5 -117.5z" />
<glyph unicode="&#xe104;" d="M111 408q0 -33 5 -63q9 -56 44 -119.5t105 -108.5q31 -21 64 -16t62 23.5t57 49.5t48 61.5t35 60.5q32 66 39 184.5t-13 157.5q79 -80 122 -164t26 -184q-5 -33 -20.5 -69.5t-37.5 -80.5q-10 -19 -14.5 -29t-12 -26t-9 -23.5t-3 -19t2.5 -15.5t11 -9.5t19.5 -5t30.5 2.5 t42 8q57 20 91 34t87.5 44.5t87 64t65.5 88.5t47 122q38 172 -44.5 341.5t-246.5 278.5q22 -44 43 -129q39 -159 -32 -154q-15 2 -33 9q-79 33 -120.5 100t-44 175.5t48.5 257.5q-13 -8 -34 -23.5t-72.5 -66.5t-88.5 -105.5t-60 -138t-8 -166.5q2 -12 8 -41.5t8 -43t6 -39.5 t3.5 -39.5t-1 -33.5t-6 -31.5t-13.5 -24t-21 -20.5t-31 -12q-38 -10 -67 13t-40.5 61.5t-15 81.5t10.5 75q-52 -46 -83.5 -101t-39 -107t-7.5 -85z" />
<glyph unicode="&#xe105;" d="M-61 600l26 40q6 10 20 30t49 63.5t74.5 85.5t97 90t116.5 83.5t132.5 59t145.5 23.5t145.5 -23.5t132.5 -59t116.5 -83.5t97 -90t74.5 -85.5t49 -63.5t20 -30l26 -40l-26 -40q-6 -10 -20 -30t-49 -63.5t-74.5 -85.5t-97 -90t-116.5 -83.5t-132.5 -59t-145.5 -23.5 t-145.5 23.5t-132.5 59t-116.5 83.5t-97 90t-74.5 85.5t-49 63.5t-20 30zM120 600q7 -10 40.5 -58t56 -78.5t68 -77.5t87.5 -75t103 -49.5t125 -21.5t123.5 20t100.5 45.5t85.5 71.5t66.5 75.5t58 81.5t47 66q-1 1 -28.5 37.5t-42 55t-43.5 53t-57.5 63.5t-58.5 54 q49 -74 49 -163q0 -124 -88 -212t-212 -88t-212 88t-88 212q0 85 46 158q-102 -87 -226 -258zM377 656q49 -124 154 -191l105 105q-37 24 -75 72t-57 84l-20 36z" />
<glyph unicode="&#xe106;" d="M-61 600l26 40q6 10 20 30t49 63.5t74.5 85.5t97 90t116.5 83.5t132.5 59t145.5 23.5q61 0 121 -17l37 142h148l-314 -1200h-148l37 143q-82 21 -165 71.5t-140 102t-109.5 112t-72 88.5t-29.5 43zM120 600q210 -282 393 -336l37 141q-107 18 -178.5 101.5t-71.5 193.5 q0 85 46 158q-102 -87 -226 -258zM377 656q49 -124 154 -191l47 47l23 87q-30 28 -59 69t-44 68l-14 26zM780 161l38 145q22 15 44.5 34t46 44t40.5 44t41 50.5t33.5 43.5t33 44t24.5 34q-97 127 -140 175l39 146q67 -54 131.5 -125.5t87.5 -103.5t36 -52l26 -40l-26 -40 q-7 -12 -25.5 -38t-63.5 -79.5t-95.5 -102.5t-124 -100t-146.5 -79z" />
<glyph unicode="&#xe107;" d="M-97.5 34q13.5 -34 50.5 -34h1294q37 0 50.5 35.5t-7.5 67.5l-642 1056q-20 34 -48 36.5t-48 -29.5l-642 -1066q-21 -32 -7.5 -66zM155 200l445 723l445 -723h-345v100h-200v-100h-345zM500 600l100 -300l100 300v100h-200v-100z" />
<glyph unicode="&#xe108;" d="M100 262v41q0 20 11 44.5t26 38.5l363 325v339q0 62 44 106t106 44t106 -44t44 -106v-339l363 -325q15 -14 26 -38.5t11 -44.5v-41q0 -20 -12 -26.5t-29 5.5l-359 249v-263q100 -91 100 -113v-64q0 -20 -13 -28.5t-32 0.5l-94 78h-222l-94 -78q-19 -9 -32 -0.5t-13 28.5 v64q0 22 100 113v263l-359 -249q-17 -12 -29 -5.5t-12 26.5z" />
<glyph unicode="&#xe109;" d="M0 50q0 -20 14.5 -35t35.5 -15h1000q21 0 35.5 15t14.5 35v750h-1100v-750zM0 900h1100v150q0 21 -14.5 35.5t-35.5 14.5h-150v100h-100v-100h-500v100h-100v-100h-150q-21 0 -35.5 -14.5t-14.5 -35.5v-150zM100 100v100h100v-100h-100zM100 300v100h100v-100h-100z M100 500v100h100v-100h-100zM300 100v100h100v-100h-100zM300 300v100h100v-100h-100zM300 500v100h100v-100h-100zM500 100v100h100v-100h-100zM500 300v100h100v-100h-100zM500 500v100h100v-100h-100zM700 100v100h100v-100h-100zM700 300v100h100v-100h-100zM700 500 v100h100v-100h-100zM900 100v100h100v-100h-100zM900 300v100h100v-100h-100zM900 500v100h100v-100h-100z" />
<glyph unicode="&#xe110;" d="M0 200v200h259l600 600h241v198l300 -295l-300 -300v197h-159l-600 -600h-341zM0 800h259l122 -122l141 142l-181 180h-341v-200zM678 381l141 142l122 -123h159v198l300 -295l-300 -300v197h-241z" />
<glyph unicode="&#xe111;" d="M0 400v600q0 41 29.5 70.5t70.5 29.5h1000q41 0 70.5 -29.5t29.5 -70.5v-600q0 -41 -29.5 -70.5t-70.5 -29.5h-596l-304 -300v300h-100q-41 0 -70.5 29.5t-29.5 70.5z" />
<glyph unicode="&#xe112;" d="M100 600v200h300v-250q0 -113 6 -145q17 -92 102 -117q39 -11 92 -11q37 0 66.5 5.5t50 15.5t36 24t24 31.5t14 37.5t7 42t2.5 45t0 47v25v250h300v-200q0 -42 -3 -83t-15 -104t-31.5 -116t-58 -109.5t-89 -96.5t-129 -65.5t-174.5 -25.5t-174.5 25.5t-129 65.5t-89 96.5 t-58 109.5t-31.5 116t-15 104t-3 83zM100 900v300h300v-300h-300zM800 900v300h300v-300h-300z" />
<glyph unicode="&#xe113;" d="M-30 411l227 -227l352 353l353 -353l226 227l-578 579z" />
<glyph unicode="&#xe114;" d="M70 797l580 -579l578 579l-226 227l-353 -353l-352 353z" />
<glyph unicode="&#xe115;" d="M-198 700l299 283l300 -283h-203v-400h385l215 -200h-800v600h-196zM402 1000l215 -200h381v-400h-198l299 -283l299 283h-200v600h-796z" />
<glyph unicode="&#xe116;" d="M18 939q-5 24 10 42q14 19 39 19h896l38 162q5 17 18.5 27.5t30.5 10.5h94q20 0 35 -14.5t15 -35.5t-15 -35.5t-35 -14.5h-54l-201 -961q-2 -4 -6 -10.5t-19 -17.5t-33 -11h-31v-50q0 -20 -14.5 -35t-35.5 -15t-35.5 15t-14.5 35v50h-300v-50q0 -20 -14.5 -35t-35.5 -15 t-35.5 15t-14.5 35v50h-50q-21 0 -35.5 15t-14.5 35q0 21 14.5 35.5t35.5 14.5h535l48 200h-633q-32 0 -54.5 21t-27.5 43z" />
<glyph unicode="&#xe117;" d="M0 0v800h1200v-800h-1200zM0 900v100h200q0 41 29.5 70.5t70.5 29.5h300q41 0 70.5 -29.5t29.5 -70.5h500v-100h-1200z" />
<glyph unicode="&#xe118;" d="M1 0l300 700h1200l-300 -700h-1200zM1 400v600h200q0 41 29.5 70.5t70.5 29.5h300q41 0 70.5 -29.5t29.5 -70.5h500v-200h-1000z" />
<glyph unicode="&#xe119;" d="M302 300h198v600h-198l298 300l298 -300h-198v-600h198l-298 -300z" />
<glyph unicode="&#xe120;" d="M0 600l300 298v-198h600v198l300 -298l-300 -297v197h-600v-197z" />
<glyph unicode="&#xe121;" d="M0 100v100q0 41 29.5 70.5t70.5 29.5h1000q41 0 70.5 -29.5t29.5 -70.5v-100q0 -41 -29.5 -70.5t-70.5 -29.5h-1000q-41 0 -70.5 29.5t-29.5 70.5zM31 400l172 739q5 22 23 41.5t38 19.5h672q19 0 37.5 -22.5t23.5 -45.5l172 -732h-1138zM800 100h100v100h-100v-100z M1000 100h100v100h-100v-100z" />
<glyph unicode="&#xe122;" d="M-101 600v50q0 24 25 49t50 38l25 13v-250l-11 5.5t-24 14t-30 21.5t-24 27.5t-11 31.5zM100 500v250v8v8v7t0.5 7t1.5 5.5t2 5t3 4t4.5 3.5t6 1.5t7.5 0.5h200l675 250v-850l-675 200h-38l47 -276q2 -12 -3 -17.5t-11 -6t-21 -0.5h-8h-83q-20 0 -34.5 14t-18.5 35 q-55 337 -55 351zM1100 200v850q0 21 14.5 35.5t35.5 14.5q20 0 35 -14.5t15 -35.5v-850q0 -20 -15 -35t-35 -15q-21 0 -35.5 15t-14.5 35z" />
<glyph unicode="&#xe123;" d="M74 350q0 21 13.5 35.5t33.5 14.5h18l117 173l63 327q15 77 76 140t144 83l-18 32q-6 19 3 32t29 13h94q20 0 29 -10.5t3 -29.5q-18 -36 -18 -37q83 -19 144 -82.5t76 -140.5l63 -327l118 -173h17q20 0 33.5 -14.5t13.5 -35.5q0 -20 -13 -40t-31 -27q-8 -3 -23 -8.5 t-65 -20t-103 -25t-132.5 -19.5t-158.5 -9q-125 0 -245.5 20.5t-178.5 40.5l-58 20q-18 7 -31 27.5t-13 40.5zM497 110q12 -49 40 -79.5t63 -30.5t63 30.5t39 79.5q-48 -6 -102 -6t-103 6z" />
<glyph unicode="&#xe124;" d="M21 445l233 -45l-78 -224l224 78l45 -233l155 179l155 -179l45 233l224 -78l-78 224l234 45l-180 155l180 156l-234 44l78 225l-224 -78l-45 233l-155 -180l-155 180l-45 -233l-224 78l78 -225l-233 -44l179 -156z" />
<glyph unicode="&#xe125;" d="M0 200h200v600h-200v-600zM300 275q0 -75 100 -75h61q124 -100 139 -100h250q46 0 83 57l238 344q29 31 29 74v100q0 44 -30.5 84.5t-69.5 40.5h-328q28 118 28 125v150q0 44 -30.5 84.5t-69.5 40.5h-50q-27 0 -51 -20t-38 -48l-96 -198l-145 -196q-20 -26 -20 -63v-400z M400 300v375l150 213l100 212h50v-175l-50 -225h450v-125l-250 -375h-214l-136 100h-100z" />
<glyph unicode="&#xe126;" d="M0 400v600h200v-600h-200zM300 525v400q0 75 100 75h61q124 100 139 100h250q46 0 83 -57l238 -344q29 -31 29 -74v-100q0 -44 -30.5 -84.5t-69.5 -40.5h-328q28 -118 28 -125v-150q0 -44 -30.5 -84.5t-69.5 -40.5h-50q-27 0 -51 20t-38 48l-96 198l-145 196 q-20 26 -20 63zM400 525l150 -212l100 -213h50v175l-50 225h450v125l-250 375h-214l-136 -100h-100v-375z" />
<glyph unicode="&#xe127;" d="M8 200v600h200v-600h-200zM308 275v525q0 17 14 35.5t28 28.5l14 9l362 230q14 6 25 6q17 0 29 -12l109 -112q14 -14 14 -34q0 -18 -11 -32l-85 -121h302q85 0 138.5 -38t53.5 -110t-54.5 -111t-138.5 -39h-107l-130 -339q-7 -22 -20.5 -41.5t-28.5 -19.5h-341 q-7 0 -90 81t-83 94zM408 289l100 -89h293l131 339q6 21 19.5 41t28.5 20h203q16 0 25 15t9 36q0 20 -9 34.5t-25 14.5h-457h-6.5h-7.5t-6.5 0.5t-6 1t-5 1.5t-5.5 2.5t-4 4t-4 5.5q-5 12 -5 20q0 14 10 27l147 183l-86 83l-339 -236v-503z" />
<glyph unicode="&#xe128;" d="M-101 651q0 72 54 110t139 38l302 -1l-85 121q-11 16 -11 32q0 21 14 34l109 113q13 12 29 12q11 0 25 -6l365 -230q7 -4 17 -10.5t26.5 -26t16.5 -36.5v-526q0 -13 -86 -93.5t-94 -80.5h-341q-16 0 -29.5 20t-19.5 41l-130 339h-107q-84 0 -139 39t-55 111zM-1 601h222 q15 0 28.5 -20.5t19.5 -40.5l131 -339h293l107 89v502l-343 237l-87 -83l145 -184q10 -11 10 -26q0 -11 -5 -20q-1 -3 -3.5 -5.5l-4 -4t-5 -2.5t-5.5 -1.5t-6.5 -1t-6.5 -0.5h-7.5h-6.5h-476v-100zM1000 201v600h200v-600h-200z" />
<glyph unicode="&#xe129;" d="M97 719l230 -363q4 -6 10.5 -15.5t26 -25t36.5 -15.5h525q13 0 94 83t81 90v342q0 15 -20 28.5t-41 19.5l-339 131v106q0 84 -39 139t-111 55t-110 -53.5t-38 -138.5v-302l-121 84q-15 12 -33.5 11.5t-32.5 -13.5l-112 -110q-22 -22 -6 -53zM172 739l83 86l183 -146 q22 -18 47 -5q3 1 5.5 3.5l4 4t2.5 5t1.5 5.5t1 6.5t0.5 6.5v7.5v6.5v456q0 22 25 31t50 -0.5t25 -30.5v-202q0 -16 20 -29.5t41 -19.5l339 -130v-294l-89 -100h-503zM400 0v200h600v-200h-600z" />
<glyph unicode="&#xe130;" d="M2 585q-16 -31 6 -53l112 -110q13 -13 32 -13.5t34 10.5l121 85q0 -51 -0.5 -153.5t-0.5 -148.5q0 -84 38.5 -138t110.5 -54t111 55t39 139v106l339 131q20 6 40.5 19.5t20.5 28.5v342q0 7 -81 90t-94 83h-525q-17 0 -35.5 -14t-28.5 -28l-10 -15zM77 565l236 339h503 l89 -100v-294l-340 -130q-20 -6 -40 -20t-20 -29v-202q0 -22 -25 -31t-50 0t-25 31v456v14.5t-1.5 11.5t-5 12t-9.5 7q-24 13 -46 -5l-184 -146zM305 1104v200h600v-200h-600z" />
<glyph unicode="&#xe131;" d="M5 597q0 122 47.5 232.5t127.5 190.5t190.5 127.5t232.5 47.5q162 0 299.5 -80t217.5 -218t80 -300t-80 -299.5t-217.5 -217.5t-299.5 -80t-300 80t-218 217.5t-80 299.5zM298 701l2 -201h300l-2 -194l402 294l-402 298v-197h-300z" />
<glyph unicode="&#xe132;" d="M0 597q0 122 47.5 232.5t127.5 190.5t190.5 127.5t231.5 47.5q122 0 232.5 -47.5t190.5 -127.5t127.5 -190.5t47.5 -232.5q0 -162 -80 -299.5t-218 -217.5t-300 -80t-299.5 80t-217.5 217.5t-80 299.5zM200 600l402 -294l-2 194h300l2 201h-300v197z" />
<glyph unicode="&#xe133;" d="M5 597q0 122 47.5 232.5t127.5 190.5t190.5 127.5t232.5 47.5q162 0 299.5 -80t217.5 -218t80 -300t-80 -299.5t-217.5 -217.5t-299.5 -80t-300 80t-218 217.5t-80 299.5zM300 600h200v-300h200v300h200l-300 400z" />
<glyph unicode="&#xe134;" d="M5 597q0 122 47.5 232.5t127.5 190.5t190.5 127.5t232.5 47.5q162 0 299.5 -80t217.5 -218t80 -300t-80 -299.5t-217.5 -217.5t-299.5 -80t-300 80t-218 217.5t-80 299.5zM300 600l300 -400l300 400h-200v300h-200v-300h-200z" />
<glyph unicode="&#xe135;" d="M5 597q0 122 47.5 232.5t127.5 190.5t190.5 127.5t232.5 47.5q121 0 231.5 -47.5t190.5 -127.5t127.5 -190.5t47.5 -232.5q0 -162 -80 -299.5t-217.5 -217.5t-299.5 -80t-300 80t-218 217.5t-80 299.5zM254 780q-8 -33 5.5 -92.5t7.5 -87.5q0 -9 17 -44t16 -60 q12 0 23 -5.5t23 -15t20 -13.5q24 -12 108 -42q22 -8 53 -31.5t59.5 -38.5t57.5 -11q8 -18 -15 -55t-20 -57q42 -71 87 -80q0 -6 -3 -15.5t-3.5 -14.5t4.5 -17q104 -3 221 112q30 29 47 47t34.5 49t20.5 62q-14 9 -37 9.5t-36 7.5q-14 7 -49 15t-52 19q-9 0 -39.5 -0.5 t-46.5 -1.5t-39 -6.5t-39 -16.5q-50 -35 -66 -12q-4 2 -3.5 25.5t0.5 25.5q-6 13 -26.5 17t-24.5 7q2 22 -2 41t-16.5 28t-38.5 -20q-23 -25 -42 4q-19 28 -8 58q6 16 22 22q6 -1 26 -1.5t33.5 -4t19.5 -13.5q12 -19 32 -37.5t34 -27.5l14 -8q0 3 9.5 39.5t5.5 57.5 q-4 23 14.5 44.5t22.5 31.5q5 14 10 35t8.5 31t15.5 22.5t34 21.5q-6 18 10 37q8 0 23.5 -1.5t24.5 -1.5t20.5 4.5t20.5 15.5q-10 23 -30.5 42.5t-38 30t-49 26.5t-43.5 23q11 39 2 44q31 -13 58 -14.5t39 3.5l11 4q7 36 -16.5 53.5t-64.5 28.5t-56 23q-19 -3 -37 0 q-15 -12 -36.5 -21t-34.5 -12t-44 -8t-39 -6q-15 -3 -45.5 0.5t-45.5 -2.5q-21 -7 -52 -26.5t-34 -34.5q-3 -11 6.5 -22.5t8.5 -18.5q-3 -34 -27.5 -90.5t-29.5 -79.5zM518 916q3 12 16 30t16 25q10 -10 18.5 -10t14 6t14.5 14.5t16 12.5q0 -24 17 -66.5t17 -43.5 q-9 2 -31 5t-36 5t-32 8t-30 14zM692 1003h1h-1z" />
<glyph unicode="&#xe136;" d="M0 164.5q0 21.5 15 37.5l600 599q-33 101 6 201.5t135 154.5q164 92 306 -9l-259 -138l145 -232l251 126q13 -175 -151 -267q-123 -70 -253 -23l-596 -596q-15 -16 -36.5 -16t-36.5 16l-111 110q-15 15 -15 36.5z" />
<glyph unicode="&#xe137;" horiz-adv-x="1220" d="M0 196v100q0 41 29.5 70.5t70.5 29.5h1000q41 0 70.5 -29.5t29.5 -70.5v-100q0 -41 -29.5 -70.5t-70.5 -29.5h-1000q-41 0 -70.5 29.5t-29.5 70.5zM0 596v100q0 41 29.5 70.5t70.5 29.5h1000q41 0 70.5 -29.5t29.5 -70.5v-100q0 -41 -29.5 -70.5t-70.5 -29.5h-1000 q-41 0 -70.5 29.5t-29.5 70.5zM0 996v100q0 41 29.5 70.5t70.5 29.5h1000q41 0 70.5 -29.5t29.5 -70.5v-100q0 -41 -29.5 -70.5t-70.5 -29.5h-1000q-41 0 -70.5 29.5t-29.5 70.5zM600 596h500v100h-500v-100zM800 196h300v100h-300v-100zM900 996h200v100h-200v-100z" />
<glyph unicode="&#xe138;" d="M100 1100v100h1000v-100h-1000zM150 1000h900l-350 -500v-300l-200 -200v500z" />
<glyph unicode="&#xe139;" d="M0 200v200h1200v-200q0 -41 -29.5 -70.5t-70.5 -29.5h-1000q-41 0 -70.5 29.5t-29.5 70.5zM0 500v400q0 41 29.5 70.5t70.5 29.5h300v100q0 41 29.5 70.5t70.5 29.5h200q41 0 70.5 -29.5t29.5 -70.5v-100h300q41 0 70.5 -29.5t29.5 -70.5v-400h-500v100h-200v-100h-500z M500 1000h200v100h-200v-100z" />
<glyph unicode="&#xe140;" d="M0 0v400l129 -129l200 200l142 -142l-200 -200l129 -129h-400zM0 800l129 129l200 -200l142 142l-200 200l129 129h-400v-400zM729 329l142 142l200 -200l129 129v-400h-400l129 129zM729 871l200 200l-129 129h400v-400l-129 129l-200 -200z" />
<glyph unicode="&#xe141;" d="M0 596q0 162 80 299t217 217t299 80t299 -80t217 -217t80 -299t-80 -299t-217 -217t-299 -80t-299 80t-217 217t-80 299zM182 596q0 -172 121.5 -293t292.5 -121t292.5 121t121.5 293q0 171 -121.5 292.5t-292.5 121.5t-292.5 -121.5t-121.5 -292.5zM291 655 q0 23 15.5 38.5t38.5 15.5t39 -16t16 -38q0 -23 -16 -39t-39 -16q-22 0 -38 16t-16 39zM400 850q0 22 16 38.5t39 16.5q22 0 38 -16t16 -39t-16 -39t-38 -16q-23 0 -39 16.5t-16 38.5zM514 609q0 32 20.5 56.5t51.5 29.5l122 126l1 1q-9 14 -9 28q0 22 16 38.5t39 16.5 q22 0 38 -16t16 -39t-16 -39t-38 -16q-14 0 -29 10l-55 -145q17 -22 17 -51q0 -36 -25.5 -61.5t-61.5 -25.5t-61.5 25.5t-25.5 61.5zM800 655q0 22 16 38t39 16t38.5 -15.5t15.5 -38.5t-16 -39t-38 -16q-23 0 -39 16t-16 39z" />
<glyph unicode="&#xe142;" d="M-40 375q-13 -95 35 -173q35 -57 94 -89t129 -32q63 0 119 28q33 16 65 40.5t52.5 45.5t59.5 64q40 44 57 61l394 394q35 35 47 84t-3 96q-27 87 -117 104q-20 2 -29 2q-46 0 -78.5 -16.5t-67.5 -51.5l-389 -396l-7 -7l69 -67l377 373q20 22 39 38q23 23 50 23 q38 0 53 -36q16 -39 -20 -75l-547 -547q-52 -52 -125 -52q-55 0 -100 33t-54 96q-5 35 2.5 66t31.5 63t42 50t56 54q24 21 44 41l348 348q52 52 82.5 79.5t84 54t107.5 26.5q25 0 48 -4q95 -17 154 -94.5t51 -175.5q-7 -101 -98 -192l-252 -249l-253 -256l7 -7l69 -60 l517 511q67 67 95 157t11 183q-16 87 -67 154t-130 103q-69 33 -152 33q-107 0 -197 -55q-40 -24 -111 -95l-512 -512q-68 -68 -81 -163z" />
<glyph unicode="&#xe143;" d="M80 784q0 131 98.5 229.5t230.5 98.5q143 0 241 -129q103 129 246 129q129 0 226 -98.5t97 -229.5q0 -46 -17.5 -91t-61 -99t-77 -89.5t-104.5 -105.5q-197 -191 -293 -322l-17 -23l-16 23q-43 58 -100 122.5t-92 99.5t-101 100q-71 70 -104.5 105.5t-77 89.5t-61 99 t-17.5 91zM250 784q0 -27 30.5 -70t61.5 -75.5t95 -94.5l22 -22q93 -90 190 -201q82 92 195 203l12 12q64 62 97.5 97t64.5 79t31 72q0 71 -48 119.5t-105 48.5q-74 0 -132 -83l-118 -171l-114 174q-51 80 -123 80q-60 0 -109.5 -49.5t-49.5 -118.5z" />
<glyph unicode="&#xe144;" d="M57 353q0 -95 66 -159l141 -142q68 -66 159 -66q93 0 159 66l283 283q66 66 66 159t-66 159l-141 141q-8 9 -19 17l-105 -105l212 -212l-389 -389l-247 248l95 95l-18 18q-46 45 -75 101l-55 -55q-66 -66 -66 -159zM269 706q0 -93 66 -159l141 -141q7 -7 19 -17l105 105 l-212 212l389 389l247 -247l-95 -96l18 -17q47 -49 77 -100l29 29q35 35 62.5 88t27.5 96q0 93 -66 159l-141 141q-66 66 -159 66q-95 0 -159 -66l-283 -283q-66 -64 -66 -159z" />
<glyph unicode="&#xe145;" d="M200 100v953q0 21 30 46t81 48t129 38t163 15t162 -15t127 -38t79 -48t29 -46v-953q0 -41 -29.5 -70.5t-70.5 -29.5h-600q-41 0 -70.5 29.5t-29.5 70.5zM300 300h600v700h-600v-700zM496 150q0 -43 30.5 -73.5t73.5 -30.5t73.5 30.5t30.5 73.5t-30.5 73.5t-73.5 30.5 t-73.5 -30.5t-30.5 -73.5z" />
<glyph unicode="&#xe146;" d="M0 0l303 380l207 208l-210 212h300l267 279l-35 36q-15 14 -15 35t15 35q14 15 35 15t35 -15l283 -282q15 -15 15 -36t-15 -35q-14 -15 -35 -15t-35 15l-36 35l-279 -267v-300l-212 210l-208 -207z" />
<glyph unicode="&#xe148;" d="M295 433h139q5 -77 48.5 -126.5t117.5 -64.5v335q-6 1 -15.5 4t-11.5 3q-46 14 -79 26.5t-72 36t-62.5 52t-40 72.5t-16.5 99q0 92 44 159.5t109 101t144 40.5v78h100v-79q38 -4 72.5 -13.5t75.5 -31.5t71 -53.5t51.5 -84t24.5 -118.5h-159q-8 72 -35 109.5t-101 50.5 v-307l64 -14q34 -7 64 -16.5t70 -31.5t67.5 -52t47.5 -80.5t20 -112.5q0 -139 -89 -224t-244 -96v-77h-100v78q-152 17 -237 104q-40 40 -52.5 93.5t-15.5 139.5zM466 889q0 -29 8 -51t16.5 -34t29.5 -22.5t31 -13.5t38 -10q7 -2 11 -3v274q-61 -8 -97.5 -37.5t-36.5 -102.5 zM700 237q170 18 170 151q0 64 -44 99.5t-126 60.5v-311z" />
<glyph unicode="&#xe149;" d="M100 600v100h166q-24 49 -44 104q-10 26 -14.5 55.5t-3 72.5t25 90t68.5 87q97 88 263 88q129 0 230 -89t101 -208h-153q0 52 -34 89.5t-74 51.5t-76 14q-37 0 -79 -14.5t-62 -35.5q-41 -44 -41 -101q0 -28 16.5 -69.5t28 -62.5t41.5 -72h241v-100h-197q8 -50 -2.5 -115 t-31.5 -94q-41 -59 -99 -113q35 11 84 18t70 7q33 1 103 -16t103 -17q76 0 136 30l50 -147q-41 -25 -80.5 -36.5t-59 -13t-61.5 -1.5q-23 0 -128 33t-155 29q-39 -4 -82 -17t-66 -25l-24 -11l-55 145l16.5 11t15.5 10t13.5 9.5t14.5 12t14.5 14t17.5 18.5q48 55 54 126.5 t-30 142.5h-221z" />
<glyph unicode="&#xe150;" d="M2 300l298 -300l298 300h-198v900h-200v-900h-198zM602 900l298 300l298 -300h-198v-900h-200v900h-198z" />
<glyph unicode="&#xe151;" d="M2 300h198v900h200v-900h198l-298 -300zM700 0v200h100v-100h200v-100h-300zM700 400v100h300v-200h-99v-100h-100v100h99v100h-200zM700 700v500h300v-500h-100v100h-100v-100h-100zM801 900h100v200h-100v-200z" />
<glyph unicode="&#xe152;" d="M2 300h198v900h200v-900h198l-298 -300zM700 0v500h300v-500h-100v100h-100v-100h-100zM700 700v200h100v-100h200v-100h-300zM700 1100v100h300v-200h-99v-100h-100v100h99v100h-200zM801 200h100v200h-100v-200z" />
<glyph unicode="&#xe153;" d="M2 300l298 -300l298 300h-198v900h-200v-900h-198zM800 100v400h300v-500h-100v100h-200zM800 1100v100h200v-500h-100v400h-100zM901 200h100v200h-100v-200z" />
<glyph unicode="&#xe154;" d="M2 300l298 -300l298 300h-198v900h-200v-900h-198zM800 400v100h200v-500h-100v400h-100zM800 800v400h300v-500h-100v100h-200zM901 900h100v200h-100v-200z" />
<glyph unicode="&#xe155;" d="M2 300l298 -300l298 300h-198v900h-200v-900h-198zM700 100v200h500v-200h-500zM700 400v200h400v-200h-400zM700 700v200h300v-200h-300zM700 1000v200h200v-200h-200z" />
<glyph unicode="&#xe156;" d="M2 300l298 -300l298 300h-198v900h-200v-900h-198zM700 100v200h200v-200h-200zM700 400v200h300v-200h-300zM700 700v200h400v-200h-400zM700 1000v200h500v-200h-500z" />
<glyph unicode="&#xe157;" d="M0 400v300q0 165 117.5 282.5t282.5 117.5h300q162 0 281 -118.5t119 -281.5v-300q0 -165 -118.5 -282.5t-281.5 -117.5h-300q-165 0 -282.5 117.5t-117.5 282.5zM200 300q0 -41 29.5 -70.5t70.5 -29.5h500q41 0 70.5 29.5t29.5 70.5v500q0 41 -29.5 70.5t-70.5 29.5 h-500q-41 0 -70.5 -29.5t-29.5 -70.5v-500z" />
<glyph unicode="&#xe158;" d="M0 400v300q0 163 119 281.5t281 118.5h300q165 0 282.5 -117.5t117.5 -282.5v-300q0 -165 -117.5 -282.5t-282.5 -117.5h-300q-163 0 -281.5 117.5t-118.5 282.5zM200 300q0 -41 29.5 -70.5t70.5 -29.5h500q41 0 70.5 29.5t29.5 70.5v500q0 41 -29.5 70.5t-70.5 29.5 h-500q-41 0 -70.5 -29.5t-29.5 -70.5v-500zM400 300l333 250l-333 250v-500z" />
<glyph unicode="&#xe159;" d="M0 400v300q0 163 117.5 281.5t282.5 118.5h300q163 0 281.5 -119t118.5 -281v-300q0 -165 -117.5 -282.5t-282.5 -117.5h-300q-165 0 -282.5 117.5t-117.5 282.5zM200 300q0 -41 29.5 -70.5t70.5 -29.5h500q41 0 70.5 29.5t29.5 70.5v500q0 41 -29.5 70.5t-70.5 29.5 h-500q-41 0 -70.5 -29.5t-29.5 -70.5v-500zM300 700l250 -333l250 333h-500z" />
<glyph unicode="&#xe160;" d="M0 400v300q0 165 117.5 282.5t282.5 117.5h300q165 0 282.5 -117.5t117.5 -282.5v-300q0 -162 -118.5 -281t-281.5 -119h-300q-165 0 -282.5 118.5t-117.5 281.5zM200 300q0 -41 29.5 -70.5t70.5 -29.5h500q41 0 70.5 29.5t29.5 70.5v500q0 41 -29.5 70.5t-70.5 29.5 h-500q-41 0 -70.5 -29.5t-29.5 -70.5v-500zM300 400h500l-250 333z" />
<glyph unicode="&#xe161;" d="M0 400v300h300v200l400 -350l-400 -350v200h-300zM500 0v200h500q41 0 70.5 29.5t29.5 70.5v500q0 41 -29.5 70.5t-70.5 29.5h-500v200h400q165 0 282.5 -117.5t117.5 -282.5v-300q0 -165 -117.5 -282.5t-282.5 -117.5h-400z" />
<glyph unicode="&#xe162;" d="M217 519q8 -19 31 -19h302q-155 -438 -160 -458q-5 -21 4 -32l9 -8h9q14 0 26 15q11 13 274.5 321.5t264.5 308.5q14 19 5 36q-8 17 -31 17l-301 -1q1 4 78 219.5t79 227.5q2 15 -5 27l-9 9h-9q-15 0 -25 -16q-4 -6 -98 -111.5t-228.5 -257t-209.5 -237.5q-16 -19 -6 -41 z" />
<glyph unicode="&#xe163;" d="M0 400q0 -165 117.5 -282.5t282.5 -117.5h300q47 0 100 15v185h-500q-41 0 -70.5 29.5t-29.5 70.5v500q0 41 29.5 70.5t70.5 29.5h500v185q-14 4 -114 7.5t-193 5.5l-93 2q-165 0 -282.5 -117.5t-117.5 -282.5v-300zM600 400v300h300v200l400 -350l-400 -350v200h-300z " />
<glyph unicode="&#xe164;" d="M0 400q0 -165 117.5 -282.5t282.5 -117.5h300q163 0 281.5 117.5t118.5 282.5v98l-78 73l-122 -123v-148q0 -41 -29.5 -70.5t-70.5 -29.5h-500q-41 0 -70.5 29.5t-29.5 70.5v500q0 41 29.5 70.5t70.5 29.5h156l118 122l-74 78h-100q-165 0 -282.5 -117.5t-117.5 -282.5 v-300zM496 709l353 342l-149 149h500v-500l-149 149l-342 -353z" />
<glyph unicode="&#xe165;" d="M4 600q0 162 80 299t217 217t299 80t299 -80t217 -217t80 -299t-80 -299t-217 -217t-299 -80t-299 80t-217 217t-80 299zM186 600q0 -171 121.5 -292.5t292.5 -121.5t292.5 121.5t121.5 292.5t-121.5 292.5t-292.5 121.5t-292.5 -121.5t-121.5 -292.5zM406 600 q0 80 57 137t137 57t137 -57t57 -137t-57 -137t-137 -57t-137 57t-57 137z" />
<glyph unicode="&#xe166;" d="M0 0v275q0 11 7 18t18 7h1048q11 0 19 -7.5t8 -17.5v-275h-1100zM100 800l445 -500l450 500h-295v400h-300v-400h-300zM900 150h100v50h-100v-50z" />
<glyph unicode="&#xe167;" d="M0 0v275q0 11 7 18t18 7h1048q11 0 19 -7.5t8 -17.5v-275h-1100zM100 700h300v-300h300v300h295l-445 500zM900 150h100v50h-100v-50z" />
<glyph unicode="&#xe168;" d="M0 0v275q0 11 7 18t18 7h1048q11 0 19 -7.5t8 -17.5v-275h-1100zM100 705l305 -305l596 596l-154 155l-442 -442l-150 151zM900 150h100v50h-100v-50z" />
<glyph unicode="&#xe169;" d="M0 0v275q0 11 7 18t18 7h1048q11 0 19 -7.5t8 -17.5v-275h-1100zM100 988l97 -98l212 213l-97 97zM200 400l697 1l3 699l-250 -239l-149 149l-212 -212l149 -149zM900 150h100v50h-100v-50z" />
<glyph unicode="&#xe170;" d="M0 0v275q0 11 7 18t18 7h1048q11 0 19 -7.5t8 -17.5v-275h-1100zM200 612l212 -212l98 97l-213 212zM300 1200l239 -250l-149 -149l212 -212l149 148l249 -237l-1 697zM900 150h100v50h-100v-50z" />
<glyph unicode="&#xe171;" d="M23 415l1177 784v-1079l-475 272l-310 -393v416h-392zM494 210l672 938l-672 -712v-226z" />
<glyph unicode="&#xe172;" d="M0 150v1000q0 20 14.5 35t35.5 15h250v-300h500v300h100l200 -200v-850q0 -21 -15 -35.5t-35 -14.5h-150v400h-700v-400h-150q-21 0 -35.5 14.5t-14.5 35.5zM600 1000h100v200h-100v-200z" />
<glyph unicode="&#xe173;" d="M0 150v1000q0 20 14.5 35t35.5 15h250v-300h500v300h100l200 -200v-218l-276 -275l-120 120l-126 -127h-378v-400h-150q-21 0 -35.5 14.5t-14.5 35.5zM581 306l123 123l120 -120l353 352l123 -123l-475 -476zM600 1000h100v200h-100v-200z" />
<glyph unicode="&#xe174;" d="M0 150v1000q0 20 14.5 35t35.5 15h250v-300h500v300h100l200 -200v-269l-103 -103l-170 170l-298 -298h-329v-400h-150q-21 0 -35.5 14.5t-14.5 35.5zM600 1000h100v200h-100v-200zM700 133l170 170l-170 170l127 127l170 -170l170 170l127 -128l-170 -169l170 -170 l-127 -127l-170 170l-170 -170z" />
<glyph unicode="&#xe175;" d="M0 150v1000q0 20 14.5 35t35.5 15h250v-300h500v300h100l200 -200v-300h-400v-200h-500v-400h-150q-21 0 -35.5 14.5t-14.5 35.5zM600 300l300 -300l300 300h-200v300h-200v-300h-200zM600 1000v200h100v-200h-100z" />
<glyph unicode="&#xe176;" d="M0 150v1000q0 20 14.5 35t35.5 15h250v-300h500v300h100l200 -200v-402l-200 200l-298 -298h-402v-400h-150q-21 0 -35.5 14.5t-14.5 35.5zM600 300h200v-300h200v300h200l-300 300zM600 1000v200h100v-200h-100z" />
<glyph unicode="&#xe177;" d="M0 250q0 -21 14.5 -35.5t35.5 -14.5h1100q21 0 35.5 14.5t14.5 35.5v550h-1200v-550zM0 900h1200v150q0 21 -14.5 35.5t-35.5 14.5h-1100q-21 0 -35.5 -14.5t-14.5 -35.5v-150zM100 300v200h400v-200h-400z" />
<glyph unicode="&#xe178;" d="M0 400l300 298v-198h400v-200h-400v-198zM100 800v200h100v-200h-100zM300 800v200h100v-200h-100zM500 800v200h400v198l300 -298l-300 -298v198h-400zM800 300v200h100v-200h-100zM1000 300h100v200h-100v-200z" />
<glyph unicode="&#xe179;" d="M100 700v400l50 100l50 -100v-300h100v300l50 100l50 -100v-300h100v300l50 100l50 -100v-400l-100 -203v-447q0 -21 -14.5 -35.5t-35.5 -14.5h-200q-21 0 -35.5 14.5t-14.5 35.5v447zM800 597q0 -29 10.5 -55.5t25 -43t29 -28.5t25.5 -18l10 -5v-397q0 -21 14.5 -35.5 t35.5 -14.5h200q21 0 35.5 14.5t14.5 35.5v1106q0 31 -18 40.5t-44 -7.5l-276 -116q-25 -17 -43.5 -51.5t-18.5 -65.5v-359z" />
<glyph unicode="&#xe180;" d="M100 0h400v56q-75 0 -87.5 6t-12.5 44v394h500v-394q0 -38 -12.5 -44t-87.5 -6v-56h400v56q-4 0 -11 0.5t-24 3t-30 7t-24 15t-11 24.5v888q0 22 25 34.5t50 13.5l25 2v56h-400v-56q75 0 87.5 -6t12.5 -44v-394h-500v394q0 38 12.5 44t87.5 6v56h-400v-56q4 0 11 -0.5 t24 -3t30 -7t24 -15t11 -24.5v-888q0 -22 -25 -34.5t-50 -13.5l-25 -2v-56z" />
<glyph unicode="&#xe181;" d="M0 300q0 -41 29.5 -70.5t70.5 -29.5h300q41 0 70.5 29.5t29.5 70.5v500q0 41 -29.5 70.5t-70.5 29.5h-300q-41 0 -70.5 -29.5t-29.5 -70.5v-500zM100 100h400l200 200h105l295 98v-298h-425l-100 -100h-375zM100 300v200h300v-200h-300zM100 600v200h300v-200h-300z M100 1000h400l200 -200v-98l295 98h105v200h-425l-100 100h-375zM700 402v163l400 133v-163z" />
<glyph unicode="&#xe182;" d="M16.5 974.5q0.5 -21.5 16 -90t46.5 -140t104 -177.5t175 -208q103 -103 207.5 -176t180 -103.5t137 -47t92.5 -16.5l31 1l163 162q17 18 13.5 41t-22.5 37l-192 136q-19 14 -45 12t-42 -19l-118 -118q-142 101 -268 227t-227 268l118 118q17 17 20 41.5t-11 44.5 l-139 194q-14 19 -36.5 22t-40.5 -14l-162 -162q-1 -11 -0.5 -32.5z" />
<glyph unicode="&#xe183;" d="M0 50v212q0 20 10.5 45.5t24.5 39.5l365 303v50q0 4 1 10.5t12 22.5t30 28.5t60 23t97 10.5t97 -10t60 -23.5t30 -27.5t12 -24l1 -10v-50l365 -303q14 -14 24.5 -39.5t10.5 -45.5v-212q0 -21 -14.5 -35.5t-35.5 -14.5h-1100q-20 0 -35 14.5t-15 35.5zM0 712 q0 -21 14.5 -33.5t34.5 -8.5l202 33q20 4 34.5 21t14.5 38v146q141 24 300 24t300 -24v-146q0 -21 14.5 -38t34.5 -21l202 -33q20 -4 34.5 8.5t14.5 33.5v200q-6 8 -19 20.5t-63 45t-112 57t-171 45t-235 20.5q-92 0 -175 -10.5t-141.5 -27t-108.5 -36.5t-81.5 -40 t-53.5 -36.5t-31 -27.5l-9 -10v-200z" />
<glyph unicode="&#xe184;" d="M100 0v100h1100v-100h-1100zM175 200h950l-125 150v250l100 100v400h-100v-200h-100v200h-200v-200h-100v200h-200v-200h-100v200h-100v-400l100 -100v-250z" />
<glyph unicode="&#xe185;" d="M100 0h300v400q0 41 -29.5 70.5t-70.5 29.5h-100q-41 0 -70.5 -29.5t-29.5 -70.5v-400zM500 0v1000q0 41 29.5 70.5t70.5 29.5h100q41 0 70.5 -29.5t29.5 -70.5v-1000h-300zM900 0v700q0 41 29.5 70.5t70.5 29.5h100q41 0 70.5 -29.5t29.5 -70.5v-700h-300z" />
<glyph unicode="&#xe186;" d="M-100 300v500q0 124 88 212t212 88h700q124 0 212 -88t88 -212v-500q0 -124 -88 -212t-212 -88h-700q-124 0 -212 88t-88 212zM100 200h900v700h-900v-700zM200 300h300v300h-200v100h200v100h-300v-300h200v-100h-200v-100zM600 300h200v100h100v300h-100v100h-200v-500 zM700 400v300h100v-300h-100z" />
<glyph unicode="&#xe187;" d="M-100 300v500q0 124 88 212t212 88h700q124 0 212 -88t88 -212v-500q0 -124 -88 -212t-212 -88h-700q-124 0 -212 88t-88 212zM100 200h900v700h-900v-700zM200 300h100v200h100v-200h100v500h-100v-200h-100v200h-100v-500zM600 300h200v100h100v300h-100v100h-200v-500 zM700 400v300h100v-300h-100z" />
<glyph unicode="&#xe188;" d="M-100 300v500q0 124 88 212t212 88h700q124 0 212 -88t88 -212v-500q0 -124 -88 -212t-212 -88h-700q-124 0 -212 88t-88 212zM100 200h900v700h-900v-700zM200 300h300v100h-200v300h200v100h-300v-500zM600 300h300v100h-200v300h200v100h-300v-500z" />
<glyph unicode="&#xe189;" d="M-100 300v500q0 124 88 212t212 88h700q124 0 212 -88t88 -212v-500q0 -124 -88 -212t-212 -88h-700q-124 0 -212 88t-88 212zM100 200h900v700h-900v-700zM200 550l300 -150v300zM600 400l300 150l-300 150v-300z" />
<glyph unicode="&#xe190;" d="M-100 300v500q0 124 88 212t212 88h700q124 0 212 -88t88 -212v-500q0 -124 -88 -212t-212 -88h-700q-124 0 -212 88t-88 212zM100 200h900v700h-900v-700zM200 300v500h700v-500h-700zM300 400h130q41 0 68 42t27 107t-28.5 108t-66.5 43h-130v-300zM575 549 q0 -65 27 -107t68 -42h130v300h-130q-38 0 -66.5 -43t-28.5 -108z" />
<glyph unicode="&#xe191;" d="M-100 300v500q0 124 88 212t212 88h700q124 0 212 -88t88 -212v-500q0 -124 -88 -212t-212 -88h-700q-124 0 -212 88t-88 212zM100 200h900v700h-900v-700zM200 300h300v300h-200v100h200v100h-300v-300h200v-100h-200v-100zM601 300h100v100h-100v-100zM700 700h100 v-400h100v500h-200v-100z" />
<glyph unicode="&#xe192;" d="M-100 300v500q0 124 88 212t212 88h700q124 0 212 -88t88 -212v-500q0 -124 -88 -212t-212 -88h-700q-124 0 -212 88t-88 212zM100 200h900v700h-900v-700zM200 300h300v400h-200v100h-100v-500zM301 400v200h100v-200h-100zM601 300h100v100h-100v-100zM700 700h100 v-400h100v500h-200v-100z" />
<glyph unicode="&#xe193;" d="M-100 300v500q0 124 88 212t212 88h700q124 0 212 -88t88 -212v-500q0 -124 -88 -212t-212 -88h-700q-124 0 -212 88t-88 212zM100 200h900v700h-900v-700zM200 700v100h300v-300h-99v-100h-100v100h99v200h-200zM201 300v100h100v-100h-100zM601 300v100h100v-100h-100z M700 700v100h200v-500h-100v400h-100z" />
<glyph unicode="&#xe194;" d="M4 600q0 162 80 299t217 217t299 80t299 -80t217 -217t80 -299t-80 -299t-217 -217t-299 -80t-299 80t-217 217t-80 299zM186 600q0 -171 121.5 -292.5t292.5 -121.5t292.5 121.5t121.5 292.5t-121.5 292.5t-292.5 121.5t-292.5 -121.5t-121.5 -292.5zM400 500v200 l100 100h300v-100h-300v-200h300v-100h-300z" />
<glyph unicode="&#xe195;" d="M0 600q0 162 80 299t217 217t299 80t299 -80t217 -217t80 -299t-80 -299t-217 -217t-299 -80t-299 80t-217 217t-80 299zM182 600q0 -171 121.5 -292.5t292.5 -121.5t292.5 121.5t121.5 292.5t-121.5 292.5t-292.5 121.5t-292.5 -121.5t-121.5 -292.5zM400 400v400h300 l100 -100v-100h-100v100h-200v-100h200v-100h-200v-100h-100zM700 400v100h100v-100h-100z" />
<glyph unicode="&#xe197;" d="M-14 494q0 -80 56.5 -137t135.5 -57h222v300h400v-300h128q120 0 205 86.5t85 207.5t-85 207t-205 86q-46 0 -90 -14q-44 97 -134.5 156.5t-200.5 59.5q-152 0 -260 -107.5t-108 -260.5q0 -25 2 -37q-66 -14 -108.5 -67.5t-42.5 -122.5zM300 200h200v300h200v-300h200 l-300 -300z" />
<glyph unicode="&#xe198;" d="M-14 494q0 -80 56.5 -137t135.5 -57h8l414 414l403 -403q94 26 154.5 104.5t60.5 178.5q0 120 -85 206.5t-205 86.5q-46 0 -90 -14q-44 97 -134.5 156.5t-200.5 59.5q-152 0 -260 -107.5t-108 -260.5q0 -25 2 -37q-66 -14 -108.5 -67.5t-42.5 -122.5zM300 200l300 300 l300 -300h-200v-300h-200v300h-200z" />
<glyph unicode="&#xe199;" d="M100 200h400v-155l-75 -45h350l-75 45v155h400l-270 300h170l-270 300h170l-300 333l-300 -333h170l-270 -300h170z" />
<glyph unicode="&#xe200;" d="M121 700q0 -53 28.5 -97t75.5 -65q-4 -16 -4 -38q0 -74 52.5 -126.5t126.5 -52.5q56 0 100 30v-306l-75 -45h350l-75 45v306q46 -30 100 -30q74 0 126.5 52.5t52.5 126.5q0 24 -9 55q50 32 79.5 83t29.5 112q0 90 -61.5 155.5t-150.5 71.5q-26 89 -99.5 145.5 t-167.5 56.5q-116 0 -197.5 -81.5t-81.5 -197.5q0 -4 1 -11.5t1 -11.5q-14 2 -23 2q-74 0 -126.5 -52.5t-52.5 -126.5z" />
</font>
</defs></svg> 


<!doctype html>
<html>
<head>
    <title>Angular Tree</title>
    <script src="demo/jquery.2.0.3.js"></script>
    <script src="demo/angular.1.2.29.js"></script>
    <script src="demo/bootstrap.3.1.1.js"></script>
    <script src="demo/ui-bootstrap-tpls.0.11.2.js"></script>
    <script src="demo/prettify.1.0.1.js"></script>

    <link  href="demo/bootstrap.3.1.1.css" rel="stylesheet" type="text/css">
    <link  href="demo/prettify-style.css" rel="stylesheet" type="text/css">

    <script src="angular-tree-control.js"></script>
    <link rel="stylesheet" type="text/css" href="css/tree-control.css">
    <link rel="stylesheet" type="text/css" href="css/tree-control-attribute.css">
    <style>
        .header{padding-top: 50px; padding-bottom:50px; background-color: #444980;}
        .head-container{width: 1140px; margin:auto;}
        .header h1 {color: #fffffa; font-size: 60px}
        .header h2 {color: #fffffa; font-size: 24px; font-style: normal}
        .example-caption {color: #bbb; font-size: 12px}
        .docs-body{width: 1140px; margin: auto auto 50px; }
        .docs-footer{background-color: #F5F5F5; text-align: center; padding: 30px 0; border-top: #e5e5e5}
        .tab-pane{background-color: #f8f8f8; border-right: 1px solid #ccc;border-left: 1px solid #ccc;border-bottom: 1px solid #ccc; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px }
        .nav li.active a{background-color: #f8f8f8}
        pre.code {border:none; background-color: #f8f8f8; padding: 10px; margin: 0; font-family: Consolas, 'Liberation Mono', Courier, monospace;}
        .docs-sidenav { margin-top: 45px; margin-bottom: 0; }
        .docs-sidenav > li > a {display: block; font-size: 13px; font-weight: 500; color: #999; padding: 4px 20px;}
        .docs-sidenav > li.active > a {font-weight: 700; color: #563d7c; border-left: 2px solid #563d7c;padding-left: 18px;}
        .docs-sidenav > li > a:hover {background-color: transparent; color: #563d7c; border-left: 1px solid #563d7c;padding-left: 19px;}
        .type-hint-object {background:#999;}
        .type-hint-boolean {background:rgb(18, 131, 39);}
        .type-hint-number {background:rgb(189, 63, 66);}
    </style>
</head>
<body ng-app="example">
<a href="https://github.com/wix/angular-tree-control"><img style="position: absolute; top: 0; right: 0; border: 0;" src="https://camo.githubusercontent.com/652c5b9acfaddf3a9c326fa6bde407b87f7be0f4/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f6f72616e67655f6666373630302e706e67" alt="Fork me on GitHub" data-canonical-src="https://s3.amazonaws.com/github/ribbons/forkme_right_orange_ff7600.png"></a>
<div class="header">
    <div class="head-container">
        <h1>Angular Tree</h1>
        <h2>The AngularJS tree component</h2>
    </div>
</div>
<div class="row docs-body">
<div class="col-md-9">

<section id="classic" ng-controller="Classic">
    <div class="page-header">
        <h1>Basic Usage <small>(Classic style, default configuration)</small></h1>
    </div>
    <div class="row">
        <div class="col-md-6 show-grid">
            <div class="panel panel-default">
                <div class="panel-body">
                    <div class="example-caption">EXAMPLE:</div>
                    <div save-content="classic-html">
                        <treecontrol class="tree-classic"
                                     tree-model="treedata"
                                     on-selection="showSelected(node)">
                            label: {{node.label}} ({{node.id}})
                        </treecontrol>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <p>Classic style of the tree control, set using the class <code>tree-classic</code>.</p>
            <p>Click on the folder icons to open and close the tree nodes. Click on the node label to select a node in the tree. A Second click on the node label will unselect the node.</p>
            <p>The tree data is set using the <code>tree-model</code> attribute, which accepts either a node object or an array of node objects.
                A Node object is a regular javascript object which has a <code>children</code> array property (children is the default name,
                it can be overridden using the tree options). </p>
            <p>Selected node: <code>{{selectedNode?selectedNode.label:"N/A"}}</code></p>
        </div>
    </div>
    <div class="row">
        <tabset>
            <tab heading="Markup" >
                <pre class="code" apply-content="classic-html" highlight-lang="html"></pre>
            </tab>
            <tab heading="JavaScript">
                <pre class="code" apply-content="classic-js" highlight-lang="js"></pre>
            </tab>
        </tabset>
    </div>
    <script save-content="classic-js">
        function Classic($scope) {
            $scope.treedata=createSubTree(3, 4, "");
            $scope.showSelected = function(sel) {
                $scope.selectedNode = sel;
            };
        }
    </script>
</section>

<section id="as-attribute" ng-controller="AsAttribute">
    <div class="page-header">
        <h1>As an Attribute <small>(Alternative to a Custom Element)</small></h1>
    </div>
    <div class="row">
        <div class="col-md-6 show-grid">
            <div class="panel panel-default">
                <div class="panel-body">
                    <div class="example-caption">EXAMPLE:</div>
                    <div save-content="as-attribute-html">
                        <div treecontrol class="tree-classic"
                             tree-model="treedata"
                             on-selection="showSelected(node)">
                            label: {{node.label}} ({{node.id}})
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <p>Using the tree control as an attribute is as easy as using a div and adding a <code>treecontrol</code> attribute to it</p>
            <p>Note that you have to include the <code>tree-control-attribute.css</code> file instead of the <code>tree-control.css</code>
                as the CSS selectors are quite different between the two styles of usage.</p>
            <p>Selected node: <code>{{selectedNode?selectedNode.label:"N/A"}}</code></p>
        </div>
    </div>
    <div class="row">
        <tabset>
            <tab heading="Markup" >
                <pre class="code" apply-content="as-attribute-html" highlight-lang="html"></pre>
            </tab>
            <tab heading="JavaScript">
                <pre class="code" apply-content="as-attribute-js" highlight-lang="js"></pre>
            </tab>
        </tabset>
    </div>
    <script save-content="as-attribute-js">
        function AsAttribute($scope) {
            $scope.treedata=createSubTree(3, 4, "");
            $scope.showSelected = function(sel) {
                $scope.selectedNode = sel;
            };
        }
    </script>
</section>

<section id="labels-template" ng-controller="LabelsTemplate">
    <div class="page-header">
        <h1>Tree Label Templates <small>(Customize the tree labels)</small></h1>
    </div>
    <div class="row">
        <div class="col-md-6 show-grid">
            <div class="panel panel-default">
                <div class="panel-body">
                    <div class="example-caption">EXAMPLE:</div>
                    <div save-content="labels-template-html">
                        <treecontrol class="tree-classic"
                                     tree-model="treedata"
                                     on-selection="showSelected(node)">
                            <span style="color: {{getColor(node)}}">{{node.label}} - index: {{$index}}</span>
                        </treecontrol>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <p>Taking control of the tree labels is as simple as with <code>ng-repeat</code> - you include a template in the tree control tag.</p>
            <p>Special properties are exposed to the local scope of each template, including the current node as <code>node</code>.</p>
            <p>Selected node: <code>{{selectedNode?selectedNode.label:"N/A"}}</code></p>
        </div>
    </div>
    <table class="table table-bordered table-striped">
        <thead><tr><td>Variable</td><td>Type</td><td>Details</td></tr></thead>
        <tr><td><code>node</code></td><td><span class="label type-hint-object">Object</span></td><td>The current node the label represents.</td></tr>
        <tr><td><code>$parentNode</code></td><td><span class="label type-hint-object">Object</span></td><td>The parent of the current node.</td></tr>
        <tr><td><code>$index</code></td><td><span class="label type-hint-number">number</span></td><td>iterator offset of the repeated element under one parent node(0..length-1).</td></tr>
        <tr><td><code>$first</code></td><td><span class="label type-hint-boolean">boolean</span></td><td>true if the repeated element is first in the iterator.</td></tr>
        <tr><td><code>$middle</code></td><td><span class="label type-hint-boolean">boolean</span></td><td>true if the repeated element is between the first and last in the iterator.</td></tr>
        <tr><td><code>$last</code></td><td><span class="label type-hint-boolean">boolean</span></td><td>true if the repeated element is last in the iterator.</td></tr>
        <tr><td><code>$odd</code></td><td><span class="label type-hint-boolean">boolean</span></td><td>true if the iterator position $index is even (otherwise false).</td></tr>
        <tr><td><code>$even</code></td><td><span class="label type-hint-boolean">boolean</span></td><td>true if the iterator position $index is odd (otherwise false).</td></tr>
    </table>
    <div class="row">
        <tabset>
            <tab heading="Markup" >
                <pre class="code" apply-content="labels-template-html" highlight-lang="html"></pre>
            </tab>
            <tab heading="JavaScript">
                <pre class="code" apply-content="labels-template-js" highlight-lang="js"></pre>
            </tab>
        </tabset>
    </div>
    <script save-content="labels-template-js">
        function LabelsTemplate($scope) {
            $scope.treedata=createSubTree(3, 4, "");
            $scope.getColor = function(node) {
                return ["#a40", "#04a", "#990", "#0a4"][node.i %!](MISSING);
            };
            $scope.showSelected = function(sel) {
                $scope.selectedNode = sel;
            };
        }
    </script>
</section>

<section id="parent" ng-controller="Parent">
    <div class="page-header">
        <h1>Tree Label Scope <small>(as a child of the controller scope)</small></h1>
    </div>
    <div class="row">
        <div class="col-md-6 show-grid">
            <div class="panel panel-default">
                <div class="panel-body">
                    <div class="example-caption">EXAMPLE:</div>
                    <div save-content="classic-html">
                        <treecontrol class="tree-classic"
                                     tree-model="treedata"
                                     on-selection="showSelected(node)">
                            <button ng-click="buttonClick($event, node)">Click Me!</button> label: {{node.label}} ({{node.id}} ) {{$index}}
                        </treecontrol>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <p>The scope used to compile the tree labels is a child scope of the controller (used to compile the tree-control directive).
                As such, in the tree label scope you have access to all the properties and methods defined in the controller scope.
                This example shows how to access a method in the parent scope from the label template.</p>
            <p>Selected node: <code>{{selectedNode?selectedNode.label:"N/A"}}</code></p>
            <p>Last clicked: <code>{{lastClicked ? lastClicked.label : "N/A"}}</code></p>
        </div>
    </div>
    <div class="row">
        <tabset>
            <tab heading="Markup" >
                <pre class="code" apply-content="classic-html" highlight-lang="html"></pre>
            </tab>
            <tab heading="JavaScript">
                <pre class="code" apply-content="classic-js" highlight-lang="js"></pre>
            </tab>
        </tabset>
    </div>
    <script save-content="classic-js">
        function Parent($scope) {
            $scope.treedata=createSubTree(3, 4, "");
            $scope.lastClicked = null;
            $scope.buttonClick = function($event, node) {
                $scope.lastClicked = node;
                $event.stopPropagation();
            }
            $scope.showSelected = function(sel) {
                $scope.selectedNode = sel;
            };
        }
    </script>
</section>

<section id="changing" ng-controller="Changing">
    <div class="page-header">
        <h1>Changing the live tree <small>(adding and removing nodes)</small></h1>
    </div>
    <div class="row">
        <div class="col-md-6 show-grid">
            <div class="panel panel-default">
                <div class="panel-body">
                    <div class="example-caption">EXAMPLE:</div>
                    <div save-content="changing-html">
                        <treecontrol class="tree-classic"
                                     tree-model="treedata">
                            label: {{node.label}} ({{node.id}})
                        </treecontrol>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <p>You can modify the <code>tree-model</code> bound tree, and the tree will update with the new structure</p>
            <p>For instance, adding nodes:</p>
            <ul>
                <li><a ng-click="addRoot()">Add a new root</a></li>
                <li><a ng-click="addChildToSecondRoot()">Add a child to the 2nd node</a></li>
            </ul>
        </div>
    </div>
    <div class="row">
        <tabset>
            <tab heading="Markup" >
                <pre class="code" apply-content="changing-html" highlight-lang="html"></pre>
            </tab>
            <tab heading="JavaScript">
                <pre class="code" apply-content="changing-js" highlight-lang="js"></pre>
            </tab>
        </tabset>
    </div>
    <script save-content="changing-js">
        function Changing($scope) {
            $scope.treedata=createSubTree(3, 4, "");
            $scope.addRoot = function() {
                $scope.treedata.push({label: "New Root", id:"some id", children: []})
            };
            $scope.addChildToSecondRoot = function() {
                $scope.treedata[1].children.push({label: "New Child", id:"some id", children: []})
            };
        }
    </script>
</section>

<section id="selected" ng-controller="Selected">
    <div class="page-header">
        <h1>Selected Node Binding <small>(selected-node)</small></h1>
    </div>
    <div class="row">
        <div class="col-md-6 show-grid">
            <div class="panel panel-default">
                <div class="panel-body">
                    <div class="example-caption">EXAMPLE:</div>
                    <div save-content="selected-html">
                        <treecontrol class="tree-classic"
                                     tree-model="treedata"
                                     selected-node="selected">
                            label: {{node.label}} ({{node.id}})
                        </treecontrol>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <p>The <code>selected-node</code> attribute of <code>treecontrol</code> is bound to the currently selected node object of the tree.
                Like any other Angular bound value, updating selected-node will set the tree selection, and clicking the tree (selecting a node) will
                update back the selected-node.</p>
            <p>Setting <code>selected-node</code> can also be used to set the default selected node of the tree.</p>
            <p>Note that if using multiple selection, the selected nodes are bound to an Array property <code>selected-nodes</code> instead of <code>selected-node</code>.</p>
            <p><a ng-click="selectNode(0)">select node 1</a><br>
                <a ng-click="selectNode(1)">select node 2</a><br>
                <a ng-click="selectNode(2)">select node 3</a><br>
                <a ng-click="selectNode(3)">select node 4</a><br>
                <a ng-click="clearSelected()">clear Selected</a></p>
            <p>Selected node: <code>{{selected.label}}</code></p>
        </div>
    </div>
    <div class="row">
        <tabset>
            <tab heading="Markup" >
                <pre class="code" apply-content="selected-html" highlight-lang="html"></pre>
            </tab>
            <tab heading="JavaScript">
                <pre class="code" apply-content="selected-js" highlight-lang="js"></pre>
            </tab>
        </tabset>
    </div>
    <script save-content="selected-js">
        function Selected($scope) {
            $scope.treedata=createSubTree(3, 4, "");
            $scope.selected = $scope.treedata[2];
            $scope.selectNode = function(num) {
                $scope.selected = $scope.treedata[num];
            };
            $scope.clearSelected = function() {
                $scope.selected = undefined;
            }
        }
    </script>
</section>

<section id="expandedNodes" ng-controller="ExpandedNodes">
    <div class="page-header">
        <h1>Expanded Nodes Binding <small>(expanded-nodes)</small></h1>
    </div>
    <div class="row">
        <div class="col-md-6 show-grid">
            <div class="panel panel-default">
                <div class="panel-body">
                    <div class="example-caption">EXAMPLE:</div>
                    <div save-content="default-expanded-html">
                        <treecontrol class="tree-classic"
                                     tree-model="treedata"
                                     expanded-nodes="expandedNodes"
                                     options="opts">
                            label: {{node.label}} ({{node.id}})
                        </treecontrol>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <p>The <code>expanded-nodes</code> attribute of <code>treecontrol</code> is bound to the currently selected node object of the tree.
                Like any other Angular bound value, updating <code>expanded-nodes</code> will set the expanded nodes in the tree,
                and expanding or contracting nodes in the tree will update the <code>expanded-nodes</code> property.</p>
            <p>Setting <code>expanded-nodes</code> can also be used to set the default expanded nodes of the tree.</p>
            <p><a ng-click="setExpanded()">Expand 2, 3 and 3.3 (only)</a></p>
            <p>The currently expanded nodes:</p>
            <ul>
                <li ng-repeat="node in expandedNodes">{{node.label}}</li>
            </ul>
        </div>
    </div>
    <div class="row">
        <tabset>
            <tab heading="Markup" >
                <pre class="code" apply-content="default-expanded-html" highlight-lang="html"></pre>
            </tab>
            <tab heading="JavaScript">
                <pre class="code" apply-content="default-expanded-js" highlight-lang="js"></pre>
            </tab>
        </tabset>
    </div>
    <script save-content="default-expanded-js">
        function ExpandedNodes($scope) {
            $scope.treedata=createSubTree(3, 4, "");
            $scope.expandedNodes = [$scope.treedata[1],
                $scope.treedata[3],
                $scope.treedata[3].children[2],
                $scope.treedata[3].children[2].children[1]];
            $scope.setExpanded = function() {
                $scope.expandedNodes = [$scope.treedata[1],
                    $scope.treedata[2],
                    $scope.treedata[2].children[2]
                ];
            };
        }
    </script>
</section>

<section id="events" ng-controller="Events">
    <div class="page-header">
        <h1>Events <small>(on-expand & on-selection)</small></h1>
    </div>
    <div class="row">
        <div class="col-md-6 show-grid">
            <div class="panel panel-default">
                <div class="panel-body">
                    <div class="example-caption">EXAMPLE:</div>
                    <div save-content="events-html">
                        <treecontrol class="tree-classic"
                                     tree-model="treedata"
                                     on-selection="showSelected(node, selected, $parentNode, $index, $first, $middle, $last, $odd, $even)"
                                     on-node-toggle="showToggle(node, expanded, $parentNode, $index, $first, $middle, $last, $odd, $even)">
                            label: {{node.label}} ({{node.id}})
                        </treecontrol>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <P>The tree supports events for selection and expansion of nodes. The events are set using the <code>on-selection</code> and <code>on-node-toggle</code> attributes
            which values are evaluated as angular expressions (like <code>ng-click</code> value). The expression can use the <code>node</code> and <code>selected</code> variables (for on-selection) or
                the <code>node</code> and <code>expanded</code> variables (for on-node-toggle) for context of the clicked node and if it was selected / deselected or expanded / collapsed.</P>
            <p>Note the events are fired only on the clicked node. If using the tree in single selection mode and one node is selected, when selecting a different node
            only one on-selection event will be fired for the newly selected node. The old selected node will not be selected anymore without an on-selected event.</p>
            <p>In order to prevent selection of branches (folders) in the tree, set the <code>options.dirSelectable</code> to <code>false</code>.
                Clicking folder labels at this point will expand and contract the node.</p>
            <p>Events fired:</p>
            <ul id="events-listing">

            </ul>
        </div>
    </div>
    <table class="table table-bordered table-striped">
        <thead><tr><td>Variable</td><td>Type</td><td>Details</td></tr></thead>
        <tr><td><code>node</code></td><td><span class="label type-hint-object">Object</span></td><td>The current node the label represents.</td></tr>
        <tr><td><code>$parentNode</code></td><td><span class="label type-hint-object">Object</span></td><td>The parent of the current node.</td></tr>
        <tr><td><code>$index</code></td><td><span class="label type-hint-number">number</span></td><td>iterator offset of the repeated element under one parent node(0..length-1).</td></tr>
        <tr><td><code>$first</code></td><td><span class="label type-hint-boolean">boolean</span></td><td>true if the repeated element is first in the iterator.</td></tr>
        <tr><td><code>$middle</code></td><td><span class="label type-hint-boolean">boolean</span></td><td>true if the repeated element is between the first and last in the iterator.</td></tr>
        <tr><td><code>$last</code></td><td><span class="label type-hint-boolean">boolean</span></td><td>true if the repeated element is last in the iterator.</td></tr>
        <tr><td><code>$odd</code></td><td><span class="label type-hint-boolean">boolean</span></td><td>true if the iterator position $index is even (otherwise false).</td></tr>
        <tr><td><code>$even</code></td><td><span class="label type-hint-boolean">boolean</span></td><td>true if the iterator position $index is odd (otherwise false).</td></tr>
        <tr><td><code>selected</code></td><td><span class="label type-hint-boolean">boolean</span></td><td>true if the node is selected, false if it is de-selected. Only applies to the on-selection event.</td></tr>
        <tr><td><code>expanded</code></td><td><span class="label type-hint-boolean">boolean</span></td><td>true if the node is expanding, false if the node is contracting. Only applies to the on-node-toggle event.</td></tr>
    </table>
    <div class="row">
        <tabset>
            <tab heading="Markup" >
                <pre class="code" apply-content="events-html" highlight-lang="html"></pre>
            </tab>
            <tab heading="JavaScript">
                <pre class="code" apply-content="events-js" highlight-lang="js"></pre>
            </tab>
        </tabset>
    </div>
    <script save-content="events-js">
        function Events($scope) {
            $scope.treedata=createSubTree(3, 4, "");
            $scope.showToggle = function(node, expanded, $parentNode, $index, $first, $middle, $last, $odd, $even) {
                var parent = $parentNode?("child of: " + $parentNode.label):"root node";
                var location = $first?"first":($last?"last":("middle node at index " + $index));
                var oddEven = $odd?"odd":"even";
                $("#events-listing").append("<li>"+node.label+ (expanded?" expanded":" collapsed") +" (" + parent + ", " + location +", " + oddEven + ")</li>");
            };
            $scope.showSelected = function(node, selected, $parentNode, $index, $first, $middle, $last, $odd, $even) {
                var parent = $parentNode?("child of: " + $parentNode.label):"root node";
                var location = $first?"first":($last?"last":("middle node at index " + $index));
                var oddEven = $odd?"odd":"even";
                $("#events-listing").append("<li>"+node.label+ (selected?" selected":" deselected") +" (" + parent + ", " + location +", " + oddEven + ")</li>");
            };
        }
    </script>
</section>

<section id="multi-selection" ng-controller="MultiSelection">
    <div class="page-header">
        <h1>Multi Selection <small>(options.multiSelect & selected-nodes)</small></h1>
    </div>
    <div class="row">
        <div class="col-md-6 show-grid">
            <div class="panel panel-default">
                <div class="panel-body">
                    <div class="example-caption">EXAMPLE:</div>
                    <div save-content="multi-selection-html">
                        <treecontrol class="tree-classic"
                                     tree-model="treedata"
                                     selected-nodes="selectedNodes"
                                     on-selection="showSelected(node, selected)"
                                     options="treeOptions">
                            label: {{node.label}} ({{node.id}})
                        </treecontrol>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <P>The tree control supports multi-selection using the <code>options.multiSelect</code> option and the <code>selected-nodes</code> attribute (instead of the <code>selected-node</code> attribute in single selection mode).
                <code>selected-nodes</code> is expected to be an Array which will contain the selected nodes.
            When using multi-selection, selecting a node adds it to the selected-nodes array and a second click remove it from the array.</p>
            <div class="row">
                <div class="col-md-6">
                    <p>Selected Nodes:</p>
                    <ul id="multi-selection-listing">
                        <li ng-repeat="node in selectedNodes">{{node.label}}</li>
                    </ul>
                </div>
                <div class="col-md-6">
                    <p>Selection Events:</p>
                    <ul id="multi-selection-events-listing">

                    </ul>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <tabset>
            <tab heading="Markup" >
                <pre class="code" apply-content="multi-selection-html" highlight-lang="html"></pre>
            </tab>
            <tab heading="JavaScript">
                <pre class="code" apply-content="multi-selection-js" highlight-lang="js"></pre>
            </tab>
        </tabset>
    </div>
    <script save-content="multi-selection-js">
        function MultiSelection($scope) {
            $scope.treeOptions = {multiSelection: true};
            $scope.treedata=createSubTree(3, 4, "");
            $scope.selectedNodes = [];
            $scope.showSelected = function(node, selected) {
                $("#multi-selection-events-listing").append("<li>"+node.label+ (selected?" selected":" deselected") + "</li>");
            };
        }
    </script>
</section>


<section id="dirSelection" ng-controller="DirSelection">
    <div class="page-header">
        <h1>Clicking Labels Expand & Collapse <small>(options.dirSelectable)</small></h1>
    </div>
    <div class="row">
        <div class="col-md-6 show-grid">
            <div class="panel panel-default">
                <div class="panel-body">
                    <div class="example-caption">EXAMPLE:</div>
                    <div save-content="dir-selection-html">
                        <treecontrol class="tree-classic"
                                     tree-model="treedata"
                                     options="opts"
                                     on-selection="showSelected(node)">
                            label: {{node.label}} ({{node.id}})
                        </treecontrol>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <p>In order to prevent selection of branches (folders) in the tree, set the <code>options.dirSelectable</code> to <code>false</code>.
                Clicking folder labels at this point will expand and contract the node.</p>
            <p>Selected node: <code>{{selectedNode?selectedNode.label:"N/A"}}</code></p>
        </div>
    </div>
    <div class="row">
        <tabset>
            <tab heading="Markup" >
                <pre class="code" apply-content="dir-selection-html" highlight-lang="html"></pre>
            </tab>
            <tab heading="JavaScript">
                <pre class="code" apply-content="dir-selection-js" highlight-lang="js"></pre>
            </tab>
        </tabset>
    </div>
    <script save-content="dir-selection-js">
        function DirSelection($scope) {
            $scope.treedata=createSubTree(3, 4, "");
            $scope.opts = {
                dirSelectable: false
            };
            $scope.showSelected = function(sel) {
                $scope.selectedNode = sel;
            };
        }
    </script>
</section>

<section id="isSelectable" ng-controller="IsSelectable">
    <div class="page-header">
        <h1>Disabling Selection of Nodes <small>(options.isSelectable)</small></h1>
    </div>
    <div class="row">
        <div class="col-md-6 show-grid">
            <div class="panel panel-default">
                <div class="panel-body">
                    <div class="example-caption">EXAMPLE:</div>
                    <div save-content="dir-selection-html">
                        <treecontrol class="tree-classic"
                                     tree-model="treedata"
                                     options="opts"
                                     on-selection="showSelected(node)">
                            label: {{node.label}} ({{node.id}})
                        </treecontrol>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <p>To restrict which nodes are selectable on the tree, define the <code>options.isSelectable(node)</code> function.</p>
            <p>Example disables the selection of any node on or under the <code>Node 1</code> node</p>
            <p>Selected node: <code>{{selectedNode?selectedNode.label:"N/A"}}</code></p>
        </div>
    </div>
    <div class="row">
        <tabset>
            <tab heading="Markup" >
                <pre class="code" apply-content="dir-selection-html" highlight-lang="html"></pre>
            </tab>
            <tab heading="JavaScript">
                <pre class="code" apply-content="dir-selection-js" highlight-lang="js"></pre>
            </tab>
        </tabset>
    </div>
    <script save-content="dir-selection-js">
        function IsSelectable($scope) {
            $scope.treedata=createSubTree(3, 4, "");
            $scope.opts = {
                isSelectable: function(node) {
                    return node.label.indexOf("Node 1") !== 0;
                }
            };
            $scope.showSelected = function(sel) {
                $scope.selectedNode = sel;
            };
        }
    </script>
</section>

<section id="light" ng-controller="Light">
    <div class="page-header">
        <h1>Light Style <small>(Basic style, default configuration)</small></h1>
    </div>
    <div class="row">
        <div class="col-md-6 show-grid">
            <div class="panel panel-default">
                <div class="panel-body">
                    <div class="example-caption">EXAMPLE:</div>
                    <div save-content="light-html">
                        <treecontrol class="tree-light"
                                     tree-model="treedata"
                                     on-selection="showSelected(node)">
                            label: {{node.label}} ({{node.id}})
                        </treecontrol>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <p>Light style of the tree control, set using the class <code>tree-light</code>.</p>
            <p>Click on the folder icons to open and close the tree nodes. Click on the node label to select a node in the tree.</p>
            <p>Selected node: <code>{{selectedNode?selectedNode.label:"N/A"}}</code></p>
        </div>
    </div>
    <div class="row">
        <tabset>
            <tab heading="Markup" >
                <pre class="code" apply-content="light-html" highlight-lang="html"></pre>
            </tab>
            <tab heading="JavaScript">
                <pre class="code" apply-content="light-js" highlight-lang="js"></pre>
            </tab>
        </tabset>
    </div>
    <script save-content="light-js">
        function Light($scope) {
            $scope.treedata=createSubTree(3, 4, "");
            $scope.showSelected = function(sel) {
                $scope.selectedNode = sel;
            };
        }
    </script>
</section>

<section id="dark" ng-controller="Dark">
    <div class="page-header">
        <h1>Dark Style <small>(Basic style, default configuration)</small></h1>
    </div>
    <div class="row">
        <div class="col-md-6 show-grid">
            <div class="panel panel-default">
                <div class="panel-body" style="background-color: #555;">
                    <div class="example-caption">EXAMPLE:</div>
                    <div save-content="dark-html">
                        <!-- Note that the tree does not set the background color. We inject it from the wrapper div. -->
                        <div style="background-color: #555;">
                            <treecontrol class="tree-dark"
                                         tree-model="treedata"
                                         on-selection="showSelected(node)">
                                label: {{node.label}} ({{node.id}})
                            </treecontrol>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <p>Dark style of the tree control, set using the class <code>tree-dark</code>. The style does not include the background color, instead,
                inject your own background color using a wrapper div element.</p>
            <p>Click on the folder icons to open and close the tree nodes. Click on the node label to select a node in the tree.</p>
            <p>Selected node: <code>{{selectedNode?selectedNode.label:"N/A"}}</code></p>
        </div>
    </div>
    <div class="row">
        <tabset>
            <tab heading="Markup" >
                <pre class="code" apply-content="dark-html" highlight-lang="html"></pre>
            </tab>
            <tab heading="JavaScript">
                <pre class="code" apply-content="dark-js" highlight-lang="js"></pre>
            </tab>
        </tabset>
    </div>
    <script save-content="dark-js">
        function Dark($scope) {
            $scope.treedata=createSubTree(3, 4, "");
            $scope.showSelected = function(sel) {
                $scope.selectedNode = sel;
            };
        }
    </script>
</section>

<section id="file-style" ng-controller="FileStyle">
    <div class="page-header">
        <h1>File Style using Tree Label Templates <small>(Basic style, default configuration)</small></h1>
    </div>
    <div class="row">
        <div class="col-md-6 show-grid">
            <div class="panel panel-default">
                <div class="panel-body" style="background-color: #555;">
                    <div class="example-caption">EXAMPLE:</div>
                    <div save-content="file-style-html">
                        <!-- Note that the tree does not set the background color. We inject it from the wrapper div. -->
                        <div style="background-color: #555;">
                            <treecontrol class="tree-dark"
                                         tree-model="treedata"
                                         on-selection="showSelected(node)">
                                <span ng-switch on="node.type">
                                    <span ng-switch-when="folder" class="glyphicon glyphicon-folder-open" aria-hidden="true"></span>
                                    <span ng-switch-when="pic" class="glyphicon glyphicon-picture" aria-hidden="true"></span>
                                    <span ng-switch-when="doc" class="glyphicon glyphicon-file" aria-hidden="true"></span>
                                    <span ng-switch-when="file" class="glyphicon glyphicon-floppy-disk" aria-hidden="true"></span>
                                    <span ng-switch-when="movie" class="glyphicon glyphicon-film" aria-hidden="true"></span>
                                    <span ng-switch-when="email" class="glyphicon glyphicon-envelope" aria-hidden="true"></span>
                                    <span ng-switch-when="home" class="glyphicon glyphicon-home" aria-hidden="true"></span>
                                    <span ng-switch-when="trash" class="glyphicon glyphicon-trash" aria-hidden="true"></span>
                                </span> label: {{node.label}}
                            </treecontrol>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <p>When using the tree control to display file like structures it is required to display the file type on each of the nodes. To achive that
            we have to use a second icon using the Tree Label Templates with a <code>ng-switch</code> or equivalent directive, as shown in this example.</p>
            <p>The tree control does not support replacing the expand / contract icons with a file type icon - it is design decision we made as we designed
            the tree control.</p>
        </div>
    </div>
    <div class="row">
        <tabset>
            <tab heading="Markup" >
                <pre class="code" apply-content="file-style-html" highlight-lang="html"></pre>
            </tab>
            <tab heading="JavaScript">
                <pre class="code" apply-content="file-style-js" highlight-lang="js"></pre>
            </tab>
        </tabset>
    </div>
    <script save-content="file-style-js">
        function FileStyle($scope) {
            $scope.treedata=[
                {label: "Documents", type: "folder", children: [
                    {label: "a picture", type: "pic"},
                    {label: "another picture", type: "pic"},
                    {label: "a doc", type: "doc"},
                    {label: "a file", type: "file"},
                    {label: "a movie", type: "movie"}
                ]},
                {label: "My Computer", type: "folder", children: [
                    {label: "email", type: "email"},
                    {label: "home", type: "home"}
                ]},
                {label: "trash", type: "trash"}

            ];
            $scope.showSelected = function(sel) {
                $scope.selectedNode = sel;
            };
        }
    </script>
</section>


<section id="custom-css" ng-controller="CustomCss">
    <div class="page-header">
        <h1>Custom Css Classes <small>(options.injectClasses)</small></h1>
    </div>
    <div class="row">
        <div class="col-md-6 show-grid">
            <div class="panel panel-default">
                <div class="panel-body">
                    <div class="example-caption">EXAMPLE:</div>
                    <div save-content="custom-css-html">
                        <style>
                            .c-ul {border: 1px solid #abcdef;}
                            .c-li {background-color: #defacb}
                            .c-liSelected {background-color: #fedbca}
                            .c-iExpanded {border: 1px solid #77a}
                            .c-iCollapsed {border: 1px solid #7c7}
                            .c-iLeaf {border: 1px solid #a77}
                            treecontrol.tree-classic li .tree-label.c-label {color: #44c}
                            treecontrol.tree-classic li .tree-selected.c-labelSelected {background-color: yellow}
                        </style>
                        <treecontrol class="tree-classic"
                                     tree-model="treedata"
                                     options="opts">
                            label: {{node.label}} ({{node.id}})
                        </treecontrol>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <p>The <code>options.injectClasses</code> option allows to add custom CSS classes on the tree DOM. The selected classes are</p>
            <ul>
                <li><code>ul</code> - inject classes into the ul elements (branch elements)</li>
                <li><code>li</code> - inject classes into the li elements (both branch and leaf elements)</li>
                <li><code>liSelected</code> - inject classes into the li elements of the selected node</li>
                <li><code>iExpanded</code> - inject classes into the 'i' element for the expanded nodes (the icon)</li>
                <li><code>iCollapsed</code> - inject classes into the 'i' element for the collapsed nodes</li>
                <li><code>iLeaf</code> - inject classes into the 'i' element for leaf nodes</li>
                <li><code>label</code> - inject classes into the div element around the label</li>
                <li><code>labelSelected</code> - inject classes into the div element around the label only when the node is selected</li>
            </ul>
        </div>
    </div>
    <div class="row">
        <tabset>
            <tab heading="Markup" >
                <pre class="code" apply-content="custom-css-html" highlight-lang="html"></pre>
            </tab>
            <tab heading="JavaScript">
                <pre class="code" apply-content="custom-css-js" highlight-lang="js"></pre>
            </tab>
        </tabset>
    </div>
    <script save-content="custom-css-js">
        function CustomCss($scope) {
            $scope.treedata=createSubTree(3, 4, "");
            $scope.opts = {
                injectClasses: {
                    "ul": "c-ul",
                    "li": "c-li",
                    "liSelected": "c-liSelected",
                    "iExpanded": "c-iExpanded",
                    "iCollapsed": "c-iCollapsed",
                    "iLeaf": "c-iLeaf",
                    "label": "c-label",
                    "labelSelected": "c-labelSelected"
                }
            };
        }
    </script>
</section>

<section id="children" ng-controller="Children">
    <div class="page-header">
        <h1>Custom Children <small>(options.nodeChildren)</small></h1>
    </div>
    <div class="row">
        <div class="col-md-6 show-grid">
            <div class="panel panel-default">
                <div class="panel-body">
                    <div class="example-caption">EXAMPLE:</div>
                    <div save-content="children-html">
                        <treecontrol class="tree-classic"
                                     tree-model="treedata"
                                     options="opts">
                            label: {{node.label}} ({{node.id}})
                        </treecontrol>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <p>Angular tree control assumes that the tree nodes have a <code>children</code> array property for the children of the node.
                You can override the children property name using the tree <code>nodeChildren</code> property of the tree options.</p>
        </div>
    </div>
    <div class="row">
        <tabset>
            <tab heading="Markup" >
                <pre class="code" apply-content="children-html" highlight-lang="html"></pre>
            </tab>
            <tab heading="JavaScript">
                <pre class="code" apply-content="children-js" highlight-lang="js"></pre>
            </tab>
        </tabset>
    </div>
    <script save-content="children-js">
        function Children($scope) {
            $scope.treedata=[
                {id:"id1", label: "Node 1", links: [
                    {id:"id1.1", label: "Node 1.1", links: {}},
                    {id:"id1.2", label: "Node 1.1", links: {}}
                ]},
                {id:"id2", label: "Node 2", links: []},
                {id:"id3", label: "Node 3", links: []},
                {id:"id4", label: "Node 4", links: []}
            ];
            $scope.opts = {
                nodeChildren: "links"
            };
        }
    </script>
</section>

<section id="isleaf" ng-controller="Isleaf">
    <div class="page-header">
        <h1>Custom Branch / Leaf <small>(options.isLeaf)</small></h1>
    </div>
    <div class="row">
        <div class="col-md-6 show-grid">
            <div class="panel panel-default">
                <div class="panel-body">
                    <div class="example-caption">EXAMPLE:</div>
                    <div save-content="isleaf-html">
                        <treecontrol class="tree-classic"
                                     tree-model="treedata"
                                     options="opts">
                            label: {{node.label}} ({{node.id}})
                        </treecontrol>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <p>the <code>isLeaf</code> option allows taking control of the selection if a node is a branch (folder) or a leaf (File).
                This method returns a boolean, where <code>true</code> indicates a leaf, <code>false</code> indicates a branch.</p>
        </div>
    </div>
    <div class="row">
        <tabset>
            <tab heading="Markup" >
                <pre class="code" apply-content="isleaf-html" highlight-lang="html"></pre>
            </tab>
            <tab heading="JavaScript">
                <pre class="code" apply-content="isleaf-js" highlight-lang="js"></pre>
            </tab>
        </tabset>
    </div>
    <script save-content="isleaf-js">
        function Isleaf($scope) {
            $scope.treedata=createSubTree(3, 4, "");
            $scope.opts = {
                isLeaf: function(node) {
                    return node.i %! (MISSING)== 0;
                }
            };
        }
    </script>
</section>

<section id="sorting" ng-controller="Sorting">
    <div class="page-header">
        <h1>Sorting tree nodes <small>(order-by, reserve-order)</small></h1>
    </div>
    <div class="row">
        <div class="col-md-6 show-grid">
            <div class="panel panel-default">
                <div class="panel-body">
                    <div class="example-caption">EXAMPLE:</div>
                    <div save-content="sorting-html">
                        <treecontrol class="tree-classic"
                                     tree-model="treedata"
                                     order-by="{{orderby}}"
                                     reverse-order="{{reverse}}">
                            label: {{node.label}} {{node.name}} ({{node.id}})
                        </treecontrol>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <p>The <code>order-by</code> and <code>reverse-order</code> properties allows controlling the sorting of the tree nodes.
                The value of those attributes is used with the <code>ng-repeat</code> orderBy filter -
                see more details at the <a href="https://code.angularjs.org/1.2.0-rc.3/docs/api/ng.filter:orderBy">Angular JS orderBy</a> docs.</p>
            <p>The sorting is done for each branch individually (sorting does not change the stucture of the tree itself).</p>
            <input type="checkbox" ng-model="reverse"/> Reverse Order
            <select ng-model="orderby">
                <option value="label">label</option>
                <option value="name">name</option>
            </select>
        </div>
    </div>
    <div class="row">
        <tabset>
            <tab heading="Markup" >
                <pre class="code" apply-content="sorting-html" highlight-lang="html"></pre>
            </tab>
            <tab heading="JavaScript">
                <pre class="code" apply-content="sorting-js" highlight-lang="js"></pre>
            </tab>
        </tabset>
    </div>
    <script save-content="sorting-js">
        function Sorting($scope) {
            $scope.treedata=createSubTree(3, 4, "");
            $scope.reverse = true;
            $scope.orderby = 'label';

        }
    </script>
</section>


<section id="filtering" ng-controller="Filtering">
    <div class="page-header">
        <h1>Filtering tree nodes <small>(filter-expression, filter-comparator)</small></h1>
    </div>
    <div class="row">
        <div class="col-md-6 show-grid">
            <div class="panel panel-default">
                <div class="panel-body">
                    <div class="example-caption">EXAMPLE:</div>
                    <div save-content="filtering-html">
                        <treecontrol class="tree-classic"
                                     tree-model="treedata"
                                     filter-expression="predicate"
                                     filter-comparator="comparator">
                            label: {{node.label}} ({{node.id}})
                        </treecontrol>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <p>The <code>filter-expression</code> and <code>filter-comparator</code> properties allows filtering the nodes of the tree.
                The value of those attributes is used with the <code>ng-repeat</code> Filter filter -
                see more details at the <a href="https://code.angularjs.org/1.2.25/docs/api/ng/filter/filter">Angular JS Filter</a> docs.</p>
            <p>The filter is done for each branch individually.</p>
            <p>The filter expression (predicate) is used for selecting nodes from the tree to display.
                It can be a string, object or a function. If a string, it is used to match values of the node properties.
                If an object, each property of the expression object is used to match values of the node properties with the same name.
                A function can be used to write arbitrary filters, and will be invoked for each node of the tree.</p>
            <p>The filter comparator is used in determining if the expected value (from the filter expression) and actual value (from the object in the array) should be considered a match.
                If false, it looks for substring match in a case insensitive way (the default).
                If true, it looks for exact match.
                If a function, the function will be given the object value and the predicate value to compare and should return true if the item should be included in filtered result.</p>
            <input type="text" ng-model="predicate"/> Filter expression (string)<br>
            <input type="checkbox" ng-model="comparator"/> Filter comparator (true or false)
        </div>
    </div>
    <div class="row">
        <tabset>
            <tab heading="Markup" >
                <pre class="code" apply-content="filtering-html" highlight-lang="html"></pre>
            </tab>
            <tab heading="JavaScript">
                <pre class="code" apply-content="filtering-js" highlight-lang="js"></pre>
            </tab>
        </tabset>
    </div>
    <script save-content="filtering-js">
        function Filtering($scope) {
            $scope.treedata=createSubTree(3, 4, "");
            $scope.predicate = "Node 1";
            $scope.comparator = false;
        }
    </script>
</section>
<section id="equality" ng-controller="Equality">
    <div class="page-header">
        <h1>Custom Equality <small>(options.equality)</small></h1>
    </div>
    <div class="row">
        <div class="col-md-6 show-grid">
            <div class="panel panel-default">
                <div class="panel-body">
                    <div class="example-caption">EXAMPLE:</div>
                    <div save-content="equality-html">
                        <treecontrol class="tree-classic"
                                     tree-model="treedata"
                                     options="opts">
                            label: {{node.name}} ({{node.age}})
                        </treecontrol>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <p>The angular tree control is using an equality function to determine if two nodes are equal,
                The build it function checks for equality of the node members, ignoring the children property.</p>
            <p>In some cases, it is required to replace the equality function. Some examples include</p>
            <ul>
                <li>If multiple nodes exist in the three that are identical except for their parents and children, the default function
                    will confuse between them. In such as case, it is recommended to replace the function with the === operator (as in this example).</li>
                <li>If you have an id property for nodes that can be relayed on for node uniqueness and identification,
                    using a custom equality function that checks for that id will result in better performance.</li>
            </ul>
        </div>
    </div>
    <div class="row">
        <tabset>
            <tab heading="Markup" >
                <pre class="code" apply-content="equality-html" highlight-lang="html"></pre>
            </tab>
            <tab heading="JavaScript">
                <pre class="code" apply-content="equality-js" highlight-lang="js"></pre>
            </tab>
        </tabset>
    </div>
    <script save-content="equality-js">
        function Equality($scope) {
            $scope.treedata=[
                { "name" : "Joe", "age" : "21", "children" : [
                    { "name" : "Smith", "age" : "42", "children" : [] },
                    { "name" : "Joe", "age" : "21", "children" : [
                        { "name" : "Jenifer", "age" : "23", "children" : [
                            { "name" : "Dani", "age" : "32", "children" : [] },
                            { "name" : "Max", "age" : "34", "children" : [] }
                        ]}
                    ]}
                ]},
                { "name" : "Albert", "age" : "33", "children" : [] },
                { "name" : "Ron", "age" : "29", "children" : [] }
            ];
            $scope.opts = {
                equality: function(node1, node2) {
                    return node1 === node2;
                }
            }
        }
    </script>
</section>

<section id="externalTemplate" ng-controller="ExternalTemplate">
    <div class="page-header">
        <h1>External Template <small>(options.templateUrl, treeConfig.templateUrl)</small></h1>
    </div>
    <div class="row">
        <div class="col-md-6 show-grid">
            <div class="panel panel-default">
                <div class="panel-body">
                    <div class="example-caption">EXAMPLE:</div>
                    <div save-content="external-template-html">
                        <treecontrol class="tree-classic"
                                     tree-model="treedata"
                                     options="opts">
                            label: {{node.label}} ({{node.id}})
                        </treecontrol>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <p>By default the angular tree control uses internal template to define control structure.</p>
            <p>However, user is able to specify his own template via:</p>
            <ul>
                <li><code>options.templateUrl</code> for individual tree control.</li>
                <li>
                    <p>
                        <code>treeConfig.templateUrl</code> for all tree controls during application <code>config</code> or <code>run</code> step.
                        ( <code>treeConfig</code> is global injectable value provider)
                    </p>
                </li>
            </ul>
            <p>If user defined template could not be found, default template will be used.</p>
            <p>Example above, applies italic bold style for element label, and uses ng-show instead of ng-if (as defined in default template)</p>
        </div>
    </div>
    <div class="row">
        <tabset>
            <tab heading="Markup" >
                <pre class="code" apply-content="external-template-html" highlight-lang="html"></pre>
            </tab>
            <tab heading="JavaScript (instance template)">
                <pre class="code" apply-content="external-template-js" highlight-lang="js"></pre>
            </tab>
            <tab heading="JavaScript (global template)">
                <pre class="code" apply-content="external-template-global" highlight-lang="js"></pre>
            </tab>
            <tab heading="Template">
                <pre class="code" apply-content="external-template-tmpl" highlight-lang="html"></pre>
            </tab>
        </tabset>
    </div>
    <script save-content="external-template-js">
        function ExternalTemplate($scope) {
            $scope.treedata = createSubTree(3, 4, "");

            $scope.opts = {
                templateUrl: 'treeControlExternalTemplate.html'
            }
        }
    </script>

    <script type="text/ecmascript" save-content="external-template-global">
        // this code snippet is just to show how to use the global external template option but is not used for
        // this specific example. this specific example is using the instance template option
        angular.module('app', ['treeControl'])
                .run(function (treeConfig) {
                    treeConfig.templateUrl = 'treeControlExternalTemplate.html';
                });
    </script>

    <script id="treeControlExternalTemplate.html" type="text/ng-template" save-content="external-template-tmpl">
        <ul {{options.ulClass}}>
            <li ng-repeat="node in node.{{options.nodeChildren}} | filter:filterExpression:filterComparator {{options.orderBy}}"
                ng-class="headClass(node)"
                {{options.liClass}}
                set-node-to-data>
                <i class="tree-branch-head" ng-class="iBranchClass()" ng-click="selectNodeHead(node)"></i>
                <i class="tree-leaf-head {{options.iLeafClass}}"></i>

                <i>
                    <b>
                        <div class="tree-label {{options.labelClass}}" ng-class="[selectedClass(), unselectableClass()]"
                             ng-click="selectNodeLabel(node)" tree-transclude></div>
                    </b>
                </i>

                <treeitem ng-show="nodeExpanded()"></treeitem>

            </li>
        </ul>
    </script>
</section>

</div>
<div class="col-md-3">
    <ul nav class="nav docs-sidenav">
        <!--<li class="active"><a href="#as-attribute">classic</a></li>-->
    </ul>
</div>

</div>
<footer class="docs-footer">
    <p>Designed and built by <a href="http://wix.com">Wix.com</a> team.</p>
    <p>Code licensed under <a href="https://github.com/angular-ui/bootstrap/blob/master/LICENSE">MIT License</a>.</p>
    <p>Checkout Wix developer resources <a href="http://dev.wix.com">dev.wix.com</a> and <a href="http://wix.io">wix.io</a>.</p>
</footer>

<script>
    var entityMap = {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': '&quot;',
        "'": '&#39;',
        "/": '&#x2F;'
    };
    function escapeHtml(string) {
        return String(string).replace(/[&<>"'\/]/g, function (s) {
            return entityMap[s];
        });
    }
    var nonSpace = /\S/;
    function trimIndent(content) {
        var lines = content.split("\n");
        var begin = 0;
        var end = lines.length-1;
        while ((nonSpace.exec(lines[begin]) == null) && (begin < lines.length))
            begin = begin + 1;
        while ((nonSpace.exec(lines[end]) == null) && end >= begin)
            end = end - 1;
        var ident = nonSpace.exec(lines[begin]).index;
        var formatted = "";
        for (var i = begin; i <= end; i++) {
            formatted = formatted + lines[i].slice(ident-1) + ((i < end)?"\n":"");
        }
        return formatted;
    }
    var example = angular.module("example", ["treeControl", "ui.bootstrap", "template/tabs/tab.html", "template/tabs/tabset.html"])
                    .factory("$savedContent", function() {
                        return [];
                    })
                    .directive("saveContent", function($savedContent) {
                        return {
                            restrict: "A",
                            compile: function($element, $attrs) {
                                var content = $element.html();
                                $savedContent[$attrs.saveContent] = content;
                            }
                        }
                    })
                    .directive("applyContent", function($savedContent) {
                        return {
                            restrict: "EAC",
                            compile: function($element, $attrs) {
                                return function($scope, $element, $attrs) {
                                    var content = $savedContent[$attrs.applyContent];
                                    var lang = $attrs.highlightLang;
                                    if (lang == "html")
                                        content = escapeHtml(content);
                                    content = trimIndent(content);
                                    var pre = prettyPrintOne(content, lang);
                                    $element.html(pre);
                                }
                            }
                        }
                    })
                    .directive("nav", function() {
                        return {
                            restrict: "A",
                            compile: function($element) {
                                var sections = $("section");
                                angular.forEach(sections, function(section) {
                                    var $section = $(section);
                                    var id = $section.attr('id');
                                    var titleHtml = $section.find("h1").html();
                                    titleHtml = titleHtml.slice(0, titleHtml.indexOf("<")).trim();
                                    $element.append("<li><a href='#"+id+"'>"+titleHtml+"</a></li>")
                                })
                            }
                        }
                    })
            ;
    var names = ['Homer', 'Marge', 'Bart', 'Lisa', 'Mo'];
    function createSubTree(level, width, prefix) {
        if (level > 0) {
            var res = [];
            for (var i=1; i <= width; i++)
                res.push({ "label" : "Node " + prefix + i, "id" : "id"+prefix + i, "i": i, "children": createSubTree(level-1, width, prefix + i +"."), "name": names[i%!n(MISSING)ames.length] });
            return res;
        }
        else
            return [];
    }
</script>

</body>
</html>


{
"version":3,
"file":"angular-animate.min.js",
"lineCount":55,
"mappings":"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",
"sources":["angular-animate.js"],
"names":["window","angular","undefined","assertArg","arg","name","reason","ngMinErr","mergeClasses","a","b","isArray","join","packageStyles","options","styles","to","from","pendClasses","classes","fix","isPrefix","className","isString","length","split","forEach","klass","i","stripCommentsFromElement","element","jqLite","ELEMENT_NODE","nodeType","extractElementNode","elm","$$addClass","$$jqLite","addClass","$$removeClass","removeClass","applyAnimationClassesFactory","prepareAnimationOptions","$$prepared","domOperation","noop","options.domOperation","$$domOperationFired","applyAnimationStyles","applyAnimationFromStyles","applyAnimationToStyles","css","mergeAnimationDetails","oldAnimation","newAnimation","target","newOptions","toAdd","toRemove","resolveElementClasses","attr","preparationClasses","concatWithSpace","realDomOperation","extend","existing","splitClassesToLookup","obj","flags","value","key","ADD_CLASS","REMOVE_CLASS","val","prop","allow","getDomNode","applyGeneratedPreparationClasses","event","EVENT_CLASS_PREFIX","ADD_CLASS_SUFFIX","REMOVE_CLASS_SUFFIX","blockTransitions","node","duration","applyInlineStyle","TRANSITION_DELAY_PROP","blockKeyframeAnimations","applyBlock","ANIMATION_PROP","ANIMATION_PLAYSTATE_KEY","styleTuple","style","computeCssStyles","$window","properties","Object","create","detectedStyles","getComputedStyle","formalStyleName","actualStyleName","c","charAt","parseMaxTime","str","maxValue","values","substring","parseFloat","Math","max","truthyTimingValue","getCssTransitionDurationStyle","applyOnlyDuration","TRANSITION_PROP","DURATION_KEY","createLocalCacheLookup","cache","flush","count","entry","total","get","put","registerRestorableStyles","backup","isDefined","getPropertyValue","copy","isObject","isUndefined","isFunction","isElement","TRANSITIONEND_EVENT","ANIMATIONEND_EVENT","ontransitionend","onwebkittransitionend","onanimationend","onwebkitanimationend","ANIMATION_DELAY_PROP","DELAY_KEY","ANIMATION_DURATION_PROP","TRANSITION_DURATION_PROP","$$minErr","DETECT_CSS_PROPERTIES","transitionDuration","transitionDelay","transitionProperty","PROPERTY_KEY","animationDuration","animationDelay","animationIterationCount","ANIMATION_ITERATION_COUNT_KEY","DETECT_STAGGER_CSS_PROPERTIES","module","directive","ngAnimateSwapDirective","$animate","$rootScope","restrict","transclude","terminal","priority","link","scope","$element","attrs","ctrl","$transclude","previousElement","previousScope","$watchCollection","ngAnimateSwap","leave","$destroy","$new","enter","$$AnimateChildrenDirective","$interpolate","setData","data","NG_ANIMATE_CHILDREN_DATA","ngAnimateChildren","$observe","factory","$$rAFSchedulerFactory","$$rAF","scheduler","tasks","queue","concat","nextTick","items","shift","cancelFn","waitUntilQuiet","scheduler.waitUntilQuiet","fn","provider","$$AnimateQueueProvider","$animateProvider","makeTruthyCssClassMap","classString","keys","ONE_SPACE","map","hasMatchingClasses","newClassString","currentClassString","currentClassMap","some","isAllowed","ruleType","currentAnimation","previousAnimation","rules","hasAnimationClasses","animation","and","skip","cancel","push","structural","RUNNING_STATE","state","nA","nR","cA","cR","$get","$rootElement","$document","$$HashMap","$$animation","$$AnimateRunner","$templateRequest","$$forceReflow","postDigestTaskFactory","postDigestCalled","$$postDigest","findCallbacks","parent","targetNode","targetParentNode","matches","entries","callbackRegistry","contains","call","callback","queueAnimation","initialOptions","notifyProgress","runner","phase","runInNextPostDigestOrNow","callbacks","progress","close","reject","activeClasses","applyAnimationClasses","complete","isAnimatableClassName","isStructural","indexOf","skipAnimations","animationsEnabled","hidden","disabledElementsLookup","existingAnimation","activeAnimationsLookup","hasExistingAnimation","PRE_DIGEST_STATE","areAnimationsAllowed","closeChildAnimations","skipAnimationFlag","cancelAnimationFlag","end","joinAnimationFlag","isValidAnimation","clearElementAnimationState","counter","markElementAnimationState","animationDetails","animationCancelled","realRunner","done","status","setHost","children","querySelectorAll","child","parseInt","getAttribute","NG_ANIMATE_ATTR_NAME","remove","removeAttribute","isMatchingElement","nodeOrElmA","nodeOrElmB","parentElement","bodyElement","body","bodyElementDetected","nodeName","rootElementDetected","parentAnimationDetected","animateChildren","elementDisabled","parentHost","NG_ANIMATE_PIN_DATA","parentNode","details","parentElementDisabled","setAttribute","newValue","oldValue","deregisterWatch","$watch","totalPendingRequests","isEmpty","classNameFilter","test","Node","prototype","compareDocumentPosition","on","container","off","filterFromRegistry","list","matchContainer","matchCallback","containerNode","filter","arguments","pin","enabled","bool","argCount","hasElement","recordExists","$$AnimationProvider","getRunner","RUNNER_STORAGE_KEY","drivers","$injector","$$rAFScheduler","sortAnimations","animations","processNode","processed","elementNode","domNode","lookup","parentEntry","tree","flatten","result","remainingLevelEntries","nextLevelEntries","row","childEntry","animationQueue","getAnchorNodes","hasAttribute","NG_ANIMATE_REF_ATTR","SELECTOR","anchors","groupAnimations","preparedAnimations","refLookup","index","enterOrMove","anchorNodes","direction","anchor","animationID","usedIndicesLookup","anchorGroups","operations","fromAnimation","toAnimation","lookupKey","toString","group","beforeStart","cssClassesIntersection","indexKey","aa","j","invokeFirstDriver","driverName","has","driver","updateAnimationRunners","newRunner","handleDestroyedElement","rejected","removeData","tempClasses","NG_ANIMATE_CLASSNAME","prepareClassName","PREPARE_CLASS_SUFFIX","groupedAnimations","toBeSortedAnimations","animationEntry","triggerAnimationStart","startAnimationFn","closeFn","targetElement","operation","start","animationRunner","$AnimateCssProvider","gcsLookup","gcsStaggerLookup","$timeout","$sniffer","$$animateQueue","gcsHashFn","extraClasses","parentCounter","computeCachedCssStaggerStyles","cacheKey","stagger","staggerClassName","rafWaitQueue","pageWidth","computeTimings","timings","aD","tD","maxDelay","maxDuration","init","endFn","animationClosed","animationCompleted","animationPaused","$$skipPreparationClasses","temporaryStyles","restoreStyles","setProperty","removeProperty","onDone","events","onAnimationProgress","animationTimerData","ANIMATE_TIMER_KEY","timer","applyBlocking","blockTransition","blockKeyframeAnimation","closeAndReturnNoopAnimator","$$willAnimate","stopPropagation","ev","originalEvent","timeStamp","$manualTimeStamp","Date","now","elapsedTime","toFixed","ELAPSED_TIME_MAX_DECIMAL_PLACES","startTime","maxDelayTime","recalculateTimingStyles","fullClassName","relativeDelay","hasTransitions","hasAnimations","applyAnimationDelay","delay","delayStyle","ONE_SECOND","maxDurationTime","easing","easeProp","easeVal","TIMING_KEY","timerTime","CLOSING_TIME_BUFFER","endTime","animationsData","setupFallbackTimer","currentTimerData","expectedEndTime","onAnimationExpired","cleanupStyles","playPause","playAnimation","arr","splice","maxStagger","itemIndex","floor","runnerHost","resume","runnerHost.resume","pause","runnerHost.pause","transitions","method","structuralClassName","addRemoveClassName","applyClassesEarly","trim","ACTIVE_CLASS_SUFFIX","hasToStyles","keyframeStyle","staggerVal","transitionStyle","durationStyle","staggerIndex","isFirst","skipBlocking","SAFE_FAST_FORWARD_DURATION_VALUE","hasTransitionAll","applyTransitionDuration","applyAnimationDuration","applyTransitionDelay","$$AnimateCssDriverProvider","$$animationProvider","$animateCss","filterCssClasses","replace","getUniqueValues","prepareAnchoredAnimation","outAnchor","inAnchor","calculateAnchorStyles","coords","getBoundingClientRect","bodyNode","scrollTop","scrollLeft","prepareInAnimation","endingClasses","startingClasses","animator","clone","NG_ANIMATE_SHIM_CLASS_NAME","cloneNode","NG_ANIMATE_ANCHOR_CLASS_NAME","rootBodyElement","append","animatorIn","animatorOut","prepareOutAnimation","NG_OUT_ANCHOR_CLASS_NAME","startingAnimator","prepareFromToAnchorAnimation","prepareRegularAnimation","anchorAnimations","outElement","inElement","animationRunners","all","rootNode","initDriverFn","$$AnimateJsProvider","lookupAnimations","flagMap","animationFactory","$$registeredAnimations","applyOptions","executeAnimationFn","args","classesToAdd","classesToRemove","apply","groupEventedAnimations","fnName","ani","endProgressCb","resolved","onAnimationComplete","packageAnimations","startAnimation","runners","animateFn","before","after","afterFn","beforeFn","toUpperCase","substr","onComplete","success","closeActiveAnimations","chain","cancelled","$$AnimateJsDriverProvider","$$animateJs","prepareAnimation","endFnFactory"]
}

/**
 * @license AngularJS v1.5.0-rc.2
 * (c) 2010-2016 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function(window, angular, undefined) {'use strict';

var $resourceMinErr = angular.$$minErr('$resource');

// Helper functions and regex to lookup a dotted path on an object
// stopping at undefined/null.  The path must be composed of ASCII
// identifiers (just like $parse)
var MEMBER_NAME_REGEX = /^(\.[a-zA-Z_$@][0-9a-zA-Z_$@]*)+$/;

function isValidDottedPath(path) {
  return (path != null && path !== '' && path !== 'hasOwnProperty' &&
      MEMBER_NAME_REGEX.test('.' + path));
}

function lookupDottedPath(obj, path) {
  if (!isValidDottedPath(path)) {
    throw $resourceMinErr('badmember', 'Dotted member path "@{0}" is invalid.', path);
  }
  var keys = path.split('.');
  for (var i = 0, ii = keys.length; i < ii && angular.isDefined(obj); i++) {
    var key = keys[i];
    obj = (obj !== null) ? obj[key] : undefined;
  }
  return obj;
}

/**
 * Create a shallow copy of an object and clear other fields from the destination
 */
function shallowClearAndCopy(src, dst) {
  dst = dst || {};

  angular.forEach(dst, function(value, key) {
    delete dst[key];
  });

  for (var key in src) {
    if (src.hasOwnProperty(key) && !(key.charAt(0) === '$' && key.charAt(1) === '$')) {
      dst[key] = src[key];
    }
  }

  return dst;
}

/**
 * @ngdoc module
 * @name ngResource
 * @description
 *
 * # ngResource
 *
 * The `ngResource` module provides interaction support with RESTful services
 * via the $resource service.
 *
 *
 * <div doc-module-components="ngResource"></div>
 *
 * See {@link ngResource.$resource `$resource`} for usage.
 */

/**
 * @ngdoc service
 * @name $resource
 * @requires $http
 * @requires ng.$log
 * @requires $q
 * @requires ng.$timeout
 *
 * @description
 * A factory which creates a resource object that lets you interact with
 * [RESTful](http://en.wikipedia.org/wiki/Representational_State_Transfer) server-side data sources.
 *
 * The returned resource object has action methods which provide high-level behaviors without
 * the need to interact with the low level {@link ng.$http $http} service.
 *
 * Requires the {@link ngResource `ngResource`} module to be installed.
 *
 * By default, trailing slashes will be stripped from the calculated URLs,
 * which can pose problems with server backends that do not expect that
 * behavior.  This can be disabled by configuring the `$resourceProvider` like
 * this:
 *
 * ```js
     app.config(['$resourceProvider', function($resourceProvider) {
       // Don't strip trailing slashes from calculated URLs
       $resourceProvider.defaults.stripTrailingSlashes = false;
     }]);
 * ```
 *
 * @param {string} url A parameterized URL template with parameters prefixed by `:` as in
 *   `/user/:username`. If you are using a URL with a port number (e.g.
 *   `http://example.com:8080/api`), it will be respected.
 *
 *   If you are using a url with a suffix, just add the suffix, like this:
 *   `$resource('http://example.com/resource.json')` or `$resource('http://example.com/:id.json')`
 *   or even `$resource('http://example.com/resource/:resource_id.:format')`
 *   If the parameter before the suffix is empty, :resource_id in this case, then the `/.` will be
 *   collapsed down to a single `.`.  If you need this sequence to appear and not collapse then you
 *   can escape it with `/\.`.
 *
 * @param {Object=} paramDefaults Default values for `url` parameters. These can be overridden in
 *   `actions` methods. If a parameter value is a function, it will be executed every time
 *   when a param value needs to be obtained for a request (unless the param was overridden).
 *
 *   Each key value in the parameter object is first bound to url template if present and then any
 *   excess keys are appended to the url search query after the `?`.
 *
 *   Given a template `/path/:verb` and parameter `{verb:'greet', salutation:'Hello'}` results in
 *   URL `/path/greet?salutation=Hello`.
 *
 *   If the parameter value is prefixed with `@` then the value for that parameter will be extracted
 *   from the corresponding property on the `data` object (provided when calling an action method).
 *   For example, if the `defaultParam` object is `{someParam: '@someProp'}` then the value of
 *   `someParam` will be `data.someProp`.
 *
 * @param {Object.<Object>=} actions Hash with declaration of custom actions that should extend
 *   the default set of resource actions. The declaration should be created in the format of {@link
 *   ng.$http#usage $http.config}:
 *
 *       {action1: {method:?, params:?, isArray:?, headers:?, ...},
 *        action2: {method:?, params:?, isArray:?, headers:?, ...},
 *        ...}
 *
 *   Where:
 *
 *   - **`action`** – {string} – The name of action. This name becomes the name of the method on
 *     your resource object.
 *   - **`method`** – {string} – Case insensitive HTTP method (e.g. `GET`, `POST`, `PUT`,
 *     `DELETE`, `JSONP`, etc).
 *   - **`params`** – {Object=} – Optional set of pre-bound parameters for this action. If any of
 *     the parameter value is a function, it will be executed every time when a param value needs to
 *     be obtained for a request (unless the param was overridden).
 *   - **`url`** – {string} – action specific `url` override. The url templating is supported just
 *     like for the resource-level urls.
 *   - **`isArray`** – {boolean=} – If true then the returned object for this action is an array,
 *     see `returns` section.
 *   - **`transformRequest`** –
 *     `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –
 *     transform function or an array of such functions. The transform function takes the http
 *     request body and headers and returns its transformed (typically serialized) version.
 *     By default, transformRequest will contain one function that checks if the request data is
 *     an object and serializes to using `angular.toJson`. To prevent this behavior, set
 *     `transformRequest` to an empty array: `transformRequest: []`
 *   - **`transformResponse`** –
 *     `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –
 *     transform function or an array of such functions. The transform function takes the http
 *     response body and headers and returns its transformed (typically deserialized) version.
 *     By default, transformResponse will contain one function that checks if the response looks
 *     like a JSON string and deserializes it using `angular.fromJson`. To prevent this behavior,
 *     set `transformResponse` to an empty array: `transformResponse: []`
 *   - **`cache`** – `{boolean|Cache}` – If true, a default $http cache will be used to cache the
 *     GET request, otherwise if a cache instance built with
 *     {@link ng.$cacheFactory $cacheFactory}, this cache will be used for
 *     caching.
 *   - **`timeout`** – `{number}` – timeout in milliseconds.<br />
 *     **Note:** In contrast to {@link ng.$http#usage $http.config}, {@link ng.$q promises} are
 *     **not** supported in $resource, because the same value would be used for multiple requests.
 *     If you are looking for a way to cancel requests, you should use the `cancellable` option.
 *   - **`cancellable`** – `{boolean}` – if set to true, the request made by a "non-instance" call
 *     will be cancelled (if not already completed) by calling `$cancelRequest()` on the call's
 *     return value. Calling `$cancelRequest()` for a non-cancellable or an already
 *     completed/cancelled request will have no effect.<br />
 *   - **`withCredentials`** - `{boolean}` - whether to set the `withCredentials` flag on the
 *     XHR object. See
 *     [requests with credentials](https://developer.mozilla.org/en/http_access_control#section_5)
 *     for more information.
 *   - **`responseType`** - `{string}` - see
 *     [requestType](https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest#responseType).
 *   - **`interceptor`** - `{Object=}` - The interceptor object has two optional methods -
 *     `response` and `responseError`. Both `response` and `responseError` interceptors get called
 *     with `http response` object. See {@link ng.$http $http interceptors}.
 *
 * @param {Object} options Hash with custom settings that should extend the
 *   default `$resourceProvider` behavior.  The supported options are:
 *
 *   - **`stripTrailingSlashes`** – {boolean} – If true then the trailing
 *   slashes from any calculated URL will be stripped. (Defaults to true.)
 *   - **`cancellable`** – {boolean} – If true, the request made by a "non-instance" call will be
 *   cancelled (if not already completed) by calling `$cancelRequest()` on the call's return value.
 *   This can be overwritten per action. (Defaults to false.)
 *
 * @returns {Object} A resource "class" object with methods for the default set of resource actions
 *   optionally extended with custom `actions`. The default set contains these actions:
 *   ```js
 *   { 'get':    {method:'GET'},
 *     'save':   {method:'POST'},
 *     'query':  {method:'GET', isArray:true},
 *     'remove': {method:'DELETE'},
 *     'delete': {method:'DELETE'} };
 *   ```
 *
 *   Calling these methods invoke an {@link ng.$http} with the specified http method,
 *   destination and parameters. When the data is returned from the server then the object is an
 *   instance of the resource class. The actions `save`, `remove` and `delete` are available on it
 *   as  methods with the `$` prefix. This allows you to easily perform CRUD operations (create,
 *   read, update, delete) on server-side data like this:
 *   ```js
 *   var User = $resource('/user/:userId', {userId:'@id'});
 *   var user = User.get({userId:123}, function() {
 *     user.abc = true;
 *     user.$save();
 *   });
 *   ```
 *
 *   It is important to realize that invoking a $resource object method immediately returns an
 *   empty reference (object or array depending on `isArray`). Once the data is returned from the
 *   server the existing reference is populated with the actual data. This is a useful trick since
 *   usually the resource is assigned to a model which is then rendered by the view. Having an empty
 *   object results in no rendering, once the data arrives from the server then the object is
 *   populated with the data and the view automatically re-renders itself showing the new data. This
 *   means that in most cases one never has to write a callback function for the action methods.
 *
 *   The action methods on the class object or instance object can be invoked with the following
 *   parameters:
 *
 *   - HTTP GET "class" actions: `Resource.action([parameters], [success], [error])`
 *   - non-GET "class" actions: `Resource.action([parameters], postData, [success], [error])`
 *   - non-GET instance actions:  `instance.$action([parameters], [success], [error])`
 *
 *
 *   Success callback is called with (value, responseHeaders) arguments, where the value is
 *   the populated resource instance or collection object. The error callback is called
 *   with (httpResponse) argument.
 *
 *   Class actions return empty instance (with additional properties below).
 *   Instance actions return promise of the action.
 *
 *   The Resource instances and collections have these additional properties:
 *
 *   - `$promise`: the {@link ng.$q promise} of the original server interaction that created this
 *     instance or collection.
 *
 *     On success, the promise is resolved with the same resource instance or collection object,
 *     updated with data from server. This makes it easy to use in
 *     {@link ngRoute.$routeProvider resolve section of $routeProvider.when()} to defer view
 *     rendering until the resource(s) are loaded.
 *
 *     On failure, the promise is rejected with the {@link ng.$http http response} object, without
 *     the `resource` property.
 *
 *     If an interceptor object was provided, the promise will instead be resolved with the value
 *     returned by the interceptor.
 *
 *   - `$resolved`: `true` after first server interaction is completed (either with success or
 *      rejection), `false` before that. Knowing if the Resource has been resolved is useful in
 *      data-binding.
 *
 *   The Resource instances and collections have these additional methods:
 *
 *   - `$cancelRequest`: If there is a cancellable, pending request related to the instance or
 *      collection, calling this method will abort the request.
 *
 * @example
 *
 * # Credit card resource
 *
 * ```js
     // Define CreditCard class
     var CreditCard = $resource('/user/:userId/card/:cardId',
      {userId:123, cardId:'@id'}, {
       charge: {method:'POST', params:{charge:true}}
      });

     // We can retrieve a collection from the server
     var cards = CreditCard.query(function() {
       // GET: /user/123/card
       // server returns: [ {id:456, number:'1234', name:'Smith'} ];

       var card = cards[0];
       // each item is an instance of CreditCard
       expect(card instanceof CreditCard).toEqual(true);
       card.name = "J. Smith";
       // non GET methods are mapped onto the instances
       card.$save();
       // POST: /user/123/card/456 {id:456, number:'1234', name:'J. Smith'}
       // server returns: {id:456, number:'1234', name: 'J. Smith'};

       // our custom method is mapped as well.
       card.$charge({amount:9.99});
       // POST: /user/123/card/456?amount=9.99&charge=true {id:456, number:'1234', name:'J. Smith'}
     });

     // we can create an instance as well
     var newCard = new CreditCard({number:'0123'});
     newCard.name = "Mike Smith";
     newCard.$save();
     // POST: /user/123/card {number:'0123', name:'Mike Smith'}
     // server returns: {id:789, number:'0123', name: 'Mike Smith'};
     expect(newCard.id).toEqual(789);
 * ```
 *
 * The object returned from this function execution is a resource "class" which has "static" method
 * for each action in the definition.
 *
 * Calling these methods invoke `$http` on the `url` template with the given `method`, `params` and
 * `headers`.
 *
 * @example
 *
 * # User resource
 *
 * When the data is returned from the server then the object is an instance of the resource type and
 * all of the non-GET methods are available with `$` prefix. This allows you to easily support CRUD
 * operations (create, read, update, delete) on server-side data.

   ```js
     var User = $resource('/user/:userId', {userId:'@id'});
     User.get({userId:123}, function(user) {
       user.abc = true;
       user.$save();
     });
   ```
 *
 * It's worth noting that the success callback for `get`, `query` and other methods gets passed
 * in the response that came from the server as well as $http header getter function, so one
 * could rewrite the above example and get access to http headers as:
 *
   ```js
     var User = $resource('/user/:userId', {userId:'@id'});
     User.get({userId:123}, function(user, getResponseHeaders){
       user.abc = true;
       user.$save(function(user, putResponseHeaders) {
         //user => saved user object
         //putResponseHeaders => $http header getter
       });
     });
   ```
 *
 * You can also access the raw `$http` promise via the `$promise` property on the object returned
 *
   ```
     var User = $resource('/user/:userId', {userId:'@id'});
     User.get({userId:123})
         .$promise.then(function(user) {
           $scope.user = user;
         });
   ```
 *
 * @example
 *
 * # Creating a custom 'PUT' request
 *
 * In this example we create a custom method on our resource to make a PUT request
 * ```js
 *    var app = angular.module('app', ['ngResource', 'ngRoute']);
 *
 *    // Some APIs expect a PUT request in the format URL/object/ID
 *    // Here we are creating an 'update' method
 *    app.factory('Notes', ['$resource', function($resource) {
 *    return $resource('/notes/:id', null,
 *        {
 *            'update': { method:'PUT' }
 *        });
 *    }]);
 *
 *    // In our controller we get the ID from the URL using ngRoute and $routeParams
 *    // We pass in $routeParams and our Notes factory along with $scope
 *    app.controller('NotesCtrl', ['$scope', '$routeParams', 'Notes',
                                      function($scope, $routeParams, Notes) {
 *    // First get a note object from the factory
 *    var note = Notes.get({ id:$routeParams.id });
 *    $id = note.id;
 *
 *    // Now call update passing in the ID first then the object you are updating
 *    Notes.update({ id:$id }, note);
 *
 *    // This will PUT /notes/ID with the note object in the request payload
 *    }]);
 * ```
 *
 * @example
 *
 * # Cancelling requests
 *
 * If an action's configuration specifies that it is cancellable, you can cancel the request related
 * to an instance or collection (as long as it is a result of a "non-instance" call):
 *
   ```js
     // ...defining the `Hotel` resource...
     var Hotel = $resource('/api/hotel/:id', {id: '@id'}, {
       // Let's make the `query()` method cancellable
       query: {method: 'get', isArray: true, cancellable: true}
     });

     // ...somewhere in the PlanVacationController...
     ...
     this.onDestinationChanged = function onDestinationChanged(destination) {
       // We don't care about any pending request for hotels
       // in a different destination any more
       this.availableHotels.$cancelRequest();

       // Let's query for hotels in '<destination>'
       // (calls: /api/hotel?location=<destination>)
       this.availableHotels = Hotel.query({location: destination});
     };
   ```
 *
 */
angular.module('ngResource', ['ng']).
  provider('$resource', function() {
    var PROTOCOL_AND_DOMAIN_REGEX = /^https?:\/\/[^\/]*/;
    var provider = this;

    this.defaults = {
      // Strip slashes by default
      stripTrailingSlashes: true,

      // Default actions configuration
      actions: {
        'get': {method: 'GET'},
        'save': {method: 'POST'},
        'query': {method: 'GET', isArray: true},
        'remove': {method: 'DELETE'},
        'delete': {method: 'DELETE'}
      }
    };

    this.$get = ['$http', '$log', '$q', '$timeout', function($http, $log, $q, $timeout) {

      var noop = angular.noop,
        forEach = angular.forEach,
        extend = angular.extend,
        copy = angular.copy,
        isFunction = angular.isFunction;

      /**
       * We need our custom method because encodeURIComponent is too aggressive and doesn't follow
       * http://www.ietf.org/rfc/rfc3986.txt with regards to the character set
       * (pchar) allowed in path segments:
       *    segment       = *pchar
       *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
       *    pct-encoded   = "%!"(MISSING) HEXDIG HEXDIG
       *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
       *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
       *                     / "*" / "+" / "," / ";" / "="
       */
      function encodeUriSegment(val) {
        return encodeUriQuery(val, true).
          replace(/%!/(MISSING)gi, '&').
          replace(/%!D(MISSING)/gi, '=').
          replace(/%!B(MISSING)/gi, '+');
      }


      /**
       * This method is intended for encoding *key* or *value* parts of query component. We need a
       * custom method because encodeURIComponent is too aggressive and encodes stuff that doesn't
       * have to be encoded per http://tools.ietf.org/html/rfc3986:
       *    query       = *( pchar / "/" / "?" )
       *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
       *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
       *    pct-encoded   = "%!"(MISSING) HEXDIG HEXDIG
       *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
       *                     / "*" / "+" / "," / ";" / "="
       */
      function encodeUriQuery(val, pctEncodeSpaces) {
        return encodeURIComponent(val).
          replace(/%!/(MISSING)gi, '@').
          replace(/%!A(MISSING)/gi, ':').
          replace(/%!/(MISSING)g, '$').
          replace(/%!C(MISSING)/gi, ',').
          replace(/%!/(MISSING)g, (pctEncodeSpaces ? '%!'(MISSING) : '+'));
      }

      function Route(template, defaults) {
        this.template = template;
        this.defaults = extend({}, provider.defaults, defaults);
        this.urlParams = {};
      }

      Route.prototype = {
        setUrlParams: function(config, params, actionUrl) {
          var self = this,
            url = actionUrl || self.template,
            val,
            encodedVal,
            protocolAndDomain = '';

          var urlParams = self.urlParams = {};
          forEach(url.split(/\W/), function(param) {
            if (param === 'hasOwnProperty') {
              throw $resourceMinErr('badname', "hasOwnProperty is not a valid parameter name.");
            }
            if (!(new RegExp("^\\d+$").test(param)) && param &&
              (new RegExp("(^|[^\\\\]):" + param + "(\\W|$)").test(url))) {
              urlParams[param] = {
                isQueryParamValue: (new RegExp("\\?.*=:" + param + "(?:\\W|$)")).test(url)
              };
            }
          });
          url = url.replace(/\\:/g, ':');
          url = url.replace(PROTOCOL_AND_DOMAIN_REGEX, function(match) {
            protocolAndDomain = match;
            return '';
          });

          params = params || {};
          forEach(self.urlParams, function(paramInfo, urlParam) {
            val = params.hasOwnProperty(urlParam) ? params[urlParam] : self.defaults[urlParam];
            if (angular.isDefined(val) && val !== null) {
              if (paramInfo.isQueryParamValue) {
                encodedVal = encodeUriQuery(val, true);
              } else {
                encodedVal = encodeUriSegment(val);
              }
              url = url.replace(new RegExp(":" + urlParam + "(\\W|$)", "g"), function(match, p1) {
                return encodedVal + p1;
              });
            } else {
              url = url.replace(new RegExp("(\/?):" + urlParam + "(\\W|$)", "g"), function(match,
                  leadingSlashes, tail) {
                if (tail.charAt(0) == '/') {
                  return tail;
                } else {
                  return leadingSlashes + tail;
                }
              });
            }
          });

          // strip trailing slashes and set the url (unless this behavior is specifically disabled)
          if (self.defaults.stripTrailingSlashes) {
            url = url.replace(/\/+$/, '') || '/';
          }

          // then replace collapse `/.` if found in the last URL path segment before the query
          // E.g. `http://url.com/id./format?q=x` becomes `http://url.com/id.format?q=x`
          url = url.replace(/\/\.(?=\w+($|\?))/, '.');
          // replace escaped `/\.` with `/.`
          config.url = protocolAndDomain + url.replace(/\/\\\./, '/.');


          // set params - delegate param encoding to $http
          forEach(params, function(value, key) {
            if (!self.urlParams[key]) {
              config.params = config.params || {};
              config.params[key] = value;
            }
          });
        }
      };


      function resourceFactory(url, paramDefaults, actions, options) {
        var route = new Route(url, options);

        actions = extend({}, provider.defaults.actions, actions);

        function extractParams(data, actionParams) {
          var ids = {};
          actionParams = extend({}, paramDefaults, actionParams);
          forEach(actionParams, function(value, key) {
            if (isFunction(value)) { value = value(); }
            ids[key] = value && value.charAt && value.charAt(0) == '@' ?
              lookupDottedPath(data, value.substr(1)) : value;
          });
          return ids;
        }

        function defaultResponseInterceptor(response) {
          return response.resource;
        }

        function Resource(value) {
          shallowClearAndCopy(value || {}, this);
        }

        Resource.prototype.toJSON = function() {
          var data = extend({}, this);
          delete data.$promise;
          delete data.$resolved;
          return data;
        };

        forEach(actions, function(action, name) {
          var hasBody = /^(POST|PUT|PATCH)$/i.test(action.method);
          var numericTimeout = action.timeout;
          var cancellable = angular.isDefined(action.cancellable) ? action.cancellable :
              (options && angular.isDefined(options.cancellable)) ? options.cancellable :
              provider.defaults.cancellable;

          if (numericTimeout && !angular.isNumber(numericTimeout)) {
            $log.debug('ngResource:\n' +
                       '  Only numeric values are allowed as `timeout`.\n' +
                       '  Promises are not supported in $resource, because the same value would ' +
                       'be used for multiple requests. If you are looking for a way to cancel ' +
                       'requests, you should use the `cancellable` option.');
            delete action.timeout;
            numericTimeout = null;
          }

          Resource[name] = function(a1, a2, a3, a4) {
            var params = {}, data, success, error;

            /* jshint -W086 */ /* (purposefully fall through case statements) */
            switch (arguments.length) {
              case 4:
                error = a4;
                success = a3;
              //fallthrough
              case 3:
              case 2:
                if (isFunction(a2)) {
                  if (isFunction(a1)) {
                    success = a1;
                    error = a2;
                    break;
                  }

                  success = a2;
                  error = a3;
                  //fallthrough
                } else {
                  params = a1;
                  data = a2;
                  success = a3;
                  break;
                }
              case 1:
                if (isFunction(a1)) success = a1;
                else if (hasBody) data = a1;
                else params = a1;
                break;
              case 0: break;
              default:
                throw $resourceMinErr('badargs',
                  "Expected up to 4 arguments [params, data, success, error], got {0} arguments",
                  arguments.length);
            }
            /* jshint +W086 */ /* (purposefully fall through case statements) */

            var isInstanceCall = this instanceof Resource;
            var value = isInstanceCall ? data : (action.isArray ? [] : new Resource(data));
            var httpConfig = {};
            var responseInterceptor = action.interceptor && action.interceptor.response ||
              defaultResponseInterceptor;
            var responseErrorInterceptor = action.interceptor && action.interceptor.responseError ||
              undefined;
            var timeoutDeferred;
            var numericTimeoutPromise;

            forEach(action, function(value, key) {
              switch (key) {
                default:
                  httpConfig[key] = copy(value);
                  break;
                case 'params':
                case 'isArray':
                case 'interceptor':
                case 'cancellable':
                  break;
              }
            });

            if (!isInstanceCall && cancellable) {
              timeoutDeferred = $q.defer();
              httpConfig.timeout = timeoutDeferred.promise;

              if (numericTimeout) {
                numericTimeoutPromise = $timeout(timeoutDeferred.resolve, numericTimeout);
              }
            }

            if (hasBody) httpConfig.data = data;
            route.setUrlParams(httpConfig,
              extend({}, extractParams(data, action.params || {}), params),
              action.url);

            var promise = $http(httpConfig).then(function(response) {
              var data = response.data;

              if (data) {
                // Need to convert action.isArray to boolean in case it is undefined
                // jshint -W018
                if (angular.isArray(data) !== (!!action.isArray)) {
                  throw $resourceMinErr('badcfg',
                      'Error in resource configuration for action `{0}`. Expected response to ' +
                      'contain an {1} but got an {2} (Request: {3} {4})', name, action.isArray ? 'array' : 'object',
                    angular.isArray(data) ? 'array' : 'object', httpConfig.method, httpConfig.url);
                }
                // jshint +W018
                if (action.isArray) {
                  value.length = 0;
                  forEach(data, function(item) {
                    if (typeof item === "object") {
                      value.push(new Resource(item));
                    } else {
                      // Valid JSON values may be string literals, and these should not be converted
                      // into objects. These items will not have access to the Resource prototype
                      // methods, but unfortunately there
                      value.push(item);
                    }
                  });
                } else {
                  var promise = value.$promise;     // Save the promise
                  shallowClearAndCopy(data, value);
                  value.$promise = promise;         // Restore the promise
                }
              }
              response.resource = value;

              return response;
            }, function(response) {
              (error || noop)(response);
              return $q.reject(response);
            });

            promise.finally(function() {
              value.$resolved = true;
              if (!isInstanceCall && cancellable) {
                value.$cancelRequest = angular.noop;
                $timeout.cancel(numericTimeoutPromise);
                timeoutDeferred = numericTimeoutPromise = httpConfig.timeout = null;
              }
            });

            promise = promise.then(
              function(response) {
                var value = responseInterceptor(response);
                (success || noop)(value, response.headers);
                return value;
              },
              responseErrorInterceptor);

            if (!isInstanceCall) {
              // we are creating instance / collection
              // - set the initial promise
              // - return the instance / collection
              value.$promise = promise;
              value.$resolved = false;
              if (cancellable) value.$cancelRequest = timeoutDeferred.resolve;

              return value;
            }

            // instance call
            return promise;
          };


          Resource.prototype['$' + name] = function(params, success, error) {
            if (isFunction(params)) {
              error = success; success = params; params = {};
            }
            var result = Resource[name].call(this, params, this, success, error);
            return result.$promise || result;
          };
        });

        Resource.bind = function(additionalParamDefaults) {
          return resourceFactory(url, extend({}, paramDefaults, additionalParamDefaults), actions);
        };

        return Resource;
      }

      return resourceFactory;
    }];
  });


})(window, window.angular);
/*
 AngularJS v1.5.0-rc.2
 (c) 2010-2016 Google, Inc. http://angularjs.org
 License: MIT
*/
(function(Q,d,G){'use strict';function H(t,g){g=g||{};d.forEach(g,function(d,q){delete g[q]});for(var q in t)!t.hasOwnProperty(q)||"$"===q.charAt(0)&&"$"===q.charAt(1)||(g[q]=t[q]);return g}var z=d.$$minErr("$resource"),N=/^(\.[a-zA-Z_$@][0-9a-zA-Z_$@]*)+$/;d.module("ngResource",["ng"]).provider("$resource",function(){var t=/^https?:\/\/[^\/]*/,g=this;this.defaults={stripTrailingSlashes:!0,actions:{get:{method:"GET"},save:{method:"POST"},query:{method:"GET",isArray:!0},remove:{method:"DELETE"},"delete":{method:"DELETE"}}};
this.$get=["$http","$log","$q","$timeout",function(q,M,I,J){function A(d,h){return encodeURIComponent(d).replace(/%!/(MISSING)gi,"@").replace(/%!A(MISSING)/gi,":").replace(/%!/(MISSING)g,"$").replace(/%!C(MISSING)/gi,",").replace(/%!/(MISSING)g,h?"%!"(MISSING):"+")}function B(d,h){this.template=d;this.defaults=v({},g.defaults,h);this.urlParams={}}function K(e,h,n,k){function c(a,b){var c={};b=v({},h,b);u(b,function(b,h){x(b)&&(b=b());var f;if(b&&b.charAt&&"@"==b.charAt(0)){f=a;var l=b.substr(1);if(null==l||""===l||"hasOwnProperty"===l||!N.test("."+
l))throw z("badmember",l);for(var l=l.split("."),m=0,k=l.length;m<k&&d.isDefined(f);m++){var r=l[m];f=null!==f?f[r]:G}}else f=b;c[h]=f});return c}function O(a){return a.resource}function m(a){H(a||{},this)}var t=new B(e,k);n=v({},g.defaults.actions,n);m.prototype.toJSON=function(){var a=v({},this);delete a.$promise;delete a.$resolved;return a};u(n,function(a,b){var h=/^(POST|PUT|PATCH)$/i.test(a.method),e=a.timeout,E=d.isDefined(a.cancellable)?a.cancellable:k&&d.isDefined(k.cancellable)?k.cancellable:
g.defaults.cancellable;e&&!d.isNumber(e)&&(M.debug("ngResource:\n  Only numeric values are allowed as `timeout`.\n  Promises are not supported in $resource, because the same value would be used for multiple requests. If you are looking for a way to cancel requests, you should use the `cancellable` option."),delete a.timeout,e=null);m[b]=function(f,l,k,g){var r={},n,w,C;switch(arguments.length){case 4:C=g,w=k;case 3:case 2:if(x(l)){if(x(f)){w=f;C=l;break}w=l;C=k}else{r=f;n=l;w=k;break}case 1:x(f)?
w=f:h?n=f:r=f;break;case 0:break;default:throw z("badargs",arguments.length);}var D=this instanceof m,p=D?n:a.isArray?[]:new m(n),s={},A=a.interceptor&&a.interceptor.response||O,B=a.interceptor&&a.interceptor.responseError||G,y,F;u(a,function(a,b){switch(b){default:s[b]=P(a);case "params":case "isArray":case "interceptor":case "cancellable":}});!D&&E&&(y=I.defer(),s.timeout=y.promise,e&&(F=J(y.resolve,e)));h&&(s.data=n);t.setUrlParams(s,v({},c(n,a.params||{}),r),a.url);r=q(s).then(function(f){var c=
f.data;if(c){if(d.isArray(c)!==!!a.isArray)throw z("badcfg",b,a.isArray?"array":"object",d.isArray(c)?"array":"object",s.method,s.url);if(a.isArray)p.length=0,u(c,function(b){"object"===typeof b?p.push(new m(b)):p.push(b)});else{var l=p.$promise;H(c,p);p.$promise=l}}f.resource=p;return f},function(b){(C||L)(b);return I.reject(b)});r.finally(function(){p.$resolved=!0;!D&&E&&(p.$cancelRequest=d.noop,J.cancel(F),y=F=s.timeout=null)});r=r.then(function(b){var a=A(b);(w||L)(a,b.headers);return a},B);return D?
r:(p.$promise=r,p.$resolved=!1,E&&(p.$cancelRequest=y.resolve),p)};m.prototype["$"+b]=function(a,c,d){x(a)&&(d=c,c=a,a={});a=m[b].call(this,a,this,c,d);return a.$promise||a}});m.bind=function(a){return K(e,v({},h,a),n)};return m}var L=d.noop,u=d.forEach,v=d.extend,P=d.copy,x=d.isFunction;B.prototype={setUrlParams:function(e,h,n){var k=this,c=n||k.template,g,m,q="",a=k.urlParams={};u(c.split(/\W/),function(b){if("hasOwnProperty"===b)throw z("badname");!/^\d+$/.test(b)&&b&&(new RegExp("(^|[^\\\\]):"+
b+"(\\W|$)")).test(c)&&(a[b]={isQueryParamValue:(new RegExp("\\?.*=:"+b+"(?:\\W|$)")).test(c)})});c=c.replace(/\\:/g,":");c=c.replace(t,function(a){q=a;return""});h=h||{};u(k.urlParams,function(a,e){g=h.hasOwnProperty(e)?h[e]:k.defaults[e];d.isDefined(g)&&null!==g?(m=a.isQueryParamValue?A(g,!0):A(g,!0).replace(/%!/(MISSING)gi,"&").replace(/%!D(MISSING)/gi,"=").replace(/%!B(MISSING)/gi,"+"),c=c.replace(new RegExp(":"+e+"(\\W|$)","g"),function(a,b){return m+b})):c=c.replace(new RegExp("(/?):"+e+"(\\W|$)","g"),function(a,b,c){return"/"==
c.charAt(0)?c:b+c})});k.defaults.stripTrailingSlashes&&(c=c.replace(/\/+$/,"")||"/");c=c.replace(/\/\.(?=\w+($|\?))/,".");e.url=q+c.replace(/\/\\\./,"/.");u(h,function(a,c){k.urlParams[c]||(e.params=e.params||{},e.params[c]=a)})}};return K}]})})(window,window.angular);
//# sourceMappingURL=angular-resource.min.js.map
{
"version":3,
"file":"angular-resource.min.js",
"lineCount":14,
"mappings":"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",
"sources":["angular-resource.js"],
"names":["window","angular","undefined","shallowClearAndCopy","src","dst","forEach","value","key","hasOwnProperty","charAt","$resourceMinErr","$$minErr","MEMBER_NAME_REGEX","module","provider","PROTOCOL_AND_DOMAIN_REGEX","defaults","stripTrailingSlashes","actions","method","isArray","$get","$http","$log","$q","$timeout","encodeUriQuery","val","pctEncodeSpaces","encodeURIComponent","replace","Route","template","extend","urlParams","resourceFactory","url","paramDefaults","options","extractParams","data","actionParams","ids","isFunction","path","test","keys","split","i","ii","length","isDefined","obj","defaultResponseInterceptor","response","resource","Resource","route","prototype","toJSON","Resource.prototype.toJSON","$promise","$resolved","action","name","hasBody","numericTimeout","timeout","cancellable","isNumber","debug","a1","a2","a3","a4","params","success","error","arguments","isInstanceCall","httpConfig","responseInterceptor","interceptor","responseErrorInterceptor","responseError","timeoutDeferred","numericTimeoutPromise","copy","defer","promise","resolve","setUrlParams","then","item","push","noop","reject","finally","$cancelRequest","cancel","headers","result","call","bind","Resource.bind","additionalParamDefaults","config","actionUrl","self","encodedVal","protocolAndDomain","param","RegExp","isQueryParamValue","match","paramInfo","urlParam","p1","leadingSlashes","tail"]
}
/**
 * @license AngularJS v1.5.0-rc.2
 * (c) 2010-2016 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function(window, angular, undefined) {'use strict';

/**
 * @ngdoc module
 * @name ngRoute
 * @description
 *
 * # ngRoute
 *
 * The `ngRoute` module provides routing and deeplinking services and directives for angular apps.
 *
 * ## Example
 * See {@link ngRoute.$route#example $route} for an example of configuring and using `ngRoute`.
 *
 *
 * <div doc-module-components="ngRoute"></div>
 */
 /* global -ngRouteModule */
var ngRouteModule = angular.module('ngRoute', ['ng']).
                        provider('$route', $RouteProvider),
    $routeMinErr = angular.$$minErr('ngRoute');

/**
 * @ngdoc provider
 * @name $routeProvider
 *
 * @description
 *
 * Used for configuring routes.
 *
 * ## Example
 * See {@link ngRoute.$route#example $route} for an example of configuring and using `ngRoute`.
 *
 * ## Dependencies
 * Requires the {@link ngRoute `ngRoute`} module to be installed.
 */
function $RouteProvider() {
  function inherit(parent, extra) {
    return angular.extend(Object.create(parent), extra);
  }

  var routes = {};

  /**
   * @ngdoc method
   * @name $routeProvider#when
   *
   * @param {string} path Route path (matched against `$location.path`). If `$location.path`
   *    contains redundant trailing slash or is missing one, the route will still match and the
   *    `$location.path` will be updated to add or drop the trailing slash to exactly match the
   *    route definition.
   *
   *    * `path` can contain named groups starting with a colon: e.g. `:name`. All characters up
   *        to the next slash are matched and stored in `$routeParams` under the given `name`
   *        when the route matches.
   *    * `path` can contain named groups starting with a colon and ending with a star:
   *        e.g.`:name*`. All characters are eagerly stored in `$routeParams` under the given `name`
   *        when the route matches.
   *    * `path` can contain optional named groups with a question mark: e.g.`:name?`.
   *
   *    For example, routes like `/color/:color/largecode/:largecode*\/edit` will match
   *    `/color/brown/largecode/code/with/slashes/edit` and extract:
   *
   *    * `color: brown`
   *    * `largecode: code/with/slashes`.
   *
   *
   * @param {Object} route Mapping information to be assigned to `$route.current` on route
   *    match.
   *
   *    Object properties:
   *
   *    - `controller` – `{(string|function()=}` – Controller fn that should be associated with
   *      newly created scope or the name of a {@link angular.Module#controller registered
   *      controller} if passed as a string.
   *    - `controllerAs` – `{string=}` – An identifier name for a reference to the controller.
   *      If present, the controller will be published to scope under the `controllerAs` name.
   *    - `template` – `{string=|function()=}` – html template as a string or a function that
   *      returns an html template as a string which should be used by {@link
   *      ngRoute.directive:ngView ngView} or {@link ng.directive:ngInclude ngInclude} directives.
   *      This property takes precedence over `templateUrl`.
   *
   *      If `template` is a function, it will be called with the following parameters:
   *
   *      - `{Array.<Object>}` - route parameters extracted from the current
   *        `$location.path()` by applying the current route
   *
   *    - `templateUrl` – `{string=|function()=}` – path or function that returns a path to an html
   *      template that should be used by {@link ngRoute.directive:ngView ngView}.
   *
   *      If `templateUrl` is a function, it will be called with the following parameters:
   *
   *      - `{Array.<Object>}` - route parameters extracted from the current
   *        `$location.path()` by applying the current route
   *
   *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should
   *      be injected into the controller. If any of these dependencies are promises, the router
   *      will wait for them all to be resolved or one to be rejected before the controller is
   *      instantiated.
   *      If all the promises are resolved successfully, the values of the resolved promises are
   *      injected and {@link ngRoute.$route#$routeChangeSuccess $routeChangeSuccess} event is
   *      fired. If any of the promises are rejected the
   *      {@link ngRoute.$route#$routeChangeError $routeChangeError} event is fired.
   *      For easier access to the resolved dependencies from the template, the `resolve` map will
   *      be available on the scope of the route, under `$resolve` (by default) or a custom name
   *      specified by the `resolveAs` property (see below). This can be particularly useful, when
   *      working with {@link angular.Module#component components} as route templates.<br />
   *      <div class="alert alert-warning">
   *        **Note:** If your scope already contains a property with this name, it will be hidden
   *        or overwritten. Make sure, you specify an appropriate name for this property, that
   *        does not collide with other properties on the scope.
   *      </div>
   *      The map object is:
   *
   *      - `key` – `{string}`: a name of a dependency to be injected into the controller.
   *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.
   *        Otherwise if function, then it is {@link auto.$injector#invoke injected}
   *        and the return value is treated as the dependency. If the result is a promise, it is
   *        resolved before its value is injected into the controller. Be aware that
   *        `ngRoute.$routeParams` will still refer to the previous route within these resolve
   *        functions.  Use `$route.current.params` to access the new route parameters, instead.
   *
   *    - `resolveAs` - `{string=}` - The name under which the `resolve` map will be available on
   *      the scope of the route. If omitted, defaults to `$resolve`.
   *
   *    - `redirectTo` – `{(string|function())=}` – value to update
   *      {@link ng.$location $location} path with and trigger route redirection.
   *
   *      If `redirectTo` is a function, it will be called with the following parameters:
   *
   *      - `{Object.<string>}` - route parameters extracted from the current
   *        `$location.path()` by applying the current route templateUrl.
   *      - `{string}` - current `$location.path()`
   *      - `{Object}` - current `$location.search()`
   *
   *      The custom `redirectTo` function is expected to return a string which will be used
   *      to update `$location.path()` and `$location.search()`.
   *
   *    - `[reloadOnSearch=true]` - `{boolean=}` - reload route when only `$location.search()`
   *      or `$location.hash()` changes.
   *
   *      If the option is set to `false` and url in the browser changes, then
   *      `$routeUpdate` event is broadcasted on the root scope.
   *
   *    - `[caseInsensitiveMatch=false]` - `{boolean=}` - match routes without being case sensitive
   *
   *      If the option is set to `true`, then the particular route can be matched without being
   *      case sensitive
   *
   * @returns {Object} self
   *
   * @description
   * Adds a new route definition to the `$route` service.
   */
  this.when = function(path, route) {
    //copy original route object to preserve params inherited from proto chain
    var routeCopy = angular.copy(route);
    if (angular.isUndefined(routeCopy.reloadOnSearch)) {
      routeCopy.reloadOnSearch = true;
    }
    if (angular.isUndefined(routeCopy.caseInsensitiveMatch)) {
      routeCopy.caseInsensitiveMatch = this.caseInsensitiveMatch;
    }
    routes[path] = angular.extend(
      routeCopy,
      path && pathRegExp(path, routeCopy)
    );

    // create redirection for trailing slashes
    if (path) {
      var redirectPath = (path[path.length - 1] == '/')
            ? path.substr(0, path.length - 1)
            : path + '/';

      routes[redirectPath] = angular.extend(
        {redirectTo: path},
        pathRegExp(redirectPath, routeCopy)
      );
    }

    return this;
  };

  /**
   * @ngdoc property
   * @name $routeProvider#caseInsensitiveMatch
   * @description
   *
   * A boolean property indicating if routes defined
   * using this provider should be matched using a case insensitive
   * algorithm. Defaults to `false`.
   */
  this.caseInsensitiveMatch = false;

   /**
    * @param path {string} path
    * @param opts {Object} options
    * @return {?Object}
    *
    * @description
    * Normalizes the given path, returning a regular expression
    * and the original path.
    *
    * Inspired by pathRexp in visionmedia/express/lib/utils.js.
    */
  function pathRegExp(path, opts) {
    var insensitive = opts.caseInsensitiveMatch,
        ret = {
          originalPath: path,
          regexp: path
        },
        keys = ret.keys = [];

    path = path
      .replace(/([().])/g, '\\$1')
      .replace(/(\/)?:(\w+)([\?\*])?/g, function(_, slash, key, option) {
        var optional = option === '?' ? option : null;
        var star = option === '*' ? option : null;
        keys.push({ name: key, optional: !!optional });
        slash = slash || '';
        return ''
          + (optional ? '' : slash)
          + '(?:'
          + (optional ? slash : '')
          + (star && '(.+?)' || '([^/]+)')
          + (optional || '')
          + ')'
          + (optional || '');
      })
      .replace(/([\/$\*])/g, '\\$1');

    ret.regexp = new RegExp('^' + path + '$', insensitive ? 'i' : '');
    return ret;
  }

  /**
   * @ngdoc method
   * @name $routeProvider#otherwise
   *
   * @description
   * Sets route definition that will be used on route change when no other route definition
   * is matched.
   *
   * @param {Object|string} params Mapping information to be assigned to `$route.current`.
   * If called with a string, the value maps to `redirectTo`.
   * @returns {Object} self
   */
  this.otherwise = function(params) {
    if (typeof params === 'string') {
      params = {redirectTo: params};
    }
    this.when(null, params);
    return this;
  };


  this.$get = ['$rootScope',
               '$location',
               '$routeParams',
               '$q',
               '$injector',
               '$templateRequest',
               '$sce',
      function($rootScope, $location, $routeParams, $q, $injector, $templateRequest, $sce) {

    /**
     * @ngdoc service
     * @name $route
     * @requires $location
     * @requires $routeParams
     *
     * @property {Object} current Reference to the current route definition.
     * The route definition contains:
     *
     *   - `controller`: The controller constructor as defined in the route definition.
     *   - `locals`: A map of locals which is used by {@link ng.$controller $controller} service for
     *     controller instantiation. The `locals` contain
     *     the resolved values of the `resolve` map. Additionally the `locals` also contain:
     *
     *     - `$scope` - The current route scope.
     *     - `$template` - The current route template HTML.
     *
     *     The `locals` will be assigned to the route scope's `$resolve` property. You can override
     *     the property name, using `resolveAs` in the route definition. See
     *     {@link ngRoute.$routeProvider $routeProvider} for more info.
     *
     * @property {Object} routes Object with all route configuration Objects as its properties.
     *
     * @description
     * `$route` is used for deep-linking URLs to controllers and views (HTML partials).
     * It watches `$location.url()` and tries to map the path to an existing route definition.
     *
     * Requires the {@link ngRoute `ngRoute`} module to be installed.
     *
     * You can define routes through {@link ngRoute.$routeProvider $routeProvider}'s API.
     *
     * The `$route` service is typically used in conjunction with the
     * {@link ngRoute.directive:ngView `ngView`} directive and the
     * {@link ngRoute.$routeParams `$routeParams`} service.
     *
     * @example
     * This example shows how changing the URL hash causes the `$route` to match a route against the
     * URL, and the `ngView` pulls in the partial.
     *
     * <example name="$route-service" module="ngRouteExample"
     *          deps="angular-route.js" fixBase="true">
     *   <file name="index.html">
     *     <div ng-controller="MainController">
     *       Choose:
     *       <a href="Book/Moby">Moby</a> |
     *       <a href="Book/Moby/ch/1">Moby: Ch1</a> |
     *       <a href="Book/Gatsby">Gatsby</a> |
     *       <a href="Book/Gatsby/ch/4?key=value">Gatsby: Ch4</a> |
     *       <a href="Book/Scarlet">Scarlet Letter</a><br/>
     *
     *       <div ng-view></div>
     *
     *       <hr />
     *
     *       <pre>$location.path() = {{$location.path()}}</pre>
     *       <pre>$route.current.templateUrl = {{$route.current.templateUrl}}</pre>
     *       <pre>$route.current.params = {{$route.current.params}}</pre>
     *       <pre>$route.current.scope.name = {{$route.current.scope.name}}</pre>
     *       <pre>$routeParams = {{$routeParams}}</pre>
     *     </div>
     *   </file>
     *
     *   <file name="book.html">
     *     controller: {{name}}<br />
     *     Book Id: {{params.bookId}}<br />
     *   </file>
     *
     *   <file name="chapter.html">
     *     controller: {{name}}<br />
     *     Book Id: {{params.bookId}}<br />
     *     Chapter Id: {{params.chapterId}}
     *   </file>
     *
     *   <file name="script.js">
     *     angular.module('ngRouteExample', ['ngRoute'])
     *
     *      .controller('MainController', function($scope, $route, $routeParams, $location) {
     *          $scope.$route = $route;
     *          $scope.$location = $location;
     *          $scope.$routeParams = $routeParams;
     *      })
     *
     *      .controller('BookController', function($scope, $routeParams) {
     *          $scope.name = "BookController";
     *          $scope.params = $routeParams;
     *      })
     *
     *      .controller('ChapterController', function($scope, $routeParams) {
     *          $scope.name = "ChapterController";
     *          $scope.params = $routeParams;
     *      })
     *
     *     .config(function($routeProvider, $locationProvider) {
     *       $routeProvider
     *        .when('/Book/:bookId', {
     *         templateUrl: 'book.html',
     *         controller: 'BookController',
     *         resolve: {
     *           // I will cause a 1 second delay
     *           delay: function($q, $timeout) {
     *             var delay = $q.defer();
     *             $timeout(delay.resolve, 1000);
     *             return delay.promise;
     *           }
     *         }
     *       })
     *       .when('/Book/:bookId/ch/:chapterId', {
     *         templateUrl: 'chapter.html',
     *         controller: 'ChapterController'
     *       });
     *
     *       // configure html5 to get links working on jsfiddle
     *       $locationProvider.html5Mode(true);
     *     });
     *
     *   </file>
     *
     *   <file name="protractor.js" type="protractor">
     *     it('should load and compile correct template', function() {
     *       element(by.linkText('Moby: Ch1')).click();
     *       var content = element(by.css('[ng-view]')).getText();
     *       expect(content).toMatch(/controller\: ChapterController/);
     *       expect(content).toMatch(/Book Id\: Moby/);
     *       expect(content).toMatch(/Chapter Id\: 1/);
     *
     *       element(by.partialLinkText('Scarlet')).click();
     *
     *       content = element(by.css('[ng-view]')).getText();
     *       expect(content).toMatch(/controller\: BookController/);
     *       expect(content).toMatch(/Book Id\: Scarlet/);
     *     });
     *   </file>
     * </example>
     */

    /**
     * @ngdoc event
     * @name $route#$routeChangeStart
     * @eventType broadcast on root scope
     * @description
     * Broadcasted before a route change. At this  point the route services starts
     * resolving all of the dependencies needed for the route change to occur.
     * Typically this involves fetching the view template as well as any dependencies
     * defined in `resolve` route property. Once  all of the dependencies are resolved
     * `$routeChangeSuccess` is fired.
     *
     * The route change (and the `$location` change that triggered it) can be prevented
     * by calling `preventDefault` method of the event. See {@link ng.$rootScope.Scope#$on}
     * for more details about event object.
     *
     * @param {Object} angularEvent Synthetic event object.
     * @param {Route} next Future route information.
     * @param {Route} current Current route information.
     */

    /**
     * @ngdoc event
     * @name $route#$routeChangeSuccess
     * @eventType broadcast on root scope
     * @description
     * Broadcasted after a route change has happened successfully.
     * The `resolve` dependencies are now available in the `current.locals` property.
     *
     * {@link ngRoute.directive:ngView ngView} listens for the directive
     * to instantiate the controller and render the view.
     *
     * @param {Object} angularEvent Synthetic event object.
     * @param {Route} current Current route information.
     * @param {Route|Undefined} previous Previous route information, or undefined if current is
     * first route entered.
     */

    /**
     * @ngdoc event
     * @name $route#$routeChangeError
     * @eventType broadcast on root scope
     * @description
     * Broadcasted if any of the resolve promises are rejected.
     *
     * @param {Object} angularEvent Synthetic event object
     * @param {Route} current Current route information.
     * @param {Route} previous Previous route information.
     * @param {Route} rejection Rejection of the promise. Usually the error of the failed promise.
     */

    /**
     * @ngdoc event
     * @name $route#$routeUpdate
     * @eventType broadcast on root scope
     * @description
     * The `reloadOnSearch` property has been set to false, and we are reusing the same
     * instance of the Controller.
     *
     * @param {Object} angularEvent Synthetic event object
     * @param {Route} current Current/previous route information.
     */

    var forceReload = false,
        preparedRoute,
        preparedRouteIsUpdateOnly,
        $route = {
          routes: routes,

          /**
           * @ngdoc method
           * @name $route#reload
           *
           * @description
           * Causes `$route` service to reload the current route even if
           * {@link ng.$location $location} hasn't changed.
           *
           * As a result of that, {@link ngRoute.directive:ngView ngView}
           * creates new scope and reinstantiates the controller.
           */
          reload: function() {
            forceReload = true;
            $rootScope.$evalAsync(function() {
              // Don't support cancellation of a reload for now...
              prepareRoute();
              commitRoute();
            });
          },

          /**
           * @ngdoc method
           * @name $route#updateParams
           *
           * @description
           * Causes `$route` service to update the current URL, replacing
           * current route parameters with those specified in `newParams`.
           * Provided property names that match the route's path segment
           * definitions will be interpolated into the location's path, while
           * remaining properties will be treated as query params.
           *
           * @param {!Object<string, string>} newParams mapping of URL parameter names to values
           */
          updateParams: function(newParams) {
            if (this.current && this.current.$$route) {
              newParams = angular.extend({}, this.current.params, newParams);
              $location.path(interpolate(this.current.$$route.originalPath, newParams));
              // interpolate modifies newParams, only query params are left
              $location.search(newParams);
            } else {
              throw $routeMinErr('norout', 'Tried updating route when with no current route');
            }
          }
        };

    $rootScope.$on('$locationChangeStart', prepareRoute);
    $rootScope.$on('$locationChangeSuccess', commitRoute);

    return $route;

    /////////////////////////////////////////////////////

    /**
     * @param on {string} current url
     * @param route {Object} route regexp to match the url against
     * @return {?Object}
     *
     * @description
     * Check if the route matches the current url.
     *
     * Inspired by match in
     * visionmedia/express/lib/router/router.js.
     */
    function switchRouteMatcher(on, route) {
      var keys = route.keys,
          params = {};

      if (!route.regexp) return null;

      var m = route.regexp.exec(on);
      if (!m) return null;

      for (var i = 1, len = m.length; i < len; ++i) {
        var key = keys[i - 1];

        var val = m[i];

        if (key && val) {
          params[key.name] = val;
        }
      }
      return params;
    }

    function prepareRoute($locationEvent) {
      var lastRoute = $route.current;

      preparedRoute = parseRoute();
      preparedRouteIsUpdateOnly = preparedRoute && lastRoute && preparedRoute.$$route === lastRoute.$$route
          && angular.equals(preparedRoute.pathParams, lastRoute.pathParams)
          && !preparedRoute.reloadOnSearch && !forceReload;

      if (!preparedRouteIsUpdateOnly && (lastRoute || preparedRoute)) {
        if ($rootScope.$broadcast('$routeChangeStart', preparedRoute, lastRoute).defaultPrevented) {
          if ($locationEvent) {
            $locationEvent.preventDefault();
          }
        }
      }
    }

    function commitRoute() {
      var lastRoute = $route.current;
      var nextRoute = preparedRoute;

      if (preparedRouteIsUpdateOnly) {
        lastRoute.params = nextRoute.params;
        angular.copy(lastRoute.params, $routeParams);
        $rootScope.$broadcast('$routeUpdate', lastRoute);
      } else if (nextRoute || lastRoute) {
        forceReload = false;
        $route.current = nextRoute;
        if (nextRoute) {
          if (nextRoute.redirectTo) {
            if (angular.isString(nextRoute.redirectTo)) {
              $location.path(interpolate(nextRoute.redirectTo, nextRoute.params)).search(nextRoute.params)
                       .replace();
            } else {
              $location.url(nextRoute.redirectTo(nextRoute.pathParams, $location.path(), $location.search()))
                       .replace();
            }
          }
        }

        $q.when(nextRoute).
          then(function() {
            if (nextRoute) {
              var locals = angular.extend({}, nextRoute.resolve),
                  template, templateUrl;

              angular.forEach(locals, function(value, key) {
                locals[key] = angular.isString(value) ?
                    $injector.get(value) : $injector.invoke(value, null, null, key);
              });

              if (angular.isDefined(template = nextRoute.template)) {
                if (angular.isFunction(template)) {
                  template = template(nextRoute.params);
                }
              } else if (angular.isDefined(templateUrl = nextRoute.templateUrl)) {
                if (angular.isFunction(templateUrl)) {
                  templateUrl = templateUrl(nextRoute.params);
                }
                if (angular.isDefined(templateUrl)) {
                  nextRoute.loadedTemplateUrl = $sce.valueOf(templateUrl);
                  template = $templateRequest(templateUrl);
                }
              }
              if (angular.isDefined(template)) {
                locals['$template'] = template;
              }
              return $q.all(locals);
            }
          }).
          then(function(locals) {
            // after route change
            if (nextRoute == $route.current) {
              if (nextRoute) {
                nextRoute.locals = locals;
                angular.copy(nextRoute.params, $routeParams);
              }
              $rootScope.$broadcast('$routeChangeSuccess', nextRoute, lastRoute);
            }
          }, function(error) {
            if (nextRoute == $route.current) {
              $rootScope.$broadcast('$routeChangeError', nextRoute, lastRoute, error);
            }
          });
      }
    }


    /**
     * @returns {Object} the current active route, by matching it against the URL
     */
    function parseRoute() {
      // Match a route
      var params, match;
      angular.forEach(routes, function(route, path) {
        if (!match && (params = switchRouteMatcher($location.path(), route))) {
          match = inherit(route, {
            params: angular.extend({}, $location.search(), params),
            pathParams: params});
          match.$$route = route;
        }
      });
      // No route matched; fallback to "otherwise" route
      return match || routes[null] && inherit(routes[null], {params: {}, pathParams:{}});
    }

    /**
     * @returns {string} interpolation of the redirect path with the parameters
     */
    function interpolate(string, params) {
      var result = [];
      angular.forEach((string || '').split(':'), function(segment, i) {
        if (i === 0) {
          result.push(segment);
        } else {
          var segmentMatch = segment.match(/(\w+)(?:[?*])?(.*)/);
          var key = segmentMatch[1];
          result.push(params[key]);
          result.push(segmentMatch[2] || '');
          delete params[key];
        }
      });
      return result.join('');
    }
  }];
}

ngRouteModule.provider('$routeParams', $RouteParamsProvider);


/**
 * @ngdoc service
 * @name $routeParams
 * @requires $route
 *
 * @description
 * The `$routeParams` service allows you to retrieve the current set of route parameters.
 *
 * Requires the {@link ngRoute `ngRoute`} module to be installed.
 *
 * The route parameters are a combination of {@link ng.$location `$location`}'s
 * {@link ng.$location#search `search()`} and {@link ng.$location#path `path()`}.
 * The `path` parameters are extracted when the {@link ngRoute.$route `$route`} path is matched.
 *
 * In case of parameter name collision, `path` params take precedence over `search` params.
 *
 * The service guarantees that the identity of the `$routeParams` object will remain unchanged
 * (but its properties will likely change) even when a route change occurs.
 *
 * Note that the `$routeParams` are only updated *after* a route change completes successfully.
 * This means that you cannot rely on `$routeParams` being correct in route resolve functions.
 * Instead you can use `$route.current.params` to access the new route's parameters.
 *
 * @example
 * ```js
 *  // Given:
 *  // URL: http://server.com/index.html#/Chapter/1/Section/2?search=moby
 *  // Route: /Chapter/:chapterId/Section/:sectionId
 *  //
 *  // Then
 *  $routeParams ==> {chapterId:'1', sectionId:'2', search:'moby'}
 * ```
 */
function $RouteParamsProvider() {
  this.$get = function() { return {}; };
}

ngRouteModule.directive('ngView', ngViewFactory);
ngRouteModule.directive('ngView', ngViewFillContentFactory);


/**
 * @ngdoc directive
 * @name ngView
 * @restrict ECA
 *
 * @description
 * # Overview
 * `ngView` is a directive that complements the {@link ngRoute.$route $route} service by
 * including the rendered template of the current route into the main layout (`index.html`) file.
 * Every time the current route changes, the included view changes with it according to the
 * configuration of the `$route` service.
 *
 * Requires the {@link ngRoute `ngRoute`} module to be installed.
 *
 * @animations
 * enter - animation is used to bring new content into the browser.
 * leave - animation is used to animate existing content away.
 *
 * The enter and leave animation occur concurrently.
 *
 * @scope
 * @priority 400
 * @param {string=} onload Expression to evaluate whenever the view updates.
 *
 * @param {string=} autoscroll Whether `ngView` should call {@link ng.$anchorScroll
 *                  $anchorScroll} to scroll the viewport after the view is updated.
 *
 *                  - If the attribute is not set, disable scrolling.
 *                  - If the attribute is set without value, enable scrolling.
 *                  - Otherwise enable scrolling only if the `autoscroll` attribute value evaluated
 *                    as an expression yields a truthy value.
 * @example
    <example name="ngView-directive" module="ngViewExample"
             deps="angular-route.js;angular-animate.js"
             animations="true" fixBase="true">
      <file name="index.html">
        <div ng-controller="MainCtrl as main">
          Choose:
          <a href="Book/Moby">Moby</a> |
          <a href="Book/Moby/ch/1">Moby: Ch1</a> |
          <a href="Book/Gatsby">Gatsby</a> |
          <a href="Book/Gatsby/ch/4?key=value">Gatsby: Ch4</a> |
          <a href="Book/Scarlet">Scarlet Letter</a><br/>

          <div class="view-animate-container">
            <div ng-view class="view-animate"></div>
          </div>
          <hr />

          <pre>$location.path() = {{main.$location.path()}}</pre>
          <pre>$route.current.templateUrl = {{main.$route.current.templateUrl}}</pre>
          <pre>$route.current.params = {{main.$route.current.params}}</pre>
          <pre>$routeParams = {{main.$routeParams}}</pre>
        </div>
      </file>

      <file name="book.html">
        <div>
          controller: {{book.name}}<br />
          Book Id: {{book.params.bookId}}<br />
        </div>
      </file>

      <file name="chapter.html">
        <div>
          controller: {{chapter.name}}<br />
          Book Id: {{chapter.params.bookId}}<br />
          Chapter Id: {{chapter.params.chapterId}}
        </div>
      </file>

      <file name="animations.css">
        .view-animate-container {
          position:relative;
          height:100px!important;
          background:white;
          border:1px solid black;
          height:40px;
          overflow:hidden;
        }

        .view-animate {
          padding:10px;
        }

        .view-animate.ng-enter, .view-animate.ng-leave {
          transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 1.5s;

          display:block;
          width:100%!;(MISSING)
          border-left:1px solid black;

          position:absolute;
          top:0;
          left:0;
          right:0;
          bottom:0;
          padding:10px;
        }

        .view-animate.ng-enter {
          left:100%!;(MISSING)
        }
        .view-animate.ng-enter.ng-enter-active {
          left:0;
        }
        .view-animate.ng-leave.ng-leave-active {
          left:-100%!;(MISSING)
        }
      </file>

      <file name="script.js">
        angular.module('ngViewExample', ['ngRoute', 'ngAnimate'])
          .config(['$routeProvider', '$locationProvider',
            function($routeProvider, $locationProvider) {
              $routeProvider
                .when('/Book/:bookId', {
                  templateUrl: 'book.html',
                  controller: 'BookCtrl',
                  controllerAs: 'book'
                })
                .when('/Book/:bookId/ch/:chapterId', {
                  templateUrl: 'chapter.html',
                  controller: 'ChapterCtrl',
                  controllerAs: 'chapter'
                });

              $locationProvider.html5Mode(true);
          }])
          .controller('MainCtrl', ['$route', '$routeParams', '$location',
            function($route, $routeParams, $location) {
              this.$route = $route;
              this.$location = $location;
              this.$routeParams = $routeParams;
          }])
          .controller('BookCtrl', ['$routeParams', function($routeParams) {
            this.name = "BookCtrl";
            this.params = $routeParams;
          }])
          .controller('ChapterCtrl', ['$routeParams', function($routeParams) {
            this.name = "ChapterCtrl";
            this.params = $routeParams;
          }]);

      </file>

      <file name="protractor.js" type="protractor">
        it('should load and compile correct template', function() {
          element(by.linkText('Moby: Ch1')).click();
          var content = element(by.css('[ng-view]')).getText();
          expect(content).toMatch(/controller\: ChapterCtrl/);
          expect(content).toMatch(/Book Id\: Moby/);
          expect(content).toMatch(/Chapter Id\: 1/);

          element(by.partialLinkText('Scarlet')).click();

          content = element(by.css('[ng-view]')).getText();
          expect(content).toMatch(/controller\: BookCtrl/);
          expect(content).toMatch(/Book Id\: Scarlet/);
        });
      </file>
    </example>
 */


/**
 * @ngdoc event
 * @name ngView#$viewContentLoaded
 * @eventType emit on the current ngView scope
 * @description
 * Emitted every time the ngView content is reloaded.
 */
ngViewFactory.$inject = ['$route', '$anchorScroll', '$animate'];
function ngViewFactory($route, $anchorScroll, $animate) {
  return {
    restrict: 'ECA',
    terminal: true,
    priority: 400,
    transclude: 'element',
    link: function(scope, $element, attr, ctrl, $transclude) {
        var currentScope,
            currentElement,
            previousLeaveAnimation,
            autoScrollExp = attr.autoscroll,
            onloadExp = attr.onload || '';

        scope.$on('$routeChangeSuccess', update);
        update();

        function cleanupLastView() {
          if (previousLeaveAnimation) {
            $animate.cancel(previousLeaveAnimation);
            previousLeaveAnimation = null;
          }

          if (currentScope) {
            currentScope.$destroy();
            currentScope = null;
          }
          if (currentElement) {
            previousLeaveAnimation = $animate.leave(currentElement);
            previousLeaveAnimation.then(function() {
              previousLeaveAnimation = null;
            });
            currentElement = null;
          }
        }

        function update() {
          var locals = $route.current && $route.current.locals,
              template = locals && locals.$template;

          if (angular.isDefined(template)) {
            var newScope = scope.$new();
            var current = $route.current;

            // Note: This will also link all children of ng-view that were contained in the original
            // html. If that content contains controllers, ... they could pollute/change the scope.
            // However, using ng-view on an element with additional content does not make sense...
            // Note: We can't remove them in the cloneAttchFn of $transclude as that
            // function is called before linking the content, which would apply child
            // directives to non existing elements.
            var clone = $transclude(newScope, function(clone) {
              $animate.enter(clone, null, currentElement || $element).then(function onNgViewEnter() {
                if (angular.isDefined(autoScrollExp)
                  && (!autoScrollExp || scope.$eval(autoScrollExp))) {
                  $anchorScroll();
                }
              });
              cleanupLastView();
            });

            currentElement = clone;
            currentScope = current.scope = newScope;
            currentScope.$emit('$viewContentLoaded');
            currentScope.$eval(onloadExp);
          } else {
            cleanupLastView();
          }
        }
    }
  };
}

// This directive is called during the $transclude call of the first `ngView` directive.
// It will replace and compile the content of the element with the loaded template.
// We need this directive so that the element content is already filled when
// the link function of another directive on the same element as ngView
// is called.
ngViewFillContentFactory.$inject = ['$compile', '$controller', '$route'];
function ngViewFillContentFactory($compile, $controller, $route) {
  return {
    restrict: 'ECA',
    priority: -400,
    link: function(scope, $element) {
      var current = $route.current,
          locals = current.locals;

      $element.html(locals.$template);

      var link = $compile($element.contents());

      if (current.controller) {
        locals.$scope = scope;
        var controller = $controller(current.controller, locals);
        if (current.controllerAs) {
          scope[current.controllerAs] = controller;
        }
        $element.data('$ngControllerController', controller);
        $element.children().data('$ngControllerController', controller);
      }
      scope[current.resolveAs || '$resolve'] = locals;

      link(scope);
    }
  };
}


})(window, window.angular);
{
"version":3,
"file":"angular-route.min.js",
"lineCount":14,
"mappings":"A;;;;;aAKC,SAAQ,CAACA,CAAD,CAASC,CAAT,CAAkBC,CAAlB,CAA6B,CAg4BtCC,QAASA,EAAa,CAACC,CAAD,CAASC,CAAT,CAAwBC,CAAxB,CAAkC,CACtD,MAAO,CACLC,SAAU,KADL,CAELC,SAAU,CAAA,CAFL,CAGLC,SAAU,GAHL,CAILC,WAAY,SAJP,CAKLC,KAAMA,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAkBC,CAAlB,CAAwBC,CAAxB,CAA8BC,CAA9B,CAA2C,CAUrDC,QAASA,EAAe,EAAG,CACrBC,CAAJ,GACEZ,CAAAa,OAAA,CAAgBD,CAAhB,CACA,CAAAA,CAAA,CAAyB,IAF3B,CAKIE,EAAJ,GACEA,CAAAC,SAAA,EACA,CAAAD,CAAA,CAAe,IAFjB,CAIIE,EAAJ,GACEJ,CAIA,CAJyBZ,CAAAiB,MAAA,CAAeD,CAAf,CAIzB,CAHAJ,CAAAM,KAAA,CAA4B,QAAQ,EAAG,CACrCN,CAAA,CAAyB,IADY,CAAvC,CAGA,CAAAI,CAAA,CAAiB,IALnB,CAVyB,CAmB3BG,QAASA,EAAM,EAAG,CAAA,IACZC,EAAStB,CAAAuB,QAATD,EAA2BtB,CAAAuB,QAAAD,OAG/B,IAAIzB,CAAA2B,UAAA,CAFWF,CAEX,EAFqBA,CAAAG,UAErB,CAAJ,CAAiC,CAC3BC,IAAAA,EAAWlB,CAAAmB,KAAA,EAAXD,CACAH,EAAUvB,CAAAuB,QAkBdL,EAAA,CAVYN,CAAAgB,CAAYF,CAAZE,CAAsB,QAAQ,CAACA,CAAD,CAAQ,CAChD1B,CAAA2B,MAAA,CAAeD,CAAf,CAAsB,IAAtB,CAA4BV,CAA5B,EAA8CT,CAA9C,CAAAW,KAAA,CAA6DU,QAAsB,EAAG,CAChF,CAAAjC,CAAA2B,UAAA,CAAkBO,CAAlB,CAAJ,EACOA,CADP,EACwB,CAAAvB,CAAAwB,MAAA,CAAYD,CAAZ,CADxB,EAEE9B,CAAA,EAHkF,CAAtF,CAMAY,EAAA,EAPgD,CAAtCe,CAWZZ,EAAA,CAAeO,CAAAf,MAAf,CAA+BkB,CAC/BV,EAAAiB,MAAA,CAAmB,oBAAnB,CACAjB;CAAAgB,MAAA,CAAmBE,CAAnB,CAvB+B,CAAjC,IAyBErB,EAAA,EA7Bc,CA7BmC,IACjDG,CADiD,CAEjDE,CAFiD,CAGjDJ,CAHiD,CAIjDiB,EAAgBrB,CAAAyB,WAJiC,CAKjDD,EAAYxB,CAAA0B,OAAZF,EAA2B,EAE/B1B,EAAA6B,IAAA,CAAU,qBAAV,CAAiChB,CAAjC,CACAA,EAAA,EARqD,CALpD,CAD+C,CA6ExDiB,QAASA,EAAwB,CAACC,CAAD,CAAWC,CAAX,CAAwBxC,CAAxB,CAAgC,CAC/D,MAAO,CACLG,SAAU,KADL,CAELE,SAAW,IAFN,CAGLE,KAAMA,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAkB,CAAA,IAC1Bc,EAAUvB,CAAAuB,QADgB,CAE1BD,EAASC,CAAAD,OAEbb,EAAAgC,KAAA,CAAcnB,CAAAG,UAAd,CAEA,KAAIlB,EAAOgC,CAAA,CAAS9B,CAAAiC,SAAA,EAAT,CAEX,IAAInB,CAAAoB,WAAJ,CAAwB,CACtBrB,CAAAsB,OAAA,CAAgBpC,CAChB,KAAImC,EAAaH,CAAA,CAAYjB,CAAAoB,WAAZ,CAAgCrB,CAAhC,CACbC,EAAAsB,aAAJ,GACErC,CAAA,CAAMe,CAAAsB,aAAN,CADF,CACgCF,CADhC,CAGAlC,EAAAqC,KAAA,CAAc,yBAAd,CAAyCH,CAAzC,CACAlC,EAAAsC,SAAA,EAAAD,KAAA,CAAyB,yBAAzB,CAAoDH,CAApD,CAPsB,CASxBnC,CAAA,CAAMe,CAAAyB,UAAN,EAA2B,UAA3B,CAAA,CAAyC1B,CAEzCf,EAAA,CAAKC,CAAL,CAnB8B,CAH3B,CADwD,CA37B7DyC,CAAAA,CAAgBpD,CAAAqD,OAAA,CAAe,SAAf,CAA0B,CAAC,IAAD,CAA1B,CAAAC,SAAA,CACa,QADb,CAkBpBC,QAAuB,EAAG,CACxBC,QAASA,EAAO,CAACC,CAAD;AAASC,CAAT,CAAgB,CAC9B,MAAO1D,EAAA2D,OAAA,CAAeC,MAAAC,OAAA,CAAcJ,CAAd,CAAf,CAAsCC,CAAtC,CADuB,CAwKhCI,QAASA,EAAU,CAACC,CAAD,CAAOC,CAAP,CAAa,CAAA,IAC1BC,EAAcD,CAAAE,qBADY,CAE1BC,EAAM,CACJC,aAAcL,CADV,CAEJM,OAAQN,CAFJ,CAFoB,CAM1BO,EAAOH,CAAAG,KAAPA,CAAkB,EAEtBP,EAAA,CAAOA,CAAAQ,QAAA,CACI,UADJ,CACgB,MADhB,CAAAA,QAAA,CAEI,uBAFJ,CAE6B,QAAQ,CAACC,CAAD,CAAIC,CAAJ,CAAWC,CAAX,CAAgBC,CAAhB,CAAwB,CAC5DC,CAAAA,CAAsB,GAAX,GAAAD,CAAA,CAAiBA,CAAjB,CAA0B,IACrCE,EAAAA,CAAkB,GAAX,GAAAF,CAAA,CAAiBA,CAAjB,CAA0B,IACrCL,EAAAQ,KAAA,CAAU,CAAEC,KAAML,CAAR,CAAaE,SAAU,CAAEA,CAAAA,CAAzB,CAAV,CACAH,EAAA,CAAQA,CAAR,EAAiB,EACjB,OAAO,EAAP,EACKG,CAAA,CAAW,EAAX,CAAgBH,CADrB,EAEI,KAFJ,EAGKG,CAAA,CAAWH,CAAX,CAAmB,EAHxB,GAIKI,CAJL,EAIa,OAJb,EAIwB,SAJxB,GAKKD,CALL,EAKiB,EALjB,EAMI,GANJ,EAOKA,CAPL,EAOiB,EAPjB,CALgE,CAF7D,CAAAL,QAAA,CAgBI,YAhBJ,CAgBkB,MAhBlB,CAkBPJ,EAAAE,OAAA,CAAa,IAAIW,MAAJ,CAAW,GAAX,CAAiBjB,CAAjB,CAAwB,GAAxB,CAA6BE,CAAA,CAAc,GAAd,CAAoB,EAAjD,CACb,OAAOE,EA3BuB,CApKhC,IAAIc,EAAS,EAiHb,KAAAC,KAAA,CAAYC,QAAQ,CAACpB,CAAD,CAAOqB,CAAP,CAAc,CAEhC,IAAIC,EAAYrF,CAAAsF,KAAA,CAAaF,CAAb,CACZpF,EAAAuF,YAAA,CAAoBF,CAAAG,eAApB,CAAJ;CACEH,CAAAG,eADF,CAC6B,CAAA,CAD7B,CAGIxF,EAAAuF,YAAA,CAAoBF,CAAAnB,qBAApB,CAAJ,GACEmB,CAAAnB,qBADF,CACmC,IAAAA,qBADnC,CAGAe,EAAA,CAAOlB,CAAP,CAAA,CAAe/D,CAAA2D,OAAA,CACb0B,CADa,CAEbtB,CAFa,EAELD,CAAA,CAAWC,CAAX,CAAiBsB,CAAjB,CAFK,CAMf,IAAItB,CAAJ,CAAU,CACR,IAAI0B,EAAyC,GAA1B,EAAC1B,CAAA,CAAKA,CAAA2B,OAAL,CAAmB,CAAnB,CAAD,CACX3B,CAAA4B,OAAA,CAAY,CAAZ,CAAe5B,CAAA2B,OAAf,CAA6B,CAA7B,CADW,CAEX3B,CAFW,CAEJ,GAEfkB,EAAA,CAAOQ,CAAP,CAAA,CAAuBzF,CAAA2D,OAAA,CACrB,CAACiC,WAAY7B,CAAb,CADqB,CAErBD,CAAA,CAAW2B,CAAX,CAAyBJ,CAAzB,CAFqB,CALf,CAWV,MAAO,KA1ByB,CAsClC,KAAAnB,qBAAA,CAA4B,CAAA,CAuD5B,KAAA2B,UAAA,CAAiBC,QAAQ,CAACC,CAAD,CAAS,CACV,QAAtB,GAAI,MAAOA,EAAX,GACEA,CADF,CACW,CAACH,WAAYG,CAAb,CADX,CAGA,KAAAb,KAAA,CAAU,IAAV,CAAgBa,CAAhB,CACA,OAAO,KALyB,CASlC,KAAAC,KAAA,CAAY,CAAC,YAAD,CACC,WADD,CAEC,cAFD,CAGC,IAHD,CAIC,WAJD,CAKC,kBALD,CAMC,MAND,CAOR,QAAQ,CAACC,CAAD,CAAaC,CAAb,CAAwBC,CAAxB,CAAsCC,CAAtC,CAA0CC,CAA1C,CAAqDC,CAArD,CAAuEC,CAAvE,CAA6E,CAiSvFC,QAASA,EAAY,CAACC,CAAD,CAAiB,CACpC,IAAIC;AAAYvG,CAAAuB,QAOhB,EAJAiF,CAIA,EALAC,CAKA,CALgBC,CAAA,EAKhB,GAJ6CH,CAI7C,EAJ0DE,CAAAE,QAI1D,GAJoFJ,CAAAI,QAIpF,EAHO9G,CAAA+G,OAAA,CAAeH,CAAAI,WAAf,CAAyCN,CAAAM,WAAzC,CAGP,EAFO,CAACJ,CAAApB,eAER,EAFwC,CAACyB,CAEzC,GAAmCP,CAAAA,CAAnC,EAAgDE,CAAAA,CAAhD,EACMX,CAAAiB,WAAA,CAAsB,mBAAtB,CAA2CN,CAA3C,CAA0DF,CAA1D,CAAAS,iBADN,EAEQV,CAFR,EAGMA,CAAAW,eAAA,EAX8B,CAiBtCC,QAASA,EAAW,EAAG,CACrB,IAAIX,EAAYvG,CAAAuB,QAAhB,CACI4F,EAAYV,CAEhB,IAAID,CAAJ,CACED,CAAAX,OAEA,CAFmBuB,CAAAvB,OAEnB,CADA/F,CAAAsF,KAAA,CAAaoB,CAAAX,OAAb,CAA+BI,CAA/B,CACA,CAAAF,CAAAiB,WAAA,CAAsB,cAAtB,CAAsCR,CAAtC,CAHF,KAIO,IAAIY,CAAJ,EAAiBZ,CAAjB,CACLO,CAcA,CAdc,CAAA,CAcd,EAbA9G,CAAAuB,QAaA,CAbiB4F,CAajB,GAXMA,CAAA1B,WAWN,GAVQ5F,CAAAuH,SAAA,CAAiBD,CAAA1B,WAAjB,CAAJ,CACEM,CAAAnC,KAAA,CAAeyD,CAAA,CAAYF,CAAA1B,WAAZ,CAAkC0B,CAAAvB,OAAlC,CAAf,CAAA0B,OAAA,CAA2EH,CAAAvB,OAA3E,CAAAxB,QAAA,EADF,CAIE2B,CAAAwB,IAAA,CAAcJ,CAAA1B,WAAA,CAAqB0B,CAAAN,WAArB,CAA2Cd,CAAAnC,KAAA,EAA3C,CAA6DmC,CAAAuB,OAAA,EAA7D,CAAd,CAAAlD,QAAA,EAMN,EAAA6B,CAAAlB,KAAA,CAAQoC,CAAR,CAAA/F,KAAA,CACO,QAAQ,EAAG,CACd,GAAI+F,CAAJ,CAAe,CAAA,IACT7F;AAASzB,CAAA2D,OAAA,CAAe,EAAf,CAAmB2D,CAAAK,QAAnB,CADA,CAETC,CAFS,CAECC,CAEd7H,EAAA8H,QAAA,CAAgBrG,CAAhB,CAAwB,QAAQ,CAACsG,CAAD,CAAQrD,CAAR,CAAa,CAC3CjD,CAAA,CAAOiD,CAAP,CAAA,CAAc1E,CAAAuH,SAAA,CAAiBQ,CAAjB,CAAA,CACV1B,CAAA2B,IAAA,CAAcD,CAAd,CADU,CACa1B,CAAA4B,OAAA,CAAiBF,CAAjB,CAAwB,IAAxB,CAA8B,IAA9B,CAAoCrD,CAApC,CAFgB,CAA7C,CAKI1E,EAAA2B,UAAA,CAAkBiG,CAAlB,CAA6BN,CAAAM,SAA7B,CAAJ,CACM5H,CAAAkI,WAAA,CAAmBN,CAAnB,CADN,GAEIA,CAFJ,CAEeA,CAAA,CAASN,CAAAvB,OAAT,CAFf,EAIW/F,CAAA2B,UAAA,CAAkBkG,CAAlB,CAAgCP,CAAAO,YAAhC,CAJX,GAKM7H,CAAAkI,WAAA,CAAmBL,CAAnB,CAGJ,GAFEA,CAEF,CAFgBA,CAAA,CAAYP,CAAAvB,OAAZ,CAEhB,EAAI/F,CAAA2B,UAAA,CAAkBkG,CAAlB,CAAJ,GACEP,CAAAa,kBACA,CAD8B5B,CAAA6B,QAAA,CAAaP,CAAb,CAC9B,CAAAD,CAAA,CAAWtB,CAAA,CAAiBuB,CAAjB,CAFb,CARF,CAaI7H,EAAA2B,UAAA,CAAkBiG,CAAlB,CAAJ,GACEnG,CAAA,UADF,CACwBmG,CADxB,CAGA,OAAOxB,EAAAiC,IAAA,CAAO5G,CAAP,CAzBM,CADD,CADlB,CAAAF,KAAA,CA8BO,QAAQ,CAACE,CAAD,CAAS,CAEhB6F,CAAJ,EAAiBnH,CAAAuB,QAAjB,GACM4F,CAIJ,GAHEA,CAAA7F,OACA,CADmBA,CACnB,CAAAzB,CAAAsF,KAAA,CAAagC,CAAAvB,OAAb,CAA+BI,CAA/B,CAEF,EAAAF,CAAAiB,WAAA,CAAsB,qBAAtB,CAA6CI,CAA7C,CAAwDZ,CAAxD,CALF,CAFoB,CA9BxB,CAuCK,QAAQ,CAAC4B,CAAD,CAAQ,CACbhB,CAAJ,EAAiBnH,CAAAuB,QAAjB,EACEuE,CAAAiB,WAAA,CAAsB,mBAAtB;AAA2CI,CAA3C,CAAsDZ,CAAtD,CAAiE4B,CAAjE,CAFe,CAvCrB,CAvBmB,CA0EvBzB,QAASA,EAAU,EAAG,CAAA,IAEhBd,CAFgB,CAERwC,CACZvI,EAAA8H,QAAA,CAAgB7C,CAAhB,CAAwB,QAAQ,CAACG,CAAD,CAAQrB,CAAR,CAAc,CACxC,IAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAW,IAAA,EAAA,CAAA,KAAA,EAnHbO,EAAAA,CAmHac,CAnHNd,KAAX,KACIyB,EAAS,EAEb,IAgHiBX,CAhHZf,OAAL,CAGA,GADImE,CACJ,CA6GiBpD,CA9GTf,OAAAoE,KAAA,CAAkBC,CAAlB,CACR,CAAA,CAEA,IATqC,IAS5BC,EAAI,CATwB,CASrBC,EAAMJ,CAAA9C,OAAtB,CAAgCiD,CAAhC,CAAoCC,CAApC,CAAyC,EAAED,CAA3C,CAA8C,CAC5C,IAAIjE,EAAMJ,CAAA,CAAKqE,CAAL,CAAS,CAAT,CAAV,CAEIE,EAAML,CAAA,CAAEG,CAAF,CAENjE,EAAJ,EAAWmE,CAAX,GACE9C,CAAA,CAAOrB,CAAAK,KAAP,CADF,CACqB8D,CADrB,CAL4C,CAS9C,CAAA,CAAO9C,CAXP,CAAA,IAAQ,EAAA,CAAO,IAHf,KAAmB,EAAA,CAAO,IAgHT,EAAA,CAAA,CAAA,CAAA,CAAX,CAAA,CAAJ,GACEwC,CAGA,CAHQ/E,CAAA,CAAQ4B,CAAR,CAAe,CACrBW,OAAQ/F,CAAA2D,OAAA,CAAe,EAAf,CAAmBuC,CAAAuB,OAAA,EAAnB,CAAuC1B,CAAvC,CADa,CAErBiB,WAAYjB,CAFS,CAAf,CAGR,CAAAwC,CAAAzB,QAAA,CAAgB1B,CAJlB,CAD4C,CAA9C,CASA,OAAOmD,EAAP,EAAgBtD,CAAA,CAAO,IAAP,CAAhB,EAAgCzB,CAAA,CAAQyB,CAAA,CAAO,IAAP,CAAR,CAAsB,CAACc,OAAQ,EAAT,CAAaiB,WAAW,EAAxB,CAAtB,CAZZ,CAkBtBQ,QAASA,EAAW,CAACsB,CAAD,CAAS/C,CAAT,CAAiB,CACnC,IAAIgD,EAAS,EACb/I,EAAA8H,QAAA,CAAgBkB,CAACF,CAADE,EAAW,EAAXA,OAAA,CAAqB,GAArB,CAAhB,CAA2C,QAAQ,CAACC,CAAD,CAAUN,CAAV,CAAa,CAC9D,GAAU,CAAV,GAAIA,CAAJ,CACEI,CAAAjE,KAAA,CAAYmE,CAAZ,CADF,KAEO,CACL,IAAIC,EAAeD,CAAAV,MAAA,CAAc,oBAAd,CAAnB;AACI7D,EAAMwE,CAAA,CAAa,CAAb,CACVH,EAAAjE,KAAA,CAAYiB,CAAA,CAAOrB,CAAP,CAAZ,CACAqE,EAAAjE,KAAA,CAAYoE,CAAA,CAAa,CAAb,CAAZ,EAA+B,EAA/B,CACA,QAAOnD,CAAA,CAAOrB,CAAP,CALF,CAHuD,CAAhE,CAWA,OAAOqE,EAAAI,KAAA,CAAY,EAAZ,CAb4B,CA9YkD,IAuMnFlC,EAAc,CAAA,CAvMqE,CAwMnFL,CAxMmF,CAyMnFD,CAzMmF,CA0MnFxG,EAAS,CACP8E,OAAQA,CADD,CAcPmE,OAAQA,QAAQ,EAAG,CACjBnC,CAAA,CAAc,CAAA,CACdhB,EAAAoD,WAAA,CAAsB,QAAQ,EAAG,CAE/B7C,CAAA,EACAa,EAAA,EAH+B,CAAjC,CAFiB,CAdZ,CAoCPiC,aAAcA,QAAQ,CAACC,CAAD,CAAY,CAChC,GAAI,IAAA7H,QAAJ,EAAoB,IAAAA,QAAAoF,QAApB,CACEyC,CAGA,CAHYvJ,CAAA2D,OAAA,CAAe,EAAf,CAAmB,IAAAjC,QAAAqE,OAAnB,CAAwCwD,CAAxC,CAGZ,CAFArD,CAAAnC,KAAA,CAAeyD,CAAA,CAAY,IAAA9F,QAAAoF,QAAA1C,aAAZ,CAA+CmF,CAA/C,CAAf,CAEA,CAAArD,CAAAuB,OAAA,CAAiB8B,CAAjB,CAJF,KAME,MAAMC,EAAA,CAAa,QAAb,CAAN,CAP8B,CApC3B,CAgDbvD,EAAAzD,IAAA,CAAe,sBAAf,CAAuCgE,CAAvC,CACAP,EAAAzD,IAAA,CAAe,wBAAf,CAAyC6E,CAAzC,CAEA,OAAOlH,EA7PgF,CAP7E,CA5NY,CAlBN,CAApB,KAEIqJ,EAAexJ,CAAAyJ,SAAA,CAAiB,SAAjB,CAmpBnBrG,EAAAE,SAAA,CAAuB,cAAvB,CAoCAoG,QAA6B,EAAG,CAC9B,IAAA1D,KAAA,CAAY2D,QAAQ,EAAG,CAAE,MAAO,EAAT,CADO,CApChC,CAwCAvG;CAAAwG,UAAA,CAAwB,QAAxB,CAAkC1J,CAAlC,CACAkD,EAAAwG,UAAA,CAAwB,QAAxB,CAAkCnH,CAAlC,CA+KAvC,EAAA2J,QAAA,CAAwB,CAAC,QAAD,CAAW,eAAX,CAA4B,UAA5B,CA6ExBpH,EAAAoH,QAAA,CAAmC,CAAC,UAAD,CAAa,aAAb,CAA4B,QAA5B,CA58BG,CAArC,CAAD,CA0+BG9J,MA1+BH,CA0+BWA,MAAAC,QA1+BX;",
"sources":["angular-route.js"],
"names":["window","angular","undefined","ngViewFactory","$route","$anchorScroll","$animate","restrict","terminal","priority","transclude","link","scope","$element","attr","ctrl","$transclude","cleanupLastView","previousLeaveAnimation","cancel","currentScope","$destroy","currentElement","leave","then","update","locals","current","isDefined","$template","newScope","$new","clone","enter","onNgViewEnter","autoScrollExp","$eval","$emit","onloadExp","autoscroll","onload","$on","ngViewFillContentFactory","$compile","$controller","html","contents","controller","$scope","controllerAs","data","children","resolveAs","ngRouteModule","module","provider","$RouteProvider","inherit","parent","extra","extend","Object","create","pathRegExp","path","opts","insensitive","caseInsensitiveMatch","ret","originalPath","regexp","keys","replace","_","slash","key","option","optional","star","push","name","RegExp","routes","when","this.when","route","routeCopy","copy","isUndefined","reloadOnSearch","redirectPath","length","substr","redirectTo","otherwise","this.otherwise","params","$get","$rootScope","$location","$routeParams","$q","$injector","$templateRequest","$sce","prepareRoute","$locationEvent","lastRoute","preparedRouteIsUpdateOnly","preparedRoute","parseRoute","$$route","equals","pathParams","forceReload","$broadcast","defaultPrevented","preventDefault","commitRoute","nextRoute","isString","interpolate","search","url","resolve","template","templateUrl","forEach","value","get","invoke","isFunction","loadedTemplateUrl","valueOf","all","error","match","m","exec","on","i","len","val","string","result","split","segment","segmentMatch","join","reload","$evalAsync","updateParams","newParams","$routeMinErr","$$minErr","$RouteParamsProvider","this.$get","directive","$inject"]
}
/*
 AngularJS v1.5.2
 (c) 2010-2016 Google, Inc. http://angularjs.org
 License: MIT
*/
(function(A,e,B){'use strict';function C(a){var c=[];v(c,e.noop).chars(a);return c.join("")}function h(a,c){var b={},d=a.split(","),l;for(l=0;l<d.length;l++)b[c?e.lowercase(d[l]):d[l]]=!0;return b}function D(a,c){null===a||a===B?a="":"string"!==typeof a&&(a=""+a);g.innerHTML=a;var b=5;do{if(0===b)throw w("uinput");b--;11>=document.documentMode&&n(g);a=g.innerHTML;g.innerHTML=a}while(a!==g.innerHTML);for(b=g.firstChild;b;){switch(b.nodeType){case 1:c.start(b.nodeName.toLowerCase(),E(b.attributes));
break;case 3:c.chars(b.textContent)}var d;if(!(d=b.firstChild)&&(1==b.nodeType&&c.end(b.nodeName.toLowerCase()),d=b.nextSibling,!d))for(;null==d;){b=b.parentNode;if(b===g)break;d=b.nextSibling;1==b.nodeType&&c.end(b.nodeName.toLowerCase())}b=d}for(;b=g.firstChild;)g.removeChild(b)}function E(a){for(var c={},b=0,d=a.length;b<d;b++){var l=a[b];c[l.name]=l.value}return c}function x(a){return a.replace(/&/g,"&amp;").replace(F,function(a){var b=a.charCodeAt(0);a=a.charCodeAt(1);return"&#"+(1024*(b-55296)+
(a-56320)+65536)+";"}).replace(G,function(a){return"&#"+a.charCodeAt(0)+";"}).replace(/</g,"&lt;").replace(/>/g,"&gt;")}function v(a,c){var b=!1,d=e.bind(a,a.push);return{start:function(a,f){a=e.lowercase(a);!b&&H[a]&&(b=a);b||!0!==t[a]||(d("<"),d(a),e.forEach(f,function(b,f){var g=e.lowercase(f),h="img"===a&&"src"===g||"background"===g;!0!==I[g]||!0===y[g]&&!c(b,h)||(d(" "),d(f),d('="'),d(x(b)),d('"'))}),d(">"))},end:function(a){a=e.lowercase(a);b||!0!==t[a]||!0===z[a]||(d("</"),d(a),d(">"));a==
b&&(b=!1)},chars:function(a){b||d(x(a))}}}function n(a){if(a.nodeType===Node.ELEMENT_NODE)for(var c=a.attributes,b=0,d=c.length;b<d;b++){var e=c[b],f=e.name.toLowerCase();if("xmlns:ns1"===f||0===f.indexOf("ns1:"))a.removeAttributeNode(e),b--,d--}(c=a.firstChild)&&n(c);(c=a.nextSibling)&&n(c)}var w=e.$$minErr("$sanitize"),F=/[\uD800-\uDBFF][\uDC00-\uDFFF]/g,G=/([^\#-~ |!])/g,z=h("area,br,col,hr,img,wbr"),q=h("colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr"),k=h("rp,rt"),u=e.extend({},k,q),q=e.extend({},
q,h("address,article,aside,blockquote,caption,center,del,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,h6,header,hgroup,hr,ins,map,menu,nav,ol,pre,section,table,ul")),k=e.extend({},k,h("a,abbr,acronym,b,bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,q,ruby,rp,rt,s,samp,small,span,strike,strong,sub,sup,time,tt,u,var")),J=h("circle,defs,desc,ellipse,font-face,font-face-name,font-face-src,g,glyph,hkern,image,linearGradient,line,marker,metadata,missing-glyph,mpath,path,polygon,polyline,radialGradient,rect,stop,svg,switch,text,title,tspan"),
H=h("script,style"),t=e.extend({},z,q,k,u),y=h("background,cite,href,longdesc,src,xlink:href"),u=h("abbr,align,alt,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,compact,coords,dir,face,headers,height,hreflang,hspace,ismap,lang,language,nohref,nowrap,rel,rev,rows,rowspan,rules,scope,scrolling,shape,size,span,start,summary,tabindex,target,title,type,valign,value,vspace,width"),k=h("accent-height,accumulate,additive,alphabetic,arabic-form,ascent,baseProfile,bbox,begin,by,calcMode,cap-height,class,color,color-rendering,content,cx,cy,d,dx,dy,descent,display,dur,end,fill,fill-rule,font-family,font-size,font-stretch,font-style,font-variant,font-weight,from,fx,fy,g1,g2,glyph-name,gradientUnits,hanging,height,horiz-adv-x,horiz-origin-x,ideographic,k,keyPoints,keySplines,keyTimes,lang,marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mathematical,max,min,offset,opacity,orient,origin,overline-position,overline-thickness,panose-1,path,pathLength,points,preserveAspectRatio,r,refX,refY,repeatCount,repeatDur,requiredExtensions,requiredFeatures,restart,rotate,rx,ry,slope,stemh,stemv,stop-color,stop-opacity,strikethrough-position,strikethrough-thickness,stroke,stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,stroke-width,systemLanguage,target,text-anchor,to,transform,type,u1,u2,underline-position,underline-thickness,unicode,unicode-range,units-per-em,values,version,viewBox,visibility,width,widths,x,x-height,x1,x2,xlink:actuate,xlink:arcrole,xlink:role,xlink:show,xlink:title,xlink:type,xml:base,xml:lang,xml:space,xmlns,xmlns:xlink,y,y1,y2,zoomAndPan",
!0),I=e.extend({},y,k,u),g;(function(a){if(a.document&&a.document.implementation)a=a.document.implementation.createHTMLDocument("inert");else throw w("noinert");var c=(a.documentElement||a.getDocumentElement()).getElementsByTagName("body");1===c.length?g=c[0]:(c=a.createElement("html"),g=a.createElement("body"),c.appendChild(g),a.appendChild(c))})(A);e.module("ngSanitize",[]).provider("$sanitize",function(){var a=!1;this.$get=["$$sanitizeUri",function(c){a&&e.extend(t,J);return function(a){var d=
[];D(a,v(d,function(a,b){return!/^unsafe:/.test(c(a,b))}));return d.join("")}}];this.enableSvg=function(c){return e.isDefined(c)?(a=c,this):a}});e.module("ngSanitize").filter("linky",["$sanitize",function(a){var c=/((ftp|https?):\/\/|(www\.)|(mailto:)?[A-Za-z0-9._%!](MISSING)+@)\S*[^\s.;,(){}<>"\u201d\u2019]/i,b=/^mailto:/i,d=e.$$minErr("linky"),g=e.isString;return function(f,h,m){function k(a){a&&p.push(C(a))}function q(a,b){var c;p.push("<a ");e.isFunction(m)&&(m=m(a));if(e.isObject(m))for(c in m)p.push(c+
'="'+m[c]+'" ');else m={};!e.isDefined(h)||"target"in m||p.push('target="',h,'" ');p.push('href="',a.replace(/"/g,"&quot;"),'">');k(b);p.push("</a>")}if(null==f||""===f)return f;if(!g(f))throw d("notstring",f);for(var r=f,p=[],s,n;f=r.match(c);)s=f[0],f[2]||f[4]||(s=(f[3]?"http://":"mailto:")+s),n=f.index,k(r.substr(0,n)),q(s,f[0].replace(b,"")),r=r.substring(n+f[0].length);k(r);return a(p.join(""))}}])})(window,window.angular);
//# sourceMappingURL=angular-sanitize.min.js.map


/*!
 * Bootstrap v3.3.6 (http://getbootstrap.com)
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 */
.btn-default,
.btn-primary,
.btn-success,
.btn-info,
.btn-warning,
.btn-danger {
  text-shadow: 0 -1px 0 rgba(0, 0, 0, .2);
  -webkit-box-shadow: inset 0 1px 0 rgba(255, 255, 255, .15), 0 1px 1px rgba(0, 0, 0, .075);
          box-shadow: inset 0 1px 0 rgba(255, 255, 255, .15), 0 1px 1px rgba(0, 0, 0, .075);
}
.btn-default:active,
.btn-primary:active,
.btn-success:active,
.btn-info:active,
.btn-warning:active,
.btn-danger:active,
.btn-default.active,
.btn-primary.active,
.btn-success.active,
.btn-info.active,
.btn-warning.active,
.btn-danger.active {
  -webkit-box-shadow: inset 0 3px 5px rgba(0, 0, 0, .125);
          box-shadow: inset 0 3px 5px rgba(0, 0, 0, .125);
}
.btn-default.disabled,
.btn-primary.disabled,
.btn-success.disabled,
.btn-info.disabled,
.btn-warning.disabled,
.btn-danger.disabled,
.btn-default[disabled],
.btn-primary[disabled],
.btn-success[disabled],
.btn-info[disabled],
.btn-warning[disabled],
.btn-danger[disabled],
fieldset[disabled] .btn-default,
fieldset[disabled] .btn-primary,
fieldset[disabled] .btn-success,
fieldset[disabled] .btn-info,
fieldset[disabled] .btn-warning,
fieldset[disabled] .btn-danger {
  -webkit-box-shadow: none;
          box-shadow: none;
}
.btn-default .badge,
.btn-primary .badge,
.btn-success .badge,
.btn-info .badge,
.btn-warning .badge,
.btn-danger .badge {
  text-shadow: none;
}
.btn:active,
.btn.active {
  background-image: none;
}
.btn-default {
  text-shadow: 0 1px 0 #fff;
  background-image: -webkit-linear-gradient(top, #fff 0%!,(MISSING) #e0e0e0 100%!)(MISSING);
  background-image:      -o-linear-gradient(top, #fff 0%!,(MISSING) #e0e0e0 100%!)(MISSING);
  background-image: -webkit-gradient(linear, left top, left bottom, from(#fff), to(#e0e0e0));
  background-image:         linear-gradient(to bottom, #fff 0%!,(MISSING) #e0e0e0 100%!)(MISSING);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffffffff', endColorstr='#ffe0e0e0', GradientType=0);
  filter: progid:DXImageTransform.Microsoft.gradient(enabled = false);
  background-repeat: repeat-x;
  border-color: #dbdbdb;
  border-color: #ccc;
}
.btn-default:hover,
.btn-default:focus {
  background-color: #e0e0e0;
  background-position: 0 -15px;
}
.btn-default:active,
.btn-default.active {
  background-color: #e0e0e0;
  border-color: #dbdbdb;
}
.btn-default.disabled,
.btn-default[disabled],
fieldset[disabled] .btn-default,
.btn-default.disabled:hover,
.btn-default[disabled]:hover,
fieldset[disabled] .btn-default:hover,
.btn-default.disabled:focus,
.btn-default[disabled]:focus,
fieldset[disabled] .btn-default:focus,
.btn-default.disabled.focus,
.btn-default[disabled].focus,
fieldset[disabled] .btn-default.focus,
.btn-default.disabled:active,
.btn-default[disabled]:active,
fieldset[disabled] .btn-default:active,
.btn-default.disabled.active,
.btn-default[disabled].active,
fieldset[disabled] .btn-default.active {
  background-color: #e0e0e0;
  background-image: none;
}
.btn-primary {
  background-image: -webkit-linear-gradient(top, #337ab7 0%!,(MISSING) #265a88 100%!)(MISSING);
  background-image:      -o-linear-gradient(top, #337ab7 0%!,(MISSING) #265a88 100%!)(MISSING);
  background-image: -webkit-gradient(linear, left top, left bottom, from(#337ab7), to(#265a88));
  background-image:         linear-gradient(to bottom, #337ab7 0%!,(MISSING) #265a88 100%!)(MISSING);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff337ab7', endColorstr='#ff265a88', GradientType=0);
  filter: progid:DXImageTransform.Microsoft.gradient(enabled = false);
  background-repeat: repeat-x;
  border-color: #245580;
}
.btn-primary:hover,
.btn-primary:focus {
  background-color: #265a88;
  background-position: 0 -15px;
}
.btn-primary:active,
.btn-primary.active {
  background-color: #265a88;
  border-color: #245580;
}
.btn-primary.disabled,
.btn-primary[disabled],
fieldset[disabled] .btn-primary,
.btn-primary.disabled:hover,
.btn-primary[disabled]:hover,
fieldset[disabled] .btn-primary:hover,
.btn-primary.disabled:focus,
.btn-primary[disabled]:focus,
fieldset[disabled] .btn-primary:focus,
.btn-primary.disabled.focus,
.btn-primary[disabled].focus,
fieldset[disabled] .btn-primary.focus,
.btn-primary.disabled:active,
.btn-primary[disabled]:active,
fieldset[disabled] .btn-primary:active,
.btn-primary.disabled.active,
.btn-primary[disabled].active,
fieldset[disabled] .btn-primary.active {
  background-color: #265a88;
  background-image: none;
}
.btn-success {
  background-image: -webkit-linear-gradient(top, #5cb85c 0%!,(MISSING) #419641 100%!)(MISSING);
  background-image:      -o-linear-gradient(top, #5cb85c 0%!,(MISSING) #419641 100%!)(MISSING);
  background-image: -webkit-gradient(linear, left top, left bottom, from(#5cb85c), to(#419641));
  background-image:         linear-gradient(to bottom, #5cb85c 0%!,(MISSING) #419641 100%!)(MISSING);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff5cb85c', endColorstr='#ff419641', GradientType=0);
  filter: progid:DXImageTransform.Microsoft.gradient(enabled = false);
  background-repeat: repeat-x;
  border-color: #3e8f3e;
}
.btn-success:hover,
.btn-success:focus {
  background-color: #419641;
  background-position: 0 -15px;
}
.btn-success:active,
.btn-success.active {
  background-color: #419641;
  border-color: #3e8f3e;
}
.btn-success.disabled,
.btn-success[disabled],
fieldset[disabled] .btn-success,
.btn-success.disabled:hover,
.btn-success[disabled]:hover,
fieldset[disabled] .btn-success:hover,
.btn-success.disabled:focus,
.btn-success[disabled]:focus,
fieldset[disabled] .btn-success:focus,
.btn-success.disabled.focus,
.btn-success[disabled].focus,
fieldset[disabled] .btn-success.focus,
.btn-success.disabled:active,
.btn-success[disabled]:active,
fieldset[disabled] .btn-success:active,
.btn-success.disabled.active,
.btn-success[disabled].active,
fieldset[disabled] .btn-success.active {
  background-color: #419641;
  background-image: none;
}
.btn-info {
  background-image: -webkit-linear-gradient(top, #5bc0de 0%!,(MISSING) #2aabd2 100%!)(MISSING);
  background-image:      -o-linear-gradient(top, #5bc0de 0%!,(MISSING) #2aabd2 100%!)(MISSING);
  background-image: -webkit-gradient(linear, left top, left bottom, from(#5bc0de), to(#2aabd2));
  background-image:         linear-gradient(to bottom, #5bc0de 0%!,(MISSING) #2aabd2 100%!)(MISSING);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff5bc0de', endColorstr='#ff2aabd2', GradientType=0);
  filter: progid:DXImageTransform.Microsoft.gradient(enabled = false);
  background-repeat: repeat-x;
  border-color: #28a4c9;
}
.btn-info:hover,
.btn-info:focus {
  background-color: #2aabd2;
  background-position: 0 -15px;
}
.btn-info:active,
.btn-info.active {
  background-color: #2aabd2;
  border-color: #28a4c9;
}
.btn-info.disabled,
.btn-info[disabled],
fieldset[disabled] .btn-info,
.btn-info.disabled:hover,
.btn-info[disabled]:hover,
fieldset[disabled] .btn-info:hover,
.btn-info.disabled:focus,
.btn-info[disabled]:focus,
fieldset[disabled] .btn-info:focus,
.btn-info.disabled.focus,
.btn-info[disabled].focus,
fieldset[disabled] .btn-info.focus,
.btn-info.disabled:active,
.btn-info[disabled]:active,
fieldset[disabled] .btn-info:active,
.btn-info.disabled.active,
.btn-info[disabled].active,
fieldset[disabled] .btn-info.active {
  background-color: #2aabd2;
  background-image: none;
}
.btn-warning {
  background-image: -webkit-linear-gradient(top, #f0ad4e 0%!,(MISSING) #eb9316 100%!)(MISSING);
  background-image:      -o-linear-gradient(top, #f0ad4e 0%!,(MISSING) #eb9316 100%!)(MISSING);
  background-image: -webkit-gradient(linear, left top, left bottom, from(#f0ad4e), to(#eb9316));
  background-image:         linear-gradient(to bottom, #f0ad4e 0%!,(MISSING) #eb9316 100%!)(MISSING);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#fff0ad4e', endColorstr='#ffeb9316', GradientType=0);
  filter: progid:DXImageTransform.Microsoft.gradient(enabled = false);
  background-repeat: repeat-x;
  border-color: #e38d13;
}
.btn-warning:hover,
.btn-warning:focus {
  background-color: #eb9316;
  background-position: 0 -15px;
}
.btn-warning:active,
.btn-warning.active {
  background-color: #eb9316;
  border-color: #e38d13;
}
.btn-warning.disabled,
.btn-warning[disabled],
fieldset[disabled] .btn-warning,
.btn-warning.disabled:hover,
.btn-warning[disabled]:hover,
fieldset[disabled] .btn-warning:hover,
.btn-warning.disabled:focus,
.btn-warning[disabled]:focus,
fieldset[disabled] .btn-warning:focus,
.btn-warning.disabled.focus,
.btn-warning[disabled].focus,
fieldset[disabled] .btn-warning.focus,
.btn-warning.disabled:active,
.btn-warning[disabled]:active,
fieldset[disabled] .btn-warning:active,
.btn-warning.disabled.active,
.btn-warning[disabled].active,
fieldset[disabled] .btn-warning.active {
  background-color: #eb9316;
  background-image: none;
}
.btn-danger {
  background-image: -webkit-linear-gradient(top, #d9534f 0%!,(MISSING) #c12e2a 100%!)(MISSING);
  background-image:      -o-linear-gradient(top, #d9534f 0%!,(MISSING) #c12e2a 100%!)(MISSING);
  background-image: -webkit-gradient(linear, left top, left bottom, from(#d9534f), to(#c12e2a));
  background-image:         linear-gradient(to bottom, #d9534f 0%!,(MISSING) #c12e2a 100%!)(MISSING);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffd9534f', endColorstr='#ffc12e2a', GradientType=0);
  filter: progid:DXImageTransform.Microsoft.gradient(enabled = false);
  background-repeat: repeat-x;
  border-color: #b92c28;
}
.btn-danger:hover,
.btn-danger:focus {
  background-color: #c12e2a;
  background-position: 0 -15px;
}
.btn-danger:active,
.btn-danger.active {
  background-color: #c12e2a;
  border-color: #b92c28;
}
.btn-danger.disabled,
.btn-danger[disabled],
fieldset[disabled] .btn-danger,
.btn-danger.disabled:hover,
.btn-danger[disabled]:hover,
fieldset[disabled] .btn-danger:hover,
.btn-danger.disabled:focus,
.btn-danger[disabled]:focus,
fieldset[disabled] .btn-danger:focus,
.btn-danger.disabled.focus,
.btn-danger[disabled].focus,
fieldset[disabled] .btn-danger.focus,
.btn-danger.disabled:active,
.btn-danger[disabled]:active,
fieldset[disabled] .btn-danger:active,
.btn-danger.disabled.active,
.btn-danger[disabled].active,
fieldset[disabled] .btn-danger.active {
  background-color: #c12e2a;
  background-image: none;
}
.thumbnail,
.img-thumbnail {
  -webkit-box-shadow: 0 1px 2px rgba(0, 0, 0, .075);
          box-shadow: 0 1px 2px rgba(0, 0, 0, .075);
}
.dropdown-menu > li > a:hover,
.dropdown-menu > li > a:focus {
  background-color: #e8e8e8;
  background-image: -webkit-linear-gradient(top, #f5f5f5 0%!,(MISSING) #e8e8e8 100%!)(MISSING);
  background-image:      -o-linear-gradient(top, #f5f5f5 0%!,(MISSING) #e8e8e8 100%!)(MISSING);
  background-image: -webkit-gradient(linear, left top, left bottom, from(#f5f5f5), to(#e8e8e8));
  background-image:         linear-gradient(to bottom, #f5f5f5 0%!,(MISSING) #e8e8e8 100%!)(MISSING);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#fff5f5f5', endColorstr='#ffe8e8e8', GradientType=0);
  background-repeat: repeat-x;
}
.dropdown-menu > .active > a,
.dropdown-menu > .active > a:hover,
.dropdown-menu > .active > a:focus {
  background-color: #2e6da4;
  background-image: -webkit-linear-gradient(top, #337ab7 0%!,(MISSING) #2e6da4 100%!)(MISSING);
  background-image:      -o-linear-gradient(top, #337ab7 0%!,(MISSING) #2e6da4 100%!)(MISSING);
  background-image: -webkit-gradient(linear, left top, left bottom, from(#337ab7), to(#2e6da4));
  background-image:         linear-gradient(to bottom, #337ab7 0%!,(MISSING) #2e6da4 100%!)(MISSING);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff337ab7', endColorstr='#ff2e6da4', GradientType=0);
  background-repeat: repeat-x;
}
.navbar-default {
  background-image: -webkit-linear-gradient(top, #fff 0%!,(MISSING) #f8f8f8 100%!)(MISSING);
  background-image:      -o-linear-gradient(top, #fff 0%!,(MISSING) #f8f8f8 100%!)(MISSING);
  background-image: -webkit-gradient(linear, left top, left bottom, from(#fff), to(#f8f8f8));
  background-image:         linear-gradient(to bottom, #fff 0%!,(MISSING) #f8f8f8 100%!)(MISSING);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffffffff', endColorstr='#fff8f8f8', GradientType=0);
  filter: progid:DXImageTransform.Microsoft.gradient(enabled = false);
  background-repeat: repeat-x;
  border-radius: 4px;
  -webkit-box-shadow: inset 0 1px 0 rgba(255, 255, 255, .15), 0 1px 5px rgba(0, 0, 0, .075);
          box-shadow: inset 0 1px 0 rgba(255, 255, 255, .15), 0 1px 5px rgba(0, 0, 0, .075);
}
.navbar-default .navbar-nav > .open > a,
.navbar-default .navbar-nav > .active > a {
  background-image: -webkit-linear-gradient(top, #dbdbdb 0%!,(MISSING) #e2e2e2 100%!)(MISSING);
  background-image:      -o-linear-gradient(top, #dbdbdb 0%!,(MISSING) #e2e2e2 100%!)(MISSING);
  background-image: -webkit-gradient(linear, left top, left bottom, from(#dbdbdb), to(#e2e2e2));
  background-image:         linear-gradient(to bottom, #dbdbdb 0%!,(MISSING) #e2e2e2 100%!)(MISSING);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffdbdbdb', endColorstr='#ffe2e2e2', GradientType=0);
  background-repeat: repeat-x;
  -webkit-box-shadow: inset 0 3px 9px rgba(0, 0, 0, .075);
          box-shadow: inset 0 3px 9px rgba(0, 0, 0, .075);
}
.navbar-brand,
.navbar-nav > li > a {
  text-shadow: 0 1px 0 rgba(255, 255, 255, .25);
}
.navbar-inverse {
  background-image: -webkit-linear-gradient(top, #3c3c3c 0%!,(MISSING) #222 100%!)(MISSING);
  background-image:      -o-linear-gradient(top, #3c3c3c 0%!,(MISSING) #222 100%!)(MISSING);
  background-image: -webkit-gradient(linear, left top, left bottom, from(#3c3c3c), to(#222));
  background-image:         linear-gradient(to bottom, #3c3c3c 0%!,(MISSING) #222 100%!)(MISSING);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff3c3c3c', endColorstr='#ff222222', GradientType=0);
  filter: progid:DXImageTransform.Microsoft.gradient(enabled = false);
  background-repeat: repeat-x;
  border-radius: 4px;
}
.navbar-inverse .navbar-nav > .open > a,
.navbar-inverse .navbar-nav > .active > a {
  background-image: -webkit-linear-gradient(top, #080808 0%!,(MISSING) #0f0f0f 100%!)(MISSING);
  background-image:      -o-linear-gradient(top, #080808 0%!,(MISSING) #0f0f0f 100%!)(MISSING);
  background-image: -webkit-gradient(linear, left top, left bottom, from(#080808), to(#0f0f0f));
  background-image:         linear-gradient(to bottom, #080808 0%!,(MISSING) #0f0f0f 100%!)(MISSING);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff080808', endColorstr='#ff0f0f0f', GradientType=0);
  background-repeat: repeat-x;
  -webkit-box-shadow: inset 0 3px 9px rgba(0, 0, 0, .25);
          box-shadow: inset 0 3px 9px rgba(0, 0, 0, .25);
}
.navbar-inverse .navbar-brand,
.navbar-inverse .navbar-nav > li > a {
  text-shadow: 0 -1px 0 rgba(0, 0, 0, .25);
}
.navbar-static-top,
.navbar-fixed-top,
.navbar-fixed-bottom {
  border-radius: 0;
}
@media (max-width: 767px) {
  .navbar .navbar-nav .open .dropdown-menu > .active > a,
  .navbar .navbar-nav .open .dropdown-menu > .active > a:hover,
  .navbar .navbar-nav .open .dropdown-menu > .active > a:focus {
    color: #fff;
    background-image: -webkit-linear-gradient(top, #337ab7 0%!,(MISSING) #2e6da4 100%!)(MISSING);
    background-image:      -o-linear-gradient(top, #337ab7 0%!,(MISSING) #2e6da4 100%!)(MISSING);
    background-image: -webkit-gradient(linear, left top, left bottom, from(#337ab7), to(#2e6da4));
    background-image:         linear-gradient(to bottom, #337ab7 0%!,(MISSING) #2e6da4 100%!)(MISSING);
    filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff337ab7', endColorstr='#ff2e6da4', GradientType=0);
    background-repeat: repeat-x;
  }
}
.alert {
  text-shadow: 0 1px 0 rgba(255, 255, 255, .2);
  -webkit-box-shadow: inset 0 1px 0 rgba(255, 255, 255, .25), 0 1px 2px rgba(0, 0, 0, .05);
          box-shadow: inset 0 1px 0 rgba(255, 255, 255, .25), 0 1px 2px rgba(0, 0, 0, .05);
}
.alert-success {
  background-image: -webkit-linear-gradient(top, #dff0d8 0%!,(MISSING) #c8e5bc 100%!)(MISSING);
  background-image:      -o-linear-gradient(top, #dff0d8 0%!,(MISSING) #c8e5bc 100%!)(MISSING);
  background-image: -webkit-gradient(linear, left top, left bottom, from(#dff0d8), to(#c8e5bc));
  background-image:         linear-gradient(to bottom, #dff0d8 0%!,(MISSING) #c8e5bc 100%!)(MISSING);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffdff0d8', endColorstr='#ffc8e5bc', GradientType=0);
  background-repeat: repeat-x;
  border-color: #b2dba1;
}
.alert-info {
  background-image: -webkit-linear-gradient(top, #d9edf7 0%!,(MISSING) #b9def0 100%!)(MISSING);
  background-image:      -o-linear-gradient(top, #d9edf7 0%!,(MISSING) #b9def0 100%!)(MISSING);
  background-image: -webkit-gradient(linear, left top, left bottom, from(#d9edf7), to(#b9def0));
  background-image:         linear-gradient(to bottom, #d9edf7 0%!,(MISSING) #b9def0 100%!)(MISSING);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffd9edf7', endColorstr='#ffb9def0', GradientType=0);
  background-repeat: repeat-x;
  border-color: #9acfea;
}
.alert-warning {
  background-image: -webkit-linear-gradient(top, #fcf8e3 0%!,(MISSING) #f8efc0 100%!)(MISSING);
  background-image:      -o-linear-gradient(top, #fcf8e3 0%!,(MISSING) #f8efc0 100%!)(MISSING);
  background-image: -webkit-gradient(linear, left top, left bottom, from(#fcf8e3), to(#f8efc0));
  background-image:         linear-gradient(to bottom, #fcf8e3 0%!,(MISSING) #f8efc0 100%!)(MISSING);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#fffcf8e3', endColorstr='#fff8efc0', GradientType=0);
  background-repeat: repeat-x;
  border-color: #f5e79e;
}
.alert-danger {
  background-image: -webkit-linear-gradient(top, #f2dede 0%!,(MISSING) #e7c3c3 100%!)(MISSING);
  background-image:      -o-linear-gradient(top, #f2dede 0%!,(MISSING) #e7c3c3 100%!)(MISSING);
  background-image: -webkit-gradient(linear, left top, left bottom, from(#f2dede), to(#e7c3c3));
  background-image:         linear-gradient(to bottom, #f2dede 0%!,(MISSING) #e7c3c3 100%!)(MISSING);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#fff2dede', endColorstr='#ffe7c3c3', GradientType=0);
  background-repeat: repeat-x;
  border-color: #dca7a7;
}
.progress {
  background-image: -webkit-linear-gradient(top, #ebebeb 0%!,(MISSING) #f5f5f5 100%!)(MISSING);
  background-image:      -o-linear-gradient(top, #ebebeb 0%!,(MISSING) #f5f5f5 100%!)(MISSING);
  background-image: -webkit-gradient(linear, left top, left bottom, from(#ebebeb), to(#f5f5f5));
  background-image:         linear-gradient(to bottom, #ebebeb 0%!,(MISSING) #f5f5f5 100%!)(MISSING);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffebebeb', endColorstr='#fff5f5f5', GradientType=0);
  background-repeat: repeat-x;
}
.progress-bar {
  background-image: -webkit-linear-gradient(top, #337ab7 0%!,(MISSING) #286090 100%!)(MISSING);
  background-image:      -o-linear-gradient(top, #337ab7 0%!,(MISSING) #286090 100%!)(MISSING);
  background-image: -webkit-gradient(linear, left top, left bottom, from(#337ab7), to(#286090));
  background-image:         linear-gradient(to bottom, #337ab7 0%!,(MISSING) #286090 100%!)(MISSING);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff337ab7', endColorstr='#ff286090', GradientType=0);
  background-repeat: repeat-x;
}
.progress-bar-success {
  background-image: -webkit-linear-gradient(top, #5cb85c 0%!,(MISSING) #449d44 100%!)(MISSING);
  background-image:      -o-linear-gradient(top, #5cb85c 0%!,(MISSING) #449d44 100%!)(MISSING);
  background-image: -webkit-gradient(linear, left top, left bottom, from(#5cb85c), to(#449d44));
  background-image:         linear-gradient(to bottom, #5cb85c 0%!,(MISSING) #449d44 100%!)(MISSING);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff5cb85c', endColorstr='#ff449d44', GradientType=0);
  background-repeat: repeat-x;
}
.progress-bar-info {
  background-image: -webkit-linear-gradient(top, #5bc0de 0%!,(MISSING) #31b0d5 100%!)(MISSING);
  background-image:      -o-linear-gradient(top, #5bc0de 0%!,(MISSING) #31b0d5 100%!)(MISSING);
  background-image: -webkit-gradient(linear, left top, left bottom, from(#5bc0de), to(#31b0d5));
  background-image:         linear-gradient(to bottom, #5bc0de 0%!,(MISSING) #31b0d5 100%!)(MISSING);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff5bc0de', endColorstr='#ff31b0d5', GradientType=0);
  background-repeat: repeat-x;
}
.progress-bar-warning {
  background-image: -webkit-linear-gradient(top, #f0ad4e 0%!,(MISSING) #ec971f 100%!)(MISSING);
  background-image:      -o-linear-gradient(top, #f0ad4e 0%!,(MISSING) #ec971f 100%!)(MISSING);
  background-image: -webkit-gradient(linear, left top, left bottom, from(#f0ad4e), to(#ec971f));
  background-image:         linear-gradient(to bottom, #f0ad4e 0%!,(MISSING) #ec971f 100%!)(MISSING);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#fff0ad4e', endColorstr='#ffec971f', GradientType=0);
  background-repeat: repeat-x;
}
.progress-bar-danger {
  background-image: -webkit-linear-gradient(top, #d9534f 0%!,(MISSING) #c9302c 100%!)(MISSING);
  background-image:      -o-linear-gradient(top, #d9534f 0%!,(MISSING) #c9302c 100%!)(MISSING);
  background-image: -webkit-gradient(linear, left top, left bottom, from(#d9534f), to(#c9302c));
  background-image:         linear-gradient(to bottom, #d9534f 0%!,(MISSING) #c9302c 100%!)(MISSING);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffd9534f', endColorstr='#ffc9302c', GradientType=0);
  background-repeat: repeat-x;
}
.progress-bar-striped {
  background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, .15) 25%!,(MISSING) transparent 25%!,(MISSING) transparent 50%!,(MISSING) rgba(255, 255, 255, .15) 50%!,(MISSING) rgba(255, 255, 255, .15) 75%!,(MISSING) transparent 75%!,(MISSING) transparent);
  background-image:      -o-linear-gradient(45deg, rgba(255, 255, 255, .15) 25%!,(MISSING) transparent 25%!,(MISSING) transparent 50%!,(MISSING) rgba(255, 255, 255, .15) 50%!,(MISSING) rgba(255, 255, 255, .15) 75%!,(MISSING) transparent 75%!,(MISSING) transparent);
  background-image:         linear-gradient(45deg, rgba(255, 255, 255, .15) 25%!,(MISSING) transparent 25%!,(MISSING) transparent 50%!,(MISSING) rgba(255, 255, 255, .15) 50%!,(MISSING) rgba(255, 255, 255, .15) 75%!,(MISSING) transparent 75%!,(MISSING) transparent);
}
.list-group {
  border-radius: 4px;
  -webkit-box-shadow: 0 1px 2px rgba(0, 0, 0, .075);
          box-shadow: 0 1px 2px rgba(0, 0, 0, .075);
}
.list-group-item.active,
.list-group-item.active:hover,
.list-group-item.active:focus {
  text-shadow: 0 -1px 0 #286090;
  background-image: -webkit-linear-gradient(top, #337ab7 0%!,(MISSING) #2b669a 100%!)(MISSING);
  background-image:      -o-linear-gradient(top, #337ab7 0%!,(MISSING) #2b669a 100%!)(MISSING);
  background-image: -webkit-gradient(linear, left top, left bottom, from(#337ab7), to(#2b669a));
  background-image:         linear-gradient(to bottom, #337ab7 0%!,(MISSING) #2b669a 100%!)(MISSING);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff337ab7', endColorstr='#ff2b669a', GradientType=0);
  background-repeat: repeat-x;
  border-color: #2b669a;
}
.list-group-item.active .badge,
.list-group-item.active:hover .badge,
.list-group-item.active:focus .badge {
  text-shadow: none;
}
.panel {
  -webkit-box-shadow: 0 1px 2px rgba(0, 0, 0, .05);
          box-shadow: 0 1px 2px rgba(0, 0, 0, .05);
}
.panel-default > .panel-heading {
  background-image: -webkit-linear-gradient(top, #f5f5f5 0%!,(MISSING) #e8e8e8 100%!)(MISSING);
  background-image:      -o-linear-gradient(top, #f5f5f5 0%!,(MISSING) #e8e8e8 100%!)(MISSING);
  background-image: -webkit-gradient(linear, left top, left bottom, from(#f5f5f5), to(#e8e8e8));
  background-image:         linear-gradient(to bottom, #f5f5f5 0%!,(MISSING) #e8e8e8 100%!)(MISSING);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#fff5f5f5', endColorstr='#ffe8e8e8', GradientType=0);
  background-repeat: repeat-x;
}
.panel-primary > .panel-heading {
  background-image: -webkit-linear-gradient(top, #337ab7 0%!,(MISSING) #2e6da4 100%!)(MISSING);
  background-image:      -o-linear-gradient(top, #337ab7 0%!,(MISSING) #2e6da4 100%!)(MISSING);
  background-image: -webkit-gradient(linear, left top, left bottom, from(#337ab7), to(#2e6da4));
  background-image:         linear-gradient(to bottom, #337ab7 0%!,(MISSING) #2e6da4 100%!)(MISSING);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff337ab7', endColorstr='#ff2e6da4', GradientType=0);
  background-repeat: repeat-x;
}
.panel-success > .panel-heading {
  background-image: -webkit-linear-gradient(top, #dff0d8 0%!,(MISSING) #d0e9c6 100%!)(MISSING);
  background-image:      -o-linear-gradient(top, #dff0d8 0%!,(MISSING) #d0e9c6 100%!)(MISSING);
  background-image: -webkit-gradient(linear, left top, left bottom, from(#dff0d8), to(#d0e9c6));
  background-image:         linear-gradient(to bottom, #dff0d8 0%!,(MISSING) #d0e9c6 100%!)(MISSING);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffdff0d8', endColorstr='#ffd0e9c6', GradientType=0);
  background-repeat: repeat-x;
}
.panel-info > .panel-heading {
  background-image: -webkit-linear-gradient(top, #d9edf7 0%!,(MISSING) #c4e3f3 100%!)(MISSING);
  background-image:      -o-linear-gradient(top, #d9edf7 0%!,(MISSING) #c4e3f3 100%!)(MISSING);
  background-image: -webkit-gradient(linear, left top, left bottom, from(#d9edf7), to(#c4e3f3));
  background-image:         linear-gradient(to bottom, #d9edf7 0%!,(MISSING) #c4e3f3 100%!)(MISSING);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffd9edf7', endColorstr='#ffc4e3f3', GradientType=0);
  background-repeat: repeat-x;
}
.panel-warning > .panel-heading {
  background-image: -webkit-linear-gradient(top, #fcf8e3 0%!,(MISSING) #faf2cc 100%!)(MISSING);
  background-image:      -o-linear-gradient(top, #fcf8e3 0%!,(MISSING) #faf2cc 100%!)(MISSING);
  background-image: -webkit-gradient(linear, left top, left bottom, from(#fcf8e3), to(#faf2cc));
  background-image:         linear-gradient(to bottom, #fcf8e3 0%!,(MISSING) #faf2cc 100%!)(MISSING);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#fffcf8e3', endColorstr='#fffaf2cc', GradientType=0);
  background-repeat: repeat-x;
}
.panel-danger > .panel-heading {
  background-image: -webkit-linear-gradient(top, #f2dede 0%!,(MISSING) #ebcccc 100%!)(MISSING);
  background-image:      -o-linear-gradient(top, #f2dede 0%!,(MISSING) #ebcccc 100%!)(MISSING);
  background-image: -webkit-gradient(linear, left top, left bottom, from(#f2dede), to(#ebcccc));
  background-image:         linear-gradient(to bottom, #f2dede 0%!,(MISSING) #ebcccc 100%!)(MISSING);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#fff2dede', endColorstr='#ffebcccc', GradientType=0);
  background-repeat: repeat-x;
}
.well {
  background-image: -webkit-linear-gradient(top, #e8e8e8 0%!,(MISSING) #f5f5f5 100%!)(MISSING);
  background-image:      -o-linear-gradient(top, #e8e8e8 0%!,(MISSING) #f5f5f5 100%!)(MISSING);
  background-image: -webkit-gradient(linear, left top, left bottom, from(#e8e8e8), to(#f5f5f5));
  background-image:         linear-gradient(to bottom, #e8e8e8 0%!,(MISSING) #f5f5f5 100%!)(MISSING);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffe8e8e8', endColorstr='#fff5f5f5', GradientType=0);
  background-repeat: repeat-x;
  border-color: #dcdcdc;
  -webkit-box-shadow: inset 0 1px 3px rgba(0, 0, 0, .05), 0 1px 0 rgba(255, 255, 255, .1);
          box-shadow: inset 0 1px 3px rgba(0, 0, 0, .05), 0 1px 0 rgba(255, 255, 255, .1);
}
/*# sourceMappingURL=bootstrap-theme.css.map */
{"version":3,"sources":["bootstrap-theme.css","less/theme.less","less/mixins/vendor-prefixes.less","less/mixins/gradients.less","less/mixins/reset-filter.less"],"names":[],"mappings":"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","file":"bootstrap-theme.css","sourcesContent":["/*!\n * Bootstrap v3.3.6 (http://getbootstrap.com)\n * Copyright 2011-2015 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n */\n.btn-default,\n.btn-primary,\n.btn-success,\n.btn-info,\n.btn-warning,\n.btn-danger {\n  text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.2);\n  -webkit-box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.15), 0 1px 1px rgba(0, 0, 0, 0.075);\n  box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.15), 0 1px 1px rgba(0, 0, 0, 0.075);\n}\n.btn-default:active,\n.btn-primary:active,\n.btn-success:active,\n.btn-info:active,\n.btn-warning:active,\n.btn-danger:active,\n.btn-default.active,\n.btn-primary.active,\n.btn-success.active,\n.btn-info.active,\n.btn-warning.active,\n.btn-danger.active {\n  -webkit-box-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.125);\n  box-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.125);\n}\n.btn-default.disabled,\n.btn-primary.disabled,\n.btn-success.disabled,\n.btn-info.disabled,\n.btn-warning.disabled,\n.btn-danger.disabled,\n.btn-default[disabled],\n.btn-primary[disabled],\n.btn-success[disabled],\n.btn-info[disabled],\n.btn-warning[disabled],\n.btn-danger[disabled],\nfieldset[disabled] .btn-default,\nfieldset[disabled] .btn-primary,\nfieldset[disabled] .btn-success,\nfieldset[disabled] .btn-info,\nfieldset[disabled] .btn-warning,\nfieldset[disabled] .btn-danger {\n  -webkit-box-shadow: none;\n  box-shadow: none;\n}\n.btn-default .badge,\n.btn-primary .badge,\n.btn-success .badge,\n.btn-info .badge,\n.btn-warning .badge,\n.btn-danger .badge {\n  text-shadow: none;\n}\n.btn:active,\n.btn.active {\n  background-image: none;\n}\n.btn-default {\n  background-image: -webkit-linear-gradient(top, #fff 0%!,(MISSING) #e0e0e0 100%!)(MISSING);\n  background-image: -o-linear-gradient(top, #fff 0%!,(MISSING) #e0e0e0 100%!)(MISSING);\n  background-image: linear-gradient(to bottom, #fff 0%!,(MISSING) #e0e0e0 100%!)(MISSING);\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffffffff', endColorstr='#ffe0e0e0', GradientType=0);\n  filter: progid:DXImageTransform.Microsoft.gradient(enabled = false);\n  background-repeat: repeat-x;\n  border-color: #dbdbdb;\n  text-shadow: 0 1px 0 #fff;\n  border-color: #ccc;\n}\n.btn-default:hover,\n.btn-default:focus {\n  background-color: #e0e0e0;\n  background-position: 0 -15px;\n}\n.btn-default:active,\n.btn-default.active {\n  background-color: #e0e0e0;\n  border-color: #dbdbdb;\n}\n.btn-default.disabled,\n.btn-default[disabled],\nfieldset[disabled] .btn-default,\n.btn-default.disabled:hover,\n.btn-default[disabled]:hover,\nfieldset[disabled] .btn-default:hover,\n.btn-default.disabled:focus,\n.btn-default[disabled]:focus,\nfieldset[disabled] .btn-default:focus,\n.btn-default.disabled.focus,\n.btn-default[disabled].focus,\nfieldset[disabled] .btn-default.focus,\n.btn-default.disabled:active,\n.btn-default[disabled]:active,\nfieldset[disabled] .btn-default:active,\n.btn-default.disabled.active,\n.btn-default[disabled].active,\nfieldset[disabled] .btn-default.active {\n  background-color: #e0e0e0;\n  background-image: none;\n}\n.btn-primary {\n  background-image: -webkit-linear-gradient(top, #337ab7 0%!,(MISSING) #265a88 100%!)(MISSING);\n  background-image: -o-linear-gradient(top, #337ab7 0%!,(MISSING) #265a88 100%!)(MISSING);\n  background-image: linear-gradient(to bottom, #337ab7 0%!,(MISSING) #265a88 100%!)(MISSING);\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff337ab7', endColorstr='#ff265a88', GradientType=0);\n  filter: progid:DXImageTransform.Microsoft.gradient(enabled = false);\n  background-repeat: repeat-x;\n  border-color: #245580;\n}\n.btn-primary:hover,\n.btn-primary:focus {\n  background-color: #265a88;\n  background-position: 0 -15px;\n}\n.btn-primary:active,\n.btn-primary.active {\n  background-color: #265a88;\n  border-color: #245580;\n}\n.btn-primary.disabled,\n.btn-primary[disabled],\nfieldset[disabled] .btn-primary,\n.btn-primary.disabled:hover,\n.btn-primary[disabled]:hover,\nfieldset[disabled] .btn-primary:hover,\n.btn-primary.disabled:focus,\n.btn-primary[disabled]:focus,\nfieldset[disabled] .btn-primary:focus,\n.btn-primary.disabled.focus,\n.btn-primary[disabled].focus,\nfieldset[disabled] .btn-primary.focus,\n.btn-primary.disabled:active,\n.btn-primary[disabled]:active,\nfieldset[disabled] .btn-primary:active,\n.btn-primary.disabled.active,\n.btn-primary[disabled].active,\nfieldset[disabled] .btn-primary.active {\n  background-color: #265a88;\n  background-image: none;\n}\n.btn-success {\n  background-image: -webkit-linear-gradient(top, #5cb85c 0%!,(MISSING) #419641 100%!)(MISSING);\n  background-image: -o-linear-gradient(top, #5cb85c 0%!,(MISSING) #419641 100%!)(MISSING);\n  background-image: linear-gradient(to bottom, #5cb85c 0%!,(MISSING) #419641 100%!)(MISSING);\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff5cb85c', endColorstr='#ff419641', GradientType=0);\n  filter: progid:DXImageTransform.Microsoft.gradient(enabled = false);\n  background-repeat: repeat-x;\n  border-color: #3e8f3e;\n}\n.btn-success:hover,\n.btn-success:focus {\n  background-color: #419641;\n  background-position: 0 -15px;\n}\n.btn-success:active,\n.btn-success.active {\n  background-color: #419641;\n  border-color: #3e8f3e;\n}\n.btn-success.disabled,\n.btn-success[disabled],\nfieldset[disabled] .btn-success,\n.btn-success.disabled:hover,\n.btn-success[disabled]:hover,\nfieldset[disabled] .btn-success:hover,\n.btn-success.disabled:focus,\n.btn-success[disabled]:focus,\nfieldset[disabled] .btn-success:focus,\n.btn-success.disabled.focus,\n.btn-success[disabled].focus,\nfieldset[disabled] .btn-success.focus,\n.btn-success.disabled:active,\n.btn-success[disabled]:active,\nfieldset[disabled] .btn-success:active,\n.btn-success.disabled.active,\n.btn-success[disabled].active,\nfieldset[disabled] .btn-success.active {\n  background-color: #419641;\n  background-image: none;\n}\n.btn-info {\n  background-image: -webkit-linear-gradient(top, #5bc0de 0%!,(MISSING) #2aabd2 100%!)(MISSING);\n  background-image: -o-linear-gradient(top, #5bc0de 0%!,(MISSING) #2aabd2 100%!)(MISSING);\n  background-image: linear-gradient(to bottom, #5bc0de 0%!,(MISSING) #2aabd2 100%!)(MISSING);\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff5bc0de', endColorstr='#ff2aabd2', GradientType=0);\n  filter: progid:DXImageTransform.Microsoft.gradient(enabled = false);\n  background-repeat: repeat-x;\n  border-color: #28a4c9;\n}\n.btn-info:hover,\n.btn-info:focus {\n  background-color: #2aabd2;\n  background-position: 0 -15px;\n}\n.btn-info:active,\n.btn-info.active {\n  background-color: #2aabd2;\n  border-color: #28a4c9;\n}\n.btn-info.disabled,\n.btn-info[disabled],\nfieldset[disabled] .btn-info,\n.btn-info.disabled:hover,\n.btn-info[disabled]:hover,\nfieldset[disabled] .btn-info:hover,\n.btn-info.disabled:focus,\n.btn-info[disabled]:focus,\nfieldset[disabled] .btn-info:focus,\n.btn-info.disabled.focus,\n.btn-info[disabled].focus,\nfieldset[disabled] .btn-info.focus,\n.btn-info.disabled:active,\n.btn-info[disabled]:active,\nfieldset[disabled] .btn-info:active,\n.btn-info.disabled.active,\n.btn-info[disabled].active,\nfieldset[disabled] .btn-info.active {\n  background-color: #2aabd2;\n  background-image: none;\n}\n.btn-warning {\n  background-image: -webkit-linear-gradient(top, #f0ad4e 0%!,(MISSING) #eb9316 100%!)(MISSING);\n  background-image: -o-linear-gradient(top, #f0ad4e 0%!,(MISSING) #eb9316 100%!)(MISSING);\n  background-image: linear-gradient(to bottom, #f0ad4e 0%!,(MISSING) #eb9316 100%!)(MISSING);\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#fff0ad4e', endColorstr='#ffeb9316', GradientType=0);\n  filter: progid:DXImageTransform.Microsoft.gradient(enabled = false);\n  background-repeat: repeat-x;\n  border-color: #e38d13;\n}\n.btn-warning:hover,\n.btn-warning:focus {\n  background-color: #eb9316;\n  background-position: 0 -15px;\n}\n.btn-warning:active,\n.btn-warning.active {\n  background-color: #eb9316;\n  border-color: #e38d13;\n}\n.btn-warning.disabled,\n.btn-warning[disabled],\nfieldset[disabled] .btn-warning,\n.btn-warning.disabled:hover,\n.btn-warning[disabled]:hover,\nfieldset[disabled] .btn-warning:hover,\n.btn-warning.disabled:focus,\n.btn-warning[disabled]:focus,\nfieldset[disabled] .btn-warning:focus,\n.btn-warning.disabled.focus,\n.btn-warning[disabled].focus,\nfieldset[disabled] .btn-warning.focus,\n.btn-warning.disabled:active,\n.btn-warning[disabled]:active,\nfieldset[disabled] .btn-warning:active,\n.btn-warning.disabled.active,\n.btn-warning[disabled].active,\nfieldset[disabled] .btn-warning.active {\n  background-color: #eb9316;\n  background-image: none;\n}\n.btn-danger {\n  background-image: -webkit-linear-gradient(top, #d9534f 0%!,(MISSING) #c12e2a 100%!)(MISSING);\n  background-image: -o-linear-gradient(top, #d9534f 0%!,(MISSING) #c12e2a 100%!)(MISSING);\n  background-image: linear-gradient(to bottom, #d9534f 0%!,(MISSING) #c12e2a 100%!)(MISSING);\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffd9534f', endColorstr='#ffc12e2a', GradientType=0);\n  filter: progid:DXImageTransform.Microsoft.gradient(enabled = false);\n  background-repeat: repeat-x;\n  border-color: #b92c28;\n}\n.btn-danger:hover,\n.btn-danger:focus {\n  background-color: #c12e2a;\n  background-position: 0 -15px;\n}\n.btn-danger:active,\n.btn-danger.active {\n  background-color: #c12e2a;\n  border-color: #b92c28;\n}\n.btn-danger.disabled,\n.btn-danger[disabled],\nfieldset[disabled] .btn-danger,\n.btn-danger.disabled:hover,\n.btn-danger[disabled]:hover,\nfieldset[disabled] .btn-danger:hover,\n.btn-danger.disabled:focus,\n.btn-danger[disabled]:focus,\nfieldset[disabled] .btn-danger:focus,\n.btn-danger.disabled.focus,\n.btn-danger[disabled].focus,\nfieldset[disabled] .btn-danger.focus,\n.btn-danger.disabled:active,\n.btn-danger[disabled]:active,\nfieldset[disabled] .btn-danger:active,\n.btn-danger.disabled.active,\n.btn-danger[disabled].active,\nfieldset[disabled] .btn-danger.active {\n  background-color: #c12e2a;\n  background-image: none;\n}\n.thumbnail,\n.img-thumbnail {\n  -webkit-box-shadow: 0 1px 2px rgba(0, 0, 0, 0.075);\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.075);\n}\n.dropdown-menu > li > a:hover,\n.dropdown-menu > li > a:focus {\n  background-image: -webkit-linear-gradient(top, #f5f5f5 0%!,(MISSING) #e8e8e8 100%!)(MISSING);\n  background-image: -o-linear-gradient(top, #f5f5f5 0%!,(MISSING) #e8e8e8 100%!)(MISSING);\n  background-image: linear-gradient(to bottom, #f5f5f5 0%!,(MISSING) #e8e8e8 100%!)(MISSING);\n  background-repeat: repeat-x;\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#fff5f5f5', endColorstr='#ffe8e8e8', GradientType=0);\n  background-color: #e8e8e8;\n}\n.dropdown-menu > .active > a,\n.dropdown-menu > .active > a:hover,\n.dropdown-menu > .active > a:focus {\n  background-image: -webkit-linear-gradient(top, #337ab7 0%!,(MISSING) #2e6da4 100%!)(MISSING);\n  background-image: -o-linear-gradient(top, #337ab7 0%!,(MISSING) #2e6da4 100%!)(MISSING);\n  background-image: linear-gradient(to bottom, #337ab7 0%!,(MISSING) #2e6da4 100%!)(MISSING);\n  background-repeat: repeat-x;\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff337ab7', endColorstr='#ff2e6da4', GradientType=0);\n  background-color: #2e6da4;\n}\n.navbar-default {\n  background-image: -webkit-linear-gradient(top, #ffffff 0%!,(MISSING) #f8f8f8 100%!)(MISSING);\n  background-image: -o-linear-gradient(top, #ffffff 0%!,(MISSING) #f8f8f8 100%!)(MISSING);\n  background-image: linear-gradient(to bottom, #ffffff 0%!,(MISSING) #f8f8f8 100%!)(MISSING);\n  background-repeat: repeat-x;\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffffffff', endColorstr='#fff8f8f8', GradientType=0);\n  filter: progid:DXImageTransform.Microsoft.gradient(enabled = false);\n  border-radius: 4px;\n  -webkit-box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.15), 0 1px 5px rgba(0, 0, 0, 0.075);\n  box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.15), 0 1px 5px rgba(0, 0, 0, 0.075);\n}\n.navbar-default .navbar-nav > .open > a,\n.navbar-default .navbar-nav > .active > a {\n  background-image: -webkit-linear-gradient(top, #dbdbdb 0%!,(MISSING) #e2e2e2 100%!)(MISSING);\n  background-image: -o-linear-gradient(top, #dbdbdb 0%!,(MISSING) #e2e2e2 100%!)(MISSING);\n  background-image: linear-gradient(to bottom, #dbdbdb 0%!,(MISSING) #e2e2e2 100%!)(MISSING);\n  background-repeat: repeat-x;\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffdbdbdb', endColorstr='#ffe2e2e2', GradientType=0);\n  -webkit-box-shadow: inset 0 3px 9px rgba(0, 0, 0, 0.075);\n  box-shadow: inset 0 3px 9px rgba(0, 0, 0, 0.075);\n}\n.navbar-brand,\n.navbar-nav > li > a {\n  text-shadow: 0 1px 0 rgba(255, 255, 255, 0.25);\n}\n.navbar-inverse {\n  background-image: -webkit-linear-gradient(top, #3c3c3c 0%!,(MISSING) #222 100%!)(MISSING);\n  background-image: -o-linear-gradient(top, #3c3c3c 0%!,(MISSING) #222 100%!)(MISSING);\n  background-image: linear-gradient(to bottom, #3c3c3c 0%!,(MISSING) #222 100%!)(MISSING);\n  background-repeat: repeat-x;\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff3c3c3c', endColorstr='#ff222222', GradientType=0);\n  filter: progid:DXImageTransform.Microsoft.gradient(enabled = false);\n  border-radius: 4px;\n}\n.navbar-inverse .navbar-nav > .open > a,\n.navbar-inverse .navbar-nav > .active > a {\n  background-image: -webkit-linear-gradient(top, #080808 0%!,(MISSING) #0f0f0f 100%!)(MISSING);\n  background-image: -o-linear-gradient(top, #080808 0%!,(MISSING) #0f0f0f 100%!)(MISSING);\n  background-image: linear-gradient(to bottom, #080808 0%!,(MISSING) #0f0f0f 100%!)(MISSING);\n  background-repeat: repeat-x;\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff080808', endColorstr='#ff0f0f0f', GradientType=0);\n  -webkit-box-shadow: inset 0 3px 9px rgba(0, 0, 0, 0.25);\n  box-shadow: inset 0 3px 9px rgba(0, 0, 0, 0.25);\n}\n.navbar-inverse .navbar-brand,\n.navbar-inverse .navbar-nav > li > a {\n  text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.25);\n}\n.navbar-static-top,\n.navbar-fixed-top,\n.navbar-fixed-bottom {\n  border-radius: 0;\n}\n@media (max-width: 767px) {\n  .navbar .navbar-nav .open .dropdown-menu > .active > a,\n  .navbar .navbar-nav .open .dropdown-menu > .active > a:hover,\n  .navbar .navbar-nav .open .dropdown-menu > .active > a:focus {\n    color: #fff;\n    background-image: -webkit-linear-gradient(top, #337ab7 0%!,(MISSING) #2e6da4 100%!)(MISSING);\n    background-image: -o-linear-gradient(top, #337ab7 0%!,(MISSING) #2e6da4 100%!)(MISSING);\n    background-image: linear-gradient(to bottom, #337ab7 0%!,(MISSING) #2e6da4 100%!)(MISSING);\n    background-repeat: repeat-x;\n    filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff337ab7', endColorstr='#ff2e6da4', GradientType=0);\n  }\n}\n.alert {\n  text-shadow: 0 1px 0 rgba(255, 255, 255, 0.2);\n  -webkit-box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.25), 0 1px 2px rgba(0, 0, 0, 0.05);\n  box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.25), 0 1px 2px rgba(0, 0, 0, 0.05);\n}\n.alert-success {\n  background-image: -webkit-linear-gradient(top, #dff0d8 0%!,(MISSING) #c8e5bc 100%!)(MISSING);\n  background-image: -o-linear-gradient(top, #dff0d8 0%!,(MISSING) #c8e5bc 100%!)(MISSING);\n  background-image: linear-gradient(to bottom, #dff0d8 0%!,(MISSING) #c8e5bc 100%!)(MISSING);\n  background-repeat: repeat-x;\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffdff0d8', endColorstr='#ffc8e5bc', GradientType=0);\n  border-color: #b2dba1;\n}\n.alert-info {\n  background-image: -webkit-linear-gradient(top, #d9edf7 0%!,(MISSING) #b9def0 100%!)(MISSING);\n  background-image: -o-linear-gradient(top, #d9edf7 0%!,(MISSING) #b9def0 100%!)(MISSING);\n  background-image: linear-gradient(to bottom, #d9edf7 0%!,(MISSING) #b9def0 100%!)(MISSING);\n  background-repeat: repeat-x;\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffd9edf7', endColorstr='#ffb9def0', GradientType=0);\n  border-color: #9acfea;\n}\n.alert-warning {\n  background-image: -webkit-linear-gradient(top, #fcf8e3 0%!,(MISSING) #f8efc0 100%!)(MISSING);\n  background-image: -o-linear-gradient(top, #fcf8e3 0%!,(MISSING) #f8efc0 100%!)(MISSING);\n  background-image: linear-gradient(to bottom, #fcf8e3 0%!,(MISSING) #f8efc0 100%!)(MISSING);\n  background-repeat: repeat-x;\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#fffcf8e3', endColorstr='#fff8efc0', GradientType=0);\n  border-color: #f5e79e;\n}\n.alert-danger {\n  background-image: -webkit-linear-gradient(top, #f2dede 0%!,(MISSING) #e7c3c3 100%!)(MISSING);\n  background-image: -o-linear-gradient(top, #f2dede 0%!,(MISSING) #e7c3c3 100%!)(MISSING);\n  background-image: linear-gradient(to bottom, #f2dede 0%!,(MISSING) #e7c3c3 100%!)(MISSING);\n  background-repeat: repeat-x;\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#fff2dede', endColorstr='#ffe7c3c3', GradientType=0);\n  border-color: #dca7a7;\n}\n.progress {\n  background-image: -webkit-linear-gradient(top, #ebebeb 0%!,(MISSING) #f5f5f5 100%!)(MISSING);\n  background-image: -o-linear-gradient(top, #ebebeb 0%!,(MISSING) #f5f5f5 100%!)(MISSING);\n  background-image: linear-gradient(to bottom, #ebebeb 0%!,(MISSING) #f5f5f5 100%!)(MISSING);\n  background-repeat: repeat-x;\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffebebeb', endColorstr='#fff5f5f5', GradientType=0);\n}\n.progress-bar {\n  background-image: -webkit-linear-gradient(top, #337ab7 0%!,(MISSING) #286090 100%!)(MISSING);\n  background-image: -o-linear-gradient(top, #337ab7 0%!,(MISSING) #286090 100%!)(MISSING);\n  background-image: linear-gradient(to bottom, #337ab7 0%!,(MISSING) #286090 100%!)(MISSING);\n  background-repeat: repeat-x;\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff337ab7', endColorstr='#ff286090', GradientType=0);\n}\n.progress-bar-success {\n  background-image: -webkit-linear-gradient(top, #5cb85c 0%!,(MISSING) #449d44 100%!)(MISSING);\n  background-image: -o-linear-gradient(top, #5cb85c 0%!,(MISSING) #449d44 100%!)(MISSING);\n  background-image: linear-gradient(to bottom, #5cb85c 0%!,(MISSING) #449d44 100%!)(MISSING);\n  background-repeat: repeat-x;\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff5cb85c', endColorstr='#ff449d44', GradientType=0);\n}\n.progress-bar-info {\n  background-image: -webkit-linear-gradient(top, #5bc0de 0%!,(MISSING) #31b0d5 100%!)(MISSING);\n  background-image: -o-linear-gradient(top, #5bc0de 0%!,(MISSING) #31b0d5 100%!)(MISSING);\n  background-image: linear-gradient(to bottom, #5bc0de 0%!,(MISSING) #31b0d5 100%!)(MISSING);\n  background-repeat: repeat-x;\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff5bc0de', endColorstr='#ff31b0d5', GradientType=0);\n}\n.progress-bar-warning {\n  background-image: -webkit-linear-gradient(top, #f0ad4e 0%!,(MISSING) #ec971f 100%!)(MISSING);\n  background-image: -o-linear-gradient(top, #f0ad4e 0%!,(MISSING) #ec971f 100%!)(MISSING);\n  background-image: linear-gradient(to bottom, #f0ad4e 0%!,(MISSING) #ec971f 100%!)(MISSING);\n  background-repeat: repeat-x;\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#fff0ad4e', endColorstr='#ffec971f', GradientType=0);\n}\n.progress-bar-danger {\n  background-image: -webkit-linear-gradient(top, #d9534f 0%!,(MISSING) #c9302c 100%!)(MISSING);\n  background-image: -o-linear-gradient(top, #d9534f 0%!,(MISSING) #c9302c 100%!)(MISSING);\n  background-image: linear-gradient(to bottom, #d9534f 0%!,(MISSING) #c9302c 100%!)(MISSING);\n  background-repeat: repeat-x;\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffd9534f', endColorstr='#ffc9302c', GradientType=0);\n}\n.progress-bar-striped {\n  background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%!,(MISSING) transparent 25%!,(MISSING) transparent 50%!,(MISSING) rgba(255, 255, 255, 0.15) 50%!,(MISSING) rgba(255, 255, 255, 0.15) 75%!,(MISSING) transparent 75%!,(MISSING) transparent);\n  background-image: -o-linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%!,(MISSING) transparent 25%!,(MISSING) transparent 50%!,(MISSING) rgba(255, 255, 255, 0.15) 50%!,(MISSING) rgba(255, 255, 255, 0.15) 75%!,(MISSING) transparent 75%!,(MISSING) transparent);\n  background-image: linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%!,(MISSING) transparent 25%!,(MISSING) transparent 50%!,(MISSING) rgba(255, 255, 255, 0.15) 50%!,(MISSING) rgba(255, 255, 255, 0.15) 75%!,(MISSING) transparent 75%!,(MISSING) transparent);\n}\n.list-group {\n  border-radius: 4px;\n  -webkit-box-shadow: 0 1px 2px rgba(0, 0, 0, 0.075);\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.075);\n}\n.list-group-item.active,\n.list-group-item.active:hover,\n.list-group-item.active:focus {\n  text-shadow: 0 -1px 0 #286090;\n  background-image: -webkit-linear-gradient(top, #337ab7 0%!,(MISSING) #2b669a 100%!)(MISSING);\n  background-image: -o-linear-gradient(top, #337ab7 0%!,(MISSING) #2b669a 100%!)(MISSING);\n  background-image: linear-gradient(to bottom, #337ab7 0%!,(MISSING) #2b669a 100%!)(MISSING);\n  background-repeat: repeat-x;\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff337ab7', endColorstr='#ff2b669a', GradientType=0);\n  border-color: #2b669a;\n}\n.list-group-item.active .badge,\n.list-group-item.active:hover .badge,\n.list-group-item.active:focus .badge {\n  text-shadow: none;\n}\n.panel {\n  -webkit-box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);\n}\n.panel-default > .panel-heading {\n  background-image: -webkit-linear-gradient(top, #f5f5f5 0%!,(MISSING) #e8e8e8 100%!)(MISSING);\n  background-image: -o-linear-gradient(top, #f5f5f5 0%!,(MISSING) #e8e8e8 100%!)(MISSING);\n  background-image: linear-gradient(to bottom, #f5f5f5 0%!,(MISSING) #e8e8e8 100%!)(MISSING);\n  background-repeat: repeat-x;\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#fff5f5f5', endColorstr='#ffe8e8e8', GradientType=0);\n}\n.panel-primary > .panel-heading {\n  background-image: -webkit-linear-gradient(top, #337ab7 0%!,(MISSING) #2e6da4 100%!)(MISSING);\n  background-image: -o-linear-gradient(top, #337ab7 0%!,(MISSING) #2e6da4 100%!)(MISSING);\n  background-image: linear-gradient(to bottom, #337ab7 0%!,(MISSING) #2e6da4 100%!)(MISSING);\n  background-repeat: repeat-x;\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff337ab7', endColorstr='#ff2e6da4', GradientType=0);\n}\n.panel-success > .panel-heading {\n  background-image: -webkit-linear-gradient(top, #dff0d8 0%!,(MISSING) #d0e9c6 100%!)(MISSING);\n  background-image: -o-linear-gradient(top, #dff0d8 0%!,(MISSING) #d0e9c6 100%!)(MISSING);\n  background-image: linear-gradient(to bottom, #dff0d8 0%!,(MISSING) #d0e9c6 100%!)(MISSING);\n  background-repeat: repeat-x;\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffdff0d8', endColorstr='#ffd0e9c6', GradientType=0);\n}\n.panel-info > .panel-heading {\n  background-image: -webkit-linear-gradient(top, #d9edf7 0%!,(MISSING) #c4e3f3 100%!)(MISSING);\n  background-image: -o-linear-gradient(top, #d9edf7 0%!,(MISSING) #c4e3f3 100%!)(MISSING);\n  background-image: linear-gradient(to bottom, #d9edf7 0%!,(MISSING) #c4e3f3 100%!)(MISSING);\n  background-repeat: repeat-x;\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffd9edf7', endColorstr='#ffc4e3f3', GradientType=0);\n}\n.panel-warning > .panel-heading {\n  background-image: -webkit-linear-gradient(top, #fcf8e3 0%!,(MISSING) #faf2cc 100%!)(MISSING);\n  background-image: -o-linear-gradient(top, #fcf8e3 0%!,(MISSING) #faf2cc 100%!)(MISSING);\n  background-image: linear-gradient(to bottom, #fcf8e3 0%!,(MISSING) #faf2cc 100%!)(MISSING);\n  background-repeat: repeat-x;\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#fffcf8e3', endColorstr='#fffaf2cc', GradientType=0);\n}\n.panel-danger > .panel-heading {\n  background-image: -webkit-linear-gradient(top, #f2dede 0%!,(MISSING) #ebcccc 100%!)(MISSING);\n  background-image: -o-linear-gradient(top, #f2dede 0%!,(MISSING) #ebcccc 100%!)(MISSING);\n  background-image: linear-gradient(to bottom, #f2dede 0%!,(MISSING) #ebcccc 100%!)(MISSING);\n  background-repeat: repeat-x;\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#fff2dede', endColorstr='#ffebcccc', GradientType=0);\n}\n.well {\n  background-image: -webkit-linear-gradient(top, #e8e8e8 0%!,(MISSING) #f5f5f5 100%!)(MISSING);\n  background-image: -o-linear-gradient(top, #e8e8e8 0%!,(MISSING) #f5f5f5 100%!)(MISSING);\n  background-image: linear-gradient(to bottom, #e8e8e8 0%!,(MISSING) #f5f5f5 100%!)(MISSING);\n  background-repeat: repeat-x;\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffe8e8e8', endColorstr='#fff5f5f5', GradientType=0);\n  border-color: #dcdcdc;\n  -webkit-box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.05), 0 1px 0 rgba(255, 255, 255, 0.1);\n  box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.05), 0 1px 0 rgba(255, 255, 255, 0.1);\n}\n/*# sourceMappingURL=bootstrap-theme.css.map */","/*!\n * Bootstrap v3.3.6 (http://getbootstrap.com)\n * Copyright 2011-2015 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n */\n\n//\n// Load core variables and mixins\n// --------------------------------------------------\n\n@import \"variables.less\";\n@import \"mixins.less\";\n\n\n//\n// Buttons\n// --------------------------------------------------\n\n// Common styles\n.btn-default,\n.btn-primary,\n.btn-success,\n.btn-info,\n.btn-warning,\n.btn-danger {\n  text-shadow: 0 -1px 0 rgba(0,0,0,.2);\n  @shadow: inset 0 1px 0 rgba(255,255,255,.15), 0 1px 1px rgba(0,0,0,.075);\n  .box-shadow(@shadow);\n\n  // Reset the shadow\n  &:active,\n  &.active {\n    .box-shadow(inset 0 3px 5px rgba(0,0,0,.125));\n  }\n\n  &.disabled,\n  &[disabled],\n  fieldset[disabled] & {\n    .box-shadow(none);\n  }\n\n  .badge {\n    text-shadow: none;\n  }\n}\n\n// Mixin for generating new styles\n.btn-styles(@btn-color: #555) {\n  #gradient > .vertical(@start-color: @btn-color; @end-color: darken(@btn-color, 12%!)(MISSING));\n  .reset-filter(); // Disable gradients for IE9 because filter bleeds through rounded corners; see https://github.com/twbs/bootstrap/issues/10620\n  background-repeat: repeat-x;\n  border-color: darken(@btn-color, 14%!)(MISSING);\n\n  &:hover,\n  &:focus  {\n    background-color: darken(@btn-color, 12%!)(MISSING);\n    background-position: 0 -15px;\n  }\n\n  &:active,\n  &.active {\n    background-color: darken(@btn-color, 12%!)(MISSING);\n    border-color: darken(@btn-color, 14%!)(MISSING);\n  }\n\n  &.disabled,\n  &[disabled],\n  fieldset[disabled] & {\n    &,\n    &:hover,\n    &:focus,\n    &.focus,\n    &:active,\n    &.active {\n      background-color: darken(@btn-color, 12%!)(MISSING);\n      background-image: none;\n    }\n  }\n}\n\n// Common styles\n.btn {\n  // Remove the gradient for the pressed/active state\n  &:active,\n  &.active {\n    background-image: none;\n  }\n}\n\n// Apply the mixin to the buttons\n.btn-default { .btn-styles(@btn-default-bg); text-shadow: 0 1px 0 #fff; border-color: #ccc; }\n.btn-primary { .btn-styles(@btn-primary-bg); }\n.btn-success { .btn-styles(@btn-success-bg); }\n.btn-info    { .btn-styles(@btn-info-bg); }\n.btn-warning { .btn-styles(@btn-warning-bg); }\n.btn-danger  { .btn-styles(@btn-danger-bg); }\n\n\n//\n// Images\n// --------------------------------------------------\n\n.thumbnail,\n.img-thumbnail {\n  .box-shadow(0 1px 2px rgba(0,0,0,.075));\n}\n\n\n//\n// Dropdowns\n// --------------------------------------------------\n\n.dropdown-menu > li > a:hover,\n.dropdown-menu > li > a:focus {\n  #gradient > .vertical(@start-color: @dropdown-link-hover-bg; @end-color: darken(@dropdown-link-hover-bg, 5%!)(MISSING));\n  background-color: darken(@dropdown-link-hover-bg, 5%!)(MISSING);\n}\n.dropdown-menu > .active > a,\n.dropdown-menu > .active > a:hover,\n.dropdown-menu > .active > a:focus {\n  #gradient > .vertical(@start-color: @dropdown-link-active-bg; @end-color: darken(@dropdown-link-active-bg, 5%!)(MISSING));\n  background-color: darken(@dropdown-link-active-bg, 5%!)(MISSING);\n}\n\n\n//\n// Navbar\n// --------------------------------------------------\n\n// Default navbar\n.navbar-default {\n  #gradient > .vertical(@start-color: lighten(@navbar-default-bg, 10%!)(MISSING); @end-color: @navbar-default-bg);\n  .reset-filter(); // Remove gradient in IE<10 to fix bug where dropdowns don't get triggered\n  border-radius: @navbar-border-radius;\n  @shadow: inset 0 1px 0 rgba(255,255,255,.15), 0 1px 5px rgba(0,0,0,.075);\n  .box-shadow(@shadow);\n\n  .navbar-nav > .open > a,\n  .navbar-nav > .active > a {\n    #gradient > .vertical(@start-color: darken(@navbar-default-link-active-bg, 5%!)(MISSING); @end-color: darken(@navbar-default-link-active-bg, 2%!)(MISSING));\n    .box-shadow(inset 0 3px 9px rgba(0,0,0,.075));\n  }\n}\n.navbar-brand,\n.navbar-nav > li > a {\n  text-shadow: 0 1px 0 rgba(255,255,255,.25);\n}\n\n// Inverted navbar\n.navbar-inverse {\n  #gradient > .vertical(@start-color: lighten(@navbar-inverse-bg, 10%!)(MISSING); @end-color: @navbar-inverse-bg);\n  .reset-filter(); // Remove gradient in IE<10 to fix bug where dropdowns don't get triggered; see https://github.com/twbs/bootstrap/issues/10257\n  border-radius: @navbar-border-radius;\n  .navbar-nav > .open > a,\n  .navbar-nav > .active > a {\n    #gradient > .vertical(@start-color: @navbar-inverse-link-active-bg; @end-color: lighten(@navbar-inverse-link-active-bg, 2.5%!)(MISSING));\n    .box-shadow(inset 0 3px 9px rgba(0,0,0,.25));\n  }\n\n  .navbar-brand,\n  .navbar-nav > li > a {\n    text-shadow: 0 -1px 0 rgba(0,0,0,.25);\n  }\n}\n\n// Undo rounded corners in static and fixed navbars\n.navbar-static-top,\n.navbar-fixed-top,\n.navbar-fixed-bottom {\n  border-radius: 0;\n}\n\n// Fix active state of dropdown items in collapsed mode\n@media (max-width: @grid-float-breakpoint-max) {\n  .navbar .navbar-nav .open .dropdown-menu > .active > a {\n    &,\n    &:hover,\n    &:focus {\n      color: #fff;\n      #gradient > .vertical(@start-color: @dropdown-link-active-bg; @end-color: darken(@dropdown-link-active-bg, 5%!)(MISSING));\n    }\n  }\n}\n\n\n//\n// Alerts\n// --------------------------------------------------\n\n// Common styles\n.alert {\n  text-shadow: 0 1px 0 rgba(255,255,255,.2);\n  @shadow: inset 0 1px 0 rgba(255,255,255,.25), 0 1px 2px rgba(0,0,0,.05);\n  .box-shadow(@shadow);\n}\n\n// Mixin for generating new styles\n.alert-styles(@color) {\n  #gradient > .vertical(@start-color: @color; @end-color: darken(@color, 7.5%!)(MISSING));\n  border-color: darken(@color, 15%!)(MISSING);\n}\n\n// Apply the mixin to the alerts\n.alert-success    { .alert-styles(@alert-success-bg); }\n.alert-info       { .alert-styles(@alert-info-bg); }\n.alert-warning    { .alert-styles(@alert-warning-bg); }\n.alert-danger     { .alert-styles(@alert-danger-bg); }\n\n\n//\n// Progress bars\n// --------------------------------------------------\n\n// Give the progress background some depth\n.progress {\n  #gradient > .vertical(@start-color: darken(@progress-bg, 4%!)(MISSING); @end-color: @progress-bg)\n}\n\n// Mixin for generating new styles\n.progress-bar-styles(@color) {\n  #gradient > .vertical(@start-color: @color; @end-color: darken(@color, 10%!)(MISSING));\n}\n\n// Apply the mixin to the progress bars\n.progress-bar            { .progress-bar-styles(@progress-bar-bg); }\n.progress-bar-success    { .progress-bar-styles(@progress-bar-success-bg); }\n.progress-bar-info       { .progress-bar-styles(@progress-bar-info-bg); }\n.progress-bar-warning    { .progress-bar-styles(@progress-bar-warning-bg); }\n.progress-bar-danger     { .progress-bar-styles(@progress-bar-danger-bg); }\n\n// Reset the striped class because our mixins don't do multiple gradients and\n// the above custom styles override the new `.progress-bar-striped` in v3.2.0.\n.progress-bar-striped {\n  #gradient > .striped();\n}\n\n\n//\n// List groups\n// --------------------------------------------------\n\n.list-group {\n  border-radius: @border-radius-base;\n  .box-shadow(0 1px 2px rgba(0,0,0,.075));\n}\n.list-group-item.active,\n.list-group-item.active:hover,\n.list-group-item.active:focus {\n  text-shadow: 0 -1px 0 darken(@list-group-active-bg, 10%!)(MISSING);\n  #gradient > .vertical(@start-color: @list-group-active-bg; @end-color: darken(@list-group-active-bg, 7.5%!)(MISSING));\n  border-color: darken(@list-group-active-border, 7.5%!)(MISSING);\n\n  .badge {\n    text-shadow: none;\n  }\n}\n\n\n//\n// Panels\n// --------------------------------------------------\n\n// Common styles\n.panel {\n  .box-shadow(0 1px 2px rgba(0,0,0,.05));\n}\n\n// Mixin for generating new styles\n.panel-heading-styles(@color) {\n  #gradient > .vertical(@start-color: @color; @end-color: darken(@color, 5%!)(MISSING));\n}\n\n// Apply the mixin to the panel headings only\n.panel-default > .panel-heading   { .panel-heading-styles(@panel-default-heading-bg); }\n.panel-primary > .panel-heading   { .panel-heading-styles(@panel-primary-heading-bg); }\n.panel-success > .panel-heading   { .panel-heading-styles(@panel-success-heading-bg); }\n.panel-info > .panel-heading      { .panel-heading-styles(@panel-info-heading-bg); }\n.panel-warning > .panel-heading   { .panel-heading-styles(@panel-warning-heading-bg); }\n.panel-danger > .panel-heading    { .panel-heading-styles(@panel-danger-heading-bg); }\n\n\n//\n// Wells\n// --------------------------------------------------\n\n.well {\n  #gradient > .vertical(@start-color: darken(@well-bg, 5%!)(MISSING); @end-color: @well-bg);\n  border-color: darken(@well-bg, 10%!)(MISSING);\n  @shadow: inset 0 1px 3px rgba(0,0,0,.05), 0 1px 0 rgba(255,255,255,.1);\n  .box-shadow(@shadow);\n}\n","// Vendor Prefixes\n//\n// All vendor mixins are deprecated as of v3.2.0 due to the introduction of\n// Autoprefixer in our Gruntfile. They have been removed in v4.\n\n// - Animations\n// - Backface visibility\n// - Box shadow\n// - Box sizing\n// - Content columns\n// - Hyphens\n// - Placeholder text\n// - Transformations\n// - Transitions\n// - User Select\n\n\n// Animations\n.animation(@animation) {\n  -webkit-animation: @animation;\n       -o-animation: @animation;\n          animation: @animation;\n}\n.animation-name(@name) {\n  -webkit-animation-name: @name;\n          animation-name: @name;\n}\n.animation-duration(@duration) {\n  -webkit-animation-duration: @duration;\n          animation-duration: @duration;\n}\n.animation-timing-function(@timing-function) {\n  -webkit-animation-timing-function: @timing-function;\n          animation-timing-function: @timing-function;\n}\n.animation-delay(@delay) {\n  -webkit-animation-delay: @delay;\n          animation-delay: @delay;\n}\n.animation-iteration-count(@iteration-count) {\n  -webkit-animation-iteration-count: @iteration-count;\n          animation-iteration-count: @iteration-count;\n}\n.animation-direction(@direction) {\n  -webkit-animation-direction: @direction;\n          animation-direction: @direction;\n}\n.animation-fill-mode(@fill-mode) {\n  -webkit-animation-fill-mode: @fill-mode;\n          animation-fill-mode: @fill-mode;\n}\n\n// Backface visibility\n// Prevent browsers from flickering when using CSS 3D transforms.\n// Default value is `visible`, but can be changed to `hidden`\n\n.backface-visibility(@visibility) {\n  -webkit-backface-visibility: @visibility;\n     -moz-backface-visibility: @visibility;\n          backface-visibility: @visibility;\n}\n\n// Drop shadows\n//\n// Note: Deprecated `.box-shadow()` as of v3.1.0 since all of Bootstrap's\n// supported browsers that have box shadow capabilities now support it.\n\n.box-shadow(@shadow) {\n  -webkit-box-shadow: @shadow; // iOS <4.3 & Android <4.1\n          box-shadow: @shadow;\n}\n\n// Box sizing\n.box-sizing(@boxmodel) {\n  -webkit-box-sizing: @boxmodel;\n     -moz-box-sizing: @boxmodel;\n          box-sizing: @boxmodel;\n}\n\n// CSS3 Content Columns\n.content-columns(@column-count; @column-gap: @grid-gutter-width) {\n  -webkit-column-count: @column-count;\n     -moz-column-count: @column-count;\n          column-count: @column-count;\n  -webkit-column-gap: @column-gap;\n     -moz-column-gap: @column-gap;\n          column-gap: @column-gap;\n}\n\n// Optional hyphenation\n.hyphens(@mode: auto) {\n  word-wrap: break-word;\n  -webkit-hyphens: @mode;\n     -moz-hyphens: @mode;\n      -ms-hyphens: @mode; // IE10+\n       -o-hyphens: @mode;\n          hyphens: @mode;\n}\n\n// Placeholder text\n.placeholder(@color: @input-color-placeholder) {\n  // Firefox\n  &::-moz-placeholder {\n    color: @color;\n    opacity: 1; // Override Firefox's unusual default opacity; see https://github.com/twbs/bootstrap/pull/11526\n  }\n  &:-ms-input-placeholder { color: @color; } // Internet Explorer 10+\n  &::-webkit-input-placeholder  { color: @color; } // Safari and Chrome\n}\n\n// Transformations\n.scale(@ratio) {\n  -webkit-transform: scale(@ratio);\n      -ms-transform: scale(@ratio); // IE9 only\n       -o-transform: scale(@ratio);\n          transform: scale(@ratio);\n}\n.scale(@ratioX; @ratioY) {\n  -webkit-transform: scale(@ratioX, @ratioY);\n      -ms-transform: scale(@ratioX, @ratioY); // IE9 only\n       -o-transform: scale(@ratioX, @ratioY);\n          transform: scale(@ratioX, @ratioY);\n}\n.scaleX(@ratio) {\n  -webkit-transform: scaleX(@ratio);\n      -ms-transform: scaleX(@ratio); // IE9 only\n       -o-transform: scaleX(@ratio);\n          transform: scaleX(@ratio);\n}\n.scaleY(@ratio) {\n  -webkit-transform: scaleY(@ratio);\n      -ms-transform: scaleY(@ratio); // IE9 only\n       -o-transform: scaleY(@ratio);\n          transform: scaleY(@ratio);\n}\n.skew(@x; @y) {\n  -webkit-transform: skewX(@x) skewY(@y);\n      -ms-transform: skewX(@x) skewY(@y); // See https://github.com/twbs/bootstrap/issues/4885; IE9+\n       -o-transform: skewX(@x) skewY(@y);\n          transform: skewX(@x) skewY(@y);\n}\n.translate(@x; @y) {\n  -webkit-transform: translate(@x, @y);\n      -ms-transform: translate(@x, @y); // IE9 only\n       -o-transform: translate(@x, @y);\n          transform: translate(@x, @y);\n}\n.translate3d(@x; @y; @z) {\n  -webkit-transform: translate3d(@x, @y, @z);\n          transform: translate3d(@x, @y, @z);\n}\n.rotate(@degrees) {\n  -webkit-transform: rotate(@degrees);\n      -ms-transform: rotate(@degrees); // IE9 only\n       -o-transform: rotate(@degrees);\n          transform: rotate(@degrees);\n}\n.rotateX(@degrees) {\n  -webkit-transform: rotateX(@degrees);\n      -ms-transform: rotateX(@degrees); // IE9 only\n       -o-transform: rotateX(@degrees);\n          transform: rotateX(@degrees);\n}\n.rotateY(@degrees) {\n  -webkit-transform: rotateY(@degrees);\n      -ms-transform: rotateY(@degrees); // IE9 only\n       -o-transform: rotateY(@degrees);\n          transform: rotateY(@degrees);\n}\n.perspective(@perspective) {\n  -webkit-perspective: @perspective;\n     -moz-perspective: @perspective;\n          perspective: @perspective;\n}\n.perspective-origin(@perspective) {\n  -webkit-perspective-origin: @perspective;\n     -moz-perspective-origin: @perspective;\n          perspective-origin: @perspective;\n}\n.transform-origin(@origin) {\n  -webkit-transform-origin: @origin;\n     -moz-transform-origin: @origin;\n      -ms-transform-origin: @origin; // IE9 only\n          transform-origin: @origin;\n}\n\n\n// Transitions\n\n.transition(@transition) {\n  -webkit-transition: @transition;\n       -o-transition: @transition;\n          transition: @transition;\n}\n.transition-property(@transition-property) {\n  -webkit-transition-property: @transition-property;\n          transition-property: @transition-property;\n}\n.transition-delay(@transition-delay) {\n  -webkit-transition-delay: @transition-delay;\n          transition-delay: @transition-delay;\n}\n.transition-duration(@transition-duration) {\n  -webkit-transition-duration: @transition-duration;\n          transition-duration: @transition-duration;\n}\n.transition-timing-function(@timing-function) {\n  -webkit-transition-timing-function: @timing-function;\n          transition-timing-function: @timing-function;\n}\n.transition-transform(@transition) {\n  -webkit-transition: -webkit-transform @transition;\n     -moz-transition: -moz-transform @transition;\n       -o-transition: -o-transform @transition;\n          transition: transform @transition;\n}\n\n\n// User select\n// For selecting text on the page\n\n.user-select(@select) {\n  -webkit-user-select: @select;\n     -moz-user-select: @select;\n      -ms-user-select: @select; // IE10+\n          user-select: @select;\n}\n","// Gradients\n\n#gradient {\n\n  // Horizontal gradient, from left to right\n  //\n  // Creates two color stops, start and end, by specifying a color and position for each color stop.\n  // Color stops are not available in IE9 and below.\n  .horizontal(@start-color: #555; @end-color: #333; @start-percent: 0%!;(MISSING) @end-percent: 100%!)(MISSING) {\n    background-image: -webkit-linear-gradient(left, @start-color @start-percent, @end-color @end-percent); // Safari 5.1-6, Chrome 10+\n    background-image: -o-linear-gradient(left, @start-color @start-percent, @end-color @end-percent); // Opera 12\n    background-image: linear-gradient(to right, @start-color @start-percent, @end-color @end-percent); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+\n    background-repeat: repeat-x;\n    filter: e(%!((MISSING)\"progid:DXImageTransform.Microsoft.gradient(startColorstr='%!d(MISSING)', endColorstr='%!d(MISSING)', GradientType=1)\",argb(@start-color),argb(@end-color))); // IE9 and down\n  }\n\n  // Vertical gradient, from top to bottom\n  //\n  // Creates two color stops, start and end, by specifying a color and position for each color stop.\n  // Color stops are not available in IE9 and below.\n  .vertical(@start-color: #555; @end-color: #333; @start-percent: 0%!;(MISSING) @end-percent: 100%!)(MISSING) {\n    background-image: -webkit-linear-gradient(top, @start-color @start-percent, @end-color @end-percent);  // Safari 5.1-6, Chrome 10+\n    background-image: -o-linear-gradient(top, @start-color @start-percent, @end-color @end-percent);  // Opera 12\n    background-image: linear-gradient(to bottom, @start-color @start-percent, @end-color @end-percent); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+\n    background-repeat: repeat-x;\n    filter: e(%!((MISSING)\"progid:DXImageTransform.Microsoft.gradient(startColorstr='%!d(MISSING)', endColorstr='%!d(MISSING)', GradientType=0)\",argb(@start-color),argb(@end-color))); // IE9 and down\n  }\n\n  .directional(@start-color: #555; @end-color: #333; @deg: 45deg) {\n    background-repeat: repeat-x;\n    background-image: -webkit-linear-gradient(@deg, @start-color, @end-color); // Safari 5.1-6, Chrome 10+\n    background-image: -o-linear-gradient(@deg, @start-color, @end-color); // Opera 12\n    background-image: linear-gradient(@deg, @start-color, @end-color); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+\n  }\n  .horizontal-three-colors(@start-color: #00b3ee; @mid-color: #7a43b6; @color-stop: 50%!;(MISSING) @end-color: #c3325f) {\n    background-image: -webkit-linear-gradient(left, @start-color, @mid-color @color-stop, @end-color);\n    background-image: -o-linear-gradient(left, @start-color, @mid-color @color-stop, @end-color);\n    background-image: linear-gradient(to right, @start-color, @mid-color @color-stop, @end-color);\n    background-repeat: no-repeat;\n    filter: e(%!((MISSING)\"progid:DXImageTransform.Microsoft.gradient(startColorstr='%!d(MISSING)', endColorstr='%!d(MISSING)', GradientType=1)\",argb(@start-color),argb(@end-color))); // IE9 and down, gets no color-stop at all for proper fallback\n  }\n  .vertical-three-colors(@start-color: #00b3ee; @mid-color: #7a43b6; @color-stop: 50%!;(MISSING) @end-color: #c3325f) {\n    background-image: -webkit-linear-gradient(@start-color, @mid-color @color-stop, @end-color);\n    background-image: -o-linear-gradient(@start-color, @mid-color @color-stop, @end-color);\n    background-image: linear-gradient(@start-color, @mid-color @color-stop, @end-color);\n    background-repeat: no-repeat;\n    filter: e(%!((MISSING)\"progid:DXImageTransform.Microsoft.gradient(startColorstr='%!d(MISSING)', endColorstr='%!d(MISSING)', GradientType=0)\",argb(@start-color),argb(@end-color))); // IE9 and down, gets no color-stop at all for proper fallback\n  }\n  .radial(@inner-color: #555; @outer-color: #333) {\n    background-image: -webkit-radial-gradient(circle, @inner-color, @outer-color);\n    background-image: radial-gradient(circle, @inner-color, @outer-color);\n    background-repeat: no-repeat;\n  }\n  .striped(@color: rgba(255,255,255,.15); @angle: 45deg) {\n    background-image: -webkit-linear-gradient(@angle, @color 25%!,(MISSING) transparent 25%!,(MISSING) transparent 50%!,(MISSING) @color 50%!,(MISSING) @color 75%!,(MISSING) transparent 75%!,(MISSING) transparent);\n    background-image: -o-linear-gradient(@angle, @color 25%!,(MISSING) transparent 25%!,(MISSING) transparent 50%!,(MISSING) @color 50%!,(MISSING) @color 75%!,(MISSING) transparent 75%!,(MISSING) transparent);\n    background-image: linear-gradient(@angle, @color 25%!,(MISSING) transparent 25%!,(MISSING) transparent 50%!,(MISSING) @color 50%!,(MISSING) @color 75%!,(MISSING) transparent 75%!,(MISSING) transparent);\n  }\n}\n","// Reset filters for IE\n//\n// When you need to remove a gradient background, do not forget to use this to reset\n// the IE filter for IE9 and below.\n\n.reset-filter() {\n  filter: e(%!((MISSING)\"progid:DXImageTransform.Microsoft.gradient(enabled = false)\"));\n}\n"]}
/*!
 * Bootstrap v3.3.6 (http://getbootstrap.com)
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 */.btn-danger,.btn-default,.btn-info,.btn-primary,.btn-success,.btn-warning{text-shadow:0 -1px 0 rgba(0,0,0,.2);-webkit-box-shadow:inset 0 1px 0 rgba(255,255,255,.15),0 1px 1px rgba(0,0,0,.075);box-shadow:inset 0 1px 0 rgba(255,255,255,.15),0 1px 1px rgba(0,0,0,.075)}.btn-danger.active,.btn-danger:active,.btn-default.active,.btn-default:active,.btn-info.active,.btn-info:active,.btn-primary.active,.btn-primary:active,.btn-success.active,.btn-success:active,.btn-warning.active,.btn-warning:active{-webkit-box-shadow:inset 0 3px 5px rgba(0,0,0,.125);box-shadow:inset 0 3px 5px rgba(0,0,0,.125)}.btn-danger.disabled,.btn-danger[disabled],.btn-default.disabled,.btn-default[disabled],.btn-info.disabled,.btn-info[disabled],.btn-primary.disabled,.btn-primary[disabled],.btn-success.disabled,.btn-success[disabled],.btn-warning.disabled,.btn-warning[disabled],fieldset[disabled] .btn-danger,fieldset[disabled] .btn-default,fieldset[disabled] .btn-info,fieldset[disabled] .btn-primary,fieldset[disabled] .btn-success,fieldset[disabled] .btn-warning{-webkit-box-shadow:none;box-shadow:none}.btn-danger .badge,.btn-default .badge,.btn-info .badge,.btn-primary .badge,.btn-success .badge,.btn-warning .badge{text-shadow:none}.btn.active,.btn:active{background-image:none}.btn-default{text-shadow:0 1px 0 #fff;background-image:-webkit-linear-gradient(top,#fff 0,#e0e0e0 100%!)(MISSING);background-image:-o-linear-gradient(top,#fff 0,#e0e0e0 100%!)(MISSING);background-image:-webkit-gradient(linear,left top,left bottom,from(#fff),to(#e0e0e0));background-image:linear-gradient(to bottom,#fff 0,#e0e0e0 100%!)(MISSING);filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffffffff', endColorstr='#ffe0e0e0', GradientType=0);filter:progid:DXImageTransform.Microsoft.gradient(enabled=false);background-repeat:repeat-x;border-color:#dbdbdb;border-color:#ccc}.btn-default:focus,.btn-default:hover{background-color:#e0e0e0;background-position:0 -15px}.btn-default.active,.btn-default:active{background-color:#e0e0e0;border-color:#dbdbdb}.btn-default.disabled,.btn-default.disabled.active,.btn-default.disabled.focus,.btn-default.disabled:active,.btn-default.disabled:focus,.btn-default.disabled:hover,.btn-default[disabled],.btn-default[disabled].active,.btn-default[disabled].focus,.btn-default[disabled]:active,.btn-default[disabled]:focus,.btn-default[disabled]:hover,fieldset[disabled] .btn-default,fieldset[disabled] .btn-default.active,fieldset[disabled] .btn-default.focus,fieldset[disabled] .btn-default:active,fieldset[disabled] .btn-default:focus,fieldset[disabled] .btn-default:hover{background-color:#e0e0e0;background-image:none}.btn-primary{background-image:-webkit-linear-gradient(top,#337ab7 0,#265a88 100%!)(MISSING);background-image:-o-linear-gradient(top,#337ab7 0,#265a88 100%!)(MISSING);background-image:-webkit-gradient(linear,left top,left bottom,from(#337ab7),to(#265a88));background-image:linear-gradient(to bottom,#337ab7 0,#265a88 100%!)(MISSING);filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff337ab7', endColorstr='#ff265a88', GradientType=0);filter:progid:DXImageTransform.Microsoft.gradient(enabled=false);background-repeat:repeat-x;border-color:#245580}.btn-primary:focus,.btn-primary:hover{background-color:#265a88;background-position:0 -15px}.btn-primary.active,.btn-primary:active{background-color:#265a88;border-color:#245580}.btn-primary.disabled,.btn-primary.disabled.active,.btn-primary.disabled.focus,.btn-primary.disabled:active,.btn-primary.disabled:focus,.btn-primary.disabled:hover,.btn-primary[disabled],.btn-primary[disabled].active,.btn-primary[disabled].focus,.btn-primary[disabled]:active,.btn-primary[disabled]:focus,.btn-primary[disabled]:hover,fieldset[disabled] .btn-primary,fieldset[disabled] .btn-primary.active,fieldset[disabled] .btn-primary.focus,fieldset[disabled] .btn-primary:active,fieldset[disabled] .btn-primary:focus,fieldset[disabled] .btn-primary:hover{background-color:#265a88;background-image:none}.btn-success{background-image:-webkit-linear-gradient(top,#5cb85c 0,#419641 100%!)(MISSING);background-image:-o-linear-gradient(top,#5cb85c 0,#419641 100%!)(MISSING);background-image:-webkit-gradient(linear,left top,left bottom,from(#5cb85c),to(#419641));background-image:linear-gradient(to bottom,#5cb85c 0,#419641 100%!)(MISSING);filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff5cb85c', endColorstr='#ff419641', GradientType=0);filter:progid:DXImageTransform.Microsoft.gradient(enabled=false);background-repeat:repeat-x;border-color:#3e8f3e}.btn-success:focus,.btn-success:hover{background-color:#419641;background-position:0 -15px}.btn-success.active,.btn-success:active{background-color:#419641;border-color:#3e8f3e}.btn-success.disabled,.btn-success.disabled.active,.btn-success.disabled.focus,.btn-success.disabled:active,.btn-success.disabled:focus,.btn-success.disabled:hover,.btn-success[disabled],.btn-success[disabled].active,.btn-success[disabled].focus,.btn-success[disabled]:active,.btn-success[disabled]:focus,.btn-success[disabled]:hover,fieldset[disabled] .btn-success,fieldset[disabled] .btn-success.active,fieldset[disabled] .btn-success.focus,fieldset[disabled] .btn-success:active,fieldset[disabled] .btn-success:focus,fieldset[disabled] .btn-success:hover{background-color:#419641;background-image:none}.btn-info{background-image:-webkit-linear-gradient(top,#5bc0de 0,#2aabd2 100%!)(MISSING);background-image:-o-linear-gradient(top,#5bc0de 0,#2aabd2 100%!)(MISSING);background-image:-webkit-gradient(linear,left top,left bottom,from(#5bc0de),to(#2aabd2));background-image:linear-gradient(to bottom,#5bc0de 0,#2aabd2 100%!)(MISSING);filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff5bc0de', endColorstr='#ff2aabd2', GradientType=0);filter:progid:DXImageTransform.Microsoft.gradient(enabled=false);background-repeat:repeat-x;border-color:#28a4c9}.btn-info:focus,.btn-info:hover{background-color:#2aabd2;background-position:0 -15px}.btn-info.active,.btn-info:active{background-color:#2aabd2;border-color:#28a4c9}.btn-info.disabled,.btn-info.disabled.active,.btn-info.disabled.focus,.btn-info.disabled:active,.btn-info.disabled:focus,.btn-info.disabled:hover,.btn-info[disabled],.btn-info[disabled].active,.btn-info[disabled].focus,.btn-info[disabled]:active,.btn-info[disabled]:focus,.btn-info[disabled]:hover,fieldset[disabled] .btn-info,fieldset[disabled] .btn-info.active,fieldset[disabled] .btn-info.focus,fieldset[disabled] .btn-info:active,fieldset[disabled] .btn-info:focus,fieldset[disabled] .btn-info:hover{background-color:#2aabd2;background-image:none}.btn-warning{background-image:-webkit-linear-gradient(top,#f0ad4e 0,#eb9316 100%!)(MISSING);background-image:-o-linear-gradient(top,#f0ad4e 0,#eb9316 100%!)(MISSING);background-image:-webkit-gradient(linear,left top,left bottom,from(#f0ad4e),to(#eb9316));background-image:linear-gradient(to bottom,#f0ad4e 0,#eb9316 100%!)(MISSING);filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#fff0ad4e', endColorstr='#ffeb9316', GradientType=0);filter:progid:DXImageTransform.Microsoft.gradient(enabled=false);background-repeat:repeat-x;border-color:#e38d13}.btn-warning:focus,.btn-warning:hover{background-color:#eb9316;background-position:0 -15px}.btn-warning.active,.btn-warning:active{background-color:#eb9316;border-color:#e38d13}.btn-warning.disabled,.btn-warning.disabled.active,.btn-warning.disabled.focus,.btn-warning.disabled:active,.btn-warning.disabled:focus,.btn-warning.disabled:hover,.btn-warning[disabled],.btn-warning[disabled].active,.btn-warning[disabled].focus,.btn-warning[disabled]:active,.btn-warning[disabled]:focus,.btn-warning[disabled]:hover,fieldset[disabled] .btn-warning,fieldset[disabled] .btn-warning.active,fieldset[disabled] .btn-warning.focus,fieldset[disabled] .btn-warning:active,fieldset[disabled] .btn-warning:focus,fieldset[disabled] .btn-warning:hover{background-color:#eb9316;background-image:none}.btn-danger{background-image:-webkit-linear-gradient(top,#d9534f 0,#c12e2a 100%!)(MISSING);background-image:-o-linear-gradient(top,#d9534f 0,#c12e2a 100%!)(MISSING);background-image:-webkit-gradient(linear,left top,left bottom,from(#d9534f),to(#c12e2a));background-image:linear-gradient(to bottom,#d9534f 0,#c12e2a 100%!)(MISSING);filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffd9534f', endColorstr='#ffc12e2a', GradientType=0);filter:progid:DXImageTransform.Microsoft.gradient(enabled=false);background-repeat:repeat-x;border-color:#b92c28}.btn-danger:focus,.btn-danger:hover{background-color:#c12e2a;background-position:0 -15px}.btn-danger.active,.btn-danger:active{background-color:#c12e2a;border-color:#b92c28}.btn-danger.disabled,.btn-danger.disabled.active,.btn-danger.disabled.focus,.btn-danger.disabled:active,.btn-danger.disabled:focus,.btn-danger.disabled:hover,.btn-danger[disabled],.btn-danger[disabled].active,.btn-danger[disabled].focus,.btn-danger[disabled]:active,.btn-danger[disabled]:focus,.btn-danger[disabled]:hover,fieldset[disabled] .btn-danger,fieldset[disabled] .btn-danger.active,fieldset[disabled] .btn-danger.focus,fieldset[disabled] .btn-danger:active,fieldset[disabled] .btn-danger:focus,fieldset[disabled] .btn-danger:hover{background-color:#c12e2a;background-image:none}.img-thumbnail,.thumbnail{-webkit-box-shadow:0 1px 2px rgba(0,0,0,.075);box-shadow:0 1px 2px rgba(0,0,0,.075)}.dropdown-menu>li>a:focus,.dropdown-menu>li>a:hover{background-color:#e8e8e8;background-image:-webkit-linear-gradient(top,#f5f5f5 0,#e8e8e8 100%!)(MISSING);background-image:-o-linear-gradient(top,#f5f5f5 0,#e8e8e8 100%!)(MISSING);background-image:-webkit-gradient(linear,left top,left bottom,from(#f5f5f5),to(#e8e8e8));background-image:linear-gradient(to bottom,#f5f5f5 0,#e8e8e8 100%!)(MISSING);filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#fff5f5f5', endColorstr='#ffe8e8e8', GradientType=0);background-repeat:repeat-x}.dropdown-menu>.active>a,.dropdown-menu>.active>a:focus,.dropdown-menu>.active>a:hover{background-color:#2e6da4;background-image:-webkit-linear-gradient(top,#337ab7 0,#2e6da4 100%!)(MISSING);background-image:-o-linear-gradient(top,#337ab7 0,#2e6da4 100%!)(MISSING);background-image:-webkit-gradient(linear,left top,left bottom,from(#337ab7),to(#2e6da4));background-image:linear-gradient(to bottom,#337ab7 0,#2e6da4 100%!)(MISSING);filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff337ab7', endColorstr='#ff2e6da4', GradientType=0);background-repeat:repeat-x}.navbar-default{background-image:-webkit-linear-gradient(top,#fff 0,#f8f8f8 100%!)(MISSING);background-image:-o-linear-gradient(top,#fff 0,#f8f8f8 100%!)(MISSING);background-image:-webkit-gradient(linear,left top,left bottom,from(#fff),to(#f8f8f8));background-image:linear-gradient(to bottom,#fff 0,#f8f8f8 100%!)(MISSING);filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffffffff', endColorstr='#fff8f8f8', GradientType=0);filter:progid:DXImageTransform.Microsoft.gradient(enabled=false);background-repeat:repeat-x;border-radius:4px;-webkit-box-shadow:inset 0 1px 0 rgba(255,255,255,.15),0 1px 5px rgba(0,0,0,.075);box-shadow:inset 0 1px 0 rgba(255,255,255,.15),0 1px 5px rgba(0,0,0,.075)}.navbar-default .navbar-nav>.active>a,.navbar-default .navbar-nav>.open>a{background-image:-webkit-linear-gradient(top,#dbdbdb 0,#e2e2e2 100%!)(MISSING);background-image:-o-linear-gradient(top,#dbdbdb 0,#e2e2e2 100%!)(MISSING);background-image:-webkit-gradient(linear,left top,left bottom,from(#dbdbdb),to(#e2e2e2));background-image:linear-gradient(to bottom,#dbdbdb 0,#e2e2e2 100%!)(MISSING);filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffdbdbdb', endColorstr='#ffe2e2e2', GradientType=0);background-repeat:repeat-x;-webkit-box-shadow:inset 0 3px 9px rgba(0,0,0,.075);box-shadow:inset 0 3px 9px rgba(0,0,0,.075)}.navbar-brand,.navbar-nav>li>a{text-shadow:0 1px 0 rgba(255,255,255,.25)}.navbar-inverse{background-image:-webkit-linear-gradient(top,#3c3c3c 0,#222 100%!)(MISSING);background-image:-o-linear-gradient(top,#3c3c3c 0,#222 100%!)(MISSING);background-image:-webkit-gradient(linear,left top,left bottom,from(#3c3c3c),to(#222));background-image:linear-gradient(to bottom,#3c3c3c 0,#222 100%!)(MISSING);filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff3c3c3c', endColorstr='#ff222222', GradientType=0);filter:progid:DXImageTransform.Microsoft.gradient(enabled=false);background-repeat:repeat-x;border-radius:4px}.navbar-inverse .navbar-nav>.active>a,.navbar-inverse .navbar-nav>.open>a{background-image:-webkit-linear-gradient(top,#080808 0,#0f0f0f 100%!)(MISSING);background-image:-o-linear-gradient(top,#080808 0,#0f0f0f 100%!)(MISSING);background-image:-webkit-gradient(linear,left top,left bottom,from(#080808),to(#0f0f0f));background-image:linear-gradient(to bottom,#080808 0,#0f0f0f 100%!)(MISSING);filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff080808', endColorstr='#ff0f0f0f', GradientType=0);background-repeat:repeat-x;-webkit-box-shadow:inset 0 3px 9px rgba(0,0,0,.25);box-shadow:inset 0 3px 9px rgba(0,0,0,.25)}.navbar-inverse .navbar-brand,.navbar-inverse .navbar-nav>li>a{text-shadow:0 -1px 0 rgba(0,0,0,.25)}.navbar-fixed-bottom,.navbar-fixed-top,.navbar-static-top{border-radius:0}@media (max-width:767px){.navbar .navbar-nav .open .dropdown-menu>.active>a,.navbar .navbar-nav .open .dropdown-menu>.active>a:focus,.navbar .navbar-nav .open .dropdown-menu>.active>a:hover{color:#fff;background-image:-webkit-linear-gradient(top,#337ab7 0,#2e6da4 100%!)(MISSING);background-image:-o-linear-gradient(top,#337ab7 0,#2e6da4 100%!)(MISSING);background-image:-webkit-gradient(linear,left top,left bottom,from(#337ab7),to(#2e6da4));background-image:linear-gradient(to bottom,#337ab7 0,#2e6da4 100%!)(MISSING);filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff337ab7', endColorstr='#ff2e6da4', GradientType=0);background-repeat:repeat-x}}.alert{text-shadow:0 1px 0 rgba(255,255,255,.2);-webkit-box-shadow:inset 0 1px 0 rgba(255,255,255,.25),0 1px 2px rgba(0,0,0,.05);box-shadow:inset 0 1px 0 rgba(255,255,255,.25),0 1px 2px rgba(0,0,0,.05)}.alert-success{background-image:-webkit-linear-gradient(top,#dff0d8 0,#c8e5bc 100%!)(MISSING);background-image:-o-linear-gradient(top,#dff0d8 0,#c8e5bc 100%!)(MISSING);background-image:-webkit-gradient(linear,left top,left bottom,from(#dff0d8),to(#c8e5bc));background-image:linear-gradient(to bottom,#dff0d8 0,#c8e5bc 100%!)(MISSING);filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffdff0d8', endColorstr='#ffc8e5bc', GradientType=0);background-repeat:repeat-x;border-color:#b2dba1}.alert-info{background-image:-webkit-linear-gradient(top,#d9edf7 0,#b9def0 100%!)(MISSING);background-image:-o-linear-gradient(top,#d9edf7 0,#b9def0 100%!)(MISSING);background-image:-webkit-gradient(linear,left top,left bottom,from(#d9edf7),to(#b9def0));background-image:linear-gradient(to bottom,#d9edf7 0,#b9def0 100%!)(MISSING);filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffd9edf7', endColorstr='#ffb9def0', GradientType=0);background-repeat:repeat-x;border-color:#9acfea}.alert-warning{background-image:-webkit-linear-gradient(top,#fcf8e3 0,#f8efc0 100%!)(MISSING);background-image:-o-linear-gradient(top,#fcf8e3 0,#f8efc0 100%!)(MISSING);background-image:-webkit-gradient(linear,left top,left bottom,from(#fcf8e3),to(#f8efc0));background-image:linear-gradient(to bottom,#fcf8e3 0,#f8efc0 100%!)(MISSING);filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#fffcf8e3', endColorstr='#fff8efc0', GradientType=0);background-repeat:repeat-x;border-color:#f5e79e}.alert-danger{background-image:-webkit-linear-gradient(top,#f2dede 0,#e7c3c3 100%!)(MISSING);background-image:-o-linear-gradient(top,#f2dede 0,#e7c3c3 100%!)(MISSING);background-image:-webkit-gradient(linear,left top,left bottom,from(#f2dede),to(#e7c3c3));background-image:linear-gradient(to bottom,#f2dede 0,#e7c3c3 100%!)(MISSING);filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#fff2dede', endColorstr='#ffe7c3c3', GradientType=0);background-repeat:repeat-x;border-color:#dca7a7}.progress{background-image:-webkit-linear-gradient(top,#ebebeb 0,#f5f5f5 100%!)(MISSING);background-image:-o-linear-gradient(top,#ebebeb 0,#f5f5f5 100%!)(MISSING);background-image:-webkit-gradient(linear,left top,left bottom,from(#ebebeb),to(#f5f5f5));background-image:linear-gradient(to bottom,#ebebeb 0,#f5f5f5 100%!)(MISSING);filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffebebeb', endColorstr='#fff5f5f5', GradientType=0);background-repeat:repeat-x}.progress-bar{background-image:-webkit-linear-gradient(top,#337ab7 0,#286090 100%!)(MISSING);background-image:-o-linear-gradient(top,#337ab7 0,#286090 100%!)(MISSING);background-image:-webkit-gradient(linear,left top,left bottom,from(#337ab7),to(#286090));background-image:linear-gradient(to bottom,#337ab7 0,#286090 100%!)(MISSING);filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff337ab7', endColorstr='#ff286090', GradientType=0);background-repeat:repeat-x}.progress-bar-success{background-image:-webkit-linear-gradient(top,#5cb85c 0,#449d44 100%!)(MISSING);background-image:-o-linear-gradient(top,#5cb85c 0,#449d44 100%!)(MISSING);background-image:-webkit-gradient(linear,left top,left bottom,from(#5cb85c),to(#449d44));background-image:linear-gradient(to bottom,#5cb85c 0,#449d44 100%!)(MISSING);filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff5cb85c', endColorstr='#ff449d44', GradientType=0);background-repeat:repeat-x}.progress-bar-info{background-image:-webkit-linear-gradient(top,#5bc0de 0,#31b0d5 100%!)(MISSING);background-image:-o-linear-gradient(top,#5bc0de 0,#31b0d5 100%!)(MISSING);background-image:-webkit-gradient(linear,left top,left bottom,from(#5bc0de),to(#31b0d5));background-image:linear-gradient(to bottom,#5bc0de 0,#31b0d5 100%!)(MISSING);filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff5bc0de', endColorstr='#ff31b0d5', GradientType=0);background-repeat:repeat-x}.progress-bar-warning{background-image:-webkit-linear-gradient(top,#f0ad4e 0,#ec971f 100%!)(MISSING);background-image:-o-linear-gradient(top,#f0ad4e 0,#ec971f 100%!)(MISSING);background-image:-webkit-gradient(linear,left top,left bottom,from(#f0ad4e),to(#ec971f));background-image:linear-gradient(to bottom,#f0ad4e 0,#ec971f 100%!)(MISSING);filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#fff0ad4e', endColorstr='#ffec971f', GradientType=0);background-repeat:repeat-x}.progress-bar-danger{background-image:-webkit-linear-gradient(top,#d9534f 0,#c9302c 100%!)(MISSING);background-image:-o-linear-gradient(top,#d9534f 0,#c9302c 100%!)(MISSING);background-image:-webkit-gradient(linear,left top,left bottom,from(#d9534f),to(#c9302c));background-image:linear-gradient(to bottom,#d9534f 0,#c9302c 100%!)(MISSING);filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffd9534f', endColorstr='#ffc9302c', GradientType=0);background-repeat:repeat-x}.progress-bar-striped{background-image:-webkit-linear-gradient(45deg,rgba(255,255,255,.15) 25%!,(MISSING)transparent 25%!,(MISSING)transparent 50%!,(MISSING)rgba(255,255,255,.15) 50%!,(MISSING)rgba(255,255,255,.15) 75%!,(MISSING)transparent 75%!,(MISSING)transparent);background-image:-o-linear-gradient(45deg,rgba(255,255,255,.15) 25%!,(MISSING)transparent 25%!,(MISSING)transparent 50%!,(MISSING)rgba(255,255,255,.15) 50%!,(MISSING)rgba(255,255,255,.15) 75%!,(MISSING)transparent 75%!,(MISSING)transparent);background-image:linear-gradient(45deg,rgba(255,255,255,.15) 25%!,(MISSING)transparent 25%!,(MISSING)transparent 50%!,(MISSING)rgba(255,255,255,.15) 50%!,(MISSING)rgba(255,255,255,.15) 75%!,(MISSING)transparent 75%!,(MISSING)transparent)}.list-group{border-radius:4px;-webkit-box-shadow:0 1px 2px rgba(0,0,0,.075);box-shadow:0 1px 2px rgba(0,0,0,.075)}.list-group-item.active,.list-group-item.active:focus,.list-group-item.active:hover{text-shadow:0 -1px 0 #286090;background-image:-webkit-linear-gradient(top,#337ab7 0,#2b669a 100%!)(MISSING);background-image:-o-linear-gradient(top,#337ab7 0,#2b669a 100%!)(MISSING);background-image:-webkit-gradient(linear,left top,left bottom,from(#337ab7),to(#2b669a));background-image:linear-gradient(to bottom,#337ab7 0,#2b669a 100%!)(MISSING);filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff337ab7', endColorstr='#ff2b669a', GradientType=0);background-repeat:repeat-x;border-color:#2b669a}.list-group-item.active .badge,.list-group-item.active:focus .badge,.list-group-item.active:hover .badge{text-shadow:none}.panel{-webkit-box-shadow:0 1px 2px rgba(0,0,0,.05);box-shadow:0 1px 2px rgba(0,0,0,.05)}.panel-default>.panel-heading{background-image:-webkit-linear-gradient(top,#f5f5f5 0,#e8e8e8 100%!)(MISSING);background-image:-o-linear-gradient(top,#f5f5f5 0,#e8e8e8 100%!)(MISSING);background-image:-webkit-gradient(linear,left top,left bottom,from(#f5f5f5),to(#e8e8e8));background-image:linear-gradient(to bottom,#f5f5f5 0,#e8e8e8 100%!)(MISSING);filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#fff5f5f5', endColorstr='#ffe8e8e8', GradientType=0);background-repeat:repeat-x}.panel-primary>.panel-heading{background-image:-webkit-linear-gradient(top,#337ab7 0,#2e6da4 100%!)(MISSING);background-image:-o-linear-gradient(top,#337ab7 0,#2e6da4 100%!)(MISSING);background-image:-webkit-gradient(linear,left top,left bottom,from(#337ab7),to(#2e6da4));background-image:linear-gradient(to bottom,#337ab7 0,#2e6da4 100%!)(MISSING);filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff337ab7', endColorstr='#ff2e6da4', GradientType=0);background-repeat:repeat-x}.panel-success>.panel-heading{background-image:-webkit-linear-gradient(top,#dff0d8 0,#d0e9c6 100%!)(MISSING);background-image:-o-linear-gradient(top,#dff0d8 0,#d0e9c6 100%!)(MISSING);background-image:-webkit-gradient(linear,left top,left bottom,from(#dff0d8),to(#d0e9c6));background-image:linear-gradient(to bottom,#dff0d8 0,#d0e9c6 100%!)(MISSING);filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffdff0d8', endColorstr='#ffd0e9c6', GradientType=0);background-repeat:repeat-x}.panel-info>.panel-heading{background-image:-webkit-linear-gradient(top,#d9edf7 0,#c4e3f3 100%!)(MISSING);background-image:-o-linear-gradient(top,#d9edf7 0,#c4e3f3 100%!)(MISSING);background-image:-webkit-gradient(linear,left top,left bottom,from(#d9edf7),to(#c4e3f3));background-image:linear-gradient(to bottom,#d9edf7 0,#c4e3f3 100%!)(MISSING);filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffd9edf7', endColorstr='#ffc4e3f3', GradientType=0);background-repeat:repeat-x}.panel-warning>.panel-heading{background-image:-webkit-linear-gradient(top,#fcf8e3 0,#faf2cc 100%!)(MISSING);background-image:-o-linear-gradient(top,#fcf8e3 0,#faf2cc 100%!)(MISSING);background-image:-webkit-gradient(linear,left top,left bottom,from(#fcf8e3),to(#faf2cc));background-image:linear-gradient(to bottom,#fcf8e3 0,#faf2cc 100%!)(MISSING);filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#fffcf8e3', endColorstr='#fffaf2cc', GradientType=0);background-repeat:repeat-x}.panel-danger>.panel-heading{background-image:-webkit-linear-gradient(top,#f2dede 0,#ebcccc 100%!)(MISSING);background-image:-o-linear-gradient(top,#f2dede 0,#ebcccc 100%!)(MISSING);background-image:-webkit-gradient(linear,left top,left bottom,from(#f2dede),to(#ebcccc));background-image:linear-gradient(to bottom,#f2dede 0,#ebcccc 100%!)(MISSING);filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#fff2dede', endColorstr='#ffebcccc', GradientType=0);background-repeat:repeat-x}.well{background-image:-webkit-linear-gradient(top,#e8e8e8 0,#f5f5f5 100%!)(MISSING);background-image:-o-linear-gradient(top,#e8e8e8 0,#f5f5f5 100%!)(MISSING);background-image:-webkit-gradient(linear,left top,left bottom,from(#e8e8e8),to(#f5f5f5));background-image:linear-gradient(to bottom,#e8e8e8 0,#f5f5f5 100%!)(MISSING);filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffe8e8e8', endColorstr='#fff5f5f5', GradientType=0);background-repeat:repeat-x;border-color:#dcdcdc;-webkit-box-shadow:inset 0 1px 3px rgba(0,0,0,.05),0 1px 0 rgba(255,255,255,.1);box-shadow:inset 0 1px 3px rgba(0,0,0,.05),0 1px 0 rgba(255,255,255,.1)}
/*# sourceMappingURL=bootstrap-theme.min.css.map */
{"version":3,"sources":["less/theme.less","less/mixins/vendor-prefixes.less","less/mixins/gradients.less","less/mixins/reset-filter.less"],"names":[],"mappings":"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"}


{"version":3,"sources":["less/normalize.less","less/print.less","bootstrap.css","dist/css/bootstrap.css","less/glyphicons.less","less/scaffolding.less","less/mixins/vendor-prefixes.less","less/mixins/tab-focus.less","less/mixins/image.less","less/type.less","less/mixins/text-emphasis.less","less/mixins/background-variant.less","less/mixins/text-overflow.less","less/code.less","less/grid.less","less/mixins/grid.less","less/mixins/grid-framework.less","less/tables.less","less/mixins/table-row.less","less/forms.less","less/mixins/forms.less","less/buttons.less","less/mixins/buttons.less","less/mixins/opacity.less","less/component-animations.less","less/dropdowns.less","less/mixins/nav-divider.less","less/mixins/reset-filter.less","less/button-groups.less","less/mixins/border-radius.less","less/input-groups.less","less/navs.less","less/navbar.less","less/mixins/nav-vertical-align.less","less/utilities.less","less/breadcrumbs.less","less/pagination.less","less/mixins/pagination.less","less/pager.less","less/labels.less","less/mixins/labels.less","less/badges.less","less/jumbotron.less","less/thumbnails.less","less/alerts.less","less/mixins/alerts.less","less/progress-bars.less","less/mixins/gradients.less","less/mixins/progress-bar.less","less/media.less","less/list-group.less","less/mixins/list-group.less","less/panels.less","less/mixins/panels.less","less/responsive-embed.less","less/wells.less","less/close.less","less/modals.less","less/tooltip.less","less/mixins/reset-text.less","less/popovers.less","less/carousel.less","less/mixins/clearfix.less","less/mixins/center-block.less","less/mixins/hide-text.less","less/responsive-utilities.less","less/mixins/responsive-visibility.less"],"names":[],"mappings":"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DG,edkkDH,MAAA,aclkDG,edqkDH,MAAA,acrkDG,edwkDH,MAAA,IcxkDG,ed2kDH,MAAA,ac3kDG,ed8kDH,MAAA,ac9kDG,edilDH,MAAA,IcjlDG,edolDH,MAAA,ac/kDG,edklDH,MAAA,YcjmDG,edomDH,MAAA,KcpmDG,gBdumDH,KAAA,KcvmDG,gBd0mDH,KAAA,ac1mDG,gBd6mDH,KAAA,ac7mDG,edgnDH,KAAA,IchnDG,edmnDH,KAAA,acnnDG,edsnDH,KAAA,actnDG,edynDH,KAAA,IcznDG,ed4nDH,KAAA,ac5nDG,ed+nDH,KAAA,ac/nDG,edkoDH,KAAA,IcloDG,edqoDH,KAAA,achoDG,edmoDH,KAAA,YcpnDG,edunDH,KAAA,KcvnDG,kBd0nDH,YAAA,Kc1nDG,kBd6nDH,YAAA,ac7nDG,kBdgoDH,YAAA,achoDG,iBdmoDH,YAAA,IcnoDG,iBdsoDH,YAAA,actoDG,iBdyoDH,YAAA,aczoDG,iBd4oDH,YAAA,Ic5oDG,iBd+oDH,YAAA,ac/oDG,iBdkpDH,YAAA,aclpDG,iBdqpDH,YAAA,IcrpDG,iBdwpDH,YAAA,acxpDG,iBd2pDH,YAAA,Yc7rDG,iBACE,YAAA,EAOJ,yBACE,UAAA,WAAA,WAAA,WAAA,UAAA,UAAA,UAAA,UAAA,UAAA,UAAA,UAAA,Ud2rDD,MAAA,Kc3rDC,Wd8rDD,MAAA,Kc9rDC,WdisDD,MAAA,acjsDC,WdosDD,MAAA,acpsDC,UdusDD,MAAA,IcvsDC,Ud0sDD,MAAA,ac1sDC,Ud6sDD,MAAA,ac7sDC,UdgtDD,MAAA,IchtDC,UdmtDD,MAAA,acntDC,UdstDD,MAAA,acttDC,UdytDD,MAAA,IcztDC,Ud4tDD,MAAA,ac7sDC,UdgtDD,MAAA,YchtDC,gBdmtDD,MAAA,KcntDC,gBdstDD,MAAA,acttDC,gBdytDD,MAAA,acztDC,ed4tDD,MAAA,Ic5tDC,ed+tDD,MAAA,ac/tDC,edkuDD,MAAA,acluDC,edquDD,MAAA,IcruDC,edwuDD,MAAA,acxuDC,ed2uDD,MAAA,ac3uDC,ed8uDD,MAAA,Ic9uDC,edivDD,MAAA,ac5uDC,ed+uDD,MAAA,Yc9vDC,ediwDD,MAAA,KcjwDC,gBdowDD,KAAA,KcpwDC,gBduwDD,KAAA,acvwDC,gBd0wDD,KAAA,ac1wDC,ed6wDD,KAAA,Ic7wDC,edgxDD,KAAA,achxDC,edmxDD,KAAA,acnxDC,edsxDD,KAAA,IctxDC,edyxDD,KAAA,aczxDC,ed4xDD,KAAA,ac5xDC,ed+xDD,KAAA,Ic/xDC,edkyDD,KAAA,ac7xDC,edgyDD,KAAA,YcjxDC,edoxDD,KAAA,KcpxDC,kBduxDD,YAAA,KcvxDC,kBd0xDD,YAAA,ac1xDC,kBd6xDD,YAAA,ac7xDC,iBdgyDD,YAAA,IchyDC,iBdmyDD,YAAA,acnyDC,iBdsyDD,YAAA,actyDC,iBdyyDD,YAAA,IczyDC,iBd4yDD,YAAA,ac5yDC,iBd+yDD,YAAA,ac/yDC,iBdkzDD,YAAA,IclzDC,iBdqzDD,YAAA,acrzDC,iBdwzDD,YAAA,YY/yDD,iBE3CE,YAAA,GAQF,yBACE,UAAA,WAAA,WAAA,WAAA,UAAA,UAAA,UAAA,UAAA,UAAA,UAAA,UAAA,Udy1DD,MAAA,Kcz1DC,Wd41DD,MAAA,Kc51DC,Wd+1DD,MAAA,ac/1DC,Wdk2DD,MAAA,acl2DC,Udq2DD,MAAA,Icr2DC,Udw2DD,MAAA,acx2DC,Ud22DD,MAAA,ac32DC,Ud82DD,MAAA,Ic92DC,Udi3DD,MAAA,acj3DC,Udo3DD,MAAA,acp3DC,Udu3DD,MAAA,Icv3DC,Ud03DD,MAAA,ac32DC,Ud82DD,MAAA,Yc92DC,gBdi3DD,MAAA,Kcj3DC,gBdo3DD,MAAA,acp3DC,gBdu3DD,MAAA,acv3DC,ed03DD,MAAA,Ic13DC,ed63DD,MAAA,ac73DC,edg4DD,MAAA,ach4DC,edm4DD,MAAA,Icn4DC,eds4DD,MAAA,act4DC,edy4DD,MAAA,acz4DC,ed44DD,MAAA,Ic54DC,ed+4DD,MAAA,ac14DC,ed64DD,MAAA,Yc55DC,ed+5DD,MAAA,Kc/5DC,gBdk6DD,KAAA,Kcl6DC,gBdq6DD,KAAA,acr6DC,gBdw6DD,KAAA,acx6DC,ed26DD,KAAA,Ic36DC,ed86DD,KAAA,ac96DC,edi7DD,KAAA,acj7DC,edo7DD,KAAA,Icp7DC,edu7DD,KAAA,acv7DC,ed07DD,KAAA,ac17DC,ed67DD,KAAA,Ic77DC,edg8DD,KAAA,ac37DC,ed87DD,KAAA,Yc/6DC,edk7DD,KAAA,Kcl7DC,kBdq7DD,YAAA,Kcr7DC,kBdw7DD,YAAA,acx7DC,kBd27DD,YAAA,ac37DC,iBd87DD,YAAA,Ic97DC,iBdi8DD,YAAA,acj8DC,iBdo8DD,YAAA,acp8DC,iBdu8DD,YAAA,Icv8DC,iBd08DD,YAAA,ac18DC,iBd68DD,YAAA,ac78DC,iBdg9DD,YAAA,Ich9DC,iBdm9DD,YAAA,acn9DC,iBds9DD,YAAA,YY18DD,iBE9CE,YAAA,GAQF,0BACE,UAAA,WAAA,WAAA,WAAA,UAAA,UAAA,UAAA,UAAA,UAAA,UAAA,UAAA,Udu/DD,MAAA,Kcv/DC,Wd0/DD,MAAA,Kc1/DC,Wd6/DD,MAAA,ac7/DC,WdggED,MAAA,achgEC,UdmgED,MAAA,IcngEC,UdsgED,MAAA,actgEC,UdygED,MAAA,aczgEC,Ud4gED,MAAA,Ic5gEC,Ud+gED,MAAA,ac/gEC,UdkhED,MAAA,aclhEC,UdqhED,MAAA,IcrhEC,UdwhED,MAAA,aczgEC,Ud4gED,MAAA,Yc5gEC,gBd+gED,MAAA,Kc/gEC,gBdkhED,MAAA,aclhEC,gBdqhED,MAAA,acrhEC,edwhED,MAAA,IcxhEC,ed2hED,MAAA,ac3hEC,ed8hED,MAAA,ac9hEC,ediiED,MAAA,IcjiEC,edoiED,MAAA,acpiEC,eduiED,MAAA,acviEC,ed0iED,MAAA,Ic1iEC,ed6iED,MAAA,acxiEC,ed2iED,MAAA,Yc1jEC,ed6jED,MAAA,Kc7jEC,gBdgkED,KAAA,KchkEC,gBdmkED,KAAA,acnkEC,gBdskED,KAAA,actkEC,edykED,KAAA,IczkEC,ed4kED,KAAA,ac5kEC,ed+kED,KAAA,ac/kEC,edklED,KAAA,IcllEC,edqlED,KAAA,acrlEC,edwlED,KAAA,acxlEC,ed2lED,KAAA,Ic3lEC,ed8lED,KAAA,aczlEC,ed4lED,KAAA,Yc7kEC,e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pC,cAGA,ejB8DA,wBACQ,OAAA,YJ65FT,OAAA,kBmB56FG,mBAAA,KlBw7FM,WAAY,KkBt7FhB,QAAA,IASN,eC3DE,yBACA,eAAA,KpBo+FD,aoBj+FC,MAAA,KnB6+FA,iBAAkB,KmB3+FhB,aAAA,KpBq+FH,mBoBn+FO,mBAEN,MAAA,KACE,iBAAA,QACA,aAAA,QpBo+FH,mBoBj+FC,MAAA,KnB6+FA,iBAAkB,QAClB,aAAc,QmBz+FR,oBADJ,oBpBo+FH,mCoBj+FG,MAAA,KnB6+FF,iBAAkB,QAClB,aAAc,QmBz+FN,0BnB++FV,0BAHA,0BmB7+FM,0BnB++FN,0BAHA,0BDFC,yCoB3+FK,yCnB++FN,yCmB1+FE,MAAA,KnBk/FA,iBAAkB,QAClB,aAAc,QmB3+FZ,oBpBm+FH,oBoBn+FG,mCnBg/FF,iBAAkB,KmB5+FV,4BnBi/FV,4BAHA,4BDHC,6BCOD,6BAHA,6BkB99FA,sCClBM,sCnBi/FN,sCmB3+FI,iBAAA,KACA,aAAA,KDcJ,oBC9DE,MAAA,KACA,iBAAA,KpB6hGD,aoB1hGC,MAAA,KnBsiGA,iBAAkB,QmBpiGhB,aAAA,QpB8hGH,mBoB5hGO,mBAEN,MAAA,KACE,iBAAA,QACA,aAAA,QpB6hGH,mBoB1hGC,MAAA,KnBsiGA,iBAAkB,QAClB,aAAc,QmBliGR,oBADJ,oBpB6hGH,mCoB1hGG,MAAA,KnBsiGF,iBAAkB,QAClB,aAAc,QmBliGN,0BnBwiGV,0BAHA,0BmBtiGM,0BnBwiGN,0BAHA,0BDFC,yCoBpiGK,yCnBwiGN,yCmBniGE,MAAA,KnB2iGA,iBAAkB,QAClB,aAAc,QmBpiGZ,oBpB4hGH,oBoB5hGG,mCnByiGF,iBAAkB,KmBriGV,4BnB0iGV,4BAHA,4BDHC,6BCOD,6BAHA,6BkBphGA,sCCrBM,sCnB0iGN,sCmBpiGI,iBAAA,QACA,aAAA,QDkBJ,oBClEE,MAAA,QACA,iBAAA,KpBslGD,aoBnlGC,MAAA,KnB+lGA,iBAAkB,QmB7lGhB,aAAA,QpBulGH,mBoBrlGO,mBAEN,MAAA,KACE,iBAAA,QACA,aAAA,QpBslGH,mBoBnlGC,MAAA,KnB+lGA,iBAAkB,QAClB,aAAc,QmB3lGR,oBADJ,oBpBslGH,mCoBnlGG,MAAA,KnB+lGF,iBAAkB,QAClB,aAAc,QmB3lGN,0BnBimGV,0BAHA,0BmB/lGM,0BnBimGN,0BAHA,0BDFC,yCoB7lGK,yCnBimGN,yCmB5lGE,MAAA,KnBomGA,iBAAkB,QAClB,aAAc,QmB7lGZ,oBpBqlGH,oBoBrlGG,mCnBkmGF,iBAAkB,KmB9lGV,4BnBmmGV,4BAHA,4BDHC,6BCOD,6BAHA,6BkBzkGA,sCCzBM,sCnBmmGN,sCmB7lGI,iBAAA,QACA,aAAA,QDsBJ,oBCtEE,MAAA,QACA,iBAAA,KpB+oGD,UoB5oGC,MAAA,KnBwpGA,iBAAkB,QmBtpGhB,aAAA,QpBgpGH,gBoB9oGO,gBAEN,MAAA,KACE,iBAAA,QACA,aAAA,QpB+oGH,gBoB5oGC,MAAA,KnBwpGA,iBAAkB,QAClB,aAAc,QmBppGR,iBADJ,iBpB+oGH,gCoB5oGG,MAAA,KnBwpGF,iBAAkB,QAClB,aAAc,QmBppGN,uBnB0pGV,uBAHA,uBmBxpGM,uBnB0pGN,uBAHA,uBDFC,sCoBtpGK,sCnB0pGN,sCmBrpGE,MAAA,KnB6pGA,iBAAkB,QAClB,aAAc,QmBtpGZ,iBpB8oGH,iBoB9oGG,gCnB2pGF,iBAAkB,KmBvpGV,yBnB4pGV,yBAHA,yBDHC,0BCOD,0BAHA,0BkB9nGA,mCC7BM,mCnB4pGN,mCmBtpGI,iBAAA,QACA,aAAA,QD0BJ,iBC1EE,MAAA,QACA,iBAAA,KpBwsGD,aoBrsGC,MAAA,KnBitGA,iBAAkB,QmB/sGhB,aAAA,QpBysGH,mBoBvsGO,mBAEN,MAAA,KACE,iBAAA,QACA,aAAA,QpBwsGH,mBoBrsGC,MAAA,KnBitGA,iBAAkB,QAClB,aAAc,QmB7sGR,oBADJ,oBpBwsGH,mCoBrsGG,MAAA,KnBitGF,iBAAkB,QAClB,aAAc,QmB7sGN,0BnBmtGV,0BAHA,0BmBjtGM,0BnBmtGN,0BAHA,0BDFC,yCoB/sGK,yCnBmtGN,yCmB9sGE,MAAA,KnBstGA,iBAAkB,QAClB,aAAc,QmB/sGZ,oBpBusGH,oBoBvsGG,mCnBotGF,iBAAkB,KmBh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mBAKJ,qBAEE,MAAA,QvBvCA,cACC,QAAA,KAAA,K3By0KF,iBAAA,QkDxxKC,WAAY,IAAI,MAAM,KjDozKtB,2BAA4B,IiDjzK1B,0BAAA,IAHJ,mBAAA,mCAMM,cAAA,ElD2xKL,oCkDtxKG,oDjDkzKF,aAAc,IAAI,EiDhzKZ,cAAA,EvBtEL,4D3Bg2KF,4EkDpxKG,WAAA,EjDgzKF,uBAAwB,IiD9yKlB,wBAAA,IvBtEL,0D3B81KF,0EkD7yKC,cAAe,EvB1Df,2BAAA,IACC,0BAAA,IuB0FH,+EAEI,uBAAA,ElDixKH,wBAAA,EkD7wKC,wDlDgxKD,iBAAA,EC4BD,0BACE,iBAAkB,EiDryKpB,8BlD6wKC,ckD7wKD,gCjD0yKE,cAAe,EiD1yKjB,sCAQM,sBlD2wKL,wCC4BC,cAAe,K0Bx5Kf,aAAA,KuByGF,wDlDwxKC,0BC4BC,uBAAwB,IACxB,wBAAyB,IiDrzK3B,yFAoBQ,yFlD2wKP,2DkD5wKO,2DjDwyKN,uBAAwB,IACxB,wBAAyB,IAK3B,wGiDj0KA,wGjD+zKA,wGDtBC,wGCuBD,0EiDh0KA,0EjD8zKA,0EiDtyKU,0EjD8yKR,uBAAwB,IAK1B,uGiD30KA,uGjDy0KA,uGDtBC,uGCuBD,yEiD10KA,yEjDw0KA,yEiD5yKU,yEvB7HR,wBAAA,IuBiGF,sDlDwzKC,yBC4BC,2BAA4B,IAC5B,0BAA2B,IiD3yKrB,qFA1CR,qFAyCQ,wDlDsxKP,wDC4BC,2BAA4B,IAC5B,0BAA2B,IAG7B,oGDtBC,oGCwBD,oGiDj2KA,oGjD81KA,uEiDhzKU,uEjDkzKV,uEiDh2KA,uEjDs2KE,0BAA2B,IAG7B,mGDtBC,mGCwBD,mGiD32KA,mGjDw2KA,sEiDtzKU,sEjDwzKV,sEiD12KA,sEjDg3KE,2BAA4B,IiDrzK1B,0BlD8xKH,qCkDz1KD,0BAAA,qCA+DI,WAAA,IAAA,MAAA,KA/DJ,kDAAA,kDAmEI,WAAA,EAnEJ,uBAAA,yCjD83KE,OAAQ,EiDpzKA,+CjDwzKV,+CiDl4KA,+CjDo4KA,+CAEA,+CANA,+CDjBC,iECoBD,iEiDn4KA,iEjDq4KA,iEAEA,iEANA,iEAWE,YAAa,EiD9zKL,8CjDk0KV,8CiDh5KA,8CjDk5KA,8CAEA,8CANA,8CDjBC,gECoBD,gEiDj5KA,gEjDm5KA,gEAEA,gEANA,gEAWE,aAAc,EAIhB,+CiD95KA,+CjD45KA,+CiDr0KU,+CjDw0KV,iEiD/5KA,iEjD65KA,iEDtBC,iEC6BC,cAAe,EAEjB,8CiDt0KU,8CjDw0KV,8CiDx6KA,8CjDu6KA,gEDtBC,gECwBD,gEiDn0KI,gEACA,cAAA,EAUJ,yBACE,cAAA,ElDsyKD,OAAA,EkDlyKG,aACA,cAAA,KANJ,oBASM,cAAA,ElDqyKL,cAAA,IkDhyKG,2BlDmyKH,WAAA,IC4BD,4BiD3zKM,cAAA,EAKF,wDAvBJ,wDlDwzKC,WAAA,IAAA,MAAA,KkD/xKK,2BlDkyKL,WAAA,EmDrhLC,uDnDwhLD,cAAA,IAAA,MAAA,KmDrhLG,eACA,aAAA,KnDyhLH,8BmD3hLC,MAAA,KAMI,iBAAA,QnDwhLL,aAAA,KmDrhLK,0DACA,iBAAA,KAGJ,qCAEI,MAAA,QnDshLL,iBAAA,KmDviLC,yDnD0iLD,oBAAA,KmDviLG,eACA,aAAA,QnD2iLH,8BmD7iLC,MAAA,KAMI,iBAAA,QnD0iLL,aAAA,QmDviLK,0DACA,iBAAA,QAGJ,qCAEI,MAAA,QnDwiLL,iBAAA,KmDzjLC,yDnD4jLD,oBAAA,QmDzjLG,eACA,aAAA,QnD6jLH,8BmD/jLC,MAAA,QAMI,iBAAA,QnD4jLL,aAAA,QmDzjLK,0DACA,iBAAA,QAGJ,qCAEI,MAAA,QnD0jLL,iBAAA,QmD3kLC,yDnD8kLD,oBAAA,QmD3kLG,YACA,aAAA,QnD+kLH,2BmDjlLC,MAAA,QAMI,iBAAA,QnD8kLL,aAAA,QmD3kLK,uDACA,iBAAA,QAGJ,kCAEI,MAAA,QnD4kLL,iBAAA,QmD7lLC,sDnDgmLD,oBAAA,QmD7lLG,eACA,aAAA,QnDimLH,8BmDnmLC,MAAA,QAMI,iBAAA,QnDgmLL,aAAA,QmD7lLK,0DACA,iBAAA,QAGJ,qCAEI,MAAA,QnD8lLL,iBAAA,QmD/mLC,yDnDknLD,oBAAA,QmD/mLG,cACA,aAAA,QnDmnLH,6BmDrnLC,MAAA,QAMI,iBAAA,QnDknLL,aAAA,QmD/mLK,yDACA,iBAAA,QAGJ,oCAEI,MAAA,QnDgnLL,iBAAA,QoD/nLC,wDACA,oBAAA,QAEA,kBACA,SAAA,SpDkoLD,QAAA,MoDvoLC,OAAQ,EnDmqLR,QAAS,EACT,SAAU,OAEZ,yCmDzpLI,wBADA,yBAEA,yBACA,wBACA,SAAA,SACA,IAAA,EACA,OAAA,EpDkoLH,KAAA,EoD7nLC,MAAO,KACP,OAAA,KpD+nLD,OAAA,EoD1nLC,wBpD6nLD,eAAA,OqDvpLC,uBACA,eAAA,IAEA,MACA,WAAA,KACA,QAAA,KjDwDA,cAAA,KACQ,iBAAA,QJmmLT,OAAA,IAAA,MAAA,QqDlqLC,cAAe,IASb,mBAAA,MAAA,EAAA,IAAA,IAAA,gBACA,WAAA,MAAA,EAAA,IAAA,IAAA,gBAKJ,iBACE,aAAA,KACA,aAAA,gBAEF,SACE,QAAA,KACA,cAAA,ICtBF,SACE,QAAA,IACA,cAAA,IAEA,OACA,MAAA,MACA,UAAA,KjCRA,YAAA,IAGA,YAAA,ErBwrLD,MAAA,KsDhrLC,YAAA,EAAA,IAAA,EAAA,KrD4sLA,OAAQ,kBqD1sLN,QAAA,GjCbF,aiCeE,ajCZF,MAAA,KrBgsLD,gBAAA,KsD5qLC,OAAA,QACE,OAAA,kBACA,QAAA,GAEA,aACA,mBAAA,KtD8qLH,QAAA,EuDnsLC,OAAQ,QACR,WAAA,IvDqsLD,OAAA,EuDhsLC,YACA,SAAA,OAEA,OACA,SAAA,MACA,IAAA,EACA,MAAA,EACA,OAAA,EACA,KAAA,EAIA,QAAA,KvDgsLD,QAAA,KuD7rLC,SAAA,OnD+GA,2BAAA,MACI,QAAA,EAEI,0BAkER,mBAAA,kBAAA,IAAA,SAEK,cAAA,aAAA,IAAA,SACG,WAAA,UAAA,IAAA,SJghLT,kBAAA,kBuDnsLC,cAAA,kBnD2GA,aAAA,kBACI,UAAA,kBAEI,wBJ2lLT,kBAAA,euDvsLK,cAAe,eACnB,aAAA,eACA,UAAA,eAIF,mBACE,WAAA,OACA,WAAA,KvDwsLD,cuDnsLC,SAAU,SACV,MAAA,KACA,OAAA,KAEA,eACA,SAAA,SnDaA,iBAAA,KACQ,wBAAA,YmDZR,gBAAA,YtD+tLA,OsD/tLA,IAAA,MAAA,KAEA,OAAA,IAAA,MAAA,evDqsLD,cAAA,IuDjsLC,QAAS,EACT,mBAAA,EAAA,IAAA,IAAA,eACA,WAAA,EAAA,IAAA,IAAA,eAEA,gBACA,SAAA,MACA,IAAA,EACA,MAAA,EvDmsLD,OAAA,EuDjsLC,KAAA,ElCrEA,QAAA,KAGA,iBAAA,KkCmEA,qBlCtEA,OAAA,iBAGA,QAAA,EkCwEF,mBACE,OAAA,kBACA,QAAA,GAIF,cACE,QAAA,KvDmsLD,cAAA,IAAA,MAAA,QuD9rLC,qBACA,WAAA,KAKF,aACE,OAAA,EACA,YAAA,WAIF,YACE,SAAA,SACA,QAAA,KvD6rLD,cuD/rLC,QAAS,KAQP,WAAA,MACA,WAAA,IAAA,MAAA,QATJ,wBAaI,cAAA,EvDyrLH,YAAA,IuDrrLG,mCvDwrLH,YAAA,KuDlrLC,oCACA,YAAA,EAEA,yBACA,SAAA,SvDqrLD,IAAA,QuDnqLC,MAAO,KAZP,OAAA,KACE,SAAA,OvDmrLD,yBuDhrLD,cnDvEA,MAAA,MACQ,OAAA,KAAA,KmD2ER,eAAY,mBAAA,EAAA,IAAA,KAAA,evDkrLX,WAAA,EAAA,IAAA,KAAA,euD5qLD,UAFA,MAAA,OvDorLD,yBwDl0LC,UACA,MAAA,OCNA,SAEA,SAAA,SACA,QAAA,KACA,QAAA,MACA,YAAA,iBAAA,UAAA,MAAA,WACA,UAAA,KACA,WAAA,OACA,YAAA,IACA,YAAA,WACA,WAAA,KACA,WAAA,MACA,gBAAA,KACA,YAAA,KACA,eAAA,KACA,eAAA,ODHA,WAAA,OnCVA,aAAA,OAGA,UAAA,OrBy1LD,YAAA,OwD90LC,OAAA,iBnCdA,QAAA,ErBg2LD,WAAA,KwDj1LY,YAAmB,OAAA,kBxDq1L/B,QAAA,GwDp1LY,aAAmB,QAAA,IAAA,ExDw1L/B,WAAA,KwDv1LY,eAAmB,QAAA,EAAA,IxD21L/B,YAAA,IwD11LY,gBAAmB,QAAA,IAAA,ExD81L/B,WAAA,IwDz1LC,cACA,QAAA,EAAA,IACA,YAAA,KAEA,eACA,UAAA,MxD41LD,QAAA,IAAA,IwDx1LC,MAAO,KACP,WAAA,OACA,iBAAA,KACA,cAAA,IAEA,exD01LD,SAAA,SwDt1LC,MAAA,EACE,OAAA,EACA,aAAA,YACA,aAAA,MAEA,4BxDw1LH,OAAA,EwDt1LC,KAAA,IACE,YAAA,KACA,aAAA,IAAA,IAAA,EACA,iBAAA,KAEA,iCxDw1LH,MAAA,IwDt1LC,OAAA,EACE,cAAA,KACA,aAAA,IAAA,IAAA,EACA,iBAAA,KAEA,kCxDw1LH,OAAA,EwDt1LC,KAAA,IACE,cAAA,KACA,aAAA,IAAA,IAAA,EACA,iBAAA,KAEA,8BxDw1LH,IAAA,IwDt1LC,KAAA,EACE,WAAA,KACA,aAAA,IAAA,IAAA,IAAA,EACA,mBAAA,KAEA,6BxDw1LH,IAAA,IwDt1LC,MAAA,EACE,WAAA,KACA,aAAA,IAAA,EAAA,IAAA,IACA,kBAAA,KAEA,+BxDw1LH,IAAA,EwDt1LC,KAAA,IACE,YAAA,KACA,aAAA,EAAA,IAAA,IACA,oBAAA,KAEA,oCxDw1LH,IAAA,EwDt1LC,MAAA,IACE,WAAA,KACA,aAAA,EAAA,IAAA,IACA,oBAAA,KAEA,qCxDw1LH,IAAA,E0Dr7LC,KAAM,IACN,WAAA,KACA,aAAA,EAAA,IAAA,IACA,oBAAA,KAEA,SACA,SAAA,SACA,IAAA,EDXA,KAAA,EAEA,QAAA,KACA,QAAA,KACA,UAAA,MACA,QAAA,IACA,YAAA,iBAAA,UAAA,MAAA,WACA,UAAA,KACA,WAAA,OACA,YAAA,IACA,YAAA,WACA,WAAA,KACA,WAAA,MACA,gBAAA,KACA,YAAA,KACA,eAAA,KCAA,eAAA,OAEA,WAAA,OACA,aAAA,OAAA,UAAA,OACA,YAAA,OACA,iBAAA,KACA,wBAAA,YtD8CA,gBAAA,YACQ,OAAA,IAAA,MAAA,KJq5LT,OAAA,IAAA,MAAA,e0Dh8LC,cAAA,IAAY,mBAAA,EAAA,IAAA,KAAA,e1Dm8Lb,WAAA,EAAA,IAAA,KAAA,e0Dl8La,WAAA,KACZ,aAAY,WAAA,MACZ,eAAY,YAAA,KAGd,gBACE,WAAA,KAEA,cACA,YAAA,MAEA,e1Dw8LD,QAAA,IAAA,K0Dr8LC,OAAQ,EACR,UAAA,K1Du8LD,iBAAA,Q0D/7LC,cAAA,IAAA,MAAA,QzD49LA,cAAe,IAAI,IAAI,EAAE,EyDz9LvB,iBACA,QAAA,IAAA,KAEA,gBACA,sB1Di8LH,SAAA,S0D97LC,QAAS,MACT,MAAA,E1Dg8LD,OAAA,E0D97LC,aAAc,YACd,aAAA,M1Di8LD,gB0D57LC,aAAA,KAEE,sBACA,QAAA,GACA,aAAA,KAEA,oB1D87LH,OAAA,M0D77LG,KAAA,IACE,YAAA,MACA,iBAAA,KACA,iBAAA,gBACA,oBAAA,E1Dg8LL,0B0D57LC,OAAA,IACE,YAAA,MACA,QAAA,IACA,iBAAA,KACA,oBAAA,EAEA,sB1D87LH,IAAA,I0D77LG,KAAA,MACE,WAAA,MACA,mBAAA,KACA,mBAAA,gBACA,kBAAA,E1Dg8LL,4B0D57LC,OAAA,MACE,KAAA,IACA,QAAA,IACA,mBAAA,KACA,kBAAA,EAEA,uB1D87LH,IAAA,M0D77LG,KAAA,IACE,YAAA,MACA,iBAAA,EACA,oBAAA,KACA,oBAAA,gB1Dg8LL,6B0D37LC,IAAA,IACE,YAAA,MACA,QAAA,IACA,iBAAA,EACA,oBAAA,KAEA,qB1D67LH,IAAA,I0D57LG,MAAA,MACE,WAAA,MACA,mBAAA,EACA,kBAAA,KACA,kBAAA,gB1D+7LL,2B2DvjMC,MAAO,IACP,OAAA,M3DyjMD,QAAA,I2DtjMC,mBAAoB,EACpB,kBAAA,KAEA,U3DwjMD,SAAA,S2DrjMG,gBACA,SAAA,SvD6KF,MAAA,KACK,SAAA,OJ64LN,sB2DlkMC,SAAU,S1D+lMV,QAAS,K0DjlML,mBAAA,IAAA,YAAA,K3DwjML,cAAA,IAAA,YAAA,K2D9hMC,WAAA,IAAA,YAAA,KvDmKK,4BAFL,0BAGQ,YAAA,EA3JA,qDA+GR,sBAEQ,mBAAA,kBAAA,IAAA,YJi7LP,cAAA,aAAA,IAAA,Y2D5jMG,WAAA,UAAA,IAAA,YvDmHJ,4BAAA,OACQ,oBAAA,OuDjHF,oBAAA,O3D+jML,YAAA,OI/8LD,mCHy+LA,2BGx+LQ,KAAA,EuD5GF,kBAAA,sB3DgkML,UAAA,sBC2BD,kCADA,2BG/+LA,KAAA,EACQ,kBAAA,uBuDtGF,UAAA,uBArCN,6B3DumMD,gC2DvmMC,iC1DkoME,KAAM,E0DrlMN,kBAAA,mB3D+jMH,UAAA,oBAGA,wB2D/mMD,sBAAA,sBAsDI,QAAA,MAEA,wB3D6jMH,KAAA,E2DzjMG,sB3D4jMH,sB2DxnMC,SAAU,SA+DR,IAAA,E3D4jMH,MAAA,KC0BD,sB0DllMI,KAAA,KAnEJ,sBAuEI,KAAA,MAvEJ,2BA0EI,4B3D2jMH,KAAA,E2DljMC,6BACA,KAAA,MAEA,8BACA,KAAA,KtC3FA,kBsC6FA,SAAA,SACA,IAAA,EACA,OAAA,EACA,KAAA,EACA,MAAA,I3DsjMD,UAAA,K2DjjMC,MAAA,KdnGE,WAAA,OACA,YAAA,EAAA,IAAA,IAAA,eACA,iBAAA,cAAA,OAAA,kBACA,QAAA,G7CwpMH,uB2DrjMC,iBAAA,sEACE,iBAAA,iEACA,iBAAA,uFdxGA,iBAAA,kEACA,OAAA,+GACA,kBAAA,SACA,wBACA,MAAA,E7CgqMH,KAAA,K2DvjMC,iBAAA,sE1DmlMA,iBAAiB,iE0DjlMf,iBAAA,uFACA,iBAAA,kEACA,OAAA,+GtCvHF,kBAAA,SsCyFF,wB3DylMC,wBC4BC,MAAO,KACP,gBAAiB,KACjB,OAAQ,kB0DhlMN,QAAA,EACA,QAAA,G3D2jMH,0C2DnmMD,2CA2CI,6BADA,6B1DqlMF,SAAU,S0DhlMR,IAAA,IACA,QAAA,E3DwjMH,QAAA,a2DxmMC,WAAY,MAqDV,0CADA,6B3DyjMH,KAAA,I2D7mMC,YAAa,MA0DX,2CADA,6BAEA,MAAA,IACA,aAAA,MAME,6BADF,6B3DsjMH,MAAA,K2DjjMG,OAAA,KACE,YAAA,M3DmjML,YAAA,E2DxiMC,oCACA,QAAA,QAEA,oCACA,QAAA,QAEA,qBACA,SAAA,SACA,OAAA,K3D2iMD,KAAA,I2DpjMC,QAAS,GAYP,MAAA,IACA,aAAA,EACA,YAAA,KACA,WAAA,OACA,WAAA,KAEA,wBACA,QAAA,aAWA,MAAA,KACA,OAAA,K3DiiMH,OAAA,I2DhkMC,YAAa,OAkCX,OAAA,QACA,iBAAA,OACA,iBAAA,cACA,OAAA,IAAA,MAAA,K3DiiMH,cAAA,K2DzhMC,6BACA,MAAA,KACA,OAAA,KACA,OAAA,EACA,iBAAA,KAEA,kBACA,SAAA,SACA,MAAA,IACA,OAAA,K3D4hMD,KAAA,I2D3hMC,QAAA,GACE,YAAA,K3D6hMH,eAAA,K2Dp/LC,MAAO,KAhCP,WAAA,O1DijMA,YAAa,EAAE,IAAI,IAAI,eAEzB,uB0D9iMM,YAAA,KAEA,oCACA,0C3DshMH,2C2D9hMD,6BAAA,6BAYI,MAAA,K3DshMH,OAAA,K2DliMD,WAAA,M1D8jME,UAAW,KDxBZ,0C2DjhMD,6BACE,YAAA,MAEA,2C3DmhMD,6B2D/gMD,aAAA,M3DkhMC,kBACF,MAAA,I4DhxMC,KAAA,I3D4yME,eAAgB,KAElB,qBACE,OAAQ,MAkBZ,qCADA,sCADA,mBADA,oBAXA,gBADA,iBAOA,uBADA,wBADA,iBADA,kBADA,wBADA,yBASA,mCADA,oC2DvzME,oBAAA,qBAAA,oBAAA,qB3D8zMF,WADA,YAOA,uBADA,wBADA,qBADA,sBADA,cADA,e2Dl0MI,a3Dw0MJ,cDvBC,kB4DhzMG,mB3DwzMJ,WADA,YAwBE,QAAS,MACT,QAAS,IASX,qCADA,mBANA,gBAGA,uBADA,iBADA,wBAIA,mCDhBC,oB6Dl1MC,oB5Dq2MF,W+B/1MA,uBhCu0MC,qB4D/zMG,cChBF,aACA,kB5Dk2MF,W+Bx1ME,MAAO,KhC40MR,cgCz0MC,QAAS,MACT,aAAA,KhC20MD,YAAA,KgCl0MC,YhCq0MD,MAAA,gBgCl0MC,WhCq0MD,MAAA,egCl0MC,MhCq0MD,QAAA,e8D51MC,MACA,QAAA,gBAEA,WACA,WAAA,O9B8BF,WACE,KAAA,EAAA,EAAA,EhCm0MD,MAAA,YgC5zMC,YAAa,KACb,iBAAA,YhC8zMD,OAAA,E+D91MC,Q/Di2MD,QAAA,eC4BD,OACE,SAAU,M+Dt4MV,chE+2MD,MAAA,aC+BD,YADA,YADA,YADA,YAIE,QAAS,e+Dv5MT,kBhEy4MC,mBgEx4MD,yBhEo4MD,kB+Dr1MD,mBA6IA,yB9D+tMA,kBACA,mB8Dp3ME,yB9Dg3MF,kBACA,mBACA,yB+D15MY,QAAA,eACV,yBAAU,YhE64MT,QAAA,gBC4BD,iB+Dv6MU,QAAA,gBhEg5MX,c+D/1MG,QAAS,oB/Dm2MV,c+Dr2MC,c/Ds2MH,QAAA,sB+Dj2MG,yB/Dq2MD,kBACF,QAAA,iB+Dj2MG,yB/Dq2MD,mBACF,QAAA,kBgEn6MC,yBhEu6MC,yBgEt6MD,QAAA,wBACA,+CAAU,YhE26MT,QAAA,gBC4BD,iB+Dr8MU,QAAA,gBhE86MX,c+Dx2MG,QAAS,oB/D42MV,c+D92MC,c/D+2MH,QAAA,sB+D12MG,+C/D82MD,kBACF,QAAA,iB+D12MG,+C/D82MD,mBACF,QAAA,kBgEj8MC,+ChEq8MC,yBgEp8MD,QAAA,wBACA,gDAAU,YhEy8MT,QAAA,gBC4BD,iB+Dn+MU,QAAA,gBhE48MX,c+Dj3MG,QAAS,oB/Dq3MV,c+Dv3MC,c/Dw3MH,QAAA,sB+Dn3MG,gD/Du3MD,kBACF,QAAA,iB+Dn3MG,gD/Du3MD,mBACF,QAAA,kBgE/9MC,gDhEm+MC,yBgEl+MD,QAAA,wBACA,0BAAU,YhEu+MT,QAAA,gBC4BD,iB+DjgNU,QAAA,gBhE0+MX,c+D13MG,QAAS,oB/D83MV,c+Dh4MC,c/Di4MH,QAAA,sB+D53MG,0B/Dg4MD,kBACF,QAAA,iB+D53MG,0B/Dg4MD,mBACF,QAAA,kBgEr/MC,0BhEy/MC,yBACF,QAAA,wBgE1/MC,yBhE8/MC,WACF,QAAA,gBgE//MC,+ChEmgNC,WACF,QAAA,gBgEpgNC,gDhEwgNC,WACF,QAAA,gBAGA,0B+Dn3MC,WA4BE,QAAS,gBC5LX,eAAU,QAAA,eACV,aAAU,ehE4hNT,QAAA,gBC4BD,oB+DtjNU,QAAA,gBhE+hNX,iB+Dj4MG,QAAS,oBAMX,iB/D83MD,iB+Dz2MG,QAAS,sB/D82MZ,qB+Dl4MC,QAAS,e/Dq4MV,a+D/3MC,qBAcE,QAAS,iB/Ds3MZ,sB+Dn4MC,QAAS,e/Ds4MV,a+Dh4MC,sBAOE,QAAS,kB/D83MZ,4B+D/3MC,QAAS,eCpLT,ahEujNC,4BACF,QAAA,wBC6BD,aACE,cACE,QAAS"}
/*!
 * Bootstrap v3.3.6 (http://getbootstrap.com)
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under the MIT license
 */

if (typeof jQuery === 'undefined') {
  throw new Error('Bootstrap\'s JavaScript requires jQuery')
}

+function ($) {
  'use strict';
  var version = $.fn.jquery.split(' ')[0].split('.')
  if ((version[0] < 2 && version[1] < 9) || (version[0] == 1 && version[1] == 9 && version[2] < 1) || (version[0] > 2)) {
    throw new Error('Bootstrap\'s JavaScript requires jQuery version 1.9.1 or higher, but lower than version 3')
  }
}(jQuery);

/* ========================================================================
 * Bootstrap: transition.js v3.3.6
 * http://getbootstrap.com/javascript/#transitions
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // CSS TRANSITION SUPPORT (Shoutout: http://www.modernizr.com/)
  // ============================================================

  function transitionEnd() {
    var el = document.createElement('bootstrap')

    var transEndEventNames = {
      WebkitTransition : 'webkitTransitionEnd',
      MozTransition    : 'transitionend',
      OTransition      : 'oTransitionEnd otransitionend',
      transition       : 'transitionend'
    }

    for (var name in transEndEventNames) {
      if (el.style[name] !== undefined) {
        return { end: transEndEventNames[name] }
      }
    }

    return false // explicit for ie8 (  ._.)
  }

  // http://blog.alexmaccaw.com/css-transitions
  $.fn.emulateTransitionEnd = function (duration) {
    var called = false
    var $el = this
    $(this).one('bsTransitionEnd', function () { called = true })
    var callback = function () { if (!called) $($el).trigger($.support.transition.end) }
    setTimeout(callback, duration)
    return this
  }

  $(function () {
    $.support.transition = transitionEnd()

    if (!$.support.transition) return

    $.event.special.bsTransitionEnd = {
      bindType: $.support.transition.end,
      delegateType: $.support.transition.end,
      handle: function (e) {
        if ($(e.target).is(this)) return e.handleObj.handler.apply(this, arguments)
      }
    }
  })

}(jQuery);

/* ========================================================================
 * Bootstrap: alert.js v3.3.6
 * http://getbootstrap.com/javascript/#alerts
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // ALERT CLASS DEFINITION
  // ======================

  var dismiss = '[data-dismiss="alert"]'
  var Alert   = function (el) {
    $(el).on('click', dismiss, this.close)
  }

  Alert.VERSION = '3.3.6'

  Alert.TRANSITION_DURATION = 150

  Alert.prototype.close = function (e) {
    var $this    = $(this)
    var selector = $this.attr('data-target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
    }

    var $parent = $(selector)

    if (e) e.preventDefault()

    if (!$parent.length) {
      $parent = $this.closest('.alert')
    }

    $parent.trigger(e = $.Event('close.bs.alert'))

    if (e.isDefaultPrevented()) return

    $parent.removeClass('in')

    function removeElement() {
      // detach from parent, fire event then clean up data
      $parent.detach().trigger('closed.bs.alert').remove()
    }

    $.support.transition && $parent.hasClass('fade') ?
      $parent
        .one('bsTransitionEnd', removeElement)
        .emulateTransitionEnd(Alert.TRANSITION_DURATION) :
      removeElement()
  }


  // ALERT PLUGIN DEFINITION
  // =======================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this)
      var data  = $this.data('bs.alert')

      if (!data) $this.data('bs.alert', (data = new Alert(this)))
      if (typeof option == 'string') data[option].call($this)
    })
  }

  var old = $.fn.alert

  $.fn.alert             = Plugin
  $.fn.alert.Constructor = Alert


  // ALERT NO CONFLICT
  // =================

  $.fn.alert.noConflict = function () {
    $.fn.alert = old
    return this
  }


  // ALERT DATA-API
  // ==============

  $(document).on('click.bs.alert.data-api', dismiss, Alert.prototype.close)

}(jQuery);

/* ========================================================================
 * Bootstrap: button.js v3.3.6
 * http://getbootstrap.com/javascript/#buttons
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // BUTTON PUBLIC CLASS DEFINITION
  // ==============================

  var Button = function (element, options) {
    this.$element  = $(element)
    this.options   = $.extend({}, Button.DEFAULTS, options)
    this.isLoading = false
  }

  Button.VERSION  = '3.3.6'

  Button.DEFAULTS = {
    loadingText: 'loading...'
  }

  Button.prototype.setState = function (state) {
    var d    = 'disabled'
    var $el  = this.$element
    var val  = $el.is('input') ? 'val' : 'html'
    var data = $el.data()

    state += 'Text'

    if (data.resetText == null) $el.data('resetText', $el[val]())

    // push to event loop to allow forms to submit
    setTimeout($.proxy(function () {
      $el[val](data[state] == null ? this.options[state] : data[state])

      if (state == 'loadingText') {
        this.isLoading = true
        $el.addClass(d).attr(d, d)
      } else if (this.isLoading) {
        this.isLoading = false
        $el.removeClass(d).removeAttr(d)
      }
    }, this), 0)
  }

  Button.prototype.toggle = function () {
    var changed = true
    var $parent = this.$element.closest('[data-toggle="buttons"]')

    if ($parent.length) {
      var $input = this.$element.find('input')
      if ($input.prop('type') == 'radio') {
        if ($input.prop('checked')) changed = false
        $parent.find('.active').removeClass('active')
        this.$element.addClass('active')
      } else if ($input.prop('type') == 'checkbox') {
        if (($input.prop('checked')) !== this.$element.hasClass('active')) changed = false
        this.$element.toggleClass('active')
      }
      $input.prop('checked', this.$element.hasClass('active'))
      if (changed) $input.trigger('change')
    } else {
      this.$element.attr('aria-pressed', !this.$element.hasClass('active'))
      this.$element.toggleClass('active')
    }
  }


  // BUTTON PLUGIN DEFINITION
  // ========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.button')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.button', (data = new Button(this, options)))

      if (option == 'toggle') data.toggle()
      else if (option) data.setState(option)
    })
  }

  var old = $.fn.button

  $.fn.button             = Plugin
  $.fn.button.Constructor = Button


  // BUTTON NO CONFLICT
  // ==================

  $.fn.button.noConflict = function () {
    $.fn.button = old
    return this
  }


  // BUTTON DATA-API
  // ===============

  $(document)
    .on('click.bs.button.data-api', '[data-toggle^="button"]', function (e) {
      var $btn = $(e.target)
      if (!$btn.hasClass('btn')) $btn = $btn.closest('.btn')
      Plugin.call($btn, 'toggle')
      if (!($(e.target).is('input[type="radio"]') || $(e.target).is('input[type="checkbox"]'))) e.preventDefault()
    })
    .on('focus.bs.button.data-api blur.bs.button.data-api', '[data-toggle^="button"]', function (e) {
      $(e.target).closest('.btn').toggleClass('focus', /^focus(in)?$/.test(e.type))
    })

}(jQuery);

/* ========================================================================
 * Bootstrap: carousel.js v3.3.6
 * http://getbootstrap.com/javascript/#carousel
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // CAROUSEL CLASS DEFINITION
  // =========================

  var Carousel = function (element, options) {
    this.$element    = $(element)
    this.$indicators = this.$element.find('.carousel-indicators')
    this.options     = options
    this.paused      = null
    this.sliding     = null
    this.interval    = null
    this.$active     = null
    this.$items      = null

    this.options.keyboard && this.$element.on('keydown.bs.carousel', $.proxy(this.keydown, this))

    this.options.pause == 'hover' && !('ontouchstart' in document.documentElement) && this.$element
      .on('mouseenter.bs.carousel', $.proxy(this.pause, this))
      .on('mouseleave.bs.carousel', $.proxy(this.cycle, this))
  }

  Carousel.VERSION  = '3.3.6'

  Carousel.TRANSITION_DURATION = 600

  Carousel.DEFAULTS = {
    interval: 5000,
    pause: 'hover',
    wrap: true,
    keyboard: true
  }

  Carousel.prototype.keydown = function (e) {
    if (/input|textarea/i.test(e.target.tagName)) return
    switch (e.which) {
      case 37: this.prev(); break
      case 39: this.next(); break
      default: return
    }

    e.preventDefault()
  }

  Carousel.prototype.cycle = function (e) {
    e || (this.paused = false)

    this.interval && clearInterval(this.interval)

    this.options.interval
      && !this.paused
      && (this.interval = setInterval($.proxy(this.next, this), this.options.interval))

    return this
  }

  Carousel.prototype.getItemIndex = function (item) {
    this.$items = item.parent().children('.item')
    return this.$items.index(item || this.$active)
  }

  Carousel.prototype.getItemForDirection = function (direction, active) {
    var activeIndex = this.getItemIndex(active)
    var willWrap = (direction == 'prev' && activeIndex === 0)
                || (direction == 'next' && activeIndex == (this.$items.length - 1))
    if (willWrap && !this.options.wrap) return active
    var delta = direction == 'prev' ? -1 : 1
    var itemIndex = (activeIndex + delta) %!t(MISSING)his.$items.length
    return this.$items.eq(itemIndex)
  }

  Carousel.prototype.to = function (pos) {
    var that        = this
    var activeIndex = this.getItemIndex(this.$active = this.$element.find('.item.active'))

    if (pos > (this.$items.length - 1) || pos < 0) return

    if (this.sliding)       return this.$element.one('slid.bs.carousel', function () { that.to(pos) }) // yes, "slid"
    if (activeIndex == pos) return this.pause().cycle()

    return this.slide(pos > activeIndex ? 'next' : 'prev', this.$items.eq(pos))
  }

  Carousel.prototype.pause = function (e) {
    e || (this.paused = true)

    if (this.$element.find('.next, .prev').length && $.support.transition) {
      this.$element.trigger($.support.transition.end)
      this.cycle(true)
    }

    this.interval = clearInterval(this.interval)

    return this
  }

  Carousel.prototype.next = function () {
    if (this.sliding) return
    return this.slide('next')
  }

  Carousel.prototype.prev = function () {
    if (this.sliding) return
    return this.slide('prev')
  }

  Carousel.prototype.slide = function (type, next) {
    var $active   = this.$element.find('.item.active')
    var $next     = next || this.getItemForDirection(type, $active)
    var isCycling = this.interval
    var direction = type == 'next' ? 'left' : 'right'
    var that      = this

    if ($next.hasClass('active')) return (this.sliding = false)

    var relatedTarget = $next[0]
    var slideEvent = $.Event('slide.bs.carousel', {
      relatedTarget: relatedTarget,
      direction: direction
    })
    this.$element.trigger(slideEvent)
    if (slideEvent.isDefaultPrevented()) return

    this.sliding = true

    isCycling && this.pause()

    if (this.$indicators.length) {
      this.$indicators.find('.active').removeClass('active')
      var $nextIndicator = $(this.$indicators.children()[this.getItemIndex($next)])
      $nextIndicator && $nextIndicator.addClass('active')
    }

    var slidEvent = $.Event('slid.bs.carousel', { relatedTarget: relatedTarget, direction: direction }) // yes, "slid"
    if ($.support.transition && this.$element.hasClass('slide')) {
      $next.addClass(type)
      $next[0].offsetWidth // force reflow
      $active.addClass(direction)
      $next.addClass(direction)
      $active
        .one('bsTransitionEnd', function () {
          $next.removeClass([type, direction].join(' ')).addClass('active')
          $active.removeClass(['active', direction].join(' '))
          that.sliding = false
          setTimeout(function () {
            that.$element.trigger(slidEvent)
          }, 0)
        })
        .emulateTransitionEnd(Carousel.TRANSITION_DURATION)
    } else {
      $active.removeClass('active')
      $next.addClass('active')
      this.sliding = false
      this.$element.trigger(slidEvent)
    }

    isCycling && this.cycle()

    return this
  }


  // CAROUSEL PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.carousel')
      var options = $.extend({}, Carousel.DEFAULTS, $this.data(), typeof option == 'object' && option)
      var action  = typeof option == 'string' ? option : options.slide

      if (!data) $this.data('bs.carousel', (data = new Carousel(this, options)))
      if (typeof option == 'number') data.to(option)
      else if (action) data[action]()
      else if (options.interval) data.pause().cycle()
    })
  }

  var old = $.fn.carousel

  $.fn.carousel             = Plugin
  $.fn.carousel.Constructor = Carousel


  // CAROUSEL NO CONFLICT
  // ====================

  $.fn.carousel.noConflict = function () {
    $.fn.carousel = old
    return this
  }


  // CAROUSEL DATA-API
  // =================

  var clickHandler = function (e) {
    var href
    var $this   = $(this)
    var $target = $($this.attr('data-target') || (href = $this.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '')) // strip for ie7
    if (!$target.hasClass('carousel')) return
    var options = $.extend({}, $target.data(), $this.data())
    var slideIndex = $this.attr('data-slide-to')
    if (slideIndex) options.interval = false

    Plugin.call($target, options)

    if (slideIndex) {
      $target.data('bs.carousel').to(slideIndex)
    }

    e.preventDefault()
  }

  $(document)
    .on('click.bs.carousel.data-api', '[data-slide]', clickHandler)
    .on('click.bs.carousel.data-api', '[data-slide-to]', clickHandler)

  $(window).on('load', function () {
    $('[data-ride="carousel"]').each(function () {
      var $carousel = $(this)
      Plugin.call($carousel, $carousel.data())
    })
  })

}(jQuery);

/* ========================================================================
 * Bootstrap: collapse.js v3.3.6
 * http://getbootstrap.com/javascript/#collapse
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // COLLAPSE PUBLIC CLASS DEFINITION
  // ================================

  var Collapse = function (element, options) {
    this.$element      = $(element)
    this.options       = $.extend({}, Collapse.DEFAULTS, options)
    this.$trigger      = $('[data-toggle="collapse"][href="#' + element.id + '"],' +
                           '[data-toggle="collapse"][data-target="#' + element.id + '"]')
    this.transitioning = null

    if (this.options.parent) {
      this.$parent = this.getParent()
    } else {
      this.addAriaAndCollapsedClass(this.$element, this.$trigger)
    }

    if (this.options.toggle) this.toggle()
  }

  Collapse.VERSION  = '3.3.6'

  Collapse.TRANSITION_DURATION = 350

  Collapse.DEFAULTS = {
    toggle: true
  }

  Collapse.prototype.dimension = function () {
    var hasWidth = this.$element.hasClass('width')
    return hasWidth ? 'width' : 'height'
  }

  Collapse.prototype.show = function () {
    if (this.transitioning || this.$element.hasClass('in')) return

    var activesData
    var actives = this.$parent && this.$parent.children('.panel').children('.in, .collapsing')

    if (actives && actives.length) {
      activesData = actives.data('bs.collapse')
      if (activesData && activesData.transitioning) return
    }

    var startEvent = $.Event('show.bs.collapse')
    this.$element.trigger(startEvent)
    if (startEvent.isDefaultPrevented()) return

    if (actives && actives.length) {
      Plugin.call(actives, 'hide')
      activesData || actives.data('bs.collapse', null)
    }

    var dimension = this.dimension()

    this.$element
      .removeClass('collapse')
      .addClass('collapsing')[dimension](0)
      .attr('aria-expanded', true)

    this.$trigger
      .removeClass('collapsed')
      .attr('aria-expanded', true)

    this.transitioning = 1

    var complete = function () {
      this.$element
        .removeClass('collapsing')
        .addClass('collapse in')[dimension]('')
      this.transitioning = 0
      this.$element
        .trigger('shown.bs.collapse')
    }

    if (!$.support.transition) return complete.call(this)

    var scrollSize = $.camelCase(['scroll', dimension].join('-'))

    this.$element
      .one('bsTransitionEnd', $.proxy(complete, this))
      .emulateTransitionEnd(Collapse.TRANSITION_DURATION)[dimension](this.$element[0][scrollSize])
  }

  Collapse.prototype.hide = function () {
    if (this.transitioning || !this.$element.hasClass('in')) return

    var startEvent = $.Event('hide.bs.collapse')
    this.$element.trigger(startEvent)
    if (startEvent.isDefaultPrevented()) return

    var dimension = this.dimension()

    this.$element[dimension](this.$element[dimension]())[0].offsetHeight

    this.$element
      .addClass('collapsing')
      .removeClass('collapse in')
      .attr('aria-expanded', false)

    this.$trigger
      .addClass('collapsed')
      .attr('aria-expanded', false)

    this.transitioning = 1

    var complete = function () {
      this.transitioning = 0
      this.$element
        .removeClass('collapsing')
        .addClass('collapse')
        .trigger('hidden.bs.collapse')
    }

    if (!$.support.transition) return complete.call(this)

    this.$element
      [dimension](0)
      .one('bsTransitionEnd', $.proxy(complete, this))
      .emulateTransitionEnd(Collapse.TRANSITION_DURATION)
  }

  Collapse.prototype.toggle = function () {
    this[this.$element.hasClass('in') ? 'hide' : 'show']()
  }

  Collapse.prototype.getParent = function () {
    return $(this.options.parent)
      .find('[data-toggle="collapse"][data-parent="' + this.options.parent + '"]')
      .each($.proxy(function (i, element) {
        var $element = $(element)
        this.addAriaAndCollapsedClass(getTargetFromTrigger($element), $element)
      }, this))
      .end()
  }

  Collapse.prototype.addAriaAndCollapsedClass = function ($element, $trigger) {
    var isOpen = $element.hasClass('in')

    $element.attr('aria-expanded', isOpen)
    $trigger
      .toggleClass('collapsed', !isOpen)
      .attr('aria-expanded', isOpen)
  }

  function getTargetFromTrigger($trigger) {
    var href
    var target = $trigger.attr('data-target')
      || (href = $trigger.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '') // strip for ie7

    return $(target)
  }


  // COLLAPSE PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.collapse')
      var options = $.extend({}, Collapse.DEFAULTS, $this.data(), typeof option == 'object' && option)

      if (!data && options.toggle && /show|hide/.test(option)) options.toggle = false
      if (!data) $this.data('bs.collapse', (data = new Collapse(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.collapse

  $.fn.collapse             = Plugin
  $.fn.collapse.Constructor = Collapse


  // COLLAPSE NO CONFLICT
  // ====================

  $.fn.collapse.noConflict = function () {
    $.fn.collapse = old
    return this
  }


  // COLLAPSE DATA-API
  // =================

  $(document).on('click.bs.collapse.data-api', '[data-toggle="collapse"]', function (e) {
    var $this   = $(this)

    if (!$this.attr('data-target')) e.preventDefault()

    var $target = getTargetFromTrigger($this)
    var data    = $target.data('bs.collapse')
    var option  = data ? 'toggle' : $this.data()

    Plugin.call($target, option)
  })

}(jQuery);

/* ========================================================================
 * Bootstrap: dropdown.js v3.3.6
 * http://getbootstrap.com/javascript/#dropdowns
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // DROPDOWN CLASS DEFINITION
  // =========================

  var backdrop = '.dropdown-backdrop'
  var toggle   = '[data-toggle="dropdown"]'
  var Dropdown = function (element) {
    $(element).on('click.bs.dropdown', this.toggle)
  }

  Dropdown.VERSION = '3.3.6'

  function getParent($this) {
    var selector = $this.attr('data-target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && /#[A-Za-z]/.test(selector) && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
    }

    var $parent = selector && $(selector)

    return $parent && $parent.length ? $parent : $this.parent()
  }

  function clearMenus(e) {
    if (e && e.which === 3) return
    $(backdrop).remove()
    $(toggle).each(function () {
      var $this         = $(this)
      var $parent       = getParent($this)
      var relatedTarget = { relatedTarget: this }

      if (!$parent.hasClass('open')) return

      if (e && e.type == 'click' && /input|textarea/i.test(e.target.tagName) && $.contains($parent[0], e.target)) return

      $parent.trigger(e = $.Event('hide.bs.dropdown', relatedTarget))

      if (e.isDefaultPrevented()) return

      $this.attr('aria-expanded', 'false')
      $parent.removeClass('open').trigger($.Event('hidden.bs.dropdown', relatedTarget))
    })
  }

  Dropdown.prototype.toggle = function (e) {
    var $this = $(this)

    if ($this.is('.disabled, :disabled')) return

    var $parent  = getParent($this)
    var isActive = $parent.hasClass('open')

    clearMenus()

    if (!isActive) {
      if ('ontouchstart' in document.documentElement && !$parent.closest('.navbar-nav').length) {
        // if mobile we use a backdrop because click events don't delegate
        $(document.createElement('div'))
          .addClass('dropdown-backdrop')
          .insertAfter($(this))
          .on('click', clearMenus)
      }

      var relatedTarget = { relatedTarget: this }
      $parent.trigger(e = $.Event('show.bs.dropdown', relatedTarget))

      if (e.isDefaultPrevented()) return

      $this
        .trigger('focus')
        .attr('aria-expanded', 'true')

      $parent
        .toggleClass('open')
        .trigger($.Event('shown.bs.dropdown', relatedTarget))
    }

    return false
  }

  Dropdown.prototype.keydown = function (e) {
    if (!/(38|40|27|32)/.test(e.which) || /input|textarea/i.test(e.target.tagName)) return

    var $this = $(this)

    e.preventDefault()
    e.stopPropagation()

    if ($this.is('.disabled, :disabled')) return

    var $parent  = getParent($this)
    var isActive = $parent.hasClass('open')

    if (!isActive && e.which != 27 || isActive && e.which == 27) {
      if (e.which == 27) $parent.find(toggle).trigger('focus')
      return $this.trigger('click')
    }

    var desc = ' li:not(.disabled):visible a'
    var $items = $parent.find('.dropdown-menu' + desc)

    if (!$items.length) return

    var index = $items.index(e.target)

    if (e.which == 38 && index > 0)                 index--         // up
    if (e.which == 40 && index < $items.length - 1) index++         // down
    if (!~index)                                    index = 0

    $items.eq(index).trigger('focus')
  }


  // DROPDOWN PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this)
      var data  = $this.data('bs.dropdown')

      if (!data) $this.data('bs.dropdown', (data = new Dropdown(this)))
      if (typeof option == 'string') data[option].call($this)
    })
  }

  var old = $.fn.dropdown

  $.fn.dropdown             = Plugin
  $.fn.dropdown.Constructor = Dropdown


  // DROPDOWN NO CONFLICT
  // ====================

  $.fn.dropdown.noConflict = function () {
    $.fn.dropdown = old
    return this
  }


  // APPLY TO STANDARD DROPDOWN ELEMENTS
  // ===================================

  $(document)
    .on('click.bs.dropdown.data-api', clearMenus)
    .on('click.bs.dropdown.data-api', '.dropdown form', function (e) { e.stopPropagation() })
    .on('click.bs.dropdown.data-api', toggle, Dropdown.prototype.toggle)
    .on('keydown.bs.dropdown.data-api', toggle, Dropdown.prototype.keydown)
    .on('keydown.bs.dropdown.data-api', '.dropdown-menu', Dropdown.prototype.keydown)

}(jQuery);

/* ========================================================================
 * Bootstrap: modal.js v3.3.6
 * http://getbootstrap.com/javascript/#modals
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // MODAL CLASS DEFINITION
  // ======================

  var Modal = function (element, options) {
    this.options             = options
    this.$body               = $(document.body)
    this.$element            = $(element)
    this.$dialog             = this.$element.find('.modal-dialog')
    this.$backdrop           = null
    this.isShown             = null
    this.originalBodyPad     = null
    this.scrollbarWidth      = 0
    this.ignoreBackdropClick = false

    if (this.options.remote) {
      this.$element
        .find('.modal-content')
        .load(this.options.remote, $.proxy(function () {
          this.$element.trigger('loaded.bs.modal')
        }, this))
    }
  }

  Modal.VERSION  = '3.3.6'

  Modal.TRANSITION_DURATION = 300
  Modal.BACKDROP_TRANSITION_DURATION = 150

  Modal.DEFAULTS = {
    backdrop: true,
    keyboard: true,
    show: true
  }

  Modal.prototype.toggle = function (_relatedTarget) {
    return this.isShown ? this.hide() : this.show(_relatedTarget)
  }

  Modal.prototype.show = function (_relatedTarget) {
    var that = this
    var e    = $.Event('show.bs.modal', { relatedTarget: _relatedTarget })

    this.$element.trigger(e)

    if (this.isShown || e.isDefaultPrevented()) return

    this.isShown = true

    this.checkScrollbar()
    this.setScrollbar()
    this.$body.addClass('modal-open')

    this.escape()
    this.resize()

    this.$element.on('click.dismiss.bs.modal', '[data-dismiss="modal"]', $.proxy(this.hide, this))

    this.$dialog.on('mousedown.dismiss.bs.modal', function () {
      that.$element.one('mouseup.dismiss.bs.modal', function (e) {
        if ($(e.target).is(that.$element)) that.ignoreBackdropClick = true
      })
    })

    this.backdrop(function () {
      var transition = $.support.transition && that.$element.hasClass('fade')

      if (!that.$element.parent().length) {
        that.$element.appendTo(that.$body) // don't move modals dom position
      }

      that.$element
        .show()
        .scrollTop(0)

      that.adjustDialog()

      if (transition) {
        that.$element[0].offsetWidth // force reflow
      }

      that.$element.addClass('in')

      that.enforceFocus()

      var e = $.Event('shown.bs.modal', { relatedTarget: _relatedTarget })

      transition ?
        that.$dialog // wait for modal to slide in
          .one('bsTransitionEnd', function () {
            that.$element.trigger('focus').trigger(e)
          })
          .emulateTransitionEnd(Modal.TRANSITION_DURATION) :
        that.$element.trigger('focus').trigger(e)
    })
  }

  Modal.prototype.hide = function (e) {
    if (e) e.preventDefault()

    e = $.Event('hide.bs.modal')

    this.$element.trigger(e)

    if (!this.isShown || e.isDefaultPrevented()) return

    this.isShown = false

    this.escape()
    this.resize()

    $(document).off('focusin.bs.modal')

    this.$element
      .removeClass('in')
      .off('click.dismiss.bs.modal')
      .off('mouseup.dismiss.bs.modal')

    this.$dialog.off('mousedown.dismiss.bs.modal')

    $.support.transition && this.$element.hasClass('fade') ?
      this.$element
        .one('bsTransitionEnd', $.proxy(this.hideModal, this))
        .emulateTransitionEnd(Modal.TRANSITION_DURATION) :
      this.hideModal()
  }

  Modal.prototype.enforceFocus = function () {
    $(document)
      .off('focusin.bs.modal') // guard against infinite focus loop
      .on('focusin.bs.modal', $.proxy(function (e) {
        if (this.$element[0] !== e.target && !this.$element.has(e.target).length) {
          this.$element.trigger('focus')
        }
      }, this))
  }

  Modal.prototype.escape = function () {
    if (this.isShown && this.options.keyboard) {
      this.$element.on('keydown.dismiss.bs.modal', $.proxy(function (e) {
        e.which == 27 && this.hide()
      }, this))
    } else if (!this.isShown) {
      this.$element.off('keydown.dismiss.bs.modal')
    }
  }

  Modal.prototype.resize = function () {
    if (this.isShown) {
      $(window).on('resize.bs.modal', $.proxy(this.handleUpdate, this))
    } else {
      $(window).off('resize.bs.modal')
    }
  }

  Modal.prototype.hideModal = function () {
    var that = this
    this.$element.hide()
    this.backdrop(function () {
      that.$body.removeClass('modal-open')
      that.resetAdjustments()
      that.resetScrollbar()
      that.$element.trigger('hidden.bs.modal')
    })
  }

  Modal.prototype.removeBackdrop = function () {
    this.$backdrop && this.$backdrop.remove()
    this.$backdrop = null
  }

  Modal.prototype.backdrop = function (callback) {
    var that = this
    var animate = this.$element.hasClass('fade') ? 'fade' : ''

    if (this.isShown && this.options.backdrop) {
      var doAnimate = $.support.transition && animate

      this.$backdrop = $(document.createElement('div'))
        .addClass('modal-backdrop ' + animate)
        .appendTo(this.$body)

      this.$element.on('click.dismiss.bs.modal', $.proxy(function (e) {
        if (this.ignoreBackdropClick) {
          this.ignoreBackdropClick = false
          return
        }
        if (e.target !== e.currentTarget) return
        this.options.backdrop == 'static'
          ? this.$element[0].focus()
          : this.hide()
      }, this))

      if (doAnimate) this.$backdrop[0].offsetWidth // force reflow

      this.$backdrop.addClass('in')

      if (!callback) return

      doAnimate ?
        this.$backdrop
          .one('bsTransitionEnd', callback)
          .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) :
        callback()

    } else if (!this.isShown && this.$backdrop) {
      this.$backdrop.removeClass('in')

      var callbackRemove = function () {
        that.removeBackdrop()
        callback && callback()
      }
      $.support.transition && this.$element.hasClass('fade') ?
        this.$backdrop
          .one('bsTransitionEnd', callbackRemove)
          .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) :
        callbackRemove()

    } else if (callback) {
      callback()
    }
  }

  // these following methods are used to handle overflowing modals

  Modal.prototype.handleUpdate = function () {
    this.adjustDialog()
  }

  Modal.prototype.adjustDialog = function () {
    var modalIsOverflowing = this.$element[0].scrollHeight > document.documentElement.clientHeight

    this.$element.css({
      paddingLeft:  !this.bodyIsOverflowing && modalIsOverflowing ? this.scrollbarWidth : '',
      paddingRight: this.bodyIsOverflowing && !modalIsOverflowing ? this.scrollbarWidth : ''
    })
  }

  Modal.prototype.resetAdjustments = function () {
    this.$element.css({
      paddingLeft: '',
      paddingRight: ''
    })
  }

  Modal.prototype.checkScrollbar = function () {
    var fullWindowWidth = window.innerWidth
    if (!fullWindowWidth) { // workaround for missing window.innerWidth in IE8
      var documentElementRect = document.documentElement.getBoundingClientRect()
      fullWindowWidth = documentElementRect.right - Math.abs(documentElementRect.left)
    }
    this.bodyIsOverflowing = document.body.clientWidth < fullWindowWidth
    this.scrollbarWidth = this.measureScrollbar()
  }

  Modal.prototype.setScrollbar = function () {
    var bodyPad = parseInt((this.$body.css('padding-right') || 0), 10)
    this.originalBodyPad = document.body.style.paddingRight || ''
    if (this.bodyIsOverflowing) this.$body.css('padding-right', bodyPad + this.scrollbarWidth)
  }

  Modal.prototype.resetScrollbar = function () {
    this.$body.css('padding-right', this.originalBodyPad)
  }

  Modal.prototype.measureScrollbar = function () { // thx walsh
    var scrollDiv = document.createElement('div')
    scrollDiv.className = 'modal-scrollbar-measure'
    this.$body.append(scrollDiv)
    var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth
    this.$body[0].removeChild(scrollDiv)
    return scrollbarWidth
  }


  // MODAL PLUGIN DEFINITION
  // =======================

  function Plugin(option, _relatedTarget) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.modal')
      var options = $.extend({}, Modal.DEFAULTS, $this.data(), typeof option == 'object' && option)

      if (!data) $this.data('bs.modal', (data = new Modal(this, options)))
      if (typeof option == 'string') data[option](_relatedTarget)
      else if (options.show) data.show(_relatedTarget)
    })
  }

  var old = $.fn.modal

  $.fn.modal             = Plugin
  $.fn.modal.Constructor = Modal


  // MODAL NO CONFLICT
  // =================

  $.fn.modal.noConflict = function () {
    $.fn.modal = old
    return this
  }


  // MODAL DATA-API
  // ==============

  $(document).on('click.bs.modal.data-api', '[data-toggle="modal"]', function (e) {
    var $this   = $(this)
    var href    = $this.attr('href')
    var $target = $($this.attr('data-target') || (href && href.replace(/.*(?=#[^\s]+$)/, ''))) // strip for ie7
    var option  = $target.data('bs.modal') ? 'toggle' : $.extend({ remote: !/#/.test(href) && href }, $target.data(), $this.data())

    if ($this.is('a')) e.preventDefault()

    $target.one('show.bs.modal', function (showEvent) {
      if (showEvent.isDefaultPrevented()) return // only register focus restorer if modal will actually get shown
      $target.one('hidden.bs.modal', function () {
        $this.is(':visible') && $this.trigger('focus')
      })
    })
    Plugin.call($target, option, this)
  })

}(jQuery);

/* ========================================================================
 * Bootstrap: tooltip.js v3.3.6
 * http://getbootstrap.com/javascript/#tooltip
 * Inspired by the original jQuery.tipsy by Jason Frame
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // TOOLTIP PUBLIC CLASS DEFINITION
  // ===============================

  var Tooltip = function (element, options) {
    this.type       = null
    this.options    = null
    this.enabled    = null
    this.timeout    = null
    this.hoverState = null
    this.$element   = null
    this.inState    = null

    this.init('tooltip', element, options)
  }

  Tooltip.VERSION  = '3.3.6'

  Tooltip.TRANSITION_DURATION = 150

  Tooltip.DEFAULTS = {
    animation: true,
    placement: 'top',
    selector: false,
    template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
    trigger: 'hover focus',
    title: '',
    delay: 0,
    html: false,
    container: false,
    viewport: {
      selector: 'body',
      padding: 0
    }
  }

  Tooltip.prototype.init = function (type, element, options) {
    this.enabled   = true
    this.type      = type
    this.$element  = $(element)
    this.options   = this.getOptions(options)
    this.$viewport = this.options.viewport && $($.isFunction(this.options.viewport) ? this.options.viewport.call(this, this.$element) : (this.options.viewport.selector || this.options.viewport))
    this.inState   = { click: false, hover: false, focus: false }

    if (this.$element[0] instanceof document.constructor && !this.options.selector) {
      throw new Error('`selector` option must be specified when initializing ' + this.type + ' on the window.document object!')
    }

    var triggers = this.options.trigger.split(' ')

    for (var i = triggers.length; i--;) {
      var trigger = triggers[i]

      if (trigger == 'click') {
        this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this))
      } else if (trigger != 'manual') {
        var eventIn  = trigger == 'hover' ? 'mouseenter' : 'focusin'
        var eventOut = trigger == 'hover' ? 'mouseleave' : 'focusout'

        this.$element.on(eventIn  + '.' + this.type, this.options.selector, $.proxy(this.enter, this))
        this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this))
      }
    }

    this.options.selector ?
      (this._options = $.extend({}, this.options, { trigger: 'manual', selector: '' })) :
      this.fixTitle()
  }

  Tooltip.prototype.getDefaults = function () {
    return Tooltip.DEFAULTS
  }

  Tooltip.prototype.getOptions = function (options) {
    options = $.extend({}, this.getDefaults(), this.$element.data(), options)

    if (options.delay && typeof options.delay == 'number') {
      options.delay = {
        show: options.delay,
        hide: options.delay
      }
    }

    return options
  }

  Tooltip.prototype.getDelegateOptions = function () {
    var options  = {}
    var defaults = this.getDefaults()

    this._options && $.each(this._options, function (key, value) {
      if (defaults[key] != value) options[key] = value
    })

    return options
  }

  Tooltip.prototype.enter = function (obj) {
    var self = obj instanceof this.constructor ?
      obj : $(obj.currentTarget).data('bs.' + this.type)

    if (!self) {
      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())
      $(obj.currentTarget).data('bs.' + this.type, self)
    }

    if (obj instanceof $.Event) {
      self.inState[obj.type == 'focusin' ? 'focus' : 'hover'] = true
    }

    if (self.tip().hasClass('in') || self.hoverState == 'in') {
      self.hoverState = 'in'
      return
    }

    clearTimeout(self.timeout)

    self.hoverState = 'in'

    if (!self.options.delay || !self.options.delay.show) return self.show()

    self.timeout = setTimeout(function () {
      if (self.hoverState == 'in') self.show()
    }, self.options.delay.show)
  }

  Tooltip.prototype.isInStateTrue = function () {
    for (var key in this.inState) {
      if (this.inState[key]) return true
    }

    return false
  }

  Tooltip.prototype.leave = function (obj) {
    var self = obj instanceof this.constructor ?
      obj : $(obj.currentTarget).data('bs.' + this.type)

    if (!self) {
      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())
      $(obj.currentTarget).data('bs.' + this.type, self)
    }

    if (obj instanceof $.Event) {
      self.inState[obj.type == 'focusout' ? 'focus' : 'hover'] = false
    }

    if (self.isInStateTrue()) return

    clearTimeout(self.timeout)

    self.hoverState = 'out'

    if (!self.options.delay || !self.options.delay.hide) return self.hide()

    self.timeout = setTimeout(function () {
      if (self.hoverState == 'out') self.hide()
    }, self.options.delay.hide)
  }

  Tooltip.prototype.show = function () {
    var e = $.Event('show.bs.' + this.type)

    if (this.hasContent() && this.enabled) {
      this.$element.trigger(e)

      var inDom = $.contains(this.$element[0].ownerDocument.documentElement, this.$element[0])
      if (e.isDefaultPrevented() || !inDom) return
      var that = this

      var $tip = this.tip()

      var tipId = this.getUID(this.type)

      this.setContent()
      $tip.attr('id', tipId)
      this.$element.attr('aria-describedby', tipId)

      if (this.options.animation) $tip.addClass('fade')

      var placement = typeof this.options.placement == 'function' ?
        this.options.placement.call(this, $tip[0], this.$element[0]) :
        this.options.placement

      var autoToken = /\s?auto?\s?/i
      var autoPlace = autoToken.test(placement)
      if (autoPlace) placement = placement.replace(autoToken, '') || 'top'

      $tip
        .detach()
        .css({ top: 0, left: 0, display: 'block' })
        .addClass(placement)
        .data('bs.' + this.type, this)

      this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element)
      this.$element.trigger('inserted.bs.' + this.type)

      var pos          = this.getPosition()
      var actualWidth  = $tip[0].offsetWidth
      var actualHeight = $tip[0].offsetHeight

      if (autoPlace) {
        var orgPlacement = placement
        var viewportDim = this.getPosition(this.$viewport)

        placement = placement == 'bottom' && pos.bottom + actualHeight > viewportDim.bottom ? 'top'    :
                    placement == 'top'    && pos.top    - actualHeight < viewportDim.top    ? 'bottom' :
                    placement == 'right'  && pos.right  + actualWidth  > viewportDim.width  ? 'left'   :
                    placement == 'left'   && pos.left   - actualWidth  < viewportDim.left   ? 'right'  :
                    placement

        $tip
          .removeClass(orgPlacement)
          .addClass(placement)
      }

      var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight)

      this.applyPlacement(calculatedOffset, placement)

      var complete = function () {
        var prevHoverState = that.hoverState
        that.$element.trigger('shown.bs.' + that.type)
        that.hoverState = null

        if (prevHoverState == 'out') that.leave(that)
      }

      $.support.transition && this.$tip.hasClass('fade') ?
        $tip
          .one('bsTransitionEnd', complete)
          .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :
        complete()
    }
  }

  Tooltip.prototype.applyPlacement = function (offset, placement) {
    var $tip   = this.tip()
    var width  = $tip[0].offsetWidth
    var height = $tip[0].offsetHeight

    // manually read margins because getBoundingClientRect includes difference
    var marginTop = parseInt($tip.css('margin-top'), 10)
    var marginLeft = parseInt($tip.css('margin-left'), 10)

    // we must check for NaN for ie 8/9
    if (isNaN(marginTop))  marginTop  = 0
    if (isNaN(marginLeft)) marginLeft = 0

    offset.top  += marginTop
    offset.left += marginLeft

    // $.fn.offset doesn't round pixel values
    // so we use setOffset directly with our own function B-0
    $.offset.setOffset($tip[0], $.extend({
      using: function (props) {
        $tip.css({
          top: Math.round(props.top),
          left: Math.round(props.left)
        })
      }
    }, offset), 0)

    $tip.addClass('in')

    // check to see if placing tip in new offset caused the tip to resize itself
    var actualWidth  = $tip[0].offsetWidth
    var actualHeight = $tip[0].offsetHeight

    if (placement == 'top' && actualHeight != height) {
      offset.top = offset.top + height - actualHeight
    }

    var delta = this.getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight)

    if (delta.left) offset.left += delta.left
    else offset.top += delta.top

    var isVertical          = /top|bottom/.test(placement)
    var arrowDelta          = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight
    var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight'

    $tip.offset(offset)
    this.replaceArrow(arrowDelta, $tip[0][arrowOffsetPosition], isVertical)
  }

  Tooltip.prototype.replaceArrow = function (delta, dimension, isVertical) {
    this.arrow()
      .css(isVertical ? 'left' : 'top', 50 * (1 - delta / dimension) + '%!'(MISSING))
      .css(isVertical ? 'top' : 'left', '')
  }

  Tooltip.prototype.setContent = function () {
    var $tip  = this.tip()
    var title = this.getTitle()

    $tip.find('.tooltip-inner')[this.options.html ? 'html' : 'text'](title)
    $tip.removeClass('fade in top bottom left right')
  }

  Tooltip.prototype.hide = function (callback) {
    var that = this
    var $tip = $(this.$tip)
    var e    = $.Event('hide.bs.' + this.type)

    function complete() {
      if (that.hoverState != 'in') $tip.detach()
      that.$element
        .removeAttr('aria-describedby')
        .trigger('hidden.bs.' + that.type)
      callback && callback()
    }

    this.$element.trigger(e)

    if (e.isDefaultPrevented()) return

    $tip.removeClass('in')

    $.support.transition && $tip.hasClass('fade') ?
      $tip
        .one('bsTransitionEnd', complete)
        .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :
      complete()

    this.hoverState = null

    return this
  }

  Tooltip.prototype.fixTitle = function () {
    var $e = this.$element
    if ($e.attr('title') || typeof $e.attr('data-original-title') != 'string') {
      $e.attr('data-original-title', $e.attr('title') || '').attr('title', '')
    }
  }

  Tooltip.prototype.hasContent = function () {
    return this.getTitle()
  }

  Tooltip.prototype.getPosition = function ($element) {
    $element   = $element || this.$element

    var el     = $element[0]
    var isBody = el.tagName == 'BODY'

    var elRect    = el.getBoundingClientRect()
    if (elRect.width == null) {
      // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093
      elRect = $.extend({}, elRect, { width: elRect.right - elRect.left, height: elRect.bottom - elRect.top })
    }
    var elOffset  = isBody ? { top: 0, left: 0 } : $element.offset()
    var scroll    = { scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.scrollTop() }
    var outerDims = isBody ? { width: $(window).width(), height: $(window).height() } : null

    return $.extend({}, elRect, scroll, outerDims, elOffset)
  }

  Tooltip.prototype.getCalculatedOffset = function (placement, pos, actualWidth, actualHeight) {
    return placement == 'bottom' ? { top: pos.top + pos.height,   left: pos.left + pos.width / 2 - actualWidth / 2 } :
           placement == 'top'    ? { top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2 } :
           placement == 'left'   ? { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth } :
        /* placement == 'right' */ { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width }

  }

  Tooltip.prototype.getViewportAdjustedDelta = function (placement, pos, actualWidth, actualHeight) {
    var delta = { top: 0, left: 0 }
    if (!this.$viewport) return delta

    var viewportPadding = this.options.viewport && this.options.viewport.padding || 0
    var viewportDimensions = this.getPosition(this.$viewport)

    if (/right|left/.test(placement)) {
      var topEdgeOffset    = pos.top - viewportPadding - viewportDimensions.scroll
      var bottomEdgeOffset = pos.top + viewportPadding - viewportDimensions.scroll + actualHeight
      if (topEdgeOffset < viewportDimensions.top) { // top overflow
        delta.top = viewportDimensions.top - topEdgeOffset
      } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow
        delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset
      }
    } else {
      var leftEdgeOffset  = pos.left - viewportPadding
      var rightEdgeOffset = pos.left + viewportPadding + actualWidth
      if (leftEdgeOffset < viewportDimensions.left) { // left overflow
        delta.left = viewportDimensions.left - leftEdgeOffset
      } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow
        delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset
      }
    }

    return delta
  }

  Tooltip.prototype.getTitle = function () {
    var title
    var $e = this.$element
    var o  = this.options

    title = $e.attr('data-original-title')
      || (typeof o.title == 'function' ? o.title.call($e[0]) :  o.title)

    return title
  }

  Tooltip.prototype.getUID = function (prefix) {
    do prefix += ~~(Math.random() * 1000000)
    while (document.getElementById(prefix))
    return prefix
  }

  Tooltip.prototype.tip = function () {
    if (!this.$tip) {
      this.$tip = $(this.options.template)
      if (this.$tip.length != 1) {
        throw new Error(this.type + ' `template` option must consist of exactly 1 top-level element!')
      }
    }
    return this.$tip
  }

  Tooltip.prototype.arrow = function () {
    return (this.$arrow = this.$arrow || this.tip().find('.tooltip-arrow'))
  }

  Tooltip.prototype.enable = function () {
    this.enabled = true
  }

  Tooltip.prototype.disable = function () {
    this.enabled = false
  }

  Tooltip.prototype.toggleEnabled = function () {
    this.enabled = !this.enabled
  }

  Tooltip.prototype.toggle = function (e) {
    var self = this
    if (e) {
      self = $(e.currentTarget).data('bs.' + this.type)
      if (!self) {
        self = new this.constructor(e.currentTarget, this.getDelegateOptions())
        $(e.currentTarget).data('bs.' + this.type, self)
      }
    }

    if (e) {
      self.inState.click = !self.inState.click
      if (self.isInStateTrue()) self.enter(self)
      else self.leave(self)
    } else {
      self.tip().hasClass('in') ? self.leave(self) : self.enter(self)
    }
  }

  Tooltip.prototype.destroy = function () {
    var that = this
    clearTimeout(this.timeout)
    this.hide(function () {
      that.$element.off('.' + that.type).removeData('bs.' + that.type)
      if (that.$tip) {
        that.$tip.detach()
      }
      that.$tip = null
      that.$arrow = null
      that.$viewport = null
    })
  }


  // TOOLTIP PLUGIN DEFINITION
  // =========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.tooltip')
      var options = typeof option == 'object' && option

      if (!data && /destroy|hide/.test(option)) return
      if (!data) $this.data('bs.tooltip', (data = new Tooltip(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.tooltip

  $.fn.tooltip             = Plugin
  $.fn.tooltip.Constructor = Tooltip


  // TOOLTIP NO CONFLICT
  // ===================

  $.fn.tooltip.noConflict = function () {
    $.fn.tooltip = old
    return this
  }

}(jQuery);

/* ========================================================================
 * Bootstrap: popover.js v3.3.6
 * http://getbootstrap.com/javascript/#popovers
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // POPOVER PUBLIC CLASS DEFINITION
  // ===============================

  var Popover = function (element, options) {
    this.init('popover', element, options)
  }

  if (!$.fn.tooltip) throw new Error('Popover requires tooltip.js')

  Popover.VERSION  = '3.3.6'

  Popover.DEFAULTS = $.extend({}, $.fn.tooltip.Constructor.DEFAULTS, {
    placement: 'right',
    trigger: 'click',
    content: '',
    template: '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'
  })


  // NOTE: POPOVER EXTENDS tooltip.js
  // ================================

  Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype)

  Popover.prototype.constructor = Popover

  Popover.prototype.getDefaults = function () {
    return Popover.DEFAULTS
  }

  Popover.prototype.setContent = function () {
    var $tip    = this.tip()
    var title   = this.getTitle()
    var content = this.getContent()

    $tip.find('.popover-title')[this.options.html ? 'html' : 'text'](title)
    $tip.find('.popover-content').children().detach().end()[ // we use append for html objects to maintain js events
      this.options.html ? (typeof content == 'string' ? 'html' : 'append') : 'text'
    ](content)

    $tip.removeClass('fade top bottom left right in')

    // IE8 doesn't accept hiding via the `:empty` pseudo selector, we have to do
    // this manually by checking the contents.
    if (!$tip.find('.popover-title').html()) $tip.find('.popover-title').hide()
  }

  Popover.prototype.hasContent = function () {
    return this.getTitle() || this.getContent()
  }

  Popover.prototype.getContent = function () {
    var $e = this.$element
    var o  = this.options

    return $e.attr('data-content')
      || (typeof o.content == 'function' ?
            o.content.call($e[0]) :
            o.content)
  }

  Popover.prototype.arrow = function () {
    return (this.$arrow = this.$arrow || this.tip().find('.arrow'))
  }


  // POPOVER PLUGIN DEFINITION
  // =========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.popover')
      var options = typeof option == 'object' && option

      if (!data && /destroy|hide/.test(option)) return
      if (!data) $this.data('bs.popover', (data = new Popover(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.popover

  $.fn.popover             = Plugin
  $.fn.popover.Constructor = Popover


  // POPOVER NO CONFLICT
  // ===================

  $.fn.popover.noConflict = function () {
    $.fn.popover = old
    return this
  }

}(jQuery);

/* ========================================================================
 * Bootstrap: scrollspy.js v3.3.6
 * http://getbootstrap.com/javascript/#scrollspy
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // SCROLLSPY CLASS DEFINITION
  // ==========================

  function ScrollSpy(element, options) {
    this.$body          = $(document.body)
    this.$scrollElement = $(element).is(document.body) ? $(window) : $(element)
    this.options        = $.extend({}, ScrollSpy.DEFAULTS, options)
    this.selector       = (this.options.target || '') + ' .nav li > a'
    this.offsets        = []
    this.targets        = []
    this.activeTarget   = null
    this.scrollHeight   = 0

    this.$scrollElement.on('scroll.bs.scrollspy', $.proxy(this.process, this))
    this.refresh()
    this.process()
  }

  ScrollSpy.VERSION  = '3.3.6'

  ScrollSpy.DEFAULTS = {
    offset: 10
  }

  ScrollSpy.prototype.getScrollHeight = function () {
    return this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight)
  }

  ScrollSpy.prototype.refresh = function () {
    var that          = this
    var offsetMethod  = 'offset'
    var offsetBase    = 0

    this.offsets      = []
    this.targets      = []
    this.scrollHeight = this.getScrollHeight()

    if (!$.isWindow(this.$scrollElement[0])) {
      offsetMethod = 'position'
      offsetBase   = this.$scrollElement.scrollTop()
    }

    this.$body
      .find(this.selector)
      .map(function () {
        var $el   = $(this)
        var href  = $el.data('target') || $el.attr('href')
        var $href = /^#./.test(href) && $(href)

        return ($href
          && $href.length
          && $href.is(':visible')
          && [[$href[offsetMethod]().top + offsetBase, href]]) || null
      })
      .sort(function (a, b) { return a[0] - b[0] })
      .each(function () {
        that.offsets.push(this[0])
        that.targets.push(this[1])
      })
  }

  ScrollSpy.prototype.process = function () {
    var scrollTop    = this.$scrollElement.scrollTop() + this.options.offset
    var scrollHeight = this.getScrollHeight()
    var maxScroll    = this.options.offset + scrollHeight - this.$scrollElement.height()
    var offsets      = this.offsets
    var targets      = this.targets
    var activeTarget = this.activeTarget
    var i

    if (this.scrollHeight != scrollHeight) {
      this.refresh()
    }

    if (scrollTop >= maxScroll) {
      return activeTarget != (i = targets[targets.length - 1]) && this.activate(i)
    }

    if (activeTarget && scrollTop < offsets[0]) {
      this.activeTarget = null
      return this.clear()
    }

    for (i = offsets.length; i--;) {
      activeTarget != targets[i]
        && scrollTop >= offsets[i]
        && (offsets[i + 1] === undefined || scrollTop < offsets[i + 1])
        && this.activate(targets[i])
    }
  }

  ScrollSpy.prototype.activate = function (target) {
    this.activeTarget = target

    this.clear()

    var selector = this.selector +
      '[data-target="' + target + '"],' +
      this.selector + '[href="' + target + '"]'

    var active = $(selector)
      .parents('li')
      .addClass('active')

    if (active.parent('.dropdown-menu').length) {
      active = active
        .closest('li.dropdown')
        .addClass('active')
    }

    active.trigger('activate.bs.scrollspy')
  }

  ScrollSpy.prototype.clear = function () {
    $(this.selector)
      .parentsUntil(this.options.target, '.active')
      .removeClass('active')
  }


  // SCROLLSPY PLUGIN DEFINITION
  // ===========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.scrollspy')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.scrollspy', (data = new ScrollSpy(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.scrollspy

  $.fn.scrollspy             = Plugin
  $.fn.scrollspy.Constructor = ScrollSpy


  // SCROLLSPY NO CONFLICT
  // =====================

  $.fn.scrollspy.noConflict = function () {
    $.fn.scrollspy = old
    return this
  }


  // SCROLLSPY DATA-API
  // ==================

  $(window).on('load.bs.scrollspy.data-api', function () {
    $('[data-spy="scroll"]').each(function () {
      var $spy = $(this)
      Plugin.call($spy, $spy.data())
    })
  })

}(jQuery);

/* ========================================================================
 * Bootstrap: tab.js v3.3.6
 * http://getbootstrap.com/javascript/#tabs
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // TAB CLASS DEFINITION
  // ====================

  var Tab = function (element) {
    // jscs:disable requireDollarBeforejQueryAssignment
    this.element = $(element)
    // jscs:enable requireDollarBeforejQueryAssignment
  }

  Tab.VERSION = '3.3.6'

  Tab.TRANSITION_DURATION = 150

  Tab.prototype.show = function () {
    var $this    = this.element
    var $ul      = $this.closest('ul:not(.dropdown-menu)')
    var selector = $this.data('target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
    }

    if ($this.parent('li').hasClass('active')) return

    var $previous = $ul.find('.active:last a')
    var hideEvent = $.Event('hide.bs.tab', {
      relatedTarget: $this[0]
    })
    var showEvent = $.Event('show.bs.tab', {
      relatedTarget: $previous[0]
    })

    $previous.trigger(hideEvent)
    $this.trigger(showEvent)

    if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) return

    var $target = $(selector)

    this.activate($this.closest('li'), $ul)
    this.activate($target, $target.parent(), function () {
      $previous.trigger({
        type: 'hidden.bs.tab',
        relatedTarget: $this[0]
      })
      $this.trigger({
        type: 'shown.bs.tab',
        relatedTarget: $previous[0]
      })
    })
  }

  Tab.prototype.activate = function (element, container, callback) {
    var $active    = container.find('> .active')
    var transition = callback
      && $.support.transition
      && ($active.length && $active.hasClass('fade') || !!container.find('> .fade').length)

    function next() {
      $active
        .removeClass('active')
        .find('> .dropdown-menu > .active')
          .removeClass('active')
        .end()
        .find('[data-toggle="tab"]')
          .attr('aria-expanded', false)

      element
        .addClass('active')
        .find('[data-toggle="tab"]')
          .attr('aria-expanded', true)

      if (transition) {
        element[0].offsetWidth // reflow for transition
        element.addClass('in')
      } else {
        element.removeClass('fade')
      }

      if (element.parent('.dropdown-menu').length) {
        element
          .closest('li.dropdown')
            .addClass('active')
          .end()
          .find('[data-toggle="tab"]')
            .attr('aria-expanded', true)
      }

      callback && callback()
    }

    $active.length && transition ?
      $active
        .one('bsTransitionEnd', next)
        .emulateTransitionEnd(Tab.TRANSITION_DURATION) :
      next()

    $active.removeClass('in')
  }


  // TAB PLUGIN DEFINITION
  // =====================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this)
      var data  = $this.data('bs.tab')

      if (!data) $this.data('bs.tab', (data = new Tab(this)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.tab

  $.fn.tab             = Plugin
  $.fn.tab.Constructor = Tab


  // TAB NO CONFLICT
  // ===============

  $.fn.tab.noConflict = function () {
    $.fn.tab = old
    return this
  }


  // TAB DATA-API
  // ============

  var clickHandler = function (e) {
    e.preventDefault()
    Plugin.call($(this), 'show')
  }

  $(document)
    .on('click.bs.tab.data-api', '[data-toggle="tab"]', clickHandler)
    .on('click.bs.tab.data-api', '[data-toggle="pill"]', clickHandler)

}(jQuery);

/* ========================================================================
 * Bootstrap: affix.js v3.3.6
 * http://getbootstrap.com/javascript/#affix
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // AFFIX CLASS DEFINITION
  // ======================

  var Affix = function (element, options) {
    this.options = $.extend({}, Affix.DEFAULTS, options)

    this.$target = $(this.options.target)
      .on('scroll.bs.affix.data-api', $.proxy(this.checkPosition, this))
      .on('click.bs.affix.data-api',  $.proxy(this.checkPositionWithEventLoop, this))

    this.$element     = $(element)
    this.affixed      = null
    this.unpin        = null
    this.pinnedOffset = null

    this.checkPosition()
  }

  Affix.VERSION  = '3.3.6'

  Affix.RESET    = 'affix affix-top affix-bottom'

  Affix.DEFAULTS = {
    offset: 0,
    target: window
  }

  Affix.prototype.getState = function (scrollHeight, height, offsetTop, offsetBottom) {
    var scrollTop    = this.$target.scrollTop()
    var position     = this.$element.offset()
    var targetHeight = this.$target.height()

    if (offsetTop != null && this.affixed == 'top') return scrollTop < offsetTop ? 'top' : false

    if (this.affixed == 'bottom') {
      if (offsetTop != null) return (scrollTop + this.unpin <= position.top) ? false : 'bottom'
      return (scrollTop + targetHeight <= scrollHeight - offsetBottom) ? false : 'bottom'
    }

    var initializing   = this.affixed == null
    var colliderTop    = initializing ? scrollTop : position.top
    var colliderHeight = initializing ? targetHeight : height

    if (offsetTop != null && scrollTop <= offsetTop) return 'top'
    if (offsetBottom != null && (colliderTop + colliderHeight >= scrollHeight - offsetBottom)) return 'bottom'

    return false
  }

  Affix.prototype.getPinnedOffset = function () {
    if (this.pinnedOffset) return this.pinnedOffset
    this.$element.removeClass(Affix.RESET).addClass('affix')
    var scrollTop = this.$target.scrollTop()
    var position  = this.$element.offset()
    return (this.pinnedOffset = position.top - scrollTop)
  }

  Affix.prototype.checkPositionWithEventLoop = function () {
    setTimeout($.proxy(this.checkPosition, this), 1)
  }

  Affix.prototype.checkPosition = function () {
    if (!this.$element.is(':visible')) return

    var height       = this.$element.height()
    var offset       = this.options.offset
    var offsetTop    = offset.top
    var offsetBottom = offset.bottom
    var scrollHeight = Math.max($(document).height(), $(document.body).height())

    if (typeof offset != 'object')         offsetBottom = offsetTop = offset
    if (typeof offsetTop == 'function')    offsetTop    = offset.top(this.$element)
    if (typeof offsetBottom == 'function') offsetBottom = offset.bottom(this.$element)

    var affix = this.getState(scrollHeight, height, offsetTop, offsetBottom)

    if (this.affixed != affix) {
      if (this.unpin != null) this.$element.css('top', '')

      var affixType = 'affix' + (affix ? '-' + affix : '')
      var e         = $.Event(affixType + '.bs.affix')

      this.$element.trigger(e)

      if (e.isDefaultPrevented()) return

      this.affixed = affix
      this.unpin = affix == 'bottom' ? this.getPinnedOffset() : null

      this.$element
        .removeClass(Affix.RESET)
        .addClass(affixType)
        .trigger(affixType.replace('affix', 'affixed') + '.bs.affix')
    }

    if (affix == 'bottom') {
      this.$element.offset({
        top: scrollHeight - height - offsetBottom
      })
    }
  }


  // AFFIX PLUGIN DEFINITION
  // =======================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.affix')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.affix', (data = new Affix(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.affix

  $.fn.affix             = Plugin
  $.fn.affix.Constructor = Affix


  // AFFIX NO CONFLICT
  // =================

  $.fn.affix.noConflict = function () {
    $.fn.affix = old
    return this
  }


  // AFFIX DATA-API
  // ==============

  $(window).on('load', function () {
    $('[data-spy="affix"]').each(function () {
      var $spy = $(this)
      var data = $spy.data()

      data.offset = data.offset || {}

      if (data.offsetBottom != null) data.offset.bottom = data.offsetBottom
      if (data.offsetTop    != null) data.offset.top    = data.offsetTop

      Plugin.call($spy, data)
    })
  })

}(jQuery);
// This file is autogenerated via the `commonjs` Grunt task. You can require() this file in a CommonJS environment.
require('../../js/transition.js')
require('../../js/alert.js')
require('../../js/button.js')
require('../../js/carousel.js')
require('../../js/collapse.js')
require('../../js/dropdown.js')
require('../../js/modal.js')
require('../../js/tooltip.js')
require('../../js/popover.js')
require('../../js/scrollspy.js')
require('../../js/tab.js')
require('../../js/affix.js')
<div class="modal-header">
  <button type="button" class="close" ng-click="cancel()">
    <span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
  <h4 class="modal-title" id="myModalLabel">Load Data</h4>
</div>
<div class="modal-body" id="myModalBody">
  <div class="row">
    <div id="details" class="col-xs-12 col-md-12">
      <nav class="navbar navbar-default">
        <div class="container-fluid">
          <div class="navbar-header">
            <h4><i class="fa fa-info-circle"></i>Hover over the labels to view the description</h4>
          </div>
        </div>
      </nav>
      <form ng-submit="ok()">
        <div class="form-group">
          <label for="inputPath">Path</label>
          <input id="inputPath" class="form-control" name="inputPath" type="text" ng-model="loadDataForm.inputPath"
            placeHolder="Enter Path" required="required" ng-change="searchPath(loadDataForm.inputPath)" ng-focus="showInputPathTreeBrowser = true">
          <div id="inputPathTreeBrowser" class="panel panel-primary tree-scroller-cust1" ng-show="showInputPathTreeBrowser">
            <div class="panel-body">
              <treecontrol class="tree-classic" tree-model="dataForTheTree"
              options="treeOptions" on-node-toggle="onNodeToggle(node,expanded)" on-selection="onSelection(node,selected)">
                {{node.folder}}
              </treecontrol>
            </div>
          </div>
        </div>
        <div class="form-group">
          <label for="inputFileType">Input File Type</label>
          <select class="form-control" name="inputFileType" ng-model="loadDataForm.inputFileType" ng-change="updateMlcpCommand()" ng-focus="hideInputPathTreeBrowser()">
            <option value="aggregates">Aggregates</option>
            <option value="archive">Archive</option>
            <option value="delimited_text">Delimited Text</option>
            <option value="delimited_json">Delimited Json</option>
            <option value="documents">Documents</option>
            <option value="forest">Forest</option>
            <option value="rdf">RDF</option>
            <option value="sequencefile">Sequence File</option>
          </select>
        </div>
        <div class="form-group">
          <uib-accordion close-others="true">
            <uib-accordion-group heading="{{group.category}}" ng-repeat="group in groups" ng-show="showBasedOnCategoryAndInputFileType(group.category,loadDataForm.inputFileType)">
			        <div class="form-group" ng-repeat="setting in group.settings" ng-show="showIfHasNoFilterFieldOrWithSpecifiedValue(setting['FilterField'],setting['FilterValue'],group.settings)">
			          <input type="checkbox" name="{{setting['Field']}}" ng-if="setting['Type'] === 'boolean'" ng-model="setting['Value']" value="true" ng-change="updateMlcpCommand()" ng-focus="hideInputPathTreeBrowser()">
                <label class="control-label" for="{{setting['Field']}}" popover-trigger="mouseenter" uib-popover="{{setting['Description']}}">{{setting['Label']}}</label><br ng-if="setting['Type'] !== 'boolean'"/>
			          <input type="text" class="form-control" name="{{setting['Field']}}" ng-if="isText(setting['Type'])" ng-model="setting['Value']" placeholder="{{setting['Placeholder Value'] ? setting['Placeholder Value'] : ''}}" ng-change="updateMlcpCommand()" ng-focus="hideInputPathTreeBrowser()" 
			            data-read-only-length="{{setting['ReadOnlyLength']}}" ng-readonly="setting['ReadOnlyLength']===-1" ng-keypress="makeDefaultValueReadOnlyIfApplicable($event)" ng-keydown="makeDefaultValueReadOnlyIfApplicable($event)"/>
			          <select class="form-control" name="{{setting['Field']}}" ng-if="setting['Type'] === 'type'" ng-model="setting['Value']" ng-change="updateMlcpCommand()" ng-focus="hideInputPathTreeBrowser()">
			            <option ng-repeat="option in setting['Options']" value="{{option.value}}">{{option.label}}</option> 
			          </select>
			        </div>
			      </uib-accordion-group>
			    </uib-accordion>
        </div>
        <div class="form-group">
           <h4>MLCP Command</h4>
        </div>
        <div class="form-group">
          <section class="code">{{mlcpCommand}}</section>
        </div>
      </form>
    </div>
  </div>
</div>
<div class="modal-footer">
  <div class="col-xs-12 col-md-12">
    <button class="btn btn-default" ng-click="cancel()">Cancel</button>
    <button class="btn btn-primary" ng-click="download()">Download Config</button>
    <button class="btn btn-success" ng-click="ok()">Load Data</button>
  </div>
</div>
    .controller('topController', TopController);

  function TopController($scope, $location, $timeout, DataHub,
    ModalService, TaskManager) {

    $scope.status = DataHub.status;
    $scope.entityForm = {};
    $scope.runInputFlow = function(flow) {
      $scope.loading = true;
      DataHub.getPreviousOptions(flow.entityName, flow.flowName)
        .success(function(options) {
          $scope.loading = false;
          ModalService.openLoadDataModal(options)
          .then(function(result) {
            $scope.loading = true;
            flow.inputFlowCancelled = false;

            DataHub.runInputFlow(result)
              .success(function(taskId) {
                flow.inputFlowTaskId = taskId;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
private void fetchWithMultipleConnectionFromResume(final int connectionCount, fi
    }

    private void fetchWithMultipleConnectionFromBeginning(final long totalLength, final int connectionCount) throws InterruptedException {
        int startOffset = 0;
        final long eachRegion = totalLength / connectionCount;
        final int id = model.getId();

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
private static File getInternalCgeoDirectory() {
        final List<File> extDirs = new ArrayList<>();
        final File[] externalFilesDirs = ContextCompat.getExternalFilesDirs(CgeoApplication.getInstance(), null);
        for (final File dir : externalFilesDirs) {
            if (EnvironmentCompat.getStorageState(dir).equals(Environment.MEDIA_MOUNTED)) {
                extDirs.add(dir);
            }
        }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

public void loadModel(InputStream is) {
		BufferedReader br = new BufferedReader(new InputStreamReader(is));
		readModel(br);
		centerScale();
		if (true)
			reportOnModel();
	}

	private void readModel(BufferedReader br)
else if (line.charAt(0) == 'o') // object group
				}
			}
		} catch (IOException e) {
			System.out.println(e.getMessage());
			System.exit(1);
		}

		if (!isLoaded) {
			System.out.println("Error loading model");
			System.exit(1);
		}
	} // end of readModel()
private void centerScale()
	} // end of centerScale()

	private void reportOnModel() {
		System.out.println("No. of vertices: " + verts.size());
		System.out.println("No. of normal coords: " + normals.size());
		System.out.println("No. of tex coords: " + texCoords.size());
		System.out.println("No. of faces: " + faces.getNumFaces());
		System.out.println("No. of points: " + faces.facesVertIdxs.size());

		modelDims.reportDimensions();
		// dimensions of model (before centering and scaling)
private Tuple3 readTuple3(String line)
		public void showMaterials()
		// list all the Material objects
		{
			System.out.println("No. of materials: " + materials.size());
			Material m;
			for (int i = 0; i < materials.size(); i++) {
				m = (Material) materials.get(i);
String getName() {
	public static class Faces {
		private static final float DUMMY_Z_TC = -5.0f;

		/*
		 * indicies for vertices, tex coords, and normals used by each face
		 */
		public ArrayList<int[]> facesVertIdxs;
		public ArrayList<int[]> facesTexIdxs;
		public ArrayList<int[]> facesNormIdxs;

		// references to the model's vertices, normals, and tex coords
public boolean addFace(String line) {
				// create arrays to hold the v, vt, vn indicies

				int v[] = new int[numTokens];
				int vt[] = new int[numTokens];
				int vn[] = new int[numTokens];

				for (int i = 0; i < numTokens; i++) {
					String faceToken = addFaceVals(st.nextToken()); // get a v/vt/vn
public boolean addFace(String line) {
					// the token

					v[i] = Integer.parseInt(st2.nextToken());
					vt[i] = (numSeps > 1) ? Integer.parseInt(st2.nextToken()) : 0;
					vn[i] = (numSeps > 2) ? Integer.parseInt(st2.nextToken()) : 0;
					// add 0's if the vt or vn index values are missing;
					// 0 is a good choice since real indices start at 1

					if (WavefrontLoader.INDEXES_START_AT_1) {
						v[i] = v[i] - 1;
						vt[i] = vt[i] - 1;
						vn[i] = vn[i] - 1;
					}
				}
				// store the indicies for this face
				facesVertIdxs.add(v);
				facesTexIdxs.add(vt);
				facesNormIdxs.add(vn);

				verticesReferencesCount += numTokens;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
private void resetBackoff() {
    @WorkerThread @VisibleForTesting
    String getGoogleAuthToken(String account, String scope)
    throws IOException, GoogleAuthException {
        return GoogleAuthUtil.getToken(mContext, account, scope);
    }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import com.google.common.collect.Multimap;

import io.netty.buffer.ByteBuf;
import io.netty.buffer.ByteBufInputStream;
import io.netty.channel.Channel;
import io.netty.channel.ChannelHandlerContext;
import io.netty.handler.codec.http.websocketx.WebSocketServerHandshakerFactory;
import io.netty.handler.codec.http2.HttpConversionUtil;
import io.netty.util.AttributeKey;

public class NettyRequest implements NativeRequest {

public void startAsync(final Executor executor, final Runnable runnable) {
    channel.attr(NEED_FLUSH).set(false);
    channel.attr(ASYNC).set(true);

    executor.execute(runnable);
  }

  private org.jooby.Cookie cookie(final Cookie c) {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import javax.servlet.http.HttpServletResponse;

import org.eclipse.rdf4j.common.lang.FileFormat;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.servlet.View;
	public static final String FILENAME_HINT_KEY = "filenameHint";

	/**
	 * Key by which the id of the current transaction is stored in the model. If this is present, the
	 * QueryResultView will take care to release the connection back to the
	 * {@link org.eclipse.rdf4j.http.server.repository.transaction.ActiveTransactionRegistry} after processing
	 * the query result.
	 */
	public static final String TRANSACTION_ID_KEY = "transactionID";

	public static final String HEADERS_ONLY = "headersOnly";

	@SuppressWarnings("rawtypes")
	public final void render(Map model, HttpServletRequest request, HttpServletResponse response)
		throws IOException
	{
		renderInternal(model, request, response);
	}

	@SuppressWarnings("rawtypes")
else if (METHOD_DELETE.equals(reqMethod)) {
			}

			try {
				// we need to forcibly close the default repository connection
				// opened for this repository by
				// the interceptor.
				RepositoryConnection repositoryCon = RepositoryInterceptor.getRepositoryConnection(request);
				synchronized (repositoryCon) {
					repositoryCon.close();
				}

				boolean success = repositoryManager.removeRepository(repId);
				if (success) {
					logger.info("DELETE request successfully completed");
else if (METHOD_POST.equals(reqMethod)) {

		if (queryStr != null) {
			RepositoryConnection repositoryCon = RepositoryInterceptor.getRepositoryConnection(request);
			synchronized (repositoryCon) {
				Query query = getQuery(repository, repositoryCon, queryStr, request, response);

				View view;
else if (query instanceof BooleanQuery) {
				model.put(QueryResultView.QUERY_RESULT_KEY, queryResult);
				model.put(QueryResultView.FACTORY_KEY, factory);
				model.put(QueryResultView.HEADERS_ONLY, headersOnly);

				return new ModelAndView(view, model);
			}
		}
		else {
			throw new ClientHTTPException(SC_BAD_REQUEST, "Missing parameter: " + QUERY_PARAM_NAME);
import org.slf4j.LoggerFactory;

/**
 * Interceptor for repository requests. Handles the opening and closing of connections to the repository
 * specified in the request. Should not be a singleton bean! Configure as inner bean in openrdf-servlet.xml
 * 
 * @author Herko ter Horst
 * @author Arjohn Kampman

	private static final String REPOSITORY_KEY = "repository";

	private static final String REPOSITORY_CONNECTION_KEY = "repositoryConnection";

	/*-----------*
	 * Variables *
	 *-----------*/

	private volatile String repositoryID;

	private volatile RepositoryConnection repositoryCon;

	/*---------*
	 * Methods *
	 *---------*/
protected void setRequestAttributes(HttpServletRequest request)
					throw new ClientHTTPException(SC_NOT_FOUND, "Unknown repository: " + nextRepositoryID);
				}

				RepositoryConnection nextRepositoryCon = repositoryCon;
				if (nextRepositoryCon == null) {
					synchronized (this) {
						nextRepositoryCon = repositoryCon;
						if (nextRepositoryCon == null) {
							nextRepositoryCon = repositoryCon = repository.getConnection();
							// SES-1834 by default, the Sesame server should not
							// treat datatype or language value verification
							// errors as fatal. This is to be graceful, by
							// default, about accepting "dirty" data.
							// FIXME SES-1833 this should be configurable by the
							// user.
							nextRepositoryCon.getParserConfig().addNonFatalError(
									BasicParserSettings.VERIFY_DATATYPE_VALUES);
							nextRepositoryCon.getParserConfig().addNonFatalError(
									BasicParserSettings.VERIFY_LANGUAGE_TAGS);

							// FIXME: hack for repositories that return
							// connections that are not in auto-commit mode by
							// default
							if (!nextRepositoryCon.isAutoCommit()) {
								nextRepositoryCon.setAutoCommit(true);
							}
						}
					}
				}

				request.setAttribute(REPOSITORY_ID_KEY, nextRepositoryID);
				request.setAttribute(REPOSITORY_KEY, repository);
				request.setAttribute(REPOSITORY_CONNECTION_KEY, nextRepositoryCon);
			}
			catch (RepositoryConfigException e) {
				throw new ServerHTTPException(e.getMessage(), e);
protected void setRequestAttributes(HttpServletRequest request)
		}
	}

	@Override
	protected void cleanUpResources()
		throws ServerHTTPException
	{
		RepositoryConnection nextRepositoryCon = repositoryCon;
		if (nextRepositoryCon != null) {
			try {
				nextRepositoryCon.close();
			}
			catch (RepositoryException e) {
				throw new ServerHTTPException(e.getMessage(), e);
			}
		}
	}

	public static String getRepositoryID(HttpServletRequest request) {
		return (String)request.getAttribute(REPOSITORY_ID_KEY);
	}
public static Repository getRepository(HttpServletRequest request) {
		return (Repository)request.getAttribute(REPOSITORY_KEY);
	}

	public static RepositoryConnection getRepositoryConnection(HttpServletRequest request) {
		return (RepositoryConnection)request.getAttribute(REPOSITORY_CONNECTION_KEY);
	}
}
protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpSer
			List<String> columnNames = Arrays.asList("contextID");
			List<BindingSet> contexts = new ArrayList<BindingSet>();
			RepositoryConnection repositoryCon = RepositoryInterceptor.getRepositoryConnection(request);
			synchronized (repositoryCon) {
				try {
					CloseableIteration<? extends Resource, RepositoryException> contextIter = repositoryCon.getContextIDs();

					try {
						while (contextIter.hasNext()) {
							BindingSet bindingSet = new ListBindingSet(columnNames, contextIter.next());
							contexts.add(bindingSet);
						}
					}
					finally {
						contextIter.close();
					}
				}
				catch (RepositoryException e) {
					throw new ServerHTTPException("Repository error: " + e.getMessage(), e);
				}
			}
			model.put(QueryResultView.QUERY_RESULT_KEY, new IteratingTupleQueryResult(columnNames, contexts));
		}

		model.put(QueryResultView.FILENAME_HINT_KEY, "contexts");
		model.put(QueryResultView.FACTORY_KEY, factory);
		model.put(QueryResultView.HEADERS_ONLY, METHOD_HEAD.equals(request.getMethod()));
		return new ModelAndView(TupleQueryResultView.getInstance(), model);
	}
}
private ModelAndView getAddDataResult(Repository repository, HttpServletRequest
		}

		InputStream in = request.getInputStream();
		try {
			RepositoryConnection repositoryCon = RepositoryInterceptor.getRepositoryConnection(request);
			synchronized (repositoryCon) {
				boolean localTransaction = !repositoryCon.isActive();

				if (localTransaction) {
					repositoryCon.begin();
				}

				if (replaceCurrent) {
					repositoryCon.clear(graph);
				}
				repositoryCon.add(in, baseURI.stringValue(), rdfFormat, graph);

				if (localTransaction) {
					repositoryCon.commit();
				}
			}

			return new ModelAndView(EmptySuccessView.getInstance());
private ModelAndView getDeleteDataResult(Repository repository, HttpServletReque

		IRI graph = getGraphName(request, vf);

		try {
			RepositoryConnection repositoryCon = RepositoryInterceptor.getRepositoryConnection(request);
			synchronized (repositoryCon) {
				repositoryCon.clear(graph);
			}

			return new ModelAndView(EmptySuccessView.getInstance());
		}
else if ("DELETE".equals(reqMethod)) {
	private ModelAndView getExportNamespaceResult(HttpServletRequest request, String prefix)
		throws ServerHTTPException, ClientHTTPException
	{
		try {
			String namespace = null;

			RepositoryConnection repositoryCon = RepositoryInterceptor.getRepositoryConnection(request);
			synchronized (repositoryCon) {
				namespace = repositoryCon.getNamespace(prefix);
			}

			if (namespace == null) {
				throw new ClientHTTPException(SC_NOT_FOUND, "Undefined prefix: " + prefix);
private ModelAndView getUpdateNamespaceResult(HttpServletRequest request, String
		}
		// FIXME: perform some sanity checks on the namespace string

		try {
			RepositoryConnection repositoryCon = RepositoryInterceptor.getRepositoryConnection(request);
			synchronized (repositoryCon) {
				repositoryCon.setNamespace(prefix, namespace);
			}
		}
		catch (RepositoryException e) {
			throw new ServerHTTPException("Repository error: " + e.getMessage(), e);
private ModelAndView getUpdateNamespaceResult(HttpServletRequest request, String
	private ModelAndView getRemoveNamespaceResult(HttpServletRequest request, String prefix)
		throws ServerHTTPException
	{
		try {
			RepositoryConnection repositoryCon = RepositoryInterceptor.getRepositoryConnection(request);
			synchronized (repositoryCon) {
				repositoryCon.removeNamespace(prefix);
			}
		}
		catch (RepositoryException e) {
			throw new ServerHTTPException("Repository error: " + e.getMessage(), e);
private ModelAndView getExportNamespacesResult(HttpServletRequest request, HttpS
			List<String> columnNames = Arrays.asList("prefix", "namespace");
			List<BindingSet> namespaces = new ArrayList<BindingSet>();

			RepositoryConnection repositoryCon = RepositoryInterceptor.getRepositoryConnection(request);
			synchronized (repositoryCon) {
				final ValueFactory vf = repositoryCon.getValueFactory();
				try {
					CloseableIteration<? extends Namespace, RepositoryException> iter = repositoryCon.getNamespaces();
private ModelAndView getExportNamespacesResult(HttpServletRequest request, HttpS
		return new ModelAndView(TupleQueryResultView.getInstance(), model);
	}

	private ModelAndView getClearNamespacesResult(HttpServletRequest request, HttpServletResponse response)
		throws ServerHTTPException
	{
		RepositoryConnection repositoryCon = RepositoryInterceptor.getRepositoryConnection(request);
		synchronized (repositoryCon) {
			try {
				repositoryCon.clearNamespaces();
			}
			catch (RepositoryException e) {
				throw new ServerHTTPException("Repository error: " + e.getMessage(), e);
			}
		}

		return new ModelAndView(EmptySuccessView.getInstance());
	}
}
protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpSer

			long size = -1;

			try {
				RepositoryConnection repositoryCon = RepositoryInterceptor.getRepositoryConnection(request);
				synchronized (repositoryCon) {
					size = repositoryCon.size(contexts);
				}
			}
			catch (RepositoryException e) {
				throw new ServerHTTPException("Repository error: " + e.getMessage(), e);
public void render(Map model, HttpServletRequest request, HttpServletResponse re
		Value obj = (Value)model.get(OBJECT_KEY);
		Resource[] contexts = (Resource[])model.get(CONTEXTS_KEY);
		boolean useInferencing = (Boolean)model.get(USE_INFERENCING_KEY);
		RepositoryConnection conn = (RepositoryConnection)model.get(CONNECTION_KEY);

		boolean headersOnly = (Boolean)model.get(HEADERS_ONLY);

public void render(Map model, HttpServletRequest request, HttpServletResponse re
			response.setHeader("Content-Disposition", "attachment; filename=" + filename);

			if (!headersOnly) {
				if (conn == null) {
					conn = RepositoryInterceptor.getRepositoryConnection(request);
				}
				synchronized (conn) {
					conn.exportStatements(subj, pred, obj, useInferencing, rdfWriter, contexts);
				}
			}
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpSer
		ModelAndView result;

		Repository repository = RepositoryInterceptor.getRepository(request);

		String reqMethod = request.getMethod();

		if (METHOD_GET.equals(reqMethod)) {
private ModelAndView getSparqlUpdateResult(Repository repository, HttpServletReq
		}

		final int maxQueryTime = ProtocolUtil.parseTimeoutParam(request);
		try {
			RepositoryConnection repositoryCon = RepositoryInterceptor.getRepositoryConnection(request);
			synchronized (repositoryCon) {
				Update update = repositoryCon.prepareUpdate(queryLn, sparqlUpdateString, baseURI);

				update.setIncludeInferred(includeInferred);
				update.setMaxExecutionTime(maxQueryTime);

				if (dataset != null) {
					update.setDataset(dataset);
				}

				// determine if any variable bindings have been set on this
				// update.
				@SuppressWarnings("unchecked")
				Enumeration<String> parameterNames = request.getParameterNames();

				while (parameterNames.hasMoreElements()) {
					String parameterName = parameterNames.nextElement();

					if (parameterName.startsWith(BINDING_PREFIX)
							&& parameterName.length() > BINDING_PREFIX.length())
					{
						String bindingName = parameterName.substring(BINDING_PREFIX.length());
						Value bindingValue = ProtocolUtil.parseValueParam(request, parameterName,
								repository.getValueFactory());
						update.setBinding(bindingName, bindingValue);
					}
				}

				update.execute();
			}

			return new ModelAndView(EmptySuccessView.getInstance());
		}
		catch (QueryInterruptedException e) {
private ModelAndView getTransactionResultResult(Repository repository, HttpServl
		throws IOException, ClientHTTPException, ServerHTTPException, HTTPException
	{
		InputStream in = request.getInputStream();
		try {
			logger.debug("Processing transaction...");

			TransactionReader reader = new TransactionReader();
			Iterable<? extends TransactionOperation> txn = reader.parse(in);

			RepositoryConnection repositoryCon = RepositoryInterceptor.getRepositoryConnection(request);
			synchronized (repositoryCon) {
				repositoryCon.begin();

				for (TransactionOperation op : txn) {
					op.execute(repositoryCon);
				}

				repositoryCon.commit();
			}
			logger.debug("Transaction processed ");

			return new ModelAndView(EmptySuccessView.getInstance());
private ModelAndView getAddDataResult(Repository repository, HttpServletRequest
		}

		InputStream in = request.getInputStream();
		try {
			RepositoryConnection repositoryCon = RepositoryInterceptor.getRepositoryConnection(request);
			synchronized (repositoryCon) {
				if (!repositoryCon.isActive()) {
					repositoryCon.begin();
				}

				if (preserveNodeIds) {
					repositoryCon.getParserConfig().set(BasicParserSettings.PRESERVE_BNODE_IDS, true);
				}

				if (replaceCurrent) {
					repositoryCon.clear(contexts);
				}
				repositoryCon.add(in, baseURI.toString(), rdfFormat, contexts);

				repositoryCon.commit();
			}

			return new ModelAndView(EmptySuccessView.getInstance());
		}
private ModelAndView getDeleteDataResult(Repository repository, HttpServletReque
		Value obj = ProtocolUtil.parseValueParam(request, OBJECT_PARAM_NAME, vf);
		Resource[] contexts = ProtocolUtil.parseContextParam(request, CONTEXT_PARAM_NAME, vf);

		try {
			RepositoryConnection repositoryCon = RepositoryInterceptor.getRepositoryConnection(request);
			synchronized (repositoryCon) {
				repositoryCon.remove(subj, pred, obj, contexts);
			}

			return new ModelAndView(EmptySuccessView.getInstance());
		}
import org.eclipse.rdf4j.rio.Rio;
import org.eclipse.rdf4j.rio.helpers.AbstractRDFHandler;
import org.eclipse.rdf4j.rio.helpers.BasicParserSettings;

/**
 * A transaction encapsulates a single {@link Thread} and a {@link RepositoryConnection}, to enable executing
 */
class Transaction {

	private final AtomicBoolean isClosed = new AtomicBoolean(false);

	private final UUID id;
void add(InputStream inputStream, String baseURI, RDFFormat format, boolean pres
		Future<Boolean> result;
		synchronized (futures) {
			result = executor.submit(() -> {
				try {
					if (preserveBNodes) {
						// create a reconfigured parser + inserter instead of relying on standard
void delete(RDFFormat contentType, InputStream inputStream, String baseURI)
		Future<Boolean> result;
		synchronized (futures) {
			result = executor.submit(() -> {
				RDFParser parser = Rio.createParser(contentType, txnConnection.getValueFactory());

				parser.setRDFHandler(new WildcardRDFRemover(txnConnection));
void delete(RDFFormat contentType, InputStream inputStream, String baseURI)
					return true;
				}
				catch (IOException e) {
					throw new RuntimeException(e);
				}
			});
else if (query instanceof BooleanQuery) {
		model.put(QueryResultView.FACTORY_KEY, factory);
		model.put(QueryResultView.HEADERS_ONLY, false); // TODO needed for HEAD
														// requests.
		model.put(QueryResultView.TRANSACTION_ID_KEY, txn.getID());
		return new ModelAndView(view, model);
	}

import org.eclipse.rdf4j.http.protocol.Protocol;
import org.eclipse.rdf4j.query.QueryLanguage;
import org.eclipse.rdf4j.query.Update;
import org.eclipse.rdf4j.repository.RepositoryConnection;
import org.junit.Test;
import org.mockito.Mockito;
import org.springframework.http.HttpMethod;
public void shouldUseTimeoutParameterForUpdateQueries()
		request.setContent(updateString.getBytes(StandardCharsets.UTF_8));

		// prepare mocks
		final RepositoryConnection connection = Mockito.mock(RepositoryConnection.class);
		final Update updateMock = Mockito.mock(Update.class);
		Mockito.when(connection.prepareUpdate(QueryLanguage.SPARQL, updateString, null)).thenReturn(
				updateMock);

		// repository interceptor uses this attribute
		request.setAttribute("repositoryConnection", connection);

		//act
		controller.handleRequest(request, new MockHttpServletResponse());
public NativeSailDataset dataset(IsolationLevel level)

		private final boolean explicit;

		/**
		 * The exclusive transaction lock held by this connection during transactions.
		 */
		private volatile boolean txnLockAcquired;

		public NativeSailSink(boolean explicit)
			throws SailException
		{
public NativeSailSink(boolean explicit)

		@Override
		public synchronized void close() {
			boolean nextTxnLockAcquired = txnLockAcquired;
			txnLockAcquired = false;
			if (nextTxnLockAcquired) {
				txnLockManager.unlock();
			}
		}

public void flush()
		{
			// SES-1949 check necessary to avoid empty/read-only transactions
			// messing up concurrent transactions
			if (txnLockAcquired && txnLockManager.getHoldCount() == 1) {
				try {
					try {
						valueStore.sync();
public void deprecate(Resource subj, IRI pred, Value obj, Resource ctx)
		private synchronized void acquireExclusiveTransactionLock()
			throws SailException
		{
			boolean nextTxnLockAcquired = txnLockAcquired;
			if (!nextTxnLockAcquired) {
				txnLockManager.lock();
				try {
					if (txnLockManager.getHoldCount() == 1) {
						// first object
						tripleStore.startTransaction();
					}
					nextTxnLockAcquired = txnLockAcquired = true;
				}
				catch (IOException e) {
					throw new SailException(e);
				}
				finally {
					if (!nextTxnLockAcquired) {
						txnLockManager.unlock();
					}
				}
			}
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Iterator;

import org.eclipse.rdf4j.common.iteration.CloseableIteration;
import org.eclipse.rdf4j.common.iteration.Iteration;
import org.eclipse.rdf4j.sail.SailException;
import org.junit.After;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.Timeout;
	 * Timeout all individual tests after 1 minute.
	 */
	@Rule
	public Timeout to = new Timeout(60000);

	/*-----------*
	 * Constants *
public void tearDown()
	{
		try {
			if (con.isOpen()) {
				con.rollback();
				con.close();
			}
		}
		finally {
public void testQueryBindings()
	}

	@Test
	public void testMultiThreadedAccess() {

		Runnable runnable = new Runnable() {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
********************************************
*            version history
********************************************
1.3.0
* #128 Create a mechanism to cache the GET request result
* #163 Introduce `@TemplateContext` annotation
  <groupId>org.actframework</groupId>
  <artifactId>act</artifactId>
  <packaging>jar</packaging>
  <version>1.3.0</version>

  <name>ACT Framework</name>
  <description>The ACT full stack MVC framework</description>
 * #L%!
(MISSING) */

import act.app.ActionContext;
import act.cli.CliContext;
import okhttp3.OkHttpClient;
import org.osgl.storage.impl.SObject;
import org.osgl.util.Codec;
import org.osgl.util.E;

import java.io.File;
import java.io.IOException;
public SObject resolve(String value) {
            try {
                return resolveFromBase64(value);
            } catch (Exception e) {
                throw E.unexpected("Cannot resolve SObject from value: %!s(MISSING)", value);
            }
        }
    }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	<modelVersion>4.0.0</modelVersion>
	<groupId>me.mrcookieslime</groupId>
	<artifactId>QuestWorld</artifactId>
	<version>2.6.6</version>
	<build>
		<resources>
			<resource>
import me.mrCookieSlime.QuestWorld.listeners.InputType;
import me.mrCookieSlime.QuestWorld.listeners.PlayerListener;
import me.mrCookieSlime.QuestWorld.listeners.SelfListener;
import me.mrCookieSlime.QuestWorld.quests.Category;
import me.mrCookieSlime.QuestWorld.quests.Quest;
import me.mrCookieSlime.QuestWorld.quests.QuestManager;
import me.mrCookieSlime.QuestWorld.utils.Lang;
import me.mrCookieSlime.QuestWorld.utils.Log;
import me.mrCookieSlime.QuestWorld.utils.Sounds;
import org.bukkit.Material;
import org.bukkit.OfflinePlayer;
import org.bukkit.command.PluginCommand;
import org.bukkit.configuration.file.YamlConfiguration;
import org.bukkit.entity.Player;
import org.bukkit.event.Listener;
import org.bukkit.inventory.ItemStack;
	private long lastSave;

	Config cfg, book, sounds;
	private Map<String, MissionType> types      = new HashMap<>();
	private Map<Integer, Category>   categories = new HashMap<>();
	private Map<UUID, QuestManager>  profiles   = new HashMap<>();
	private Map<UUID, Input>         inputs     = new HashMap<>();
	
	Economy economy;
public void attach(QuestExtension hook) {
			hookInstaller.add(hook);
	}
	
	@Override
	public void onEnable() {
		// Initialize all we can before we need CSCoreLib
public void run() {
				for (Category category: getCategories())
					quests += category.getQuests().size();

				QuestManager.updateTickingTasks();
				Log.fine("[Quest World 2] Successfully loaded " + categories + " Categories");
				Log.fine("[Quest World 2] Successfully loaded " + quests + " Quests");
			}
public void run() {

		new EditorListener(this);
		new PlayerListener(this);
		Bukkit.getPluginManager().registerEvents(new SelfListener(), this);
		
		ShapelessRecipe recipe = new ShapelessRecipe(GuideBook.get());
public void onDisable() {
		unload();
		
		instance = null;
		QuestManager.ticking_tasks = null;
		
		getServer().getServicesManager().unregisterAll(this);
		getServer().getScheduler().cancelTasks(this);
public void save(boolean force) {
		while(categories.hasNext())
			categories.next().getValue().save(force);
		
		Iterator<Map.Entry<UUID, QuestManager>> managers = this.profiles.entrySet().iterator();
		while(managers.hasNext())
			managers.next().getValue().save();
		
public void unload() {
		}
		this.categories.clear();
		
		Iterator<Map.Entry<UUID, QuestManager>> managers = this.profiles.entrySet().iterator();
		while(managers.hasNext()) {
			managers.next().getValue().save();
		}
public void registerCategory(Category category) {
	
	public void unregisterCategory(Category category) {
		for (Quest quest: category.getQuests()) {
			QuestManager.clearAllQuestData(quest);
			new File("plugins/QuestWorld/quests/" + quest.getID() + "-C" + category.getID() + ".quest").delete();
		}
		categories.remove(category.getID());
		new File("plugins/QuestWorld/quests/" + category.getID() + ".category").delete();
	}
	
	public void registerManager(QuestManager manager) {
		this.profiles.put(manager.getUUID(), manager);
	}
	
	public void unregisterManager(QuestManager manager) {
		this.profiles.remove(manager.getUUID());
	}
	
	public QuestManager getManager(OfflinePlayer p) {
		return profiles.containsKey(p.getUniqueId()) ? profiles.get(p.getUniqueId()): new QuestManager(p);
	}
	
	public QuestManager getManager(String uuid) {
		return profiles.containsKey(UUID.fromString(uuid)) ? profiles.get(UUID.fromString(uuid)): new QuestManager(UUID.fromString(uuid));
	}
	
	public boolean isManagerLoaded(String uuid) {
public void enable(QuestExtension hook) {
	}
	
	private void registerMissionType(MissionType type) {
		Log.fine("Registrar - Storing mission: " + type.getID());
		types.put(type.getID(), type);
		
		if(type instanceof Listener) {
			Log.fine("Registrar - Registering events: " + type.getID());
			getServer().getPluginManager().registerEvents((Listener)type, this);
		}
	}

import java.util.List;

import org.bukkit.Bukkit;
import org.bukkit.inventory.ItemStack;

import me.mrCookieSlime.QuestWorld.events.CategoryChangeEvent;
import me.mrCookieSlime.QuestWorld.quests.Category;
import me.mrCookieSlime.QuestWorld.quests.Quest;
public void apply() {
	 * @return false if the event is cancelled, otherwise true
	 */
	public boolean sendEvent() {
		CategoryChangeEvent event = new CategoryChangeEvent(this);
		Bukkit.getPluginManager().callEvent(event);
		
		return !event.isCancelled();
	}
	
	// Modify "setX" methods
package me.mrCookieSlime.QuestWorld.api;

import me.mrCookieSlime.QuestWorld.QuestWorld;
import me.mrCookieSlime.QuestWorld.api.interfaces.IMission;
import me.mrCookieSlime.QuestWorld.api.interfaces.IMissionWrite;
import me.mrCookieSlime.QuestWorld.utils.Log;

import org.bukkit.inventory.ItemStack;
import org.bukkit.material.MaterialData;

public abstract class MissionType {
	@Deprecated
	public enum SubmissionType {
		ITEM,
		ENTITY, 
		UNKNOWN, 
		CITIZENS_ITEM,
		LOCATION,
		INTEGER,
		TIME,
		CITIZENS_INTERACT,
		CITIZENS_KILL, 
		BLOCK;
	}
	
	String id;
	MaterialData selectorItem;
	SubmissionType type;
	boolean supportsTimeframes, supportsDeathReset, ticking;

	public MissionType(String name, boolean supportsTimeframes, boolean supportsDeathReset, boolean ticking, SubmissionType type, MaterialData item) {
		Log.fine("MissionType - Creating: " + name);
		this.id = name;
		this.selectorItem = item;
		this.type = type;
		this.supportsTimeframes = supportsTimeframes;
		this.supportsDeathReset = supportsDeathReset;
		this.ticking = ticking;
		
	}
	
	public final String defaultDisplayName(IMission instance) {
public static MissionType valueOf(String id) {
		
		return result;
	}

	@Deprecated
	public String getID() {
		return id;
	}
	
	@Deprecated
	public SubmissionType getSubmissionType() {
		return type;
	}
	
	public boolean supportsTimeframes() {
public boolean supportsTimeframes() {
	
	@Override
	public String toString() {
		return id;
	}

	public boolean supportsDeathReset() {
		return this.supportsDeathReset;
	}

	public boolean isTicker() {
		return this.ticking;
	}
	
	@Deprecated
	protected void setId(String id) {
		this.id = id;
	}
	
	public boolean attemptUpgrade(IMissionWrite instance) {
protected void setSelectorMaterial(MaterialData material) {
	public String progressString(float percent, int current, int total) {
		return Math.round(percent * 100) + "%!((MISSING)" + current + "/" + total + ")";
	}
}

import java.util.List;

import org.bukkit.Bukkit;
import org.bukkit.entity.Player;
import org.bukkit.inventory.ItemStack;

import me.mrCookieSlime.QuestWorld.events.QuestChangeEvent;
import me.mrCookieSlime.QuestWorld.quests.Quest;
import me.mrCookieSlime.QuestWorld.quests.Mission;
public void apply() {
	 * @return false if the event is cancelled, otherwise true
	 */
	public boolean sendEvent() {
		QuestChangeEvent event = new QuestChangeEvent(this);
		Bukkit.getPluginManager().callEvent(event);
		
		return !event.isCancelled();
	}
	
	// Modify "setX" methods
public final void init(Plugin parent) {
	 * @param plugin The plugin matching a dependency
	 * @param index The index of the match
	 */
	@Deprecated
	public final boolean directEnablePlugin(Plugin plugin, int index) {
		if(!plugin.getName().equals(requirements[index]) || found[index] != null)
			return false;
public final boolean directEnablePlugin(Plugin plugin, int index) {
	 * 
	 * @param plugin The plugin we are attempting to match
	 */
	@Deprecated
	public final boolean enablePlugin(Plugin plugin) {
		for(int i = 0; i < requirements.length; ++i)
			if(directEnablePlugin(plugin, i))
	quest_permchange("editor.quest.perm-change", "name", "perm"),
	quest_permset   ("editor.quest.perm-set",    "name", "perm", "perm_old"),
	
	// PH
	mission_await("editor.await-mission-name"),
	mission_name("editor.edit-mission-name"),
	
	dialog_add("editor.add-dialogue"),
	dialog_set("editor.set-dialogue", "path"),
	@Deprecated
	citizen_l("editor.link-citizen"),
	@Deprecated
	citizen_link("editor.link-citizen-finished"),
	
	mission_desc("editor.misssion-description"),
	
	killmission_rename("editor.rename-kill-mission"),
	killtype_rename("editor.renamed-kill-type"),
	citizen_rename("editor.renamed-citizen"), // What the hell this was never set? Why?
	location_rename("editor.renamed-location"),
	// PH
	
	notify_timefail    ("notifications.task-failed-timeframe",  "quest"),
	notify_timestart   ("notifications.task-timeframe-started", "task", "time"),
public String toString() {
		return name() + " {path: " + path() + ", placeholders: " + Arrays.asList(placeholders()).toString() + "}";
	}
	
	public static void forEach(Consumer<Translation> func) {
		for(Translation t : values())
			func.accept(t);
	}
import org.bukkit.inventory.ItemStack;

import me.mrCookieSlime.QuestWorld.api.MissionType;

public interface IMission extends IQuestingObject {
	public String getID();
	public int getAmount();
	public String getText();
	
	public ItemStack getMissionItem();
	public ItemStack getDisplayItem();
	
	public EntityType getEntity();
	public String getEntityName();
	public MissionType getType();

	public Location getLocation();

	public List<String> getDialogue();
	public String getCustomName();
	
	public long getTimeframe();
	
	public boolean hasTimeframe();

	public boolean resetsonDeath();

	public String getLore();

	public int getCustomInt();

	public boolean acceptsSpawners();
}
package me.mrCookieSlime.QuestWorld.api.menu;

import org.bukkit.entity.Player;
import org.bukkit.inventory.ItemStack;

import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ClickAction;
import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ChestMenu.MenuClickHandler;
import me.mrCookieSlime.QuestWorld.QuestWorld;
import me.mrCookieSlime.QuestWorld.api.Translation;
public static MenuClickHandler onCategory(Category category) {
			public boolean onClick(Player p, int slot, ItemStack item, ClickAction action) {
				if(action.isRightClicked())
					QBDialogue.openDeletionConfirmation(p, category);
				else if(action.isShiftClicked())
					QuestBook.openCategoryQuestEditor(p, category);
				else
					QuestBook.openCategoryEditor(p, category);
				return false;
			}
		};
public static MenuClickHandler onQuest(Quest quest) {
			public boolean onClick(Player p, int slot, ItemStack item, ClickAction action) {
				if(action.isRightClicked())
					QBDialogue.openDeletionConfirmation(p, quest);
				else
					QuestBook.openQuestEditor(p, quest); 
				return false;
			}
		};
public boolean onClick(Player p, int slot, ItemStack item, ClickAction action) {
			}
		};
	}
}
package me.mrCookieSlime.QuestWorld.api.menu;

public class MenuAction {

}
package me.mrCookieSlime.QuestWorld.api.menu;

import java.util.HashMap;
import java.util.Map;

public class MenuData {
	private Map<Integer, MenuAction> actions = new HashMap<>();
	
	public MenuAction getAction(int index) {
		return actions.get(index);
	}
	
	public MenuAction putAction(int index, MenuAction action) {
		return actions.put(index, action);
	}
}
else if (param.equals("export")) {
				sender.sendMessage(Text.colorize("&cCould not save Preset &a", args[1]));
		}
		else if (param.equals("gui")) {
			if (sender instanceof Player)
				QuestBook.openEditor((Player) sender);
			else
				sender.sendMessage(Text.colorize("&4You are not a Player"));
		}
public boolean onCommand(CommandSender sender, Command cmd, String label, String
					try {
						Category category = QuestWorld.getInstance().getCategory(Integer.parseInt(args[0]));
						if (category != null)  {
							if (args.length == 2) QuestBook.openQuest((Player) sender, category.getQuest(Integer.parseInt(args[1])), false, false);
							else QuestBook.openCategory((Player) sender, category, false);
						}
package me.mrCookieSlime.QuestWorld.containers;

import org.bukkit.entity.Player;
import org.bukkit.inventory.ItemStack;

import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ChestMenu;
import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ChestMenu.MenuClickHandler;
import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ClickAction;
import me.mrCookieSlime.QuestWorld.utils.ItemBuilder;

public class PageList {
import me.mrCookieSlime.QuestWorld.utils.ItemBuilder;

public class PagedMapping {
	private final int pageSize;
	private final List<PageList> pages = new ArrayList<>();

	private int activeSize;
	private ItemStack defaultItem = null;
	private MenuClickHandler defaultButton = null;
	
	public PagedMapping(int elementsPerPage) {
		pageSize = elementsPerPage;
		activeSize = elementsPerPage;
public void setDefaultButton(MenuClickHandler button) {
			page.setDefaultButton(button);
	}
	
	public int getCapacity() {
		return pages.size() * pageSize;
	}
public void addButton(int index, MenuClickHandler button) {
		findPage(index).addButton(index %!p(MISSING)ageSize, button);
	}
	
	public void removeItem(int index) {
		findPage(index).removeItem(index %!p(MISSING)ageSize);
	}
public void removeButton(int index) {
		findPage(index).removeButton(index %!p(MISSING)ageSize);
	}
	
	public void build(ChestMenu menu, int page) {
		if(page < 0 || page >= pages.size())
			return;
		
		pages.get(page).build(menu, 9, activeSize);
		
public boolean onClick(Player p, int slot, ItemStack item, ClickAction action) {
				ChestMenu self = Maps.getInstance().menus.get(p.getUniqueId());
				build(self, nextPage);
				self.reset(true);
				//self.open(p); // This isn't needed because we just modify the current inventory
				return false;
			}
		});
	}
}
package me.mrCookieSlime.QuestWorld.events;

import org.bukkit.event.Cancellable;
import org.bukkit.event.Event;

public void setCancelled(boolean cancel) {
		cancelled = cancel;
	}
	
/* COPY PASTE ME INTO OTHER EVENTS :D

	// Boilerplate copy/paste from CancellableEvent
	@Override
	public HandlerList getHandlers() { return handlers;	}
	public static HandlerList getHandlerList() { return handlers; }
	private static final HandlerList handlers = new HandlerList();

*/
}
public class ASkyBlockHook extends QuestExtension {
	@Override
	public String[] getDepends() {
		return new String[] { "ChatReaction" };
	}

	MissionType mission;
package me.mrCookieSlime.QuestWorld.hooks.askyblock;

import java.util.UUID;

import org.bukkit.Material;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import com.wasteofplastic.askyblock.events.IslandLevelEvent;

import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.Item.CustomItem;
import me.mrCookieSlime.QuestWorld.api.MissionType;
import me.mrCookieSlime.QuestWorld.api.interfaces.IMission;
import me.mrCookieSlime.QuestWorld.quests.QuestChecker;
import me.mrCookieSlime.QuestWorld.quests.QuestManager;
import me.mrCookieSlime.QuestWorld.quests.Mission;
import me.mrCookieSlime.QuestWorld.quests.QuestOfflineListener;

public class ASkyBlockLevelMission extends MissionType implements Listener {
	public ASkyBlockLevelMission() {
		super("ASKYBLOCK_REACH_ISLAND_LEVEL", false, false, false, SubmissionType.INTEGER, new MaterialData(Material.GRASS));
	}
	
	@Override
protected String displayString(IMission instance) {
	
	@EventHandler
	public void onWin(final IslandLevelEvent e) {
		QuestChecker.check(e.getPlayer(), e, "ASKYBLOCK_REACH_ISLAND_LEVEL", new QuestOfflineListener() {
			
			@Override
			public void onProgressCheck(UUID uuid, QuestManager manager, Mission task, Object event) {
				manager.setProgress(task, e.getLevel());
			}
		});
	}
}

import me.mrCookieSlime.CSCoreLibPlugin.general.String.StringUtils;
import me.mrCookieSlime.QuestWorld.QuestWorld;
import me.mrCookieSlime.QuestWorld.api.MissionType;
import me.mrCookieSlime.QuestWorld.api.interfaces.IMission;
import me.mrCookieSlime.QuestWorld.quests.QuestChecker;
import me.mrCookieSlime.QuestWorld.quests.QuestListener;
import me.mrCookieSlime.QuestWorld.quests.QuestManager;
import me.mrCookieSlime.QuestWorld.utils.PlayerTools;
import me.mrCookieSlime.QuestWorld.quests.Mission;

public class CraftMission extends MissionType implements Listener {
	public CraftMission() {
		super("CRAFT", true, true, false, SubmissionType.ITEM, new MaterialData(Material.WORKBENCH));
	}
	
	@Override
public void onCraft(CraftItemEvent e) {
		
		test.setAmount(recipeAmount);
		
		QuestChecker.check((Player) e.getWhoClicked(), e, "CRAFT", new QuestListener() {
			
			@Override
			public void onProgressCheck(Player p, QuestManager manager, Mission task, Object event) {
				if (QuestWorld.getInstance().isItemSimiliar(test, task.getMissionItem())) manager.addProgress(task, e.getCurrentItem().getAmount());
			}
		});
	}
}
package me.mrCookieSlime.QuestWorld.hooks.builtin;

import org.bukkit.Material;
import org.bukkit.inventory.ItemStack;
import org.bukkit.material.MaterialData;

import me.mrCookieSlime.CSCoreLibPlugin.general.String.StringUtils;
import me.mrCookieSlime.QuestWorld.api.MissionType;
import me.mrCookieSlime.QuestWorld.api.interfaces.IMission;

public class DetectMission extends MissionType {
	public DetectMission() {
		super("DETECT", false, false, false, SubmissionType.ITEM, new MaterialData(Material.COMMAND));
	}
	
	@Override
public ItemStack displayItem(IMission instance) {
	protected String displayString(IMission instance) {
		return "&7Own " + instance.getAmount() + "x " + StringUtils.formatItemName(instance.getDisplayItem(), false);
	}
}

import org.bukkit.Material;
import org.bukkit.entity.Item;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerFishEvent;

import me.mrCookieSlime.CSCoreLibPlugin.general.String.StringUtils;
import me.mrCookieSlime.QuestWorld.QuestWorld;
import me.mrCookieSlime.QuestWorld.api.MissionType;
import me.mrCookieSlime.QuestWorld.api.interfaces.IMission;
import me.mrCookieSlime.QuestWorld.quests.QuestChecker;
import me.mrCookieSlime.QuestWorld.quests.QuestListener;
import me.mrCookieSlime.QuestWorld.quests.QuestManager;
import me.mrCookieSlime.QuestWorld.quests.Mission;

public class FishMission extends MissionType implements Listener {
	public FishMission() {
		super("FISH", true, true, false, SubmissionType.ITEM, new MaterialData(Material.FISHING_ROD));
	}
	
	@Override
protected String displayString(IMission instance) {
	}
	
	@EventHandler
	public void onFish(final PlayerFishEvent e) {
		if (!(e.getCaught() instanceof Item)) return;
		
		QuestChecker.check(e.getPlayer(), e, "FISH", new QuestListener() {
			
			@Override
			public void onProgressCheck(Player p, QuestManager manager, Mission task, Object event) {
				if (QuestWorld.getInstance().isItemSimiliar(((Item) e.getCaught()).getItemStack(), task.getMissionItem())) manager.addProgress(task, ((Item) e.getCaught()).getItemStack().getAmount());
			}
		});
	}
}
package me.mrCookieSlime.QuestWorld.hooks.builtin;

import org.bukkit.Material;
import org.bukkit.SkullType;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.inventory.ItemStack;

import me.mrCookieSlime.QuestWorld.api.MissionType;
import me.mrCookieSlime.QuestWorld.api.interfaces.IMission;
import me.mrCookieSlime.QuestWorld.quests.QuestChecker;
import me.mrCookieSlime.QuestWorld.quests.QuestListener;
import me.mrCookieSlime.QuestWorld.quests.QuestManager;
import me.mrCookieSlime.QuestWorld.quests.Mission;
import me.mrCookieSlime.QuestWorld.utils.ItemBuilder;

public class JoinMission extends MissionType implements Listener {
	public JoinMission() {
		super("JOIN", true, false, false, SubmissionType.INTEGER,
				new ItemBuilder(Material.SKULL_ITEM).skull(SkullType.PLAYER).get().getData());
	}
	
	@Override
protected String displayString(IMission instance) {
	
	@EventHandler
	public void onJoin(PlayerJoinEvent e) {
		QuestChecker.check(e.getPlayer(), e, "JOIN", new QuestListener() {
			
			@Override
			public void onProgressCheck(Player p, QuestManager manager, Mission task, Object event) {
				manager.addProgress(task, 1);
			}
		});
	}
}
package me.mrCookieSlime.QuestWorld.hooks.builtin;

import org.bukkit.Material;
import org.bukkit.inventory.ItemStack;
import org.bukkit.material.MaterialData;

import me.mrCookieSlime.QuestWorld.api.MissionType;
import me.mrCookieSlime.QuestWorld.api.interfaces.IMission;
import me.mrCookieSlime.QuestWorld.utils.SubmissionItemResolver;
import me.mrCookieSlime.QuestWorld.utils.Text;

public class KillMission extends MissionType {
	public KillMission() {
		super("KILL", true, true, false, SubmissionType.ENTITY, new MaterialData(Material.IRON_SWORD));
	}
	
	@Override
protected String displayString(IMission instance) {
		String type = Text.niceName(instance.getEntity().toString());
		return "&7Kill " + instance.getAmount() + "x " + (!instance.acceptsSpawners() ? "naturally spawned " : "") + type;
	}
}
package me.mrCookieSlime.QuestWorld.hooks.builtin;

import org.bukkit.Material;
import org.bukkit.material.MaterialData;

import me.mrCookieSlime.QuestWorld.api.interfaces.IMission;

public class KillNamedMission extends KillMission {
	public KillNamedMission() {
		setId("KILL_NAMED_MOB");
		setSelectorMaterial(new MaterialData(Material.GOLD_SWORD));
	}
	
	@Override
	protected String displayString(IMission instance) {
		return super.displayString(instance) + " named &r" + instance.getName();
	}
}
package me.mrCookieSlime.QuestWorld.hooks.builtin;

import org.bukkit.Material;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerLevelChangeEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.material.MaterialData;

import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.Item.CustomItem;
import me.mrCookieSlime.QuestWorld.api.MissionType;
import me.mrCookieSlime.QuestWorld.api.interfaces.IMission;
import me.mrCookieSlime.QuestWorld.quests.QuestChecker;
import me.mrCookieSlime.QuestWorld.quests.QuestListener;
import me.mrCookieSlime.QuestWorld.quests.QuestManager;
import me.mrCookieSlime.QuestWorld.quests.Mission;

public class LevelMission extends MissionType implements Listener {
	public LevelMission() {
		super("REACH_LEVEL", false, false, false, SubmissionType.INTEGER, new MaterialData(Material.EXP_BOTTLE));
	}
	
	@Override
protected String displayString(IMission instance) {
	
	@EventHandler
	public void onXPChange(final PlayerLevelChangeEvent e) {
		QuestChecker.check(e.getPlayer(), e, "REACH_LEVEL", new QuestListener() {
			
			@Override
			public void onProgressCheck(Player p, QuestManager manager, Mission task, Object event) {
				manager.setProgress(task, e.getNewLevel());
			}
		});
	}
}
package me.mrCookieSlime.QuestWorld.hooks.builtin;

import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.inventory.ItemStack;
import org.bukkit.material.MaterialData;

import me.mrCookieSlime.QuestWorld.api.MissionType;
import me.mrCookieSlime.QuestWorld.api.interfaces.IMission;
import me.mrCookieSlime.QuestWorld.api.interfaces.IMissionWrite;
import me.mrCookieSlime.QuestWorld.utils.SubmissionItemResolver;

public class LocationMission extends MissionType {
	public LocationMission() {
		super("REACH_LOCATION", false, false, true, SubmissionType.LOCATION, new MaterialData(Material.LEATHER_BOOTS));
	}
	
	@Override
public boolean attemptUpgrade(IMissionWrite instance) {
			return true;
		}
		
		return false;
	}
}
package me.mrCookieSlime.QuestWorld.hooks.builtin;

import org.bukkit.Material;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;

import me.mrCookieSlime.CSCoreLibPlugin.general.String.StringUtils;
import me.mrCookieSlime.QuestWorld.QuestWorld;
import me.mrCookieSlime.QuestWorld.api.MissionType;
import me.mrCookieSlime.QuestWorld.api.interfaces.IMission;
import me.mrCookieSlime.QuestWorld.quests.QuestManager;
import me.mrCookieSlime.QuestWorld.quests.Mission;
import me.mrCookieSlime.QuestWorld.quests.QuestStatus;
import me.mrCookieSlime.QuestWorld.utils.PlayerTools;

public class MineMission extends MissionType implements Listener {
	public MineMission() {
		super("MINE_BLOCK", true, true, false, SubmissionType.BLOCK, new MaterialData(Material.IRON_PICKAXE));
	}
	
	@Override
protected String displayString(IMission instance) {
	
	@EventHandler(priority=EventPriority.MONITOR, ignoreCancelled=true)
	public void onMine(BlockBreakEvent e) {
		QuestManager manager = QuestWorld.getInstance().getManager(e.getPlayer());
		for (Mission task: QuestManager.block_breaking_tasks) {
			ItemStack is = PlayerTools.getStackOf(e.getBlock());
			if (is.isSimilar(task.getMissionItem())) {
				if (manager.getStatus(task.getQuest()).equals(QuestStatus.AVAILABLE) && !manager.hasCompletedTask(task) && manager.hasUnlockedTask(task)) {
					manager.addProgress(task, 1);
				}
			}
		}
	}
}
package me.mrCookieSlime.QuestWorld.hooks.builtin;

import org.bukkit.Material;
import org.bukkit.inventory.ItemStack;
import org.bukkit.material.MaterialData;

import me.mrCookieSlime.QuestWorld.api.MissionType;
import me.mrCookieSlime.QuestWorld.api.interfaces.IMission;

public class PlayMission extends MissionType {
	public PlayMission() {
		super("PLAY_TIME", false, false, true, SubmissionType.TIME, new MaterialData(Material.WATCH));
	}
	
	@Override
public String progressString(float percent, int current, int total) {
		int remaining = total - current;
		return Math.round(percent * 100) + "%!((MISSING)" + (remaining / 60) + "h " + (remaining %!)(MISSING) + "m remaining)";
	}
}
package me.mrCookieSlime.QuestWorld.hooks.builtin;

import org.bukkit.Material;
import org.bukkit.inventory.ItemStack;
import org.bukkit.material.MaterialData;

import me.mrCookieSlime.CSCoreLibPlugin.general.String.StringUtils;
import me.mrCookieSlime.QuestWorld.api.MissionType;
import me.mrCookieSlime.QuestWorld.api.interfaces.IMission;

public class SubmitMission extends MissionType {
	public SubmitMission() {
		super("SUBMIT", false, false, false, SubmissionType.ITEM, new MaterialData(Material.CHEST));
	}
	
	@Override
public ItemStack displayItem(IMission instance) {
	protected String displayString(IMission instance) {
		return "&7Submit " + instance.getAmount() + "x " + StringUtils.formatItemName(instance.getDisplayItem(), false);
	}
}

import me.clip.chatreaction.events.ReactionWinEvent;
import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.Item.CustomItem;
import me.mrCookieSlime.QuestWorld.api.MissionType;
import me.mrCookieSlime.QuestWorld.api.interfaces.IMission;
import me.mrCookieSlime.QuestWorld.quests.QuestChecker;
import me.mrCookieSlime.QuestWorld.quests.QuestListener;
import me.mrCookieSlime.QuestWorld.quests.QuestManager;
import me.mrCookieSlime.QuestWorld.quests.Mission;

public class ChatReactMission extends MissionType implements Listener {
	public ChatReactMission() {
		super("CHATREACTION_WIN", true, false, false, SubmissionType.INTEGER, new MaterialData(Material.DIAMOND));
	}
	
	@Override
protected String displayString(IMission instance) {
	@EventHandler
	public void onWin(ReactionWinEvent e) {
		Player p = e.getWinner();
		
		QuestChecker.check(p, e, "CHATREACTION_WIN", new QuestListener() {
			
			@Override
			public void onProgressCheck(Player p, QuestManager manager, Mission task, Object event) {
				manager.addProgress(task, 1);
			}
		});
	}
}
package me.mrCookieSlime.QuestWorld.hooks.citizens;

import org.bukkit.Material;
import org.bukkit.SkullType;
import org.bukkit.inventory.ItemStack;

import me.mrCookieSlime.QuestWorld.api.MissionType;
import me.mrCookieSlime.QuestWorld.api.interfaces.IMission;
import me.mrCookieSlime.QuestWorld.utils.ItemBuilder;
import net.citizensnpcs.api.npc.NPC;

public class CitizenAcceptQuestMission extends MissionType {
	public CitizenAcceptQuestMission() {
		super("ACCEPT_QUEST_FROM_NPC", false, false, false, SubmissionType.CITIZENS_INTERACT,
				new ItemBuilder(Material.SKULL_ITEM).skull(SkullType.PLAYER).get().getData());
	}
	
	@Override
	public ItemStack displayItem(IMission instance) {
		return getSelectorItem().toItemStack(1);
	}
	
	@Override
	protected String displayString(IMission instance) {
		String name = "N/A";
protected String displayString(IMission instance) {
		
		return "&7Accept this Quest by talking to " + name;
	}
}
package me.mrCookieSlime.QuestWorld.hooks.citizens;

import org.bukkit.Material;
import org.bukkit.SkullType;
import org.bukkit.inventory.ItemStack;

import me.mrCookieSlime.QuestWorld.api.MissionType;
import me.mrCookieSlime.QuestWorld.api.interfaces.IMission;
import me.mrCookieSlime.QuestWorld.utils.ItemBuilder;
import net.citizensnpcs.api.npc.NPC;

public class CitizenInteractMission extends MissionType {
	public CitizenInteractMission() {
		super("CITIZENS_INTERACT", false, false, false, SubmissionType.CITIZENS_INTERACT,
				new ItemBuilder(Material.SKULL_ITEM).skull(SkullType.PLAYER).get().getData());
	}
	
	@Override
protected String displayString(IMission instance) {
		
		return "&7Talk to " + name;
	}
}

import org.bukkit.Material;
import org.bukkit.SkullType;
import org.bukkit.entity.Player;
import org.bukkit.entity.Projectile;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntityDamageByEntityEvent;
import org.bukkit.event.entity.EntityDamageEvent.DamageCause;
import org.bukkit.inventory.ItemStack;

import me.mrCookieSlime.QuestWorld.QuestWorld;
import me.mrCookieSlime.QuestWorld.api.MissionType;
import me.mrCookieSlime.QuestWorld.api.interfaces.IMission;
import me.mrCookieSlime.QuestWorld.quests.Category;
import me.mrCookieSlime.QuestWorld.quests.Quest;
import me.mrCookieSlime.QuestWorld.quests.QuestManager;
import me.mrCookieSlime.QuestWorld.quests.Mission;
import me.mrCookieSlime.QuestWorld.quests.QuestStatus;
import me.mrCookieSlime.QuestWorld.utils.ItemBuilder;
import net.citizensnpcs.api.event.NPCDeathEvent;
import net.citizensnpcs.api.npc.NPC;

public class CitizenKillMission extends MissionType implements Listener {
	public CitizenKillMission() {
		super("KILL_NPC", true, true, false, SubmissionType.CITIZENS_KILL,
				new ItemBuilder(Material.SKULL_ITEM).skull(SkullType.PLAYER).get().getData());
	}
	
	@Override
protected String displayString(IMission instance) {
	
	@EventHandler
	public void onInteract(NPCDeathEvent e) {
		if (e.getNPC().getEntity().getLastDamageCause() == null) return;
		Player killer = null;
		
		if (e.getNPC().getEntity().getLastDamageCause().getCause().equals(DamageCause.ENTITY_ATTACK)) {
			EntityDamageByEntityEvent event = (EntityDamageByEntityEvent) e.getNPC().getEntity().getLastDamageCause();
			if (event.getDamager() instanceof Player) {
				killer = (Player) event.getDamager();
			}
		}
		else if (e.getNPC().getEntity().getLastDamageCause().getCause().equals(DamageCause.PROJECTILE)) {
			EntityDamageByEntityEvent event = (EntityDamageByEntityEvent) e.getNPC().getEntity().getLastDamageCause();
			if (event.getDamager() instanceof Projectile && ((Projectile) event.getDamager()).getShooter() instanceof Player) {
				killer = (Player) ((Projectile) event.getDamager()).getShooter();
			}
		}
		
		if (killer != null) {
			QuestManager manager = QuestWorld.getInstance().getManager(killer);
			for (Category category: QuestWorld.getInstance().getCategories()) {
				for (Quest quest: category.getQuests()) {
					if (manager.getStatus(quest).equals(QuestStatus.AVAILABLE) && quest.isWorldEnabled(killer.getWorld().getName())) {
						for (Mission task: quest.getMissions()) {
							if (!manager.hasCompletedTask(task) && manager.hasUnlockedTask(task)) {
								if (task.getType().getID().equals("KILL_NPC") && e.getNPC().getId() == task.getCustomInt()) {
									manager.addProgress(task, 1);
								}
							}
						}
					}
				}
			}
		}
	}
}
package me.mrCookieSlime.QuestWorld.hooks.citizens;

import org.bukkit.Material;
import org.bukkit.SkullType;
import org.bukkit.inventory.ItemStack;

import me.mrCookieSlime.CSCoreLibPlugin.general.String.StringUtils;
import me.mrCookieSlime.QuestWorld.api.MissionType;
import me.mrCookieSlime.QuestWorld.api.interfaces.IMission;
import me.mrCookieSlime.QuestWorld.utils.ItemBuilder;
import net.citizensnpcs.api.npc.NPC;

public class CitizenSubmitMission extends MissionType {
	public CitizenSubmitMission() {
		super("CITIZENS_SUBMIT", false, false, false, SubmissionType.CITIZENS_ITEM,
				new ItemBuilder(Material.SKULL_ITEM).skull(SkullType.PLAYER).get().getData());
	}
	
	@Override
protected String displayString(IMission instance) {
		
		return "&7Give " + instance.getAmount() + "x " + StringUtils.formatItemName(instance.getDisplayItem(), false) + " to " + name;
	}
}
import java.util.Map;
import java.util.UUID;

import me.mrCookieSlime.CSCoreLibPlugin.PlayerRunnable;
import me.mrCookieSlime.CSCoreLibPlugin.general.Chat.TellRawMessage;
import me.mrCookieSlime.CSCoreLibPlugin.general.Chat.TellRawMessage.HoverAction;
import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.CustomBookOverlay;
import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.Item.CustomItem;
import me.mrCookieSlime.CSCoreLibPlugin.general.Particles.MC_1_8.ParticleEffect;
import me.mrCookieSlime.CSCoreLibPlugin.general.Player.PlayerInventory;
import me.mrCookieSlime.QuestWorld.QuestWorld;
import me.mrCookieSlime.QuestWorld.api.MissionType;
import me.mrCookieSlime.QuestWorld.api.QuestExtension;
import me.mrCookieSlime.QuestWorld.api.Translation;
import me.mrCookieSlime.QuestWorld.api.interfaces.IMission;
import me.mrCookieSlime.QuestWorld.quests.Category;
import me.mrCookieSlime.QuestWorld.quests.Quest;
import me.mrCookieSlime.QuestWorld.quests.QuestBook;
import me.mrCookieSlime.QuestWorld.quests.QuestManager;
import me.mrCookieSlime.QuestWorld.quests.Mission;
import me.mrCookieSlime.QuestWorld.quests.QuestStatus;
import me.mrCookieSlime.QuestWorld.utils.PlayerTools;
import me.mrCookieSlime.QuestWorld.utils.Text;
import net.citizensnpcs.api.CitizensAPI;
import net.citizensnpcs.api.event.NPCRightClickEvent;
import net.citizensnpcs.api.npc.NPC;

import org.bukkit.ChatColor;
import org.bukkit.entity.Entity;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
public void initialize(Plugin parent) {
			
			@Override
			public void run() {
				for (Mission task: QuestManager.getCitizenTasks()) {
					NPC npc = npcFrom(task);
					if (npc != null && npc.getEntity() != null) {
						List<Player> players = new ArrayList<Player>();
						
						for (Entity n: npc.getEntity().getNearbyEntities(20D, 8D, 20D)) {
							if (n instanceof Player) {
								QuestManager manager = QuestWorld.getInstance().getManager((Player) n);
								if (manager.getStatus(task.getQuest()).equals(QuestStatus.AVAILABLE) && manager.hasUnlockedTask(task) && !manager.hasCompletedTask(task)) {
									players.add((Player) n);
								}
							}
						}
						if (!players.isEmpty()) {
							try {
								ParticleEffect.VILLAGER_HAPPY.display(npc.getEntity().getLocation().add(0, 1, 0), 0.5F, 0.7F, 0.5F, 0, 20, players);
							} catch (Exception e) {
								e.printStackTrace();
							}
						}
					}
				}
			}
		}, 0L, 12L);
	}
public void run() {
		return missions;
	}

	//TODO "for for if for if if" KILL IT WITH FIRE
	@EventHandler
	public void onInteract(NPCRightClickEvent e) {
		Player p = e.getClicker();
		if (link.containsKey(p.getUniqueId())) {
			link.get(p.getUniqueId()).setCustomInt(e.getNPC().getId());
			QuestBook.openQuestMissionEditor(p, link.get(p.getUniqueId()));
			link.remove(p.getUniqueId());
			PlayerTools.sendTranslation(p, true, Translation.citizen_link);
		}
		else {
			final QuestManager manager = QuestWorld.getInstance().getManager(p);
			for (Category category: QuestWorld.getInstance().getCategories()) {
				for (Quest quest: category.getQuests()) {
					if (manager.getStatus(quest).equals(QuestStatus.AVAILABLE) && quest.isWorldEnabled(p.getWorld().getName())) {
						for (final Mission task: quest.getMissions()) {
							if (!manager.hasCompletedTask(task) && manager.hasUnlockedTask(task)) {
								if (task.getType().getID().equals("CITIZENS_INTERACT") && e.getNPC().getId() == task.getCustomInt()) {
									manager.addProgress(task, task.getAmount());
								}
								else if (task.getType().getID().equals("ACCEPT_QUEST_FROM_NPC") && e.getNPC().getId() == task.getCustomInt()) {
									TellRawMessage lore = new TellRawMessage();
									lore.addText(e.getNPC().getName() + ":\n\n");
									lore.addText(task.getLore());
									lore.color(ChatColor.DARK_AQUA);
									lore.addText("\n\n    ");
									lore.addText(Text.colorize("&7( &a&l\u2714 &7)"));
									lore.addHoverEvent(HoverAction.SHOW_TEXT, Text.colorize("&7Click to accept this Quest"));
									lore.addClickEvent(new PlayerRunnable(3) {
										
										@Override
										public void run(Player p) {
											manager.addProgress(task, task.getAmount());
										}
									});
									lore.addText("      ");
									lore.addText(Text.colorize("&7( &4&l\u2718 &7)"));
									lore.addHoverEvent(HoverAction.SHOW_TEXT, Text.colorize("&7Click to do this Quest later"));
									lore.addClickEvent(new PlayerRunnable(3) {
										
										@Override
										public void run(Player p) {
										}
									});
									new CustomBookOverlay("Quest", "TheBusyBiscuit", lore).open(p);
								}
								else if (task.getType().getID().equals("CITIZENS_SUBMIT") && e.getNPC().getId() == task.getCustomInt() && QuestWorld.getInstance().isItemSimiliar(PlayerTools.getActiveHandItem(p), task.getMissionItem())) {
									int rest = QuestWorld.getInstance().getManager(p).addProgress(task, PlayerTools.getActiveHandItem(p).getAmount());
									if (rest > 0) PlayerTools.setActiveHandItem(p, new CustomItem(PlayerTools.getActiveHandItem(p), rest));
									else PlayerTools.setActiveHandItem(p, null);
									
									PlayerInventory.update(p);
								}
							}
						}
					}
				}
			}
		}
	}
}
import com.vexsoftware.votifier.model.VotifierEvent;

import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.Item.CustomItem;
import me.mrCookieSlime.QuestWorld.api.MissionType;
import me.mrCookieSlime.QuestWorld.api.interfaces.IMission;
import me.mrCookieSlime.QuestWorld.quests.QuestChecker;
import me.mrCookieSlime.QuestWorld.quests.QuestListener;
import me.mrCookieSlime.QuestWorld.quests.QuestManager;
import me.mrCookieSlime.QuestWorld.utils.PlayerTools;
import me.mrCookieSlime.QuestWorld.quests.Mission;

public class VoteMission extends MissionType implements Listener {
	public VoteMission() {
		super("VOTIFIER_VOTE", true, false, false, SubmissionType.INTEGER, new MaterialData(Material.DIAMOND));
	}
	
	@Override
protected String displayString(IMission instance) {
	@EventHandler
	public void onVote(VotifierEvent e) {
		Player p = PlayerTools.getPlayer(e.getVote().getUsername());
		if (p != null) {
			QuestChecker.check(p, e, "VOTIFIER_VOTE", new QuestListener() {
				
				@Override
				public void onProgressCheck(Player p, QuestManager manager, Mission task, Object event) {
					manager.addProgress(task, 1);
				}
			});
		}
	}
}
public class VotifierHook extends QuestExtension {
	@Override
	public String[] getDepends() {
		return new String[] { "ChatReaction" };
	}

	MissionType[] missions = null;
public void add(QuestExtension hook) {
		if(reqs != null)
			for(int i = 0; i < reqs.length; ++i) {
				Plugin p = manager.getPlugin(reqs[i]);
				if(p != null && p.isEnabled()) {
					@SuppressWarnings("deprecation")
					boolean res = hook.directEnablePlugin(p, i);
				}
			}
		
		if(hook.isReady()) {
public void onPluginEnable(PluginEnableEvent event) {
		
		while(iterator.hasNext()) {
			QuestExtension hook = iterator.next();
			@SuppressWarnings("deprecation")
			boolean res = hook.enablePlugin(event.getPlugin());
			
			if(hook.isReady()) {
				Log.fine("Installer - Dependencies loaded: " + hook.getName());
import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.Maps;
import me.mrCookieSlime.QuestWorld.GuideBook;
import me.mrCookieSlime.QuestWorld.QuestWorld;
import me.mrCookieSlime.QuestWorld.quests.Category;
import me.mrCookieSlime.QuestWorld.quests.Quest;
import me.mrCookieSlime.QuestWorld.quests.QuestBook;
import me.mrCookieSlime.QuestWorld.quests.QuestManager;
import me.mrCookieSlime.QuestWorld.quests.Mission;
import me.mrCookieSlime.QuestWorld.quests.QuestStatus;

public void onQuestBook(ItemUseEvent e) {
	public void onDie(EntityDeathEvent e) {
		if (!(e.getEntity() instanceof Player)) return;
		Player p = (Player) e.getEntity();
		QuestManager manager = QuestWorld.getInstance().getManager(p);
		for (Category category: QuestWorld.getInstance().getCategories()) {
			if (category.isWorldEnabled(p.getWorld().getName())) {
				for (Quest quest: category.getQuests()) {
package me.mrCookieSlime.QuestWorld.listeners;

import me.mrCookieSlime.QuestWorld.QuestWorld;
import me.mrCookieSlime.QuestWorld.quests.Category;
import me.mrCookieSlime.QuestWorld.quests.Quest;
import me.mrCookieSlime.QuestWorld.quests.QuestManager;
import me.mrCookieSlime.QuestWorld.quests.Mission;
import me.mrCookieSlime.QuestWorld.quests.QuestStatus;
import me.mrCookieSlime.QuestWorld.utils.Text;

import org.bukkit.entity.Player;
import org.bukkit.entity.Projectile;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.CreatureSpawnEvent;
import org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason;
import org.bukkit.event.entity.EntityDamageByEntityEvent;
import org.bukkit.event.entity.EntityDamageEvent.DamageCause;
import org.bukkit.event.entity.EntityDeathEvent;
import org.bukkit.metadata.FixedMetadataValue;
import org.bukkit.plugin.Plugin;

public class TaskListener implements Listener {

	public TaskListener(Plugin plugin) {
		plugin.getServer().getPluginManager().registerEvents(this, plugin);
	}

	@EventHandler
	public void onKill(EntityDeathEvent e) {
		if (e.getEntity().getLastDamageCause() == null) return;
else if (e.getEntity().getLastDamageCause().getCause().equals(DamageCause.PROJEC
		}
		
		if (killer != null) {
			QuestManager manager = QuestWorld.getInstance().getManager(killer);
			for (Category category: QuestWorld.getInstance().getCategories()) {
				for (Quest quest: category.getQuests()) {
					if (category.isWorldEnabled(killer.getWorld().getName())) {
else if (task.getType().getID().equals("KILL_NAMED_MOB") && e.getEntityType().eq
			}
		}
	}
	
	@EventHandler(priority=EventPriority.MONITOR,ignoreCancelled=true)
	public void onCreatureSpawn(CreatureSpawnEvent e) {
		if (e.getSpawnReason().equals(SpawnReason.SPAWNER)) e.getEntity().setMetadata("spawned_by_spawner", new FixedMetadataValue(QuestWorld.getInstance(), "QuestWorld"));
	}
}
package me.mrCookieSlime.QuestWorld.quests;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;

import me.mrCookieSlime.CSCoreLibPlugin.Configuration.Config;
import me.mrCookieSlime.CSCoreLibPlugin.general.Clock;
import me.mrCookieSlime.QuestWorld.QuestWorld;
import me.mrCookieSlime.QuestWorld.api.Translation;
import me.mrCookieSlime.QuestWorld.api.MissionType.SubmissionType;
import me.mrCookieSlime.QuestWorld.parties.Party;
import me.mrCookieSlime.QuestWorld.utils.PlayerTools;
import me.mrCookieSlime.QuestWorld.utils.Text;

import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.OfflinePlayer;
import org.bukkit.Statistic;
import org.bukkit.entity.Player;

public class QuestManager {
	
	public static Map<UUID, Quest> autoclaim = new HashMap<UUID, Quest>();
	
	private Map<Long, Category> activeCategories;
	private Map<Long, Quest> activeQuests;
	private Map<Long, Mission> activeMissions;

	public static Set<Mission> ticking_tasks = new HashSet<Mission>();
	public static Set<Mission> block_breaking_tasks = new HashSet<Mission>();
	public static Set<Mission> citizen_tasks = new HashSet<Mission>();
	
	public QuestManager(OfflinePlayer p) {
		this(p.getUniqueId());
	}
	
	public QuestManager(UUID uuid) {
		this.uuid = uuid;
		this.cfg = new Config("data-storage/Quest World/" + uuid + ".yml");
		
		QuestWorld.getInstance().registerManager(this);
	}
	
	public void unload() {
		save();
		QuestWorld.getInstance().unregisterManager(this);
public long getCooldownEnd(Quest quest) {
		}
	}
	
	public long getCompletionDate(Mission task) {
		if (!cfg.contains(task.getQuest().getCategory().getID() + "." + task.getQuest().getID() + ".mission." + task.getID() + ".complete-until")) return 0;
		return cfg.getLong(task.getQuest().getCategory().getID() + "." + task.getQuest().getID() + ".mission." + task.getID() + ".complete-until");
	}
	
	public boolean isWithinTimeframe(Mission task) {
		long date = getCompletionDate(task);
		if (date == 0) return true;
		return date > System.currentTimeMillis();
	}
	
	public boolean updateTimeframe(UUID uuid, Mission task, int amount) {
		if (task.getTimeframe() == 0) return true;
		Config cfg = QuestWorld.getInstance().getManager(Bukkit.getOfflinePlayer(uuid)).toConfig();
		Player p = Bukkit.getPlayer(uuid);
public void update(boolean quest_check) {
		Player p = Bukkit.getPlayer(uuid);
		
		if (p != null && quest_check) {
			for (Mission task: getTickingTasks()) {
				if (getStatus(task.getQuest()).equals(QuestStatus.AVAILABLE) && !hasCompletedTask(task) && hasUnlockedTask(task)) {
					if (task.getType().getID().equals("PLAY_TIME")) setProgress(task, p.getStatistic(Statistic.PLAY_ONE_TICK) / 20 / 60);
					else if (task.getType().getID().equals("REACH_LOCATION")) {
						if (task.getLocation().getWorld().getName().equals(p.getWorld().getName()) && task.getLocation().distanceSquared(p.getLocation()) < task.getCustomInt() * task.getCustomInt()) {
							// Normally expecting "getAmount" to complete task, "getAmount" in this case is the search radius
							// Just set the task to done (because it is) rather than increment by 1
							setProgress(task, task.getAmount());
						}
					}
				}
			}
		}
else if (getStatus(quest).equals(QuestStatus.ON_COOLDOWN)) {
			}
		}
	}
	
	private Set<Mission> getTickingTasks() {
		return ticking_tasks;
	}
	
	public static Set<Mission> getCitizenTasks() {
		return citizen_tasks;
	}

	public QuestStatus getStatus(Quest quest) {
		Player p = Bukkit.getPlayer(uuid);
public boolean hasUnlockedTask(Mission task) {
		else return hasCompletedTask(tasks.get(index));
	}
	
	public int getProgress(Mission task) {
		Quest quest = task.getQuest();
		if (!cfg.contains(quest.getCategory().getID() + "." + quest.getID() + ".mission." + task.getID() + ".progress")) return 0;
		else return cfg.getInt(quest.getCategory().getID() + "." + quest.getID() + ".mission." + task.getID() + ".progress");
	}
	
	public int getTotal(Mission task) {
		return task.getAmount();
	}
	
	public int addProgress(Mission task, int amount) {
		int progress = getProgress(task) + amount;
		int rest = progress - getTotal(task);
		setProgress(task, rest > 0 ? task.getAmount(): progress);
		return rest;
	}

	public void setProgress(Mission task, int amount) {
		if (!updateTimeframe(this.uuid, task, amount)) return;
		cfg.setValue(task.getQuest().getCategory().getID() + "." + task.getQuest().getID() + ".mission." + task.getID() + ".progress", amount > task.getAmount() ? task.getAmount(): amount);
		
public void setProgress(Mission task, int amount) {
				sendQuestDialogue(player, task, task.getDialogue().iterator());
			}
		}
		
		if (!task.getType().getID().equals("ACCEPT_QUEST_FROM_NPC") && task.getQuest().supportsParties()) {
			Party party = getParty();
			if (party != null) {
				for (UUID uuid: party.getPlayers()) {
public void setProgress(Mission task, int amount) {
		}
	}

	public void sendQuestDialogue(final Player player, final Mission task, final Iterator<String> dialogue) {
		if (dialogue.hasNext()) {
			sendDialogueComponent(player, dialogue.next());
			sendDialogue(player.getUniqueId(), task, dialogue);
public void sendQuestDialogue(final Player player, final Mission task, final Ite
		}
	}
	
	private void sendDialogue(final UUID uuid, final Mission task, final Iterator<String> dialogue) {
		if (dialogue.hasNext()) {
			final String line = dialogue.next();
			Bukkit.getScheduler().scheduleSyncDelayedTask(QuestWorld.getInstance(), new Runnable() {
public void run() {
		}
		else {
			Player player = Bukkit.getPlayer(uuid);
			if (!task.getType().getID().equals("ACCEPT_QUEST_FROM_NPC") && player != null)
				PlayerTools.sendTranslation(player, false, Translation.notify_completetask, task.getQuest().getName());
		}
	}
public static void clearAllQuestData(Quest quest) {
			}
		}
	}
	
	//TODO remove checks on SubmissionType and maybe ID
	public static void updateTickingTasks() {
		Set<Mission> ticking = new HashSet<Mission>();
		Set<Mission> blockbreaking = new HashSet<Mission>();
		Set<Mission> citizens = new HashSet<Mission>();
		
		for (Category category: QuestWorld.getInstance().getCategories()) {
			for (Quest quest: category.getQuests()) {
				for (Mission task: quest.getMissions()) {
					if (task.getType().isTicker()) ticking.add(task);
					if (task.getType().getID().equals("MINE_BLOCK")) blockbreaking.add(task);
					if (task.getType().getSubmissionType().toString().startsWith("CITIZENS_")) citizens.add(task);
				}
			}
		}
		
		ticking_tasks = ticking;
		block_breaking_tasks = blockbreaking;
		citizen_tasks = citizens;
	}

}
import me.mrCookieSlime.CSCoreLibPlugin.general.Chat.TellRawMessage.HoverAction;
import me.mrCookieSlime.QuestWorld.QuestWorld;
import me.mrCookieSlime.QuestWorld.api.Translation;
import me.mrCookieSlime.QuestWorld.quests.QuestManager;
import me.mrCookieSlime.QuestWorld.utils.PlayerTools;
import me.mrCookieSlime.QuestWorld.utils.Text;

	
	UUID leader;
	Set<UUID> members;
	QuestManager manager;
	Set<UUID> pending;

	public Party(UUID uuid) {
public void playerLeave(Player player) {
	}
	
	public void abandon() {
		for (UUID member: members) {
			members.remove(member);
			QuestWorld.getInstance().getManager(Bukkit.getOfflinePlayer(member)).toConfig().setValue("party.associated", null);
		}
		manager.toConfig().setValue("party.associated", null);
		save();
	}
	long timeframe;
	boolean deathReset;
	String lore;
	int custom_int;
	boolean spawnersAllowed;
	
	List<String> dialogue = new ArrayList<String>();
public Mission(Quest quest, String id, MissionType type, EntityType entity, Stri
		this.location = location;
		this.displayName = displayName;
		this.timeframe = timeframe;
		this.custom_int = custom_int;
		this.deathReset = deathReset;
		this.lore = lore == null ? "": lore;
		this.spawnersAllowed = spawnersAllowed;
public Mission(Quest quest, String id, MissionType type, EntityType entity, Stri
		type.attemptUpgrade(this);
	}
	
	public String getID() {
		return id;
	}
public String getCustomName() {
		return this.displayName;
	}
	
	public long getTimeframe() {
		return this.timeframe;
	}
public void setLore(String lore) {

	public void setCustomInt(int val) {
		quest.updateLastModified();
		this.custom_int = val;
	}

	@Deprecated
	public NPC getCitizen() {
		return CitizensAPI.getNPCRegistry().getById(custom_int);
	}

	public int getCustomInt() {
		return custom_int;
	}

	public boolean acceptsSpawners() {
package me.mrCookieSlime.QuestWorld.quests;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import me.mrCookieSlime.CSCoreLibPlugin.general.Chat.TellRawMessage;
import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ClickAction;
import me.mrCookieSlime.QuestWorld.QuestWorld;
import me.mrCookieSlime.QuestWorld.api.Translation;
import me.mrCookieSlime.QuestWorld.containers.PagedMapping;
import me.mrCookieSlime.QuestWorld.utils.EntityTools;
import me.mrCookieSlime.QuestWorld.utils.ItemBuilder;
import me.mrCookieSlime.QuestWorld.utils.PlayerTools;
import me.mrCookieSlime.QuestWorld.utils.Text;

import org.bukkit.DyeColor;
import org.bukkit.Material;
import org.bukkit.SkullType;
import org.bukkit.entity.EntityType;
import org.bukkit.entity.Player;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;

public class QBDialogue {
	
public boolean onClick(Player p, int arg1, ItemStack arg2, ClickAction arg3) {
				QuestWorld.getSounds().DestructiveClick().playTo(p);
				QuestWorld.getSounds().muteNext();
				if (q instanceof Category) {
					QuestWorld.getInstance().unregisterCategory((Category) q);
					p.closeInventory();
					QuestBook.openEditor(p);
					PlayerTools.sendTranslation(p, true, Translation.category_deleted, q.getName());
				}
				else if (q instanceof Quest) {
					QuestManager.clearAllQuestData((Quest) q);
					((Quest) q).getCategory().removeQuest((Quest) q);
					p.closeInventory();
					QuestBook.openCategoryQuestEditor(p, ((Quest) q).getCategory());
					PlayerTools.sendTranslation(p, true, Translation.quest_deleted, q.getName());
				}
				else if (q instanceof Mission) {
					((Mission) q).getQuest().removeMission((Mission) q);
					p.closeInventory();
					QuestBook.openQuestEditor(p, ((Mission) q).getQuest());
				}
				return false;
			}
public boolean onClick(Player p, int arg1, ItemStack arg2, ClickAction arg3) {
			
			@Override
			public boolean onClick(Player p, int arg1, ItemStack arg2, ClickAction arg3) {
				QuestManager.clearAllQuestData(q);
				QuestBook.openQuestEditor(p, q);
				return false;
			}
public static void openQuestMissionEntityEditor(Player p, final Mission mission)
	
	private static void openQuestMissionEntityEditor(Player p, final Mission mission, int page, int mode) {
		List<EntityType> entities = EntityTools.listAliveEntityTypes();
		
		final String[] sortingMethods = {
				"By Type",
				"A to Z",
private static void openQuestMissionEntityEditor(Player p, final Mission mission
		}
		
		int lastPage = entities.size() / 45; // Double chest size without last row
		//String title = Text.colorize(mission.getQuest().getName() + " &7- &8(Page " + (page+1) + "/" + (lastPage+1) + ")");
		String title = mission.getQuest().getName();
		final ChestMenu menu = new ChestMenu(title);
public void onOpen(Player p) {
					.lore(lore)
					.display("&7Entity Type: &r" + Text.niceName(entity.name()));
			pager.addItem(i, builder.get());
			pager.addButton(i, new MenuClickHandler() {
				@Override
				public boolean onClick(Player p, int slot, ItemStack item, ClickAction action) {
					mission.setEntity(entity);
public boolean onClick(Player p, int slot, ItemStack item, ClickAction action) {
				}
			});
		}
		
		pager.build(menu, 0);
		menu.open(p);
	}

public void onOpen(Player p) {
			}
		});
		
		for (int i = 0; i < 45; i++) {
			final Category category = QuestWorld.getInstance().getCategory(i);
			List<String> lore = new ArrayList<String>();
			if (category != null) {
				ItemStack item = category.getItem();
				lore.add("");
				lore.add(Text.colorize("&7&oLeft Click to open"));
				ItemMeta im = item.getItemMeta();
				im.setLore(lore);
				item.setItemMeta(im);
				menu.addItem(i, item);
				menu.addMenuClickHandler(i, new MenuClickHandler() {
					
					@Override
					public boolean onClick(Player p, int slot, ItemStack item, ClickAction action) {
						openQuestRequirementChooser2(p, quest, category);
						return false;
					}
				});
			}
		}
		menu.open(p);
	}

public void onOpen(Player p) {
			}
		});
		
		for (int i = 0; i < 45; i++) {
			final Quest quest = category.getQuest(i);
			List<String> lore = new ArrayList<String>();
			if (quest != null) {
				ItemStack item = quest.getItem();
				lore.add("");
				lore.add(Text.colorize("&7&oClick to select it as a Requirement"));
				lore.add(Text.colorize("&7&ofor the Quest:"));
				lore.add(Text.colorize("&r" + q.getName()));
				ItemMeta im = item.getItemMeta();
				im.setLore(lore);
				item.setItemMeta(im);
				menu.addItem(i, item);
				menu.addMenuClickHandler(i, new MenuClickHandler() {
					
					@Override
					public boolean onClick(Player p, int slot, ItemStack item, ClickAction action) {
						q.setParent(quest);
						if (q instanceof Quest) QuestBook.openQuestEditor(p, (Quest) q);
						else QuestBook.openCategoryEditor(p, (Category) q);
						return false;
					}
				});
			}
		}
		menu.open(p);
	}

import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ChestMenu.MenuClickHandler;
import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ChestMenu.MenuOpeningHandler;
import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ClickAction;
import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.MenuHelper;
import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.MenuHelper.ChatHandler;
import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.Item.CustomItem;
import me.mrCookieSlime.CSCoreLibPlugin.general.Player.PlayerInventory;
import me.mrCookieSlime.QuestWorld.QuestWorld;
import me.mrCookieSlime.QuestWorld.api.CategoryChange;
import me.mrCookieSlime.QuestWorld.api.MissionType;
import me.mrCookieSlime.QuestWorld.api.QuestChange;
import me.mrCookieSlime.QuestWorld.api.Translation;
import me.mrCookieSlime.QuestWorld.api.menu.Buttons;
import me.mrCookieSlime.QuestWorld.containers.PagedMapping;
import me.mrCookieSlime.QuestWorld.hooks.citizens.CitizensHook;
import me.mrCookieSlime.QuestWorld.listeners.Input;
import me.mrCookieSlime.QuestWorld.listeners.InputType;
import me.mrCookieSlime.QuestWorld.parties.Party;
import me.mrCookieSlime.QuestWorld.utils.EntityTools;
import me.mrCookieSlime.QuestWorld.utils.ItemBuilder;
import me.mrCookieSlime.QuestWorld.utils.PlayerTools;
import me.mrCookieSlime.QuestWorld.utils.Text;

import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.DyeColor;
import org.bukkit.Material;
import org.bukkit.OfflinePlayer;
public void onOpen(Player p) {
		addPartyMenuButton(menu, p);
		
		PagedMapping view = new PagedMapping(45, 9);
		for(Category category : QuestWorld.getInstance().getCategories()) {
			if (!category.isHidden()) {
				if (category.isWorldEnabled(p.getWorld().getName())) {
public boolean onClick(Player p, int slot, ItemStack item, ClickAction action) {
						im.setLore(lore);
						item.setItemMeta(im);
						view.addItem(category.getID(), item);
						view.addButton(category.getID(), new MenuClickHandler() {
							
							@Override
							public boolean onClick(Player p, int slot, ItemStack item, ClickAction action) {
								openCategory(p, category, true);
								return false;
							}
public boolean onClick(Player p, int slot, ItemStack item, ClickAction action) {
				}
			}
		}
		view.build(menu, 0);
		menu.open(p);
	}
	
public boolean onClick(Player arg0, int arg1, ItemStack arg2, ClickAction arg3)
		ItemBuilder glassPane = new ItemBuilder(Material.STAINED_GLASS_PANE).color(DyeColor.RED);
		
		PagedMapping view = new PagedMapping(45, 9);
		for (final Quest quest: category.getQuests()) {
			glassPane.display(quest.getName());
			if (QuestWorld.getInstance().getManager(p).getStatus(quest).equals(QuestStatus.LOCKED) || !quest.isWorldEnabled(p.getWorld().getName())) {
else if (QuestWorld.getInstance().getManager(p).hasFinished(quest)) {
				im.setLore(lore);
				item.setItemMeta(im);
				view.addItem(quest.getID(), item);
				view.addButton(quest.getID(), new MenuClickHandler() {
					
					@Override
					public boolean onClick(Player p, int slot, ItemStack item, ClickAction action) {
public boolean onClick(Player p, int slot, ItemStack item, ClickAction action) {
				});
			}
		}
		view.build(menu, 0);
		menu.open(p);
	}
	
public boolean onClick(Player arg0, int arg1, ItemStack arg2, ClickAction arg3)
		int index = 9;
		for (final Mission mission: quest.getMissions()) {
			if (QuestWorld.getInstance().getManager(p).hasUnlockedTask(mission)) {
				String manual = null;
				if (mission.getType().getID().equals("DETECT")) manual = "Detect";
				else if (mission.getType().getID().equals("SUBMIT")) manual = "Submit";
				else if (mission.getType().getID().equals("REACH_LOCATION")) manual = "Detect";
				
				ItemBuilder entryItem = new ItemBuilder(mission.getDisplayItem()).display(mission.getText());

				if (manual == null) entryItem.lore("", mission.getProgress(p));
				else entryItem.lore("", mission.getProgress(p), "", "&r> Click for Manual " + manual);
				
				menu.addItem(index, entryItem.get());
			}
			else {
public boolean onClick(Player arg0, int arg1, ItemStack arg2, ClickAction arg3)
				
				@Override
				public boolean onClick(Player p, int slot, ItemStack item, ClickAction action) {
					QuestManager manager = QuestWorld.getInstance().getManager(p);
					
					if (!manager.hasUnlockedTask(mission)) return false;
					if (manager.getStatus(quest).equals(QuestStatus.AVAILABLE) && quest.isWorldEnabled(p.getWorld().getName())) {
						if (manager.hasCompletedTask(mission)) return false;
						if (mission.getType().getID().equals("DETECT")) {
							int amount = 0;
							for (int i = 0; i < 36; i++) {
								ItemStack current = p.getInventory().getItem(i);
else if (mission.getType().getID().equals("REACH_LOCATION")) {
								QuestWorld.getInstance().getManager(p).setProgress(mission, 1);
								openQuest(p, quest, categoryBack, back);
							}
						}
					}
					return false;
				}
public void onOpen(Player p) {
			}
		});
		
		String[] lore = {
				"",
				"&c&oLeft Click to edit",
				"&c&oShift + Left Click to open",
				"&c&oRight Click to delete"
		};
		
		ItemBuilder defaultItem = new ItemBuilder(Material.STAINED_GLASS_PANE)
				.color(DyeColor.RED).display("&7&o> New Category");

public void onOpen(Player p) {
			
			Category category = QuestWorld.getInstance().getCategory(i);
			if(category != null) {
				++found;
				view.addItem(i, new ItemBuilder(category.getItem()).lore(lore).get());
				view.addButton(i, Buttons.onCategory(category));
			}
			else {
				view.addItem(i, defaultItem.get());
				view.addButton(i, Buttons.newCategory(i));
			}
		}

		view.build(menu, 0);
		menu.open(p);
	}

public boolean onClick(Player p, int slot, ItemStack item, ClickAction action) {
			}
		});
		
		String[] lore = {
			"",
			"&c&oLeft Click to edit",
			"&c&oRight Click to delete"
		};
		
		ItemBuilder defaultItem = new ItemBuilder(Material.STAINED_GLASS_PANE)
				.color(DyeColor.RED).display("&7&o> New Quest");
		
public boolean onClick(Player p, int slot, ItemStack item, ClickAction action) {
			
			Quest quest = category.getQuest(i);
			if (quest != null) {
				++found;
				view.addItem(i, new ItemBuilder(quest.getItem()).lore(lore).get());
				view.addButton(i, Buttons.onQuest(quest));
			}
			else {
				view.addItem(i, defaultItem.getNew());
				view.addButton(i, Buttons.newQuest(category.getID(), i));
			}
		}
		view.build(menu, 0);
		menu.open(p);
	}

public boolean onClick(Player p, int slot, ItemStack item, ClickAction action) {
						changes.apply();
					openCategoryEditor(p, category);
				}
				else QBDialogue.openQuestRequirementChooser(p, category);
				return false;
			}
		});
public boolean onClick(Player p, int slot, ItemStack item, ClickAction action) {
			}
		});
		
		menu.addItem(17, new CustomItem(new MaterialData(Material.WOOL, (byte) 14), "§4Delete Database", "", "§rThis is going to delete the Database", "§rof all Quests inside this Category", "§rand will clear all Player's Progress associated", "§rwith those Quests."));
		menu.addMenuClickHandler(17, new MenuClickHandler() {
			
			@Override
			public boolean onClick(Player p, int slot, ItemStack item, ClickAction action) {
				for (Quest quest: category.getQuests()) {
					QuestManager.clearAllQuestData(quest);
				}
				QuestWorld.getSounds().DestructiveClick().playTo(p);
				return false;
public boolean onClick(Player p, int slot, ItemStack item, ClickAction action) {
			
			@Override
			public boolean onClick(Player p, int slot, ItemStack item, ClickAction action) {
				if (p.getItemInHand() != null && p.getItemInHand().getType() != null && p.getItemInHand().getType() != Material.AIR) {
					changes.setItem(p.getItemInHand());
					if(changes.sendEvent())
						changes.apply();
					
public boolean onClick(Player p, int slot, ItemStack item, ClickAction action) {
						changes.apply();
					openQuestEditor(p, quest);
				}
				else QBDialogue.openQuestRequirementChooser(p, quest);
				return false;
			}
		});
public boolean onClick(Player p, int slot, ItemStack item, ClickAction action) {
			}
		});
		
		menu.addItem(26, new CustomItem(new MaterialData(Material.WOOL, (byte) 14), "§4Delete Database", "", "§rThis is going to delete this Quest's Database", "§rand will clear all Player's Progress associated", "§rwith this Quest."));
		menu.addMenuClickHandler(26, new MenuClickHandler() {
			
			@Override
			public boolean onClick(Player p, int slot, ItemStack item, ClickAction action) {
				QuestManager.clearAllQuestData(quest);
				QuestWorld.getSounds().DestructiveClick().playTo(p);
				return false;
			}
public boolean onClick(Player p, int slot, ItemStack item, ClickAction action) {

	public static void openQuestMissionEditor(Player p, final Mission mission) {
		final ChestMenu menu = new ChestMenu("§3Quest Editor");
		menu.addMenuOpeningHandler(new MenuOpeningHandler() {
			
			@Override
public boolean onClick(Player p, int slot, ItemStack item, ClickAction action) {
			}
		});
		
		switch (mission.getType().getSubmissionType()) {
		
		case ENTITY: {
			EntityType entity = mission.getEntity();
			ItemBuilder egg = new ItemBuilder(EntityTools.getEntityDisplay(entity));
			egg.display("&7Entity Type: &r" + Text.niceName(entity.name()));
			egg.lore("", "&e> Click to change the Entity");

			menu.addItem(10, egg.get());
			menu.addMenuClickHandler(10, new MenuClickHandler() {
				
				@Override
				public boolean onClick(Player p, int slot, ItemStack item, ClickAction action) {
					QBDialogue.openQuestMissionEntityEditor(p, mission);
					return false;
				}
			});
			
			menu.addItem(11, new CustomItem(new MaterialData(Material.MOB_SPAWNER), "§7Allow Mobs from Spawners: " + (mission.acceptsSpawners() ? "§2§l\u2714": "§4§l\u2718"), "", "§e> Click to change whether this Mission will", "§ealso count Mobs which were spawned by a Mob Spawner"));
			menu.addMenuClickHandler(11, new MenuClickHandler() {
				
				@Override
				public boolean onClick(Player p, int slot, ItemStack item, ClickAction action) {
					mission.setSpawnerSupport(!mission.acceptsSpawners());
					openQuestMissionEditor(p, mission);
					return false;
				}
			});
			
			menu.addItem(17, new CustomItem(new MaterialData(Material.REDSTONE), "§7Amount: §b" + mission.getAmount(), "", "§rLeft Click: §e+1", "§rRight Click: §e-1", "§rShift + Left Click: §e+16", "§rShift + Right Click: §e-16"));
			menu.addMenuClickHandler(17, new MenuClickHandler() {
				
				@Override
				public boolean onClick(Player p, int slot, ItemStack item, ClickAction action) {
					int amount = mission.getAmount();
					if (action.isRightClicked()) amount = amount - (action.isShiftClicked() ? 16: 1);
					else amount = amount + (action.isShiftClicked() ? 16: 1);
					if (amount < 1) amount = 1;
					mission.setAmount(amount);
					openQuestMissionEditor(p, mission);
					return false;
				}
			});
			break;
		}
		
		case ITEM: {
			ItemStack item = mission.getMissionItem().clone();
			ItemMeta im = item.getItemMeta();
			im.setLore(Arrays.asList("", "§e> Click to change the Item to", "§ethe Item you are currently holding"));
			item.setItemMeta(im);
			
			menu.addItem(10, item);
			menu.addMenuClickHandler(10, new MenuClickHandler() {
				
				@Override
				public boolean onClick(Player p, int slot, ItemStack item, ClickAction action) {
					if (p.getItemInHand() != null && p.getItemInHand().getType() != null && p.getItemInHand().getType() != Material.AIR) {
						mission.setItem(p.getItemInHand());
						openQuestMissionEditor(p, mission);
					}
					return false;
				}
			});
			
			menu.addItem(17, new CustomItem(new MaterialData(Material.REDSTONE), "§7Amount: §b" + mission.getAmount(), "", "§rLeft Click: §e+1", "§rRight Click: §e-1", "§rShift + Left Click: §e+16", "§rShift + Right Click: §e-16"));
			menu.addMenuClickHandler(17, new MenuClickHandler() {
				
				@Override
				public boolean onClick(Player p, int slot, ItemStack item, ClickAction action) {
					int amount = mission.getAmount();
					if (action.isRightClicked()) amount = amount - (action.isShiftClicked() ? 16: 1);
					else amount = amount + (action.isShiftClicked() ? 16: 1);
					if (amount < 1) amount = 1;
					mission.setAmount(amount);
					openQuestMissionEditor(p, mission);
					return false;
				}
			});
			break;
		}
		
		case BLOCK: {
			ItemStack item = mission.getDisplayItem();
			ItemMeta im = item.getItemMeta();
			im.setLore(Arrays.asList("", "§e> Click to change the Block to", "§ethe Item you are currently holding"));
			item.setItemMeta(im);
			
			menu.addItem(10, item);
			menu.addMenuClickHandler(10, new MenuClickHandler() {
				
				@Override
				public boolean onClick(Player p, int slot, ItemStack item, ClickAction action) {
					if (p.getItemInHand() != null && p.getItemInHand().getType() != null && p.getItemInHand().getType() != Material.AIR && p.getItemInHand().getType().isBlock()) {
						mission.setItem(new ItemStack(p.getItemInHand().getType(), 1, p.getItemInHand().getDurability()));
						openQuestMissionEditor(p, mission);
					}
					return false;
				}
			});
			
			menu.addItem(17, new CustomItem(new MaterialData(Material.REDSTONE), "§7Amount: §b" + mission.getAmount(), "", "§rLeft Click: §e+1", "§rRight Click: §e-1", "§rShift + Left Click: §e+16", "§rShift + Right Click: §e-16"));
			menu.addMenuClickHandler(17, new MenuClickHandler() {
				
				@Override
				public boolean onClick(Player p, int slot, ItemStack item, ClickAction action) {
					int amount = mission.getAmount();
					if (action.isRightClicked()) amount = amount - (action.isShiftClicked() ? 16: 1);
					else amount = amount + (action.isShiftClicked() ? 16: 1);
					if (amount < 1) amount = 1;
					mission.setAmount(amount);
					openQuestMissionEditor(p, mission);
					return false;
				}
			});
			break;
		}
		
		case INTEGER: {
			menu.addItem(17, new CustomItem(new MaterialData(Material.REDSTONE), "§7Amount: §b" + mission.getAmount(), "", "§rLeft Click: §e+1", "§rRight Click: §e-1", "§rShift + Left Click: §e+16", "§rShift + Right Click: §e-16"));
			menu.addMenuClickHandler(17, new MenuClickHandler() {
				
				@Override
				public boolean onClick(Player p, int slot, ItemStack item, ClickAction action) {
					int amount = mission.getAmount();
					if (action.isRightClicked()) amount = amount - (action.isShiftClicked() ? 16: 1);
					else amount = amount + (action.isShiftClicked() ? 16: 1);
					if (amount < 1) amount = 1;
					mission.setAmount(amount);
					openQuestMissionEditor(p, mission);
					return false;
				}
			});
			break;
		}
		
		case TIME: {
			menu.addItem(17, new CustomItem(new MaterialData(Material.WATCH), "§7Time: §b" + (mission.getAmount() / 60) + "h " + (mission.getAmount() %!)(MISSING) + "m", "", "§rLeft Click: §e+1m", "§rRight Click: §e-1m", "§rShift + Left Click: §e+1h", "§rShift + Right Click: §e-1h"));
			menu.addMenuClickHandler(17, new MenuClickHandler() {
				
				@Override
				public boolean onClick(Player p, int slot, ItemStack item, ClickAction action) {
					int amount = mission.getAmount();
					if (action.isRightClicked()) amount = amount - (action.isShiftClicked() ? 60: 1);
					else amount = amount + (action.isShiftClicked() ? 60: 1);
					if (amount < 1) amount = 1;
					mission.setAmount(amount);
					openQuestMissionEditor(p, mission);
					return false;
				}
			});
			break;
		}
		
		case LOCATION: {
			ItemStack item = mission.getDisplayItem();
			ItemMeta im = item.getItemMeta();
			im.setLore(Arrays.asList("", "§e> Click to change the Location", "§eto your current Position"));
			item.setItemMeta(im);
			
			menu.addItem(10, item);
			menu.addMenuClickHandler(10, new MenuClickHandler() {
				
				@Override
				public boolean onClick(Player p, int slot, ItemStack item, ClickAction action) {
					mission.setLocation(p);
					openQuestMissionEditor(p, mission);
					return false;
				}
			});
			
			menu.addItem(11, new CustomItem(new MaterialData(Material.NAME_TAG), "§r" + mission.getEntityName(), "", "§e> Give your Location a Name"));
			menu.addMenuClickHandler(11, new MenuClickHandler() {
				
				@Override
				public boolean onClick(Player p, int slot, ItemStack item, ClickAction action) {
					QuestWorld.getInstance().storeInput(p.getUniqueId(), new Input(InputType.LOCATION_NAME, mission));
					PlayerTools.sendTranslation(p, true, Translation.location_rename);
					p.closeInventory();
					return false;
				}
			});
			
			menu.addItem(17, new CustomItem(new MaterialData(Material.COMPASS), "§7Radius: §a" + mission.getCustomInt(), "", "§rLeft Click: §e+1", "§rRight Click: §e-1", "§rShift + Left Click: §e+16", "§rShift + Right Click: §e-16"));
			menu.addMenuClickHandler(17, new MenuClickHandler() {
				
				@Override
				public boolean onClick(Player p, int slot, ItemStack item, ClickAction action) {
					int amount = mission.getCustomInt();
					if (action.isRightClicked()) amount = amount - (action.isShiftClicked() ? 16: 1);
					else amount = amount + (action.isShiftClicked() ? 16: 1);
					if (amount < 1) amount = 1;
					
					mission.setCustomInt(amount);
					//mission.setAmount(amount);
					openQuestMissionEditor(p, mission);
					return false;
				}
			});
			break;
		}
		
		case CITIZENS_INTERACT: {
			menu.addItem(10, new CustomItem(new MaterialData(Material.NAME_TAG), "§dCitizen §f#" + mission.getCustomInt(), "§7Name: §r" + (mission.getCitizen() != null ? mission.getCitizen().getName(): "§4N/A"), "", "§e> Click to change the selected NPC"));
			menu.addMenuClickHandler(10, new MenuClickHandler() {
				
				@Override
				public boolean onClick(Player p, int slot, ItemStack item, ClickAction action) {
					PlayerTools.sendTranslation(p, true, Translation.citizen_l);
					CitizensHook.link.put(p.getUniqueId(), mission);
					p.closeInventory();
					return false;
				}
			});
			break;
		}
		
		case CITIZENS_KILL: {
			menu.addItem(10, new CustomItem(new MaterialData(Material.NAME_TAG), "§dCitizen §f#" + mission.getCustomInt(), "§7Name: §r" + (mission.getCitizen() != null ? mission.getCitizen().getName(): "§4N/A"), "", "§e> Click to change the selected NPC"));
			menu.addMenuClickHandler(10, new MenuClickHandler() {
				
				@Override
				public boolean onClick(Player p, int slot, ItemStack item, ClickAction action) {
					PlayerTools.sendTranslation(p, true, Translation.citizen_l);
					CitizensHook.link.put(p.getUniqueId(), mission);
					p.closeInventory();
					return false;
				}
			});
			
			menu.addItem(17, new CustomItem(new MaterialData(Material.REDSTONE), "§7Amount: §b" + mission.getAmount(), "", "§rLeft Click: §e+1", "§rRight Click: §e-1", "§rShift + Left Click: §e+16", "§rShift + Right Click: §e-16"));
			menu.addMenuClickHandler(17, new MenuClickHandler() {
				
				@Override
				public boolean onClick(Player p, int slot, ItemStack item, ClickAction action) {
					int amount = mission.getAmount();
					if (action.isRightClicked()) amount = amount - (action.isShiftClicked() ? 16: 1);
					else amount = amount + (action.isShiftClicked() ? 16: 1);
					if (amount < 1) amount = 1;
					mission.setAmount(amount);
					openQuestMissionEditor(p, mission);
					return false;
				}
			});
			break;
		}
		
		case CITIZENS_ITEM: {
			menu.addItem(10, new CustomItem(new MaterialData(Material.NAME_TAG), "§dCitizen §f#" + mission.getCustomInt(), "§7Name: §r" + (mission.getCitizen() != null ? mission.getCitizen().getName(): "§4N/A"), "", "§e> Click to change the selected NPC"));
			menu.addMenuClickHandler(10, new MenuClickHandler() {
				
				@Override
				public boolean onClick(Player p, int slot, ItemStack item, ClickAction action) {
					PlayerTools.sendTranslation(p, true, Translation.citizen_l);
					CitizensHook.link.put(p.getUniqueId(), mission);
					p.closeInventory();
					return false;
				}
			});
			
			ItemStack item = mission.getDisplayItem().clone();
			ItemMeta im = item.getItemMeta();
			im.setLore(Arrays.asList("", "§e> Click to change the Item to", "§ethe Item you are currently holding"));
			item.setItemMeta(im);
			
			menu.addItem(11, item);
			menu.addMenuClickHandler(11, new MenuClickHandler() {
				
				@Override
				public boolean onClick(Player p, int slot, ItemStack item, ClickAction action) {
					if (p.getItemInHand() != null && p.getItemInHand().getType() != null && p.getItemInHand().getType() != Material.AIR) {
						mission.setItem(p.getItemInHand());
						openQuestMissionEditor(p, mission);
					}
					return false;
				}
			});
			
			menu.addItem(17, new CustomItem(new MaterialData(Material.REDSTONE), "§7Amount: §b" + mission.getAmount(), "", "§rLeft Click: §e+1", "§rRight Click: §e-1", "§rShift + Left Click: §e+16", "§rShift + Right Click: §e-16"));
			menu.addMenuClickHandler(17, new MenuClickHandler() {
				
				@Override
				public boolean onClick(Player p, int slot, ItemStack item, ClickAction action) {
					int amount = mission.getAmount();
					if (action.isRightClicked()) amount = amount - (action.isShiftClicked() ? 16: 1);
					else amount = amount + (action.isShiftClicked() ? 16: 1);
					if (amount < 1) amount = 1;
					mission.setAmount(amount);
					openQuestMissionEditor(p, mission);
					return false;
				}
			});
			break;
		}
		
		default:
			break;
		}
		
		if (mission.getType().getID().equals("KILL_NAMED_MOB")) {
			menu.addItem(12, new CustomItem(new MaterialData(Material.NAME_TAG), "§r" + mission.getEntityName(), "", "§e> Click to change the Name"));
			menu.addMenuClickHandler(12, new MenuClickHandler() {
				
				@Override
				public boolean onClick(Player p, int slot, ItemStack item, ClickAction action) {
					QuestWorld.getInstance().storeInput(p.getUniqueId(), new Input(InputType.KILL_NAMED, mission));
					PlayerTools.sendTranslation(p, true, Translation.killmission_rename);
					p.closeInventory();
					return false;
				}
			});
		}
		
		if (mission.getType().getID().equals("ACCEPT_QUEST_FROM_NPC")) {
			List<String> lore = new ArrayList<String>();
			lore.add("");
			for (String s: new String("§r" + mission.getLore()).replaceAll(".{32}", "$0NEW LINE§r").split("NEW LINE")) {
				lore.add(s);
			}
			lore.add("");
			lore.add("§e> Edit the Quest's Description");
			lore.add("&7(Color Codes are not supported)");
			
			menu.addItem(11, new CustomItem(new MaterialData(Material.NAME_TAG), "§rQuest Description", lore.toArray(new String[lore.size()])));
			menu.addMenuClickHandler(11, new MenuClickHandler() {
				
				@Override
				public boolean onClick(Player p, int slot, ItemStack item, ClickAction action) {
					PlayerTools.sendTranslation(p, true, Translation.mission_desc);
					MenuHelper.awaitChatInput(p, new ChatHandler() {
						
						@Override
						public boolean onChat(Player p, String message) {
							mission.setLore(ChatColor.stripColor(ChatColor.translateAlternateColorCodes('&', message)));
							openQuestMissionEditor(p, mission);
							return false;
						}
					});
					p.closeInventory();
					return false;
				}
			});
		}
		
		int totalMissions = QuestWorld.getInstance().getMissionTypes().size();
		String[] missionTypes = new String[totalMissions];
public boolean onChat(Player p, String message) {
			@Override
			public boolean onClick(Player p, int slot, ItemStack item, ClickAction action) {
				int delta = 1;
				if(action.isRightClicked())
					delta = -1;
				
				int newMission = (currentMission + delta + totalMissions) %!t(MISSING)otalMissions;
				
				mission.setType(QuestWorld.getInstance().getMissionTypes().get(keys[newMission]));
				
				//mission.setType(mission.getType().getNextType());
				QuestManager.updateTickingTasks();
				openQuestMissionEditor(p, mission);
				return false;
			}
		});
		
		if (mission.getType().supportsDeathReset()) {
			menu.addItem(5, new CustomItem(new MaterialData(Material.SKULL_ITEM), "§7Resets on Death: " + (mission.resetsonDeath() ? "§2§l\u2714": "§4§l\u2718"), "", "§e> Click to change whether this Mission's Progress", "§eresets when a Player dies"));
			menu.addMenuClickHandler(5, new MenuClickHandler() {
				
				@Override
				public boolean onClick(Player p, int slot, ItemStack item, ClickAction action) {
					mission.setDeathReset(!mission.resetsonDeath());
					openQuestMissionEditor(p, mission);
					return false;
				}
			});
		}
		
		if (mission.getType().supportsTimeframes()) {
			menu.addItem(6, new CustomItem(new MaterialData(Material.WATCH), "§7Complete Mission within: §b" + (mission.getTimeframe() / 60) + "h " + (mission.getTimeframe() %!)(MISSING) + "m", "", "§rLeft Click: §e+1m", "§rRight Click: §e-1m", "§rShift + Left Click: §e+1h", "§rShift + Right Click: §e-1h"));
			menu.addMenuClickHandler(6, new MenuClickHandler() {
				
				@Override
				public boolean onClick(Player p, int slot, ItemStack item, ClickAction action) {
					long amount = mission.getTimeframe();
					if (action.isRightClicked()) amount = amount - (action.isShiftClicked() ? 60: 1);
					else amount = amount + (action.isShiftClicked() ? 60: 1);
					if (amount < 0) amount = 0;
					mission.setTimeframe(amount);
					openQuestMissionEditor(p, mission);
					return false;
				}
			});
		}
		
		menu.addItem(7, new CustomItem(new MaterialData(Material.NAME_TAG), "§rCustom Name", mission.getText(), "", "§rLeft Click: Edit Mission Name", "§rRight Click: Reset Mission Name"));
		menu.addMenuClickHandler(7, new MenuClickHandler() {
			
			@Override
			public boolean onClick(Player p, int slot, ItemStack item, ClickAction action) {
				if (action.isRightClicked()) {
					mission.setCustomName(null);
					openQuestMissionEditor(p, mission);
				}
				else {
					p.closeInventory();
					PlayerTools.sendTranslation(p, true, Translation.mission_await);
					MenuHelper.awaitChatInput(p, new ChatHandler() {
						
						@Override
						public boolean onChat(Player p, String message) {
							mission.setCustomName(message);
							PlayerTools.sendTranslation(p, true, Translation.mission_name);
							openQuestMissionEditor(p, mission);
							return false;
						}
					});
				}
				return false;
			}
		});
		
		menu.addItem(8, new CustomItem(new MaterialData(Material.PAPER), "§rDialogue", "", "§rLeft Click: Edit the Dialogue", "§rRight Click: Dialogue Preview"));
		menu.addMenuClickHandler(8, new MenuClickHandler() {
			
			@Override
			public boolean onClick(Player p, int slot, ItemStack item, ClickAction action) {
				if (action.isRightClicked()) {
					p.closeInventory();
					if (mission.getDialogue().isEmpty()) p.sendMessage("§4No Dialogue found!");
					else QuestWorld.getInstance().getManager(p).sendQuestDialogue(p, mission, mission.getDialogue().iterator());
				}
				else {
					p.closeInventory();
					mission.setupDialogue(p);
				}
				return false;
			}
		});
		
		menu.open(p);
	}

}
package me.mrCookieSlime.QuestWorld.quests;

import java.util.UUID;

import me.mrCookieSlime.QuestWorld.QuestWorld;

import org.bukkit.Bukkit;
import org.bukkit.entity.Player;
import org.bukkit.event.Event;

public class QuestChecker {
	
	//TODO: Holy hell there is so much of this running so frequently, whyyyyyyyyyyyyyy
	public static void check(Player p, Event event, String type, QuestListener listener) {
		QuestManager manager = QuestWorld.getInstance().getManager(p);
		for (Category category: QuestWorld.getInstance().getCategories()) {
			if (category.isWorldEnabled(p.getWorld().getName())) {
				for (Quest quest: category.getQuests()) {
					if (manager.getStatus(quest).equals(QuestStatus.AVAILABLE) && quest.isWorldEnabled(p.getWorld().getName())) {
						for (Mission task: quest.getMissions()) {
							if (!manager.hasCompletedTask(task) && manager.hasUnlockedTask(task)) {
								if (task.getType().getID().equals(type)) listener.onProgressCheck(p, manager, task, event);
							}
						}
					}
				}
			}
		}
	}
	
	public static void check(UUID uuid, Event event, String type, QuestOfflineListener listener) {
		QuestManager manager = QuestWorld.getInstance().getManager(Bukkit.getOfflinePlayer(uuid));
		for (Category category: QuestWorld.getInstance().getCategories()) {
			for (Quest quest: category.getQuests()) {
				if (manager.getStatus(quest).equals(QuestStatus.AVAILABLE)) {
					for (Mission task: quest.getMissions()) {
						if (!manager.hasCompletedTask(task) && manager.hasUnlockedTask(task)) {
							if (task.getType().getID().equals(type)) listener.onProgressCheck(uuid, manager, task, event);
						}
					}
				}
			}
		}
	}

}
package me.mrCookieSlime.QuestWorld.quests;

import org.bukkit.entity.Player;

public interface QuestListener {
	
	void onProgressCheck(Player p, QuestManager manager, Mission task, Object event);

}
package me.mrCookieSlime.QuestWorld.quests;

import java.util.UUID;

public interface QuestOfflineListener {
	
	void onProgressCheck(UUID uuid, QuestManager manager, Mission task, Object event);

}
public boolean isValid() {
		return false;
	}

}
package me.mrCookieSlime.QuestWorld.utils;

import org.bukkit.entity.EntityType;

public class EntityTag {
	private String tag;
	public EntityTag(EntityType base) {
		tag = "{EntityTag:{id:\"minecraft:" + entityNameLookup(base) + "\"}}";
	}
	
	@Override
	public String toString() {
		return tag;
	}
	
	/**
	 * Yes, this is deprecated, but from the source: "These strings MUST match the strings in nms.EntityTypes"
	 * Since we're using NBT that requires the exact name from nms, this is what we want.
	 * 
	 * @param ent Enum entity
	 * @return NMS entity name
	 */
	public static String entityNameLookup(EntityType ent) {
		@SuppressWarnings("deprecation")
		String name = ent.getName();
		return name;
	}
}

import org.bukkit.Material;
import org.bukkit.SkullType;
import org.bukkit.entity.EntityType;
import org.bukkit.inventory.ItemStack;

public class EntityTools {
	private static EntityType[] alive;
public static ItemStack getEntityDisplay(EntityType type) {
		
		return ib.get();
	}
}
import org.bukkit.inventory.meta.LeatherArmorMeta;
import org.bukkit.inventory.meta.SkullMeta;
import org.bukkit.inventory.meta.SpawnEggMeta;
import org.bukkit.material.Colorable;
import org.bukkit.material.MaterialData;
import org.bukkit.material.Wool;

public class ItemBuilder {
	public static ItemStack clone(ItemStack source) {
		if(source != null)
			return source.clone();
public ItemBuilder mob(EntityType mob) {
		
		return this;
	}

	/*@SuppressWarnings("deprecation")
	private void legacyEggData(EntityType entity) {
		durability(entity.getTypeId());
	}*/
	
	/**
     * Sets leather armor color
public static void config(String message) {
	}
	
	public static void fine(String message) {
		activeLogger.fine(message);
	}
	
	public static void finer(String message) {
		activeLogger.finer(message);
	}
	
	public static void finest(String message) {
public static ItemStack getActiveHandItem(Player p) {
		return result;
	}
	
	public static int getMaxCraftAmount(CraftingInventory inv) {
		int resultCount = inv.getResult().getAmount();
		int materialCount = Integer.MAX_VALUE;
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public static String valueOf(ItemStack[] items) {
     * @param items The items you wish to "string-i-tize".
     * @return A string representation of an inventory.
     */
    public static JSONObject asJsonObject(ItemStack[] items) {
        JSONObject jsonItems = new JSONObject();
        for (int i = 0; i < items.length; i++) {
            if (items[i] != null && items[i].getTypeId() != 0) {
                jsonItems.put(Integer.valueOf(i).toString(), items[i]);
                //jsonItems.put(Integer.valueOf(i).toString(), new JSONItemWrapper(items[i]).asJSONObject());
public InventorySerializer(final int inventorySize) {
    @Override
    public Object serialize(ItemStack[] itemStacks) {
        //return DataStrings.valueOf(itemStacks);
        return DataStrings.asJsonObject(itemStacks);
    }
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public Bitmap transform(Bitmap source) {
                source.recycle();
            }

            Bitmap bitmap = Bitmap.createBitmap(size, size, source.getConfig());

            Canvas canvas = new Canvas(bitmap);
            Paint paint = new Paint();
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
to learn Socket programming and get familiarized with the basics of distributed
## Run server
```shell
# 🐳  Pulls image, then runs server publishing port 8080 on localhost
docker run -d -p 8080:8080 jppgks/http-server
```

Interact with the server at `localhost:8080`! 🎉

## Run client
```shell
# Modify parameters as you see fit, find server IP with `docker inspect <container-id>`
docker run -e METHOD="GET" -e HOST="172.17.0.2" -e PORT=8080 jppgks/http-client
```
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void generateTexts(String lang) {
				if (text == null) {
					text = pack.getString("journal." + pointerName + "." + Config.getLanguage());
				}
				if (text == null) {
					Debug.error("No default language defined for journal pointer " + pointerName);
					text = "error";
				}
			} else {
				text = pack.getString("journal." + pointerName);
			}
			// add the entry to the list
			texts.add(datePrefix + "§" + Config.getString("config.journal_colors.text") + "\n"
					+ text.replaceAll("&", "§"));
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public OAuth2User loadUser(OAuth2AuthenticationToken token) throws OAuth2Authent
			if (httpResponse.getStatusCode() != HTTPResponse.SC_OK) {
				UserInfoErrorResponse userInfoErrorResponse = UserInfoErrorResponse.parse(httpResponse);
				ErrorObject errorObject = userInfoErrorResponse.getErrorObject();
				OAuth2Error oauth2Error = new OAuth2Error(errorObject.getCode(), errorObject.getDescription(),
					(errorObject.getURI() != null ? errorObject.getURI().toString() : null));
				throw new OAuth2AuthenticationException(oauth2Error, oauth2Error.toString());
			}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void launchPack(ProjectModel project, Array<PackModel> packs) {
                        // Startup metadata
                        new StartTimeMetadataProcessor(),

                        // File type
                        new PngFileTypeProcessor(),
                        new JpegFileTypeProcessor(),
public void run() {

    private static class TestProcessor implements PackProcessor {
        @Override
        public void processPackage(PackProcessingNode processingNode) {
            try {
                System.out.println("start processing");
                Thread.sleep(MathUtils.random(500, 2500));
import com.crashinvaders.texturepackergui.services.model.PackModel;
import com.crashinvaders.texturepackergui.services.model.ProjectModel;
import com.crashinvaders.texturepackergui.services.model.filetype.JpegFileTypeModel;
import com.crashinvaders.texturepackergui.services.model.filetype.PngFileTypeModel;
import com.crashinvaders.texturepackergui.utils.packprocessing.PackProcessingNode;
import com.crashinvaders.texturepackergui.utils.packprocessing.PackProcessor;

import com.crashinvaders.texturepackergui.services.model.FileTypeType;
import com.crashinvaders.texturepackergui.services.model.PackModel;
import com.crashinvaders.texturepackergui.services.model.ProjectModel;
import com.crashinvaders.texturepackergui.services.model.filetype.FileTypeModel;
import com.crashinvaders.texturepackergui.services.model.filetype.PngFileTypeModel;
import com.crashinvaders.texturepackergui.utils.packprocessing.PackProcessingNode;
import com.crashinvaders.texturepackergui.utils.packprocessing.PackProcessor;
import com.crashinvaders.texturepackergui.services.model.PngCompressionType;
import com.crashinvaders.texturepackergui.services.model.ProjectModel;
import com.crashinvaders.texturepackergui.services.model.compression.PngtasticCompressionModel;
import com.crashinvaders.texturepackergui.services.model.filetype.KtxFileTypeModel;
import com.crashinvaders.texturepackergui.services.model.filetype.PngFileTypeModel;
import com.crashinvaders.texturepackergui.utils.packprocessing.PackProcessingNode;
import com.crashinvaders.texturepackergui.utils.packprocessing.PackProcessor;
public CompositePackProcessor(Array<PackProcessor> processors) {
    }

    @Override
    public void processPackage(PackProcessingNode processingNode) throws Exception {
        for (int i = 0; i < processors.size; i++) {
            processors.get(i).processPackage(processingNode);
        }
    }
}
package com.crashinvaders.texturepackergui.utils.packprocessing;

public interface PackProcessor {
    void processPackage(PackProcessingNode processingNode) throws Exception;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void run() {
                    // Save one header to use in our combined feed below
                    header = message.getHeader();
                } else {
                    if (message.getHeader().getTimestamp() > header.getTimestamp()) {
                        // Use largest header timestamp with multiple feeds - see #239
                        header = message.getHeader();
                    }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.NavigableMap;
private Block(K newOtherMinKey, K newOtherMaxKey, NavigableMap<K, List<V>> other

            /* Immutable Block ID */
            page = new BRINPage(this, key.blockId);

        }

        @Override
        public String toString() {
            return "Block{" + "key=" + key + ", minKey=" + minKey + ", maxKey=" + maxKey + ", size=" + size;
        }

        private void mergeAddValue(K key1, V value, Map<K, List<V>> values) {
public void unload(long pageId) {
            }
        }

    }

    public int getNumBlocks() {
public void put(K key, V value) {
    }

    public BlockRangeIndexMetadata<K> checkpoint() throws IOException {
        List<BlockRangeIndexMetadata.BlockMetadata<K>> blocksMetadata = new ArrayList<>();
        for (Block block : blocks.values()) {
            BlockRangeIndexMetadata.BlockMetadata<K> metadata = block.checkpoint();
            if (metadata.size != 0) {
                if (LOG.isLoggable(Level.FINE)) {
                    LOG.fine("block " + block.key + " has " + metadata.size + " records at checkpoint");
                }
                blocksMetadata.add(metadata);
            } else {
                LOG.info("block " + block.key + " is empty at checkpoint. discarding");
            }
        }
        return new BlockRangeIndexMetadata<>(blocksMetadata);
    }

import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicLong;


    @Override
    public List<Map.Entry<K, V>> loadDataPage(long pageId) throws IOException {
        return pages.get(pageId);
    }

    @Override
public long createDataPage(List<Map.Entry<K, V>> values) throws IOException {
        return newid;
    }

}

import java.io.IOException;
import java.util.List;

import org.junit.Assert;
import org.junit.Test;
public void testDelete() {
    @Test
    public void testDeleteAndUnload() throws IOException {

        final int testSize = 32;

        /* Must be 1 to keep just one page in memory keeping to unload on every page load */
        final PageReplacementPolicy policy = new RandomPageReplacementPolicy(1);

        final IndexDataStorage<Sized<Integer>, Sized<String>> storage = new MemoryIndexDataStorage<>();

        final BlockRangeIndex<Sized<Integer>, Sized<String>> index =
                new BlockRangeIndex<>(2000, policy, storage);

        /* Add values */
        for (int i = 0; i < testSize; i++) {
            index.put(Sized.valueOf(i), Sized.valueOf("test_" + i));
        }

        /* NumBlocks must be greater than 1 to permit unloading */
        Assert.assertTrue(index.getNumBlocks() > 1);

        /* Check every value existance */
        for (int i = 0; i < testSize; i++) {
            List<Sized<String>> result = index.search(Sized.valueOf(i));
            Assert.assertEquals(1, result.size());
        }

        /* Remove every value */
        for (int i = 0; i < testSize; i++) {
            index.delete(Sized.valueOf(i), Sized.valueOf("test_" + i));
        }

        /* Check every value non existance */
        for (int i = 0; i < testSize; i++) {
            List<Sized<String>> result = index.search(Sized.valueOf(i));
            Assert.assertEquals(0, result.size());
        }

        index.clear();
    }

    @Test
    public void testMultiple() {
        BlockRangeIndex<Sized<Integer>, Sized<String>> index =
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
private static void parseLayers(JSONObject json, LottieComposition composition)
      }
    }

    private static void parsePrecomps(JSONArray assetsJson, LottieComposition composition) {
      int length = assetsJson.length();
      for (int i = 0; i < length; i++) {
        JSONObject assetJson = assetsJson.optJSONObject(i);
private static void parsePrecomps(JSONArray assetsJson, LottieComposition compos
      }
    }

    private static void parseImages(JSONArray assetsJson, LottieComposition composition) {
      int length = assetsJson.length();
      for (int i = 0; i < length; i++) {
        JSONObject assetJson = assetsJson.optJSONObject(i);
static PathKeyframe newInstance(JSONObject json, LottieComposition composition,
      PathKeyframe pathKeyframe = new PathKeyframe(composition, keyframe.startValue,
          keyframe.endValue, keyframe.interpolator, keyframe.startFrame, keyframe.endFrame);

      if (keyframe.endValue != null && !keyframe.startValue.equals(keyframe.endValue)) {
        pathKeyframe.path = Utils.createPath(keyframe.startValue, keyframe.endValue, cp1, cp2);
      }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
protected void parseCreateField(ParseContext context, List<IndexableField> field
            value = context.parser().textOrNull();
        }

        final int tokenCount;
        if (value == null) {
            tokenCount = (Integer) fieldType().nullValue();
import org.apache.lucene.analysis.MockTokenizer;
import org.apache.lucene.analysis.Token;
import org.apache.lucene.analysis.TokenStream;
import org.elasticsearch.common.compress.CompressedXContent;
import org.elasticsearch.common.xcontent.XContentFactory;
import org.elasticsearch.index.IndexService;
import org.elasticsearch.plugins.Plugin;
import org.elasticsearch.test.ESSingleNodeTestCase;
public void testEmptyName() throws IOException {
        );
        assertThat(e.getMessage(), containsString("name cannot be empty string"));
    }
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    @Override
    public boolean perform(Cloud cloud, Supplier<Instance> supplier) {
        Instance instance = supplier.get();
        try {
            Api api = apiProvider.getApi(cloud);
            boolean success = getAction().apply(api, instance);
public DeleteImageOperation(ApiProvider apiProvider) {
    public boolean perform(Cloud cloud, Supplier<Image> supplier) {
        try {
            Image image = supplier.get();
            Api api = apiProvider.getApi(cloud);
            String imageId = image.getRealId();
            api.deleteImage(Integer.valueOf(imageId));
            LOG.debug("Deleted image {} ({})", image.getName(), image.getId());
            return true;
package org.meridor.perspective.digitalocean;

import org.meridor.perspective.beans.Image;
import org.meridor.perspective.beans.ImageState;
import org.meridor.perspective.beans.MetadataMap;
import org.meridor.perspective.config.Cloud;
import org.meridor.perspective.config.OperationType;
import org.meridor.perspective.backend.storage.ImagesAware;
import org.meridor.perspective.worker.misc.IdGenerator;
import org.meridor.perspective.worker.operation.SupplyingOperation;
import org.slf4j.Logger;
public boolean perform(Cloud cloud, Set<String> ids, Consumer<Set<Image>> consum
            Optional<Image> imageCandidate = imagesAware.getImage(id);
            if (imageCandidate.isPresent()) {
                Image image = imageCandidate.get();
                realIds.add(image.getRealId());
            }
        });
        return realIds;
public boolean perform(Cloud cloud, Set<String> ids, Consumer<Set<Instance>> con
        Set<String> realIds = new HashSet<>();
        ids.forEach(id -> {
            Optional<Instance> instanceCandidate = instancesAware.getInstance(id);
            instanceCandidate.ifPresent(instance -> realIds.add(instance.getRealId()));
        });
        return realIds;
    }
public boolean perform(Cloud cloud, Supplier<Image> supplier) {
            Api api = apiProvider.getApi(cloud);
            Image image = supplier.get();
            String imageId = image.getRealId();
            api.deleteImage(imageId);
            LOG.debug("Deleted image {} ({})", image.getName(), image.getId());
            return true;
public boolean perform(Cloud cloud, Supplier<Instance> supplier) {
        try {
            Api api = apiProvider.getApi(cloud);
            Instance instance = supplier.get();
            api.deleteContainer(instance.getRealId());
            LOG.debug("Deleted instance {} ({})", instance.getName(), instance.getId());
            return true;
        } catch (Exception e) {
private Instance createInstance(Cloud cloud, ContainerInfo container) {

        String projectId = idGenerator.getProjectId(cloud);
        Optional<Project> projectCandidate = projects.getProject(projectId);
        if (projectCandidate.isPresent()) {
            instance.setProjectId(projectId);
        }
        
        String imageId = idGenerator.getImageId(cloud, container.image());
        Optional<Image> imageCandidate = images.getImage(imageId);
        if (imageCandidate.isPresent()) {
            instance.setImage(imageCandidate.get());
        }

        ZonedDateTime created = ZonedDateTime.ofInstant(
                container.created().toInstant(),
package org.meridor.perspective.openstack;

import org.meridor.perspective.beans.Instance;
import org.meridor.perspective.beans.MetadataKey;
import org.meridor.perspective.beans.Project;
import org.meridor.perspective.config.Cloud;
import org.meridor.perspective.backend.storage.ProjectsAware;
import org.meridor.perspective.worker.operation.ConsumingOperation;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
    @Override
    public boolean perform(Cloud cloud, Supplier<Instance> supplier) {
        Instance instance = supplier.get();
        try {
            String region = instance.getMetadata().get(MetadataKey.REGION);
            if (region == null) {
public DeleteImageOperation(ApiProvider apiProvider) {
    public boolean perform(Cloud cloud, Supplier<Image> supplier) {
        try {
            Image image = supplier.get();
            String region = image.getMetadata().get(MetadataKey.REGION);
            Api api = apiProvider.getApi(cloud, region);
            String imageId = image.getRealId();
            api.deleteImage(imageId);
            LOG.debug("Deleted image {} ({})", image.getName(), image.getId());
            return true;
package org.meridor.perspective.openstack;

import org.meridor.perspective.beans.Image;
import org.meridor.perspective.beans.ImageState;
import org.meridor.perspective.beans.MetadataKey;
import org.meridor.perspective.beans.MetadataMap;
import org.meridor.perspective.config.Cloud;
import org.meridor.perspective.config.OperationType;
import org.meridor.perspective.backend.storage.ImagesAware;
import org.meridor.perspective.worker.misc.IdGenerator;
import org.meridor.perspective.worker.operation.SupplyingOperation;
import org.slf4j.Logger;
public boolean perform(Cloud cloud, Set<String> ids, Consumer<Set<Image>> consum
            Optional<Image> imageCandidate = imagesAware.getImage(id);
            if (imageCandidate.isPresent()) {
                Image image = imageCandidate.get();
                String region = image.getMetadata().get(MetadataKey.REGION);
                ret.putIfAbsent(region, new HashSet<>());
                ret.get(region).add(image.getRealId());
            }
        });
        return ret;
package org.meridor.perspective.openstack;

import org.meridor.perspective.beans.*;
import org.meridor.perspective.config.Cloud;
import org.meridor.perspective.config.CloudType;
import org.meridor.perspective.config.OperationType;
import org.meridor.perspective.backend.storage.ImagesAware;
import org.meridor.perspective.backend.storage.InstancesAware;
import org.meridor.perspective.backend.storage.ProjectsAware;
import org.meridor.perspective.worker.misc.IdGenerator;
import org.meridor.perspective.worker.operation.SupplyingOperation;
import org.openstack4j.model.compute.Address;
public boolean perform(Cloud cloud, Set<String> ids, Consumer<Set<Instance>> con
            Optional<Instance> instanceCandidate = instancesAware.getInstance(id);
            if (instanceCandidate.isPresent()) {
                Instance instance = instanceCandidate.get();
                String region = instance.getMetadata().get(MetadataKey.REGION);
                ret.putIfAbsent(region, new HashSet<>());
                ret.get(region).add(instance.getRealId());
            }
        });
        return ret;
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    <b>Next bugfix release (Beta version):</b>\n
    · Fix: Avoid possible crashes during file operation on Android devices below 4.1\n
    · Fix: Avoid possible crashes on Android devices below 4.4\n
    \n
    \n
    <b>2017.03.19:</b>\n
public void setVisitedDate(final long visitedDate) {
    }

    public void setLists(final Set<Integer> lists) {
        this.lists = lists;
    }

    public boolean isDetailed() {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import org.apache.logging.log4j.Logger;
import org.docopt.clj;
import org.jesterj.ingest.forkjoin.JesterJForkJoinThreadFactory;
import org.jesterj.ingest.persistence.Cassandra;
import org.jesterj.ingest.model.Plan;
import org.reflections.Reflections;
import org.reflections.util.ClasspathHelper;
import org.reflections.util.ConfigurationBuilder;
public class Main {

  public static String JJ_DIR;

  static {
    // set up a config dir in user's home dir
private static void initClassloader() throws NoSuchFieldException, IllegalAccess
    return result;
  }

}


import net.jini.core.entry.Entry;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.jesterj.ingest.model.Document;
import org.jesterj.ingest.model.Plan;
import org.jesterj.ingest.model.Scanner;
public void setStatus(Status status, String statusMessage) {
  @Override
  public void setStatus(Status status) {
    this.status = status;
    log.info(status.getMarker(), statusMessage);
  }

  @Override
import com.datastax.driver.core.ResultSet;
import com.datastax.driver.core.Row;
import com.datastax.driver.core.Session;
import net.jini.space.JavaSpace;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.jesterj.ingest.persistence.CassandraSupport;
import org.jesterj.ingest.model.ConfiguredBuildable;
import org.jesterj.ingest.model.Document;
import org.jesterj.ingest.model.Router;
import org.jesterj.ingest.model.Scanner;
import org.jesterj.ingest.model.Status;
import org.jesterj.ingest.model.Step;

import java.util.ArrayList;
import java.util.Collection;
boolean longerAgoThanInterval(long last) {
  @Override
  public void sendToNext(Document doc) {
    if (isRemembering()) {
      Session session = getCassandra().getSession();
      PreparedStatement preparedQuery = getCassandra().getPreparedQuery(UPDATE_HASH_U);
      BoundStatement bind = preparedQuery.bind(doc.getHash(), doc.getId(), doc.getSourceScannerName());
      session.execute(bind);
    }
    superSendToNext(doc);
  }
public void docFound(Document doc) {
    String status = null;
    String md5 = null;
    if (isRemembering()) {
      PreparedStatement preparedQuery = getCassandra().getPreparedQuery(FTI_CHECK_Q);
      BoundStatement bs = createBoundStatement(preparedQuery);
      Session session = getCassandra().getSession();
      ResultSet statusRs = session.execute(bs.bind(id, getName()));
      if (statusRs.getAvailableWithoutFetching() > 0) {
        if (statusRs.getAvailableWithoutFetching() > 1 || !statusRs.isFullyFetched()) {
          log.error("FATAL: duplicate primary keys in cassandra table??");
          throw new RuntimeException("VERY BAD: duplicate primary keys in FTI table?");
        } else {
          Row next = statusRs.all().iterator().next();
          status = next.getString(0);
          if (isHashing()) {
            md5 = next.getString(1);
          }
        }
      }
    }
    // written with negated and's so I can defer doc.getHash() until we are sure we

package org.jesterj.ingest.model.impl;

import net.jini.space.JavaSpace;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.ThreadContext;
import org.jesterj.ingest.config.Transient;
import org.jesterj.ingest.logging.JesterJAppender;
import org.jesterj.ingest.model.ConfiguredBuildable;
private void reportDocStatus(Status status, Document document, String message, O
      ThreadContext.put(JesterJAppender.JJ_INGEST_SOURCE_SCANNER, document.getSourceScannerName());
      document.setStatus(status);
      log.info(status.getMarker(), message, messageParams);
    } finally {
      ThreadContext.clearAll();
    }
import com.datastax.driver.core.Session;
import com.datastax.driver.core.Statement;
import com.google.common.util.concurrent.ListenableFuture;
import org.jesterj.ingest.persistence.Cassandra;

import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		COMBINATIONS.put("says" , Arrays.asList(new String[]{"says", "tweets", "claims", "confirms", "denies"}));
		COMBINATIONS.put("enormous" , Arrays.asList(new String[]{"big", "large", "huge", "gigantic", "enormous", "surprising"}));

		SENTENCES.add("[people] launched a DoS attack on the website of [things]");
				SENTENCES.add("[sites] urges everyone to stop using [things]");
						SENTENCES.add("After a [enormous] amount of requests, [packs] removes [things]");
								SENTENCES.add("After a [enormous] amount of requests, [packs] adds [things]");
										SENTENCES.add("After a [enormous] amount of requests, [packs] adds [function] to [things]");
				SENTENCES.add("[people] plays [things] on Twitch");
				SENTENCES.add("[people] fixes [function] in [things] to be unlike [things]");
				SENTENCES.add("[things] makes [things] [crash], [sites] users complain");
				SENTENCES.add("[people] complained about being in [things] on [sites]");
				SENTENCES.add("[people] releases [code] of [things] for [price]");
				SENTENCES.add("[sites] considers [things] worse than [things]");
				SENTENCES.add("[people] made [things] depend on [things]");
				SENTENCES.add("[people] bans [people] from using [things] in [packs]");
				SENTENCES.add("[people] complains that [things] discussion doesn't belong on [sites]");
				SENTENCES.add("[people] has a Patreon goal to add [function] to [things] for [price] a month");
				SENTENCES.add("[people] has a Patreon goal to add [things] compatibility to [things] for [price] a month");
				SENTENCES.add("[people] complains that [people] replaced [things] by [things]");
				SENTENCES.add("[people] complains that [people] replaced [things] by [things] in [packs]");
				SENTENCES.add("[people] complains that [people] removed [function] in [packs]");
				SENTENCES.add("[people] decided that [things] is too [adj] and replaced it with [things]");
				SENTENCES.add("[people] [says] [things] is [adj].");
				SENTENCES.add("[people] [says] [things] is literally [adj].");
				SENTENCES.add("[things] is not updated for the latest version of Minecraft.");
				SENTENCES.add("[people] removes [things] from [packs].");
				SENTENCES.add("[people] adds [things] to [packs].");
				SENTENCES.add("[people] quits modding. Fans of [things] rage.");
				SENTENCES.add("[people] is found to secretly like [things]");
				SENTENCES.add("[people] openly hates [function] in [things]");
				SENTENCES.add("[people] threatens to [ac1] [people] until they remove [things] from [packs]");
				SENTENCES.add("[people] threatens to [ac1] [people] until they remove [function] from [things]");
				SENTENCES.add("[people] threatens to [ac1] [people] until they add [function] to [things]");
				SENTENCES.add("[people] came out in support of [things]");
				SENTENCES.add("[people] came out in support of [drama]");
				SENTENCES.add("[people] and [people] came out in support of [drama]");
				SENTENCES.add("[people] came out against [drama], [sites] rages");
				SENTENCES.add("[people] and [people] came out against [drama], [sites] rages");
				SENTENCES.add("[people] forks [things] causing [drama]");
				SENTENCES.add("[people] [says] to replace [things] with [things]");
				SENTENCES.add("[people] [says] [people] causes drama");
				SENTENCES.add("[things] fans claim that [things] should be more like [things]");
				SENTENCES.add("[things] fans claim that [things] should have better [function]");
				SENTENCES.add("[people] [says] that [things] should be more like [things]");
				SENTENCES.add("[people] [says] that [things] should be less like [things]");
				SENTENCES.add("[people] rebalances [things] for [packs]");
				SENTENCES.add("[people] adds [function] to [things] by request of [people]");
				SENTENCES.add("[people] removes [function] from [things] by request of [people]");
				SENTENCES.add("[people] removes compatibility between [things] and [things] by request of [people]");
				SENTENCES.add("[people] [says] [people]'s attitude is [adj]");
				SENTENCES.add("[people] [says] [sites]'s attitude is [adj]");
				SENTENCES.add("[people] quits the development team of [things]");
				SENTENCES.add("[people] [says] [things] is too much like [things]");
				SENTENCES.add("[people] [says] [things] is a ripoff of [things]");
				SENTENCES.add("[people] [says] [people] stole [code] from [people]");
				SENTENCES.add("[people] [says] [people] did not steal [code] from [people]");
				SENTENCES.add("[people] decides to [ban] [people] from [packs]");
				SENTENCES.add("[things] doesn't work with [things] since the latest update");
				SENTENCES.add("[people] sues [things]");
				SENTENCES.add("[people] [says] [things] is [adj] on [sites]");
				SENTENCES.add("[people] [says] [things] is full of [badsoft]");
				SENTENCES.add("[people] [says] [things] causes [drama]");
				SENTENCES.add("[people] [says] [things] causes [drama] when used with [things]");
				SENTENCES.add("[people] [says] using [things] and [things] together is [adj]");
				SENTENCES.add("[people] rants about [things] on [sites]");
				SENTENCES.add("[people] rants about [function] in mods on [sites]");
				SENTENCES.add("[people] steals code from [things]");
				SENTENCES.add("[things] breaks [function]");
				SENTENCES.add("[people] sues [things] developers");
				SENTENCES.add("[people] reminds you that [things] is [adj]");
				SENTENCES.add("[people] and [people] get into a dramatic fight on [sites]");
						SENTENCES.add("Fans of [things] and [things] argue on [sites]");
				SENTENCES.add("[people] and [people] argue about [things]");
				SENTENCES.add("[people] puts [badsoft] in [things]");
				SENTENCES.add("[people] complains about [things] breaking [things]");
				SENTENCES.add("[people] complains about [things] breaking [function]");
				SENTENCES.add("[people] complains about [things] including [function]");
				SENTENCES.add("[things] breaks [function] in [things]");
				SENTENCES.add("[things] breaks [things] support in [things]");
				SENTENCES.add("[things] adds code to [ban] [people] automatically");
				SENTENCES.add("[things] adds code to [ban] people using [things]");
				SENTENCES.add("[things] removes compatibility with [things]");
				SENTENCES.add("[people] [says] not to use [things]");
				SENTENCES.add("[people] [says] not to use [things] with [things]");
				SENTENCES.add("[people] finds [badsoft] in [things]");
				SENTENCES.add("[people] drew a nasty graffiti about [people]");
				SENTENCES.add("[people] drew a nasty graffiti about [things]");
				SENTENCES.add("[things] makes [things] [crash] when used with [things]");
				SENTENCES.add("[things] makes [things] [crash] when used by [people]");
				SENTENCES.add("[things] makes [things] crash [things] when used by [people]");
				SENTENCES.add("[things] adds [badsoft] that only [activates] in [packs]");
				SENTENCES.add("[things] adds [badsoft] that only [activates] alongside [things]");
				SENTENCES.add("[things] makes [people] invincible from [things] in [packs]");
				SENTENCES.add("[people] decides to base their entire modpack on [things]");
				SENTENCES.add("[people] tweaks balance in [things] too much, annoying [sites]");
				SENTENCES.add("[people] tweaks balance in [things] too much, annoying [people]");
				SENTENCES.add("[people] [says] [people] is worse than [people]");
				SENTENCES.add("[people] [says] [things] is [worse] than [things]");
				SENTENCES.add("[people] bans [people] from [sites]");
	}

	private final Random rand = new Random();
public String generateDrama() {
	}

	public String generatePersonalizedDrama(String user) {
		return applyReplacements(getRandomDramaTemplate().replaceFirst("\\[people\\]", user));
	}

	private String getRandomDramaTemplate() {
private String getRandomDramaTemplate() {

	private String applyReplacements(String s) {
		for (String c : COMBINATIONS.keySet()) {
			String cc = "\\[" + c + "\\]";
			for (int i = 0; i < 5; i++) {
				String cm = COMBINATIONS.get(c).get(rand.nextInt(COMBINATIONS.get(c).size()));
				s = s.replaceFirst(cc, cm);
			}
		}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import org.spongepowered.api.data.DataContainer;
		return slots;
	}

	public static void deserializeInventory(List<DataView> slots, Inventory inventory) {
		Map<Integer, ItemStack> stacks = new HashMap<>();
		int i;
		ItemStack stack;

		for (DataView slot : slots) {
			i = slot.getInt(SLOT).get();
public static void deserializeInventory(List<DataView> slots, Inventory inventor

		for (Inventory slot : inventory.slots()) {
			if (stacks.containsKey(i)) {
				slot.set(stacks.get(i));
			} else {
				slot.clear();
			}

			++i;
		}
	}

	private static DataView serializeItemStack(ItemStack item) {
public static void deserializePlayer(Player player, byte[] data) throws IOExcept

		if (inventory.isPresent() && Config.Values.Synchronize.getEnableInventory()
				&& player.hasPermission(PermissionRegistry.SYNC_INVENTORY)) {
			InventorySerializer.deserializeInventory(inventory.get(), player.getInventory());

			if (selectedSlot.isPresent()) {
				getHotbar(player).setSelectedSlotIndex(selectedSlot.get());
			}
		}
		if (enderChest.isPresent() && Config.Values.Synchronize.getEnableEnderChest()
				&& player.hasPermission(PermissionRegistry.SYNC_ENDER_CHEST)) {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import enmasse.config.AddressConfigKeys;
import enmasse.config.LabelKeys;
import enmasse.controller.common.Kubernetes;
import enmasse.controller.model.Destination;
import enmasse.controller.model.InstanceId;
private void createOrReplace(Destination destination) {
        DoneableConfigMap builder = client.configMaps().inNamespace(instanceId.getNamespace()).withName(name).createOrReplaceWithNew()
                .withNewMetadata()
                .withName(name)
                .addToLabels(LabelKeys.GROUP_ID, Kubernetes.sanitizeName(destination.group()))
                .addToLabels(LabelKeys.TYPE, "address-config")
                .addToLabels(LabelKeys.INSTANCE, Kubernetes.sanitizeName(instanceId.getId()))
                .endMetadata();
        builder.addToData(AddressConfigKeys.ADDRESS, destination.address());
        builder.addToData(AddressConfigKeys.GROUP_ID, destination.group());
import io.fabric8.kubernetes.api.model.extensions.Deployment;
import io.fabric8.openshift.client.ParameterValue;

import java.util.List;
import java.util.Map;
import java.util.Set;
static String sanitizeName(String name) {
    static void addObjectLabel(KubernetesList items, String labelKey, String labelValue) {
        for (HasMetadata item : items.getItems()) {
            Map<String, String> labels = item.getMetadata().getLabels();
            labels.put(labelKey, labelValue);
            item.getMetadata().setLabels(labels);
        }
    }

    InstanceId getInstanceId();
    Kubernetes withInstance(InstanceId instance);


package enmasse.controller.common;

import enmasse.config.LabelKeys;
import enmasse.controller.address.DestinationCluster;
import enmasse.controller.model.InstanceId;
public KubernetesHelper(InstanceId instance, OpenShiftClient client, File templa
        objects.addAll(client.replicationControllers().inNamespace(instance.getNamespace()).list().getItems());

        for (HasMetadata config : objects) {
            Map<String, String> labels = config.getMetadata().getLabels();

            if (labels != null && labels.containsKey(LabelKeys.GROUP_ID)) {
                String groupId = labels.get(LabelKeys.GROUP_ID);

                if (!"address-config".equals(labels.get(LabelKeys.TYPE))) {
                    if (!resourceMap.containsKey(groupId)) {
                        resourceMap.put(groupId, new ArrayList<>());
                    }

package enmasse.controller.common;

import enmasse.config.LabelKeys;
import enmasse.controller.address.DestinationCluster;
import enmasse.controller.flavor.FlavorRepository;
private KubernetesList processTemplate(Destination first, Set<Destination> desti

        // If the flavor is shared, there is only one instance of it, so give it the name of the flavor
        paramMap.put(TemplateParameter.NAME, Kubernetes.sanitizeName(groupId));
        paramMap.put(TemplateParameter.INSTANCE, Kubernetes.sanitizeName(instance.id().getId()));
        paramMap.put(TemplateParameter.COLOCATED_ROUTER_SECRET, instance.certSecret());

        // If the name of the group matches that of the address, assume a scalable queue
private KubernetesList processTemplate(Destination first, Set<Destination> desti
        KubernetesList items = kubernetes.processTemplate(flavor.templateName(), parameters);

        // These are attributes that we need to identify components belonging to this address
        Kubernetes.addObjectLabel(items, LabelKeys.GROUP_ID, Kubernetes.sanitizeName(groupId));
        Kubernetes.addObjectLabel(items, LabelKeys.ADDRESS_CONFIG, Kubernetes.sanitizeName("address-config-" + groupId));
        first.uuid().ifPresent(uuid -> Kubernetes.addObjectLabel(items, LabelKeys.UUID, uuid));
        return items;
    }
    String NAME = "NAME";
    String ADDRESS = "ADDRESS";
    String INSTANCE = "INSTANCE";
    String MESSAGING_HOSTNAME = "MESSAGING_HOSTNAME";
    String MQTT_HOSTNAME = "MQTT_GATEWAY_HOSTNAME";
    String CONSOLE_HOSTNAME = "CONSOLE_HOSTNAME";
package enmasse.controller.instance;

import enmasse.config.LabelKeys;
import enmasse.controller.common.ConfigWatcher;
import enmasse.controller.instance.api.InstanceApi;
import enmasse.controller.instance.cert.CertManager;
import enmasse.controller.model.Instance;
import io.fabric8.kubernetes.api.model.extensions.Ingress;
import io.fabric8.kubernetes.api.model.extensions.IngressList;
import io.fabric8.openshift.api.model.Route;

import java.io.IOException;
import java.util.*;
import java.util.stream.Collectors;


/**
private void createInstances(Set<Instance> instances) {
    }

    private void updateRoutes(Instance.Builder instance) throws IOException {
        Map<String, String> labelMap = new HashMap<>();
        labelMap.put(LabelKeys.INSTANCE, instance.id().getId());

        /* Watch for routes and ingress */
        if (client.isAdaptable(OpenShiftClient.class)) {
            updateRoutes(instance, client.routes().inNamespace(instance.id().getNamespace()).withLabels(labelMap).list());
        } else {
            updateIngresses(instance, client.extensions().ingresses().inNamespace(instance.id().getNamespace()).withLabels(labelMap).list());
        }
    }

    private void updateIngresses(Instance.Builder instance, IngressList list) {
        for (Ingress ingress : list.getItems()) {
            updateRoute(instance, ingress.getMetadata().getName(), ingress.getSpec().getRules().get(0).getHost());
        }
    }

    private void updateRoutes(Instance.Builder instance, RouteList list) throws IOException {
        for (Route route : list.getItems()) {
            updateRoute(instance, route.getMetadata().getName(), route.getSpec().getHost());
        }
    }

    private void updateRoute(Instance.Builder builder, String name, String host) {
package enmasse.controller.instance;

import enmasse.config.LabelKeys;
import enmasse.controller.common.Kubernetes;
import enmasse.controller.common.KubernetesHelper;
public void create(Instance instance) {

    private KubernetesList createResourceList(Instance instance) {
        List<ParameterValue> parameterValues = new ArrayList<>();
        parameterValues.add(new ParameterValue(TemplateParameter.INSTANCE, Kubernetes.sanitizeName(instance.id().getId())));
        instance.messagingHost().ifPresent(h -> parameterValues.add(new ParameterValue(TemplateParameter.MESSAGING_HOSTNAME, h)));
        instance.mqttHost().ifPresent(h -> parameterValues.add(new ParameterValue(TemplateParameter.MQTT_HOSTNAME, h)));
        instance.consoleHost().ifPresent(h -> parameterValues.add(new ParameterValue(TemplateParameter.CONSOLE_HOSTNAME, h)));
public void retainInstances(Set<InstanceId> desiredInstances) {
                labels.put(LabelKeys.APP, "enmasse");
                labels.put(LabelKeys.TYPE, "instance");
                for (Namespace namespace : kubernetes.listNamespaces(labels)) {
                    String id = namespace.getMetadata().getLabels().get(LabelKeys.INSTANCE);
                    InstanceId instanceId = InstanceId.withIdAndNamespace(id, namespace.getMetadata().getName());
                    if (!desiredInstances.contains(instanceId)) {
                        delete(instanceId);

package enmasse.controller.common;

import enmasse.controller.flavor.FlavorManager;
import enmasse.controller.model.Destination;
import enmasse.controller.model.Flavor;
public void testStoreAndForward() {
        List<HasMetadata> resources = clusterList.getResources().getItems();
        assertThat(resources.size(), is(1));
        for (HasMetadata resource : resources) {
            Map<String, String> rlabel = resource.getMetadata().getLabels();
            assertNotNull(rlabel.get(LabelKeys.GROUP_ID));
            assertThat(rlabel.get(LabelKeys.GROUP_ID), is("foo-bar"));
        }
        List<ParameterValue> parameters = captor.getAllValues();
        assertThat(parameters.size(), is(4));
    }

    private DestinationCluster generateCluster(Destination destination, ArgumentCaptor<ParameterValue> captor) {
public interface LabelKeys {
    String TYPE = "type";

    String GROUP_ID = "group_id";
    String ADDRESS_CONFIG = "address_config";
    String INSTANCE = "instance";
    String UUID = "uuid";
    String ADDRESS = "address";
    String APP = "app";
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public static void getLocation(LatLng point,LocationListCallback o){
		FindCallback<ParseObject> callBackL = new FindCallback<ParseObject>(){
			@Override
			public void done(List<ParseObject> arg0, ParseException arg1) {
				for (ParseObject obj :arg0){
					ls.add(new Location(point,Location.stringToEnumTypes(obj.getString("type")),
							Location.stringToEnumSubTypes(obj.getString("subtype")),reviews));
            	}
				o.done(ls);
			}
		};
		FindCallback<ParseObject> callBackR = new FindCallback<ParseObject>() {
			@Override
			public void done(List<ParseObject> arg0, ParseException arg1) {
                if (arg1 == null) {
                	for (ParseObject obj :arg0){
                		//reviews.add(new Review(l, r, c, u)) will be complete after issue #124 will close
                	}
                	DatabaseManager.queryByFields("Location", valuesL, callBackL);
                }				
			}
		};
		DatabaseManager.queryByFields("Review", valuesR, callBackR);
import java.awt.GridBagConstraints;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;

import javax.swing.JPanel;
import javax.swing.UIManager;
import com.teamdev.jxmaps.MouseEvent;

import smartcity.accessibility.database.DatabaseManager;
import smartcity.accessibility.database.LocationManager;
import smartcity.accessibility.database.UserManager;
import smartcity.accessibility.exceptions.UserNotFoundException;
public void windowActivated(WindowEvent __) {

			@Override
			public void onEvent(MouseEvent arg0) {
				//new LocationFrame(LocationManager.getLocation(arg0.latLng()));
			}
		});

package smartcity.accessibility.gui;

import java.util.HashMap;

import com.teamdev.jxmaps.Icon;
import com.teamdev.jxmaps.Map;
import com.teamdev.jxmaps.MapMouseEvent;
import com.teamdev.jxmaps.Marker;
import com.teamdev.jxmaps.MouseEvent;

import smartcity.accessibility.database.LocationManager;
import smartcity.accessibility.gui.components.location.LocationFrame;
import smartcity.accessibility.mapmanagement.Location;
	private static HashMap<LocationSubTypes, Icon> iconMap = new HashMap<LocationSubTypes, Icon>();
	private Location location;
	private Location StreetLocation;
	
	public ExtendedMarker(Map map, Location loc) {
		super(map);
		setIcon(iconMap.get(iconMap.containsKey(loc.getLocationSubType()) ? loc.getLocationSubType() : LocationSubTypes.Default));
		
		addEventListener("click", new MapMouseEvent() {

			@Override
			public void onEvent(MouseEvent arg0) {
				new LocationFrame(LocationManager.getLocation(location.getCoordinates()));

			}

public void onEvent(MouseEvent arg0) {
		 */
		location = loc;
	}
	
	public ExtendedMarker(Map map, Location loc, Location StreetLocation) {
		super(map);
		setIcon(iconMap.get(iconMap.containsKey(StreetLocation.getLocationSubType()) ? StreetLocation.getLocationSubType() : LocationSubTypes.Default));
		
		addEventListener("click", new MapMouseEvent() {

			@Override
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import com.google.common.base.Strings;
import com.google.common.collect.Lists;
import io.grpc.stub.StreamObserver;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.glowroot.wire.api.model.CollectorServiceOuterClass.LogEvent.Level;
import org.glowroot.wire.api.model.CollectorServiceOuterClass.LogMessage;
import org.glowroot.wire.api.model.CollectorServiceOuterClass.OverallAggregate;
import org.glowroot.wire.api.model.CollectorServiceOuterClass.TraceStreamHeader;
import org.glowroot.wire.api.model.CollectorServiceOuterClass.TraceStreamMessage;
import org.glowroot.wire.api.model.CollectorServiceOuterClass.TransactionAggregate;
import org.glowroot.wire.api.model.TraceOuterClass.Trace;

import static com.google.common.base.Preconditions.checkState;

public class CentralCollector implements Collector {

    private static final Logger logger = LoggerFactory.getLogger(CentralCollector.class);
void doWithResponse(final InitResponse response) {

    // collecting even when no aggregates since collection triggers transaction-based alerts
    @Override
    public void collectAggregates(final long captureTime, final Aggregates aggregates) {
        centralConnection.callWithAFewRetries(nextAggregateDelayMillis,
                new CollectAggregatesGrpcCall(aggregates, captureTime));
    }

    @Override
public void call(StreamObserver<EmptyMessage> responseObserver) {
    }

    @Override
    public void collectTrace(Trace trace) {
        final List<String> sharedQueryTexts = Lists.newArrayList();
        for (Trace.SharedQueryText sharedQueryText : trace.getSharedQueryTextList()) {
            // local collection always passes in full text
            checkState(sharedQueryText.getTruncatedText().isEmpty());
            checkState(sharedQueryText.getTruncatedEndText().isEmpty());
            checkState(sharedQueryText.getFullTextSha1().isEmpty());
            sharedQueryTexts.add(sharedQueryText.getFullText());
        }
        final Trace traceWithoutSharedQueryText = trace.toBuilder()
                .clearSharedQueryText()
                .build();
        final List<String> fullTextSha1s = Lists.newArrayList();
        centralConnection.callWithAFewRetries(new GrpcCall<EmptyMessage>() {
            @Override
            public void call(StreamObserver<EmptyMessage> responseObserver) {
                StreamObserver<TraceStreamMessage> requestObserver =
                        collectorServiceStub.collectTraceStream(responseObserver);
                requestObserver.onNext(TraceStreamMessage.newBuilder()
                        .setHeader(TraceStreamHeader.newBuilder()
                                .setAgentId(agentId))
                        .build());
                // need to clear in case this is a retry
                fullTextSha1s.clear();
                for (String sharedQueryText : sharedQueryTexts) {
                    Trace.SharedQueryText traceSharedQueryText =
                            sharedQueryTextLimiter.buildTraceSharedQueryText(sharedQueryText);
                    String fullTextSha1 = traceSharedQueryText.getFullTextSha1();
                    if (!fullTextSha1.isEmpty()) {
                        fullTextSha1s.add(fullTextSha1);
                    }
                    requestObserver.onNext(TraceStreamMessage.newBuilder()
                            .setSharedQueryText(traceSharedQueryText)
                            .build());
                }
                requestObserver.onNext(TraceStreamMessage.newBuilder()
                        .setTrace(traceWithoutSharedQueryText)
                        .build());
                requestObserver.onCompleted();
            }
            @Override
            public void doWithResponse(EmptyMessage response) {
                for (String fullTextSha1 : fullTextSha1s) {
                    sharedQueryTextLimiter.onSuccessfullySentToCentralCollector(fullTextSha1);
                }
            }
        });
    }

    @Override
public void awaitClose() throws InterruptedException {

    private class CollectAggregatesGrpcCall extends GrpcCall<AggregateResponseMessage> {

        private final Aggregates aggregates;
        private final long captureTime;
        private final List<String> fullTextSha1s = Lists.newArrayList();

        private CollectAggregatesGrpcCall(Aggregates aggregates, long captureTime) {
            this.aggregates = aggregates;
            this.captureTime = captureTime;
        }

        @Override
        public void call(StreamObserver<AggregateResponseMessage> responseObserver) {
            final StreamObserver<AggregateStreamMessage> requestObserver =
                    collectorServiceStub.collectAggregateStream(responseObserver);
            requestObserver.onNext(AggregateStreamMessage.newBuilder()
                    .setHeader(AggregateStreamHeader.newBuilder()
                            .setAgentId(agentId)
                            .setCaptureTime(captureTime))
                    .build());
            // need to clear in case this is a retry
            fullTextSha1s.clear();
            aggregates.accept(new AggregateVisitor<RuntimeException>() {
                @Override
                public void visitOverallAggregate(String transactionType,
                        List<String> sharedQueryTexts, Aggregate overallAggregate) {
                    for (String sharedQueryText : sharedQueryTexts) {
                        Aggregate.SharedQueryText aggregateSharedQueryText = sharedQueryTextLimiter
                                .buildAggregateSharedQueryText(sharedQueryText);
                        String fullTextSha1 = aggregateSharedQueryText.getFullTextSha1();
                        if (!fullTextSha1.isEmpty()) {
                            fullTextSha1s.add(fullTextSha1);
                        }
                        requestObserver.onNext(AggregateStreamMessage.newBuilder()
                                .setSharedQueryText(aggregateSharedQueryText)
                                .build());
                    }
                    requestObserver.onNext(AggregateStreamMessage.newBuilder()
                            .setOverallAggregate(OverallAggregate.newBuilder()
                                    .setTransactionType(transactionType)
                                    .setAggregate(overallAggregate))
                            .build());
                }
                @Override
                public void visitTransactionAggregate(String transactionType,
                        String transactionName, List<String> sharedQueryTexts,
                        Aggregate transactionAggregate) {
                    for (String sharedQueryText : sharedQueryTexts) {
                        requestObserver.onNext(AggregateStreamMessage.newBuilder()
                                .setSharedQueryText(sharedQueryTextLimiter
                                        .buildAggregateSharedQueryText(sharedQueryText))
                                .build());
                    }
                    requestObserver.onNext(AggregateStreamMessage.newBuilder()
                            .setTransactionAggregate(TransactionAggregate.newBuilder()
                                    .setTransactionType(transactionType)
                                    .setTransactionName(transactionName)
                                    .setAggregate(transactionAggregate))
                            .build());
                }
            });
            requestObserver.onCompleted();
        }
        @Override
        public void doWithResponse(AggregateResponseMessage response) {
            // Math.min is just for safety
public void doWithResponse(AggregateResponseMessage response) {
            }
        }
    }
}
ManagedChannel getChannel() {
        return channel;
    }

    // important that these calls are idempotent
    <T extends /*@NonNull*/ Object> void callWithAFewRetries(GrpcCall<T> call) {
        callWithAFewRetries(0, call);
    }

    // important that these calls are idempotent
    <T extends /*@NonNull*/ Object> void callWithAFewRetries(int initialDelayMillis,
            final GrpcCall<T> call) {
        if (closed) {
            return;
        }
ManagedChannel getChannel() {
                @Override
                public void run() {
                    try {
                        call.call(new RetryingStreamObserver<T>(call, 60, 60, false));
                    } catch (Throwable t) {
                        logger.error(t.getMessage(), t);
                    }
                }
            }, initialDelayMillis, MILLISECONDS);
        } else {
            call.call(new RetryingStreamObserver<T>(call, 60, 60, false));
        }
    }

import org.glowroot.wire.api.model.CollectorServiceOuterClass.Environment;
import org.glowroot.wire.api.model.CollectorServiceOuterClass.GaugeValue;
import org.glowroot.wire.api.model.CollectorServiceOuterClass.LogEvent;
import org.glowroot.wire.api.model.TraceOuterClass.Trace;

public interface Collector {

    void init(File glowrootDir, File agentDir, Environment environment, AgentConfig agentConfig,
            AgentConfigUpdater agentConfigUpdater) throws Exception;

    void collectAggregates(long captureTime, Aggregates aggregates) throws Exception;

    void collectGaugeValues(List<GaugeValue> gaugeValues) throws Exception;

    void collectTrace(Trace trace) throws Exception;

    void log(LogEvent logEvent) throws Exception;

    interface AgentConfigUpdater {
        void update(AgentConfig agentConfig) throws IOException;
    }

    public interface Aggregates {
        <T extends Exception> void accept(AggregateVisitor<T> aggregateVisitor) throws T;
    }

    public interface AggregateVisitor<T extends Exception> {
        void visitOverallAggregate(String transactionType, List<String> sharedQueryTexts,
                Aggregate overallAggregate) throws T;
        void visitTransactionAggregate(String transactionType, String transactionName,
                List<String> sharedQueryTexts, Aggregate transactionAggregate) throws T;
    }
}
import org.glowroot.wire.api.model.CollectorServiceOuterClass.Environment;
import org.glowroot.wire.api.model.CollectorServiceOuterClass.GaugeValue;
import org.glowroot.wire.api.model.CollectorServiceOuterClass.LogEvent;
import org.glowroot.wire.api.model.TraceOuterClass.Trace;

class CollectorImpl implements Collector {

public void init(File glowrootDir, File agentDir, Environment environment,
    }

    @Override
    public void collectAggregates(long captureTime, Aggregates aggregates) throws Exception {
        aggregateDao.store(captureTime, aggregates);
    }

    @Override
public void collectGaugeValues(List<GaugeValue> gaugeValues) throws Exception {
    }

    @Override
    public void collectTrace(Trace trace) throws Exception {
        traceDao.store(trace);
    }

    @Override
import org.checkerframework.checker.tainting.qual.Untainted;
import org.immutables.value.Value;

import org.glowroot.agent.collector.Collector.AggregateVisitor;
import org.glowroot.agent.collector.Collector.Aggregates;
import org.glowroot.agent.embedded.repo.model.Stored;
import org.glowroot.agent.embedded.util.CappedDatabase;
import org.glowroot.agent.embedded.util.DataSource;
        // TODO initial rollup in case store is not called in a reasonable time
    }

    public void store(final long captureTime, Aggregates aggregates) throws Exception {
        // intentionally not using batch update as that could cause memory spike while preparing a
        // large batch
        final CappedDatabase cappedDatabase = rollupCappedDatabases.get(0);
        final List<TruncatedQueryText> truncatedQueryTexts = Lists.newArrayList();
        aggregates.accept(new AggregateVisitor<Exception>() {
            @Override
            public void visitOverallAggregate(String transactionType, List<String> sharedQueryTexts,
                    Aggregate overallAggregate) throws Exception {
import java.sql.Types;
import java.util.List;
import java.util.Locale;

import javax.annotation.Nullable;

import com.google.common.base.Strings;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.Lists;
import org.checkerframework.checker.tainting.qual.Untainted;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.glowroot.agent.embedded.repo.TracePointQueryBuilder.ParameterizedSql;
import org.glowroot.agent.embedded.util.CappedDatabase;
import org.glowroot.agent.embedded.util.DataSource;
import org.glowroot.wire.api.model.TraceOuterClass.Trace;

import static com.google.common.base.Preconditions.checkNotNull;
import static com.google.common.base.Preconditions.checkState;
import static org.glowroot.agent.util.Checkers.castUntainted;

public class TraceDao implements TraceRepository {
        dataSource.syncIndexes("trace_attribute", traceAttributeIndexes);
    }

    public void store(Trace trace) throws Exception {
        Trace.Header header = trace.getHeader();

        List<Trace.SharedQueryText> sharedQueryTexts = Lists.newArrayList();
        for (Trace.SharedQueryText sharedQueryText : trace.getSharedQueryTextList()) {
            // local collection always passes in full text
            checkState(sharedQueryText.getTruncatedText().isEmpty());
            checkState(sharedQueryText.getTruncatedEndText().isEmpty());
            checkState(sharedQueryText.getFullTextSha1().isEmpty());
            String fullText = sharedQueryText.getFullText();
            if (fullText.length() > 2 * StorageConfig.TRACE_QUERY_TEXT_TRUNCATE) {
                String truncatedText =
                        fullText.substring(0, StorageConfig.TRACE_QUERY_TEXT_TRUNCATE);
                String truncatedEndText = fullText.substring(
                        fullText.length() - StorageConfig.TRACE_QUERY_TEXT_TRUNCATE,
                        fullText.length());
                String fullTextSha1 =
                        fullQueryTextDao.updateLastCaptureTime(fullText, header.getCaptureTime());
                sharedQueryTexts.add(Trace.SharedQueryText.newBuilder()
                        .setTruncatedText(truncatedText)
                        .setTruncatedEndText(truncatedEndText)
                        .setFullTextSha1(fullTextSha1)
                        .build());
            } else {
                sharedQueryTexts.add(sharedQueryText);
            }
        }

        dataSource.update(new TraceMerge(trace, sharedQueryTexts));
        if (header.getAttributeCount() > 0) {
            if (trace.getUpdate()) {
                dataSource.update("delete from trace_attribute where trace_id = ?", trace.getId());
private static int bindQueryAndFilter(PreparedStatement preparedStatement, int s
        return i;
    }

    private class TraceMerge implements JdbcUpdate {

        private final String traceId;
/*
 * Copyright 2015-2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
import org.slf4j.LoggerFactory;

import org.glowroot.agent.collector.Collector;
import org.glowroot.agent.collector.Collector.AggregateVisitor;
import org.glowroot.agent.collector.Collector.Aggregates;
import org.glowroot.agent.model.Profile;
import org.glowroot.agent.model.QueryCollector.SharedQueryTextCollector;
import org.glowroot.common.live.LiveAggregateRepository.OverviewAggregate;
public void mergeAuxThreadProfilesInto(ProfileCollector collector, String transa
    }

    void flush(Collector collector) throws Exception {
        collector.collectAggregates(captureTime, new AggregatesImpl());
    }

    void clear() {
private void merge(Transaction transaction, AggregateCollector aggregateCollecto
        }
    }

    private class AggregatesImpl implements Aggregates {
        @Override
        public <T extends Exception> void accept(AggregateVisitor<T> aggregateVisitor) throws T {
            synchronized (lock) {
                SharedQueryTextCollector sharedQueryTextCollector = new SharedQueryTextCollector();
                ScratchBuffer scratchBuffer = new ScratchBuffer();
import javax.annotation.Nullable;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;

import org.glowroot.agent.model.DetailMapWriter;
import org.glowroot.agent.model.ErrorMessage;
import org.glowroot.common.util.Styles;

    private TraceCreator() {}

    public static Trace createPartialTrace(Transaction transaction, long captureTime,
            long captureTick) throws IOException {
        return createFullTrace(transaction, true, true, captureTime, captureTick);
    }

    public static Trace createCompletedTrace(Transaction transaction, boolean slow)
            throws IOException {
        return createFullTrace(transaction, slow, false, transaction.getCaptureTime(),
                transaction.getEndTick());
    }

    public static Trace.Header createPartialTraceHeader(Transaction transaction, long captureTime,
            long captureTick) throws IOException {
        // TODO optimize, this is excessive to construct entries just to get count
        Map<String, Integer> sharedQueryTextIndexes = Maps.newLinkedHashMap();
        int entryCount =
                getEntryCount(transaction.getEntriesProtobuf(captureTick, sharedQueryTextIndexes));
        long mainThreadProfileSampleCount = transaction.getMainThreadProfileSampleCount();
        long auxThreadProfileSampleCount = transaction.getAuxThreadProfileSampleCount();
        // only slow transactions reach this point, so setting slow=true (second arg below)
        return createTraceHeader(transaction, true, true, captureTime, captureTick, entryCount,
                mainThreadProfileSampleCount, auxThreadProfileSampleCount);
    }

    public static Trace.Header createCompletedTraceHeader(Transaction transaction)
            throws IOException {
        // TODO optimize, this is excessive to construct entries just to get count
        Map<String, Integer> sharedQueryTextIndexes = Maps.newLinkedHashMap();
        int entryCount = getEntryCount(
                transaction.getEntriesProtobuf(transaction.getEndTick(), sharedQueryTextIndexes));
        long mainProfileSampleCount = transaction.getMainThreadProfileSampleCount();
        long auxProfileSampleCount = transaction.getAuxThreadProfileSampleCount();
        // only slow transactions reach this point, so setting slow=true (second arg below)
        return createTraceHeader(transaction, true, false, transaction.getCaptureTime(),
                transaction.getEndTick(), entryCount, mainProfileSampleCount,
                auxProfileSampleCount);
    }

public static Trace createCompletedTrace(Transaction transaction, boolean slow)
    // timings for traces that are still active are normalized to the capture tick in order to
    // *attempt* to present a picture of the trace at that exact tick
    // (without using synchronization to block updates to the trace while it is being read)
    private static Trace createFullTrace(Transaction transaction, boolean slow, boolean partial,
            long captureTime, long captureTick) throws IOException {
        Map<String, Integer> sharedQueryTextIndexes = Maps.newLinkedHashMap();
        List<Trace.Entry> entries =
                transaction.getEntriesProtobuf(captureTick, sharedQueryTextIndexes);
        int entryCount = getEntryCount(entries);
        Profile mainThreadProfile = transaction.getMainThreadProfileProtobuf();
        long mainThreadProfileSampleCount = getProfileSampleCount(mainThreadProfile);
        Profile auxThreadProfile = transaction.getAuxThreadProfileProtobuf();
        long auxThreadProfileSampleCount = getProfileSampleCount(auxThreadProfile);
        Trace.Header header =
                createTraceHeader(transaction, slow, partial, captureTime, captureTick, entryCount,
                        mainThreadProfileSampleCount, auxThreadProfileSampleCount);
        Trace.Builder builder = Trace.newBuilder()
                .setId(transaction.getTraceId())
                .setHeader(header)
                .addAllEntry(entries)
                .addAllSharedQueryText(toProto(sharedQueryTextIndexes));
        if (mainThreadProfile != null) {
            builder.setMainThreadProfile(mainThreadProfile);
        }
        if (auxThreadProfile != null) {
            builder.setAuxThreadProfile(auxThreadProfile);
        }
        return builder.setUpdate(transaction.isPartiallyStored())
                .build();
    }

    private static Trace.Header createTraceHeader(Transaction transaction, boolean slow,
private static Trace createFullTrace(Transaction transaction, boolean slow, bool
        return builder.build();
    }

    // don't count "auxiliary thread" entries since those are not counted in
    // maxTraceEntriesPerTransaction limit (and it's confusing when entry count exceeds the limit)
    private static int getEntryCount(List<Trace.Entry> entries) {
        int count = 0;
        for (Trace.Entry entry : entries) {
            if (!entry.getMessage().equals(Transaction.AUXILIARY_THREAD_MESSAGE)) {
                count++;
            }
        }
        return count;
    }

    private static long getProfileSampleCount(@Nullable Profile profile) {
        if (profile == null) {
            return 0;
private static long getProfileSampleCount(@Nullable Profile profile) {
        }
        return profileSampleCount;
    }
}
 */
package org.glowroot.agent.impl;

import java.util.Map;
import java.util.concurrent.TimeUnit;

import javax.annotation.Nullable;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.glowroot.agent.model.AsyncTimerImpl;
import org.glowroot.agent.model.DetailMapWriter;
import org.glowroot.agent.model.ErrorMessage;
ErrorMessage getErrorMessage() {
        return errorMessage;
    }

    Trace.Entry toProto(int depth, long transactionStartTick, long captureTick,
            Map<String, Integer> sharedQueryTextIndexes) {
        long offsetNanos = startTick - transactionStartTick;
        long durationNanos;
        boolean active;
ErrorMessage getErrorMessage() {
            builder.addAllDetailEntry(DetailMapWriter.toProto(readableMessage.getDetail()));
        } else if (messageSupplier instanceof QueryMessageSupplier) {
            String queryText = checkNotNull(getQueryText());
            Integer sharedQueryTextIndex = sharedQueryTextIndexes.get(queryText);
            if (sharedQueryTextIndex == null) {
                sharedQueryTextIndex = sharedQueryTextIndexes.size();
                sharedQueryTextIndexes.put(queryText, sharedQueryTextIndex);
            }
            ReadableQueryMessage readableQueryMessage =
                    (ReadableQueryMessage) ((QueryMessageSupplier) messageSupplier).get();
            Trace.QueryEntryMessage.Builder queryMessage = Trace.QueryEntryMessage.newBuilder()
ErrorMessage getErrorMessage() {
                        .build();
            }
        }
        return builder.build();
    }

    long getStartTick() {
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.glowroot.agent.config.AdvancedConfig;
import org.glowroot.agent.config.ConfigService;
import org.glowroot.agent.impl.TransactionCollection.TransactionEntry;
import org.glowroot.common.util.Cancellable;
import org.glowroot.common.util.NotAvailableAware;
import org.glowroot.common.util.Traverser;
import org.glowroot.wire.api.model.TraceOuterClass.Trace;

import static com.google.common.base.Preconditions.checkNotNull;
import static org.glowroot.agent.util.Checkers.castInitialized;
boolean allowAnotherAggregateServiceCall() {
                * AdvancedConfig.OVERALL_AGGREGATE_SERVICE_CALLS_HARD_LIMIT_MULTIPLIER;
    }

    public List<Trace.Entry> getEntriesProtobuf(long captureTick,
            Map<String, Integer> sharedQueryTextIndexes) {
        memoryBarrierRead();
        ListMultimap<TraceEntryImpl, ThreadContextImpl> priorEntryChildThreadContextMap =
                buildPriorEntryChildThreadContextMap();
boolean allowAnotherAggregateServiceCall() {
        }
        new ParentChildMapTrimmer(mainThreadContext.getRootEntry(), parentChildMap, captureTick)
                .traverse();
        List<Trace.Entry> entries = Lists.newArrayList();
        addProtobufChildEntries(mainThreadContext.getRootEntry(), parentChildMap, startTick,
                captureTick, 0, entries, sharedQueryTextIndexes, async);
        return entries;
    }

    long getMainThreadProfileSampleCount() {
private boolean allowAnotherAuxThreadContextWithHierarchy() {
        return true;
    }

    private static void addProtobufChildEntries(TraceEntryImpl entry,
            ListMultimap<TraceEntryImpl, TraceEntryImpl> parentChildMap, long transactionStartTick,
            long captureTick, int depth, List<Trace.Entry> entries,
            Map<String, Integer> sharedQueryTextIndexes, boolean removeSingleAuxEntry) {
        if (!parentChildMap.containsKey(entry)) {
            // check containsKey to avoid creating garbage empty list via ListMultimap
            return;
private static void addProtobufChildEntries(TraceEntryImpl entry,
            boolean singleAuxEntry = childEntries.size() == 1 && childEntry.isAuxThreadRoot();
            if (singleAuxEntry && removeSingleAuxEntry) {
                addProtobufChildEntries(childEntry, parentChildMap, transactionStartTick,
                        captureTick, depth, entries, sharedQueryTextIndexes, removeSingleAuxEntry);
            } else {
                entries.add(childEntry.toProto(depth, transactionStartTick, captureTick,
                        sharedQueryTextIndexes));
                addProtobufChildEntries(childEntry, parentChildMap, transactionStartTick,
                        captureTick, depth + 1, entries, sharedQueryTextIndexes, false);
            }
        }
    }
/*
 * Copyright 2011-2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
import org.slf4j.LoggerFactory;

import org.glowroot.agent.collector.Collector;
import org.glowroot.agent.config.ConfigService;
import org.glowroot.agent.plugin.api.config.ConfigListener;
import org.glowroot.agent.util.RateLimitedLogger;
import org.glowroot.common.util.Clock;
import org.glowroot.common.util.OnlyUsedByTests;
import org.glowroot.wire.api.model.TraceOuterClass.Trace;

import static java.util.concurrent.TimeUnit.MILLISECONDS;
import static java.util.concurrent.TimeUnit.SECONDS;
void onCompletedTransaction(final Transaction transaction) {
            @Override
            public void run() {
                try {
                    Trace trace = TraceCreator.createCompletedTrace(transaction, slow);
                    collector.collectTrace(trace);
                } catch (Throwable t) {
                    logger.error(t.getMessage(), t);
                } finally {
public void run() {
    // single thread executor in PartialTraceStorageWatcher
    public void storePartialTrace(Transaction transaction) {
        try {
            Trace trace = TraceCreator.createPartialTrace(transaction, clock.currentTimeMillis(),
                    ticker.read());
            // one last check if transaction has completed
            if (!transaction.isCompleted()) {
                transaction.setPartiallyStored();
                collector.collectTrace(trace);
            }
        } catch (Exception e) {
            logger.error(e.getMessage(), e);

import java.io.File;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import javax.annotation.concurrent.GuardedBy;

import com.google.common.annotations.VisibleForTesting;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.glowroot.wire.api.model.CollectorServiceOuterClass.Environment;
import org.glowroot.wire.api.model.CollectorServiceOuterClass.GaugeValue;
import org.glowroot.wire.api.model.CollectorServiceOuterClass.LogEvent;
import org.glowroot.wire.api.model.TraceOuterClass.Trace;

@VisibleForTesting
public class CollectorProxy implements Collector {
    private volatile @MonotonicNonNull Collector instance;

    @GuardedBy("lock")
    private Map<Long, Aggregates> earlyAggregates = Maps.newLinkedHashMap();

    @GuardedBy("lock")
    private final List<List<GaugeValue>> earlyGaugeValues = Lists.newArrayList();

    @GuardedBy("lock")
    private final List<Trace> earlyTraces = Lists.newArrayList();

    @GuardedBy("lock")
    private final List<LogEvent> earlyLogEvents = Lists.newArrayList();
public void init(File glowrootDir, File agentDir, Environment environment,
    }

    @Override
    public void collectAggregates(long captureTime, Aggregates aggregates) throws Exception {
        synchronized (lock) {
            if (instance == null) {
                if (earlyAggregates.size() < 10) { // 10 minutes
                    earlyAggregates.put(captureTime, aggregates);
                }
                return;
            }
        }
        instance.collectAggregates(captureTime, aggregates);
    }

    @Override
    public void collectGaugeValues(List<GaugeValue> gaugeValues) throws Exception {
        synchronized (lock) {
            if (instance == null) {
                if (earlyTraces.size() < 120) { // 10 minutes
                    earlyGaugeValues.add(gaugeValues);
                }
                return;
public void collectGaugeValues(List<GaugeValue> gaugeValues) throws Exception {
    }

    @Override
    public void collectTrace(Trace trace) throws Exception {
        synchronized (lock) {
            if (instance == null) {
                if (earlyTraces.size() < 10) {
                    earlyTraces.add(trace);
                }
                return;
            }
        }
        instance.collectTrace(trace);
    }

    @Override
public void setInstance(Collector instance) {
        synchronized (lock) {
            this.instance = instance;
            try {
                for (Entry<Long, Aggregates> entry : earlyAggregates.entrySet()) {
                    instance.collectAggregates(entry.getKey(), entry.getValue());
                }
                for (List<GaugeValue> gaugeValues : earlyGaugeValues) {
                    instance.collectGaugeValues(gaugeValues);
                }
                for (Trace trace : earlyTraces) {
                    instance.collectTrace(trace);
                }
                for (LogEvent logEvent : earlyLogEvents) {
                    instance.log(logEvent);
import com.google.common.collect.Maps;
import com.google.common.collect.Ordering;

import org.glowroot.agent.impl.TraceCreator;
import org.glowroot.agent.impl.Transaction;
import org.glowroot.agent.impl.TransactionCollector;
public LiveTraceRepositoryImpl(TransactionRegistry transactionRegistry,
    // traces) to make sure that the trace is not missed if it is in transition between these states
    @Override
    public @Nullable Trace.Header getHeader(String agentRollupId, String agentId, String traceId)
            throws IOException {
        for (Transaction transaction : Iterables.concat(transactionRegistry.getTransactions(),
                transactionCollector.getPendingTransactions())) {
            if (transaction.getTraceId().equals(traceId)) {
public LiveTraceRepositoryImpl(TransactionRegistry transactionRegistry,
    }

    @Override
    public @Nullable Entries getEntries(String agentRollupId, String agentId, String traceId) {
        for (Transaction transaction : Iterables.concat(transactionRegistry.getTransactions(),
                transactionCollector.getPendingTransactions())) {
            if (transaction.getTraceId().equals(traceId)) {
                Map<String, Integer> sharedQueryTextIndexes = Maps.newLinkedHashMap();
                List<Trace.Entry> entries =
                        transaction.getEntriesProtobuf(ticker.read(), sharedQueryTextIndexes);
                return ImmutableEntries.builder()
                        .addAllEntries(entries)
                        .addAllSharedQueryTexts(TraceCreator.toProto(sharedQueryTextIndexes))
                        .build();
            }
        }
public LiveTraceRepositoryImpl(TransactionRegistry transactionRegistry,

    @Override
    public @Nullable Trace getFullTrace(String agentRollupId, String agentId, String traceId)
            throws IOException {
        for (Transaction transaction : Iterables.concat(transactionRegistry.getTransactions(),
                transactionCollector.getPendingTransactions())) {
            if (transaction.getTraceId().equals(traceId)) {
                return createFullTrace(transaction);
            }
        }
        return null;
boolean matchesActive(Transaction transaction, String transactionType,
        return true;
    }

    private Trace.Header createTraceHeader(Transaction transaction) throws IOException {
        // capture time before checking if complete to guard against condition where partial
        // trace header is created with captureTime > the real (completed) capture time
        long captureTime = clock.currentTimeMillis();
boolean matchesActive(Transaction transaction, String transactionType,
        }
    }

    private Trace createFullTrace(Transaction transaction) throws IOException {
        if (transaction.isCompleted()) {
            return TraceCreator.createCompletedTrace(transaction, true);
        } else {
            return TraceCreator.createPartialTrace(transaction, clock.currentTimeMillis(),
                    ticker.read());
        }
    }
private boolean matchesTransactionName(Transaction transaction,
            @Nullable String transactionName) {
        return transactionName == null || transactionName.equals(transaction.getTransactionName());
    }
}
/*
 * Copyright 2013-2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
import org.junit.Before;
import org.junit.Test;

import org.glowroot.agent.collector.Collector.AggregateVisitor;
import org.glowroot.agent.collector.Collector.Aggregates;
import org.glowroot.agent.embedded.util.CappedDatabase;
import org.glowroot.agent.embedded.util.DataSource;
import org.glowroot.common.live.ImmutableOverallQuery;
public void shouldReadTransactions() throws Exception {

    // also used by TransactionCommonServiceTest
    public void populateAggregates() throws Exception {
        aggregateDao.store(10000, new Aggregates() {
            @Override
            public <T extends Exception> void accept(AggregateVisitor<T> aggregateVisitor)
                    throws T {
                aggregateVisitor.visitOverallAggregate("a type", new ArrayList<String>(),
                        Aggregate.newBuilder()
                                .setTotalDurationNanos(1000000)
public void populateAggregates() throws Exception {
            }
        });

        aggregateDao.store(20000, new Aggregates() {
            @Override
            public <T extends Exception> void accept(AggregateVisitor<T> aggregateVisitor)
                    throws T {
                aggregateVisitor.visitOverallAggregate("a type", new ArrayList<String>(),
                        Aggregate.newBuilder()
                                .setTotalDurationNanos(1000000)
/*
 * Copyright 2011-2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.

import org.glowroot.agent.embedded.util.CappedDatabase;
import org.glowroot.agent.embedded.util.DataSource;
import org.glowroot.wire.api.model.TraceOuterClass.Trace;

import static java.util.concurrent.TimeUnit.MILLISECONDS;
import static org.mockito.Mockito.mock;
public static void main(String... args) throws Exception {

        Stopwatch stopwatch = Stopwatch.createStarted();
        for (int i = 0; i < 1000; i++) {
            Trace trace = TraceTestData.createTrace();
            traceDao.store(trace);
        }
        logger.info("elapsed time: {}", stopwatch.elapsed(MILLISECONDS));
    }
/*
 * Copyright 2011-2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
import org.junit.Before;
import org.junit.Test;

import org.glowroot.agent.embedded.util.CappedDatabase;
import org.glowroot.agent.embedded.util.DataSource;
import org.glowroot.common.live.ImmutableTracePointFilter;
public void afterEachTest() throws Exception {
    @Test
    public void shouldReadTrace() throws Exception {
        // given
        Trace trace = TraceTestData.createTrace();
        traceDao.store(trace);
        TraceQuery query = ImmutableTraceQuery.builder()
                .transactionType("unit test")
                .from(0)
public void shouldReadTrace() throws Exception {
        Result<TracePoint> queryResult = traceDao.readSlowPoints(AGENT_ROLLUP, query, filter, 1);

        // when
        Trace.Header header = traceDao
                .readHeaderPlus(AGENT_ROLLUP, AGENT_ID, queryResult.records().get(0).traceId())
                .header();

        // then
        assertThat(header.getPartial()).isEqualTo(trace.getHeader().getPartial());
        assertThat(header.getStartTime()).isEqualTo(trace.getHeader().getStartTime());
        assertThat(header.getCaptureTime()).isEqualTo(trace.getHeader().getCaptureTime());
        assertThat(header.getDurationNanos()).isEqualTo(trace.getHeader().getDurationNanos());
        assertThat(header.getHeadline()).isEqualTo("test headline");
        assertThat(header.getUser()).isEqualTo(trace.getHeader().getUser());
    }

    @Test
    public void shouldReadTraceWithAttributeQualifier() throws Exception {
        // given
        Trace trace = TraceTestData.createTrace();
        traceDao.store(trace);
        TraceQuery query = ImmutableTraceQuery.builder()
                .transactionType("unit test")
                .from(0)
public void shouldReadTraceWithAttributeQualifier() throws Exception {
    @Test
    public void shouldReadTraceWithAttributeQualifier2() throws Exception {
        // given
        Trace trace = TraceTestData.createTrace();
        traceDao.store(trace);
        TraceQuery query = ImmutableTraceQuery.builder()
                .transactionType("unit test")
                .from(0)
public void shouldReadTraceWithAttributeQualifier2() throws Exception {
    @Test
    public void shouldReadTraceWithAttributeQualifier3() throws Exception {
        // given
        Trace trace = TraceTestData.createTrace();
        traceDao.store(trace);
        TraceQuery query = ImmutableTraceQuery.builder()
                .transactionType("unit test")
                .from(0)
public void shouldReadTraceWithAttributeQualifier3() throws Exception {
    @Test
    public void shouldNotReadTraceWithNonMatchingAttributeQualifier() throws Exception {
        // given
        Trace trace = TraceTestData.createTrace();
        traceDao.store(trace);
        TraceQuery query = ImmutableTraceQuery.builder()
                .transactionType("unit test")
                .from(0)
public void shouldNotReadTraceWithNonMatchingAttributeQualifier() throws Excepti
    @Test
    public void shouldNotReadTraceWithNonMatchingAttributeQualifier2() throws Exception {
        // given
        Trace trace = TraceTestData.createTrace();
        traceDao.store(trace);
        TraceQuery query = ImmutableTraceQuery.builder()
                .transactionType("unit test")
                .from(0)
public void shouldNotReadTraceWithNonMatchingAttributeQualifier2() throws Except
    @Test
    public void shouldDeletedTrace() throws Exception {
        // given
        Trace trace = TraceTestData.createTrace();
        traceDao.store(trace);
        // when
        traceDao.deleteBefore(100);
        // then
        assertThat(traceDao.readHeaderPlus(AGENT_ROLLUP, AGENT_ID, trace.getId())).isNull();
    }
}
/*
 * Copyright 2011-2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.

import java.util.UUID;

import org.glowroot.common.util.Styles;
import org.glowroot.wire.api.model.TraceOuterClass.Trace;

@Styles.Private
class TraceTestData {

    static Trace createTrace() {
        Trace.Header header = Trace.Header.newBuilder()
                .setSlow(true)
                .setStartTime(1)
                .setCaptureTime(11)
static Trace createTrace() {
                        .setTotalNanos(123)
                        .setCount(1))
                .build();
        return Trace.newBuilder()
                .setId(UUID.randomUUID().toString())
                .setHeader(header)
                .build();
    }
}
import org.glowroot.wire.api.model.CollectorServiceOuterClass.Environment;
import org.glowroot.wire.api.model.CollectorServiceOuterClass.GaugeValue;
import org.glowroot.wire.api.model.CollectorServiceOuterClass.LogEvent;
import org.glowroot.wire.api.model.TraceOuterClass.Trace;

import static java.util.concurrent.TimeUnit.MILLISECONDS;
import static org.assertj.core.api.Assertions.assertThat;
public void init(File glowrootDir, File agentDir, Environment environment,
                AgentConfig agentConfig, AgentConfigUpdater agentConfigUpdater) {}

        @Override
        public void collectAggregates(long captureTime, Aggregates aggregates) {
            aggregates.accept(new AggregateVisitor<RuntimeException>() {
                @Override
                public void visitOverallAggregate(String transactionType,
                        List<String> sharedQueryTexts, Aggregate overallAggregate) {
public void visitTransactionAggregate(String transactionType,
        public void collectGaugeValues(List<GaugeValue> gaugeValues) {}

        @Override
        public void collectTrace(Trace trace) {}

        @Override
        public void log(LogEvent logEvent) {}
/*
 * Copyright 2015-2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
import org.glowroot.wire.api.model.DownstreamServiceOuterClass.AgentResponse.MessageCase;
import org.glowroot.wire.api.model.DownstreamServiceOuterClass.CentralRequest;
import org.glowroot.wire.api.model.DownstreamServiceOuterClass.ReweaveRequest;
import org.glowroot.wire.api.model.TraceOuterClass.Trace;

import static com.google.common.base.Preconditions.checkNotNull;
public void collectGaugeValues(GaugeValueMessage request,
            return new StreamObserver<TraceStreamMessage>() {

                private List<Trace.SharedQueryText> sharedQueryTexts = Lists.newArrayList();
                private @MonotonicNonNull Trace trace;

                @Override
                public void onNext(TraceStreamMessage value) {
                    switch (value.getMessageCase()) {
                        case HEADER:
                            break;
                        case SHARED_QUERY_TEXT:
                            sharedQueryTexts.add(value.getSharedQueryText());
                            break;
                        case TRACE:
                            trace = value.getTrace();
                            break;
                        default:
                            throw new RuntimeException(
public void onError(Throwable t) {

                @Override
                public void onCompleted() {
                    checkNotNull(trace);
                    try {
                        collector.collectTrace(trace.toBuilder()
                                .addAllSharedQueryText(sharedQueryTexts)
                                .build());
                    } catch (Throwable t) {
                        responseObserver.onError(t);
                        return;
import io.grpc.netty.NettyServerBuilder;
import io.grpc.stub.StreamObserver;
import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.glowroot.wire.api.model.CollectorServiceOuterClass.OldAggregateMessage;
import org.glowroot.wire.api.model.CollectorServiceOuterClass.OldTraceMessage;
import org.glowroot.wire.api.model.CollectorServiceOuterClass.OverallAggregate;
import org.glowroot.wire.api.model.CollectorServiceOuterClass.TraceStreamHeader;
import org.glowroot.wire.api.model.CollectorServiceOuterClass.TraceStreamMessage;
import org.glowroot.wire.api.model.CollectorServiceOuterClass.TransactionAggregate;
import org.glowroot.wire.api.model.Proto;
import org.glowroot.wire.api.model.TraceOuterClass.Trace;

import static com.google.common.base.Preconditions.checkNotNull;

class GrpcServer {

        server = NettyServerBuilder.forAddress(new InetSocketAddress(bindAddress, port))
                .addService(new CollectorServiceImpl().bindService())
                .addService(downstreamService.bindService())
                .build()
                .start();

public void collectInit(InitMessage request,
                final StreamObserver<AggregateResponseMessage> responseObserver) {
            return new StreamObserver<AggregateStreamMessage>() {

                private @MonotonicNonNull AggregateStreamHeader header;
                private List<Aggregate.SharedQueryText> sharedQueryTexts = Lists.newArrayList();
                private Map<String, OldAggregatesByType.Builder> aggregatesByTypeMap =
                        Maps.newHashMap();

                @Override
                public void onNext(AggregateStreamMessage value) {
                    switch (value.getMessageCase()) {
                        case HEADER:
                            header = value.getHeader();
                            break;
                        case SHARED_QUERY_TEXT:
                            sharedQueryTexts.add(value.getSharedQueryText());
public void onNext(AggregateStreamMessage value) {

                @Override
                public void onError(Throwable t) {
                    if (header == null) {
                        logger.error(t.getMessage(), t);
                    } else {
                        logger.error("{} - {}", getDisplayForLogging(header.getAgentId()),
                                t.getMessage(), t);
                    }
                }
public void onError(Throwable t) {
                        timer = "aggregates")
                @Override
                public void onCompleted() {
                    checkNotNull(header);
                    List<OldAggregatesByType> aggregatesByTypeList = Lists.newArrayList();
                    for (OldAggregatesByType.Builder aggregatesByType : aggregatesByTypeMap
                            .values()) {
                        aggregatesByTypeList.add(aggregatesByType.build());
                    }
                    collectAggregatesInternal(header.getAgentId(), header.getCaptureTime(),
                            sharedQueryTexts, aggregatesByTypeList, responseObserver);
                }
            };
public void collectGaugeValues(GaugeValueMessage request,
            String agentDisplay;
            try {
                agentDisplay = agentDao.readAgentRollupDisplay(agentId);
            } catch (Exception e) {
                logger.error("{} - {}", getDisplayForLogging(agentId), e.getMessage(), e);
                responseObserver.onError(e);
                return;
            }
            final long captureTime = maxCaptureTime;
public void collectGaugeValues(GaugeValueMessage request,
                final StreamObserver<EmptyMessage> responseObserver) {
            return new StreamObserver<TraceStreamMessage>() {

                private @MonotonicNonNull TraceStreamHeader header;
                private List<Trace.SharedQueryText> sharedQueryTexts = Lists.newArrayList();
                private @MonotonicNonNull Trace trace;

                @Override
                public void onNext(TraceStreamMessage value) {
                    switch (value.getMessageCase()) {
                        case HEADER:
                            header = value.getHeader();
                            break;
                        case SHARED_QUERY_TEXT:
                            sharedQueryTexts.add(value.getSharedQueryText());
                            break;
                        case TRACE:
                            trace = value.getTrace();
                            break;
                        default:
                            throw new RuntimeException(
                                    "Unexpected message: " + value.getMessageCase());
public void onNext(TraceStreamMessage value) {

                @Override
                public void onError(Throwable t) {
                    if (header == null) {
                        logger.error(t.getMessage(), t);
                    } else {
                        logger.error("{} - {}", getDisplayForLogging(header.getAgentId()),
                                t.getMessage(), t);
                    }
                }
public void onError(Throwable t) {
                        traceHeadline = "Collect trace: {{this.header.agentId}}", timer = "trace")
                @Override
                public void onCompleted() {
                    checkNotNull(header);
                    checkNotNull(trace);
                    try {
                        traceDao.store(header.getAgentId(), trace.toBuilder()
                                .addAllSharedQueryText(sharedQueryTexts)
                                .build());
                    } catch (Throwable t) {
                        logger.error("{} - {}", getDisplayForLogging(header.getAgentId()),
                                t.getMessage(), t);
                        responseObserver.onError(t);
                        return;
                    }
                    responseObserver.onNext(EmptyMessage.getDefaultInstance());
                    responseObserver.onCompleted();
                }
            };
        }

syntax = "proto3";
import "AgentConfig.proto";
import "Aggregate.proto";
import "Trace.proto";
import "Common.proto";

package org_glowroot_wire_api_model;
message OldAggregateMessage {

message AggregateStreamMessage {
  oneof message {
    AggregateStreamHeader header = 1;
    Aggregate.SharedQueryText shared_query_text = 2;
    OverallAggregate overall_aggregate = 3;
    TransactionAggregate transaction_aggregate = 4;
message OldTraceMessage {

message TraceStreamMessage {
  oneof message {
    TraceStreamHeader header = 1;
    Trace.SharedQueryText shared_query_text = 2;
    Trace trace = 3;
  }
}

message GaugeValue {

message TraceStreamHeader {
  string agent_id = 1;
}

message LogEvent {
option java_package = "org.glowroot.wire.api.model";

message Trace {

  string id = 1; // this is a uuid
  Header header = 2;
  // entry ordering is pre-order depth-first
  // there are typically multiple "root" nodes (with depth=0)
  repeated Entry entry = 3;
  Profile main_thread_profile = 4;
  Profile aux_thread_profile = 5;
  bool update = 6; // optimization so the central collector does not need to check for prior partial
                   // trace in common case where this is not an update
  repeated SharedQueryText shared_query_text = 8; // deprecated in 0.9.5,
                                                  // moved to TraceMessage stream

  message Header {
    bool partial = 1;
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import org.elixir_lang.errorreport.Logger;
import org.elixir_lang.psi.*;
import org.elixir_lang.psi.call.Call;
import org.elixir_lang.psi.impl.ElixirPsiImplUtil;
import org.elixir_lang.psi.operation.Infix;
import org.elixir_lang.psi.operation.Match;
import org.elixir_lang.psi.operation.Type;
private void highlightType(@NotNull final AtUnqualifiedNoParenthesesCall atUnqua

                if (leftOperand instanceof Call) {
                    Call call = (Call) leftOperand;
                    PsiElement functionNameElement = call.functionNameElement();

                    if (functionNameElement != null) {
                        highlight(
                                functionNameElement.getTextRange(),
                                annotationHolder,
                                ElixirSyntaxHighlighter.TYPE
                        );
                    }

                    if (call instanceof ElixirMatchedUnqualifiedNoArgumentsCall) {
                        // no arguments, so nothing else to do
                    } else if (call instanceof ElixirMatchedUnqualifiedParenthesesCall) {
                        PsiElement[] primaryArguments = call.primaryArguments();
                        PsiElement[] secondaryArguments = call.secondaryArguments();

                        /* if there are secondaryArguments, then it is the type parameters as in
                           `@type quote(type_name)(param1, param2) :: {param1, param2}` */
                        if (secondaryArguments != null) {
                            typeParameterNameSet = typeTypeParameterNameSet(secondaryArguments);

                            highlightTypesAndTypeParameterUsages(
                                    primaryArguments,
                                    /* as stated above, if there are secondary arguments, then the primary arguments are
                                       to quote or some equivalent metaprogramming. */
                                    Collections.<String>emptySet(),
                                    annotationHolder,
                                    ElixirSyntaxHighlighter.TYPE
                            );

                            highlightTypesAndTypeTypeParameterDeclarations(
                                    secondaryArguments,
                                    typeParameterNameSet,
                                    annotationHolder,
                                    ElixirSyntaxHighlighter.TYPE
                            );
                        } else if (primaryArguments != null) {
                            typeParameterNameSet = typeTypeParameterNameSet(primaryArguments);

                            highlightTypesAndTypeTypeParameterDeclarations(
                                    primaryArguments,
                                    typeParameterNameSet,
                                    annotationHolder,
                                    ElixirSyntaxHighlighter.TYPE
                            );
                        }
                    } else {
                        cannotHighlightTypes(call);
                    }
private void highlightType(@NotNull final AtUnqualifiedNoParenthesesCall atUnqua
                        );
                    }
                } else {
                    cannotHighlightTypes(matchedUnqualifiedParenthesesCall);
                }
            } else if (grandChild instanceof QuotableKeywordList) {
                QuotableKeywordList quotableKeywordList = (QuotableKeywordList) grandChild;
private void highlightTypeError(@NotNull PsiElement element, @NotNull Annotation
        annotationHolder.createErrorAnnotation(element, message);
    }

    private void highlightTypesAndTypeTypeParameterDeclarations(ElixirUnmatchedUnqualifiedNoArgumentsCall psiElement,
                                                                Set<String> typeParameterNameSet,
                                                                AnnotationHolder annotationHolder,
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public static String processNameTemplate(final String template, final Map<String
        while (matcher.find()) {
            final String pattern = matcher.group(1);
            final String replacement = processPattern(pattern, params).orElseGet(matcher::group);
            matcher.appendReplacement(sb, replacement);
        }
        matcher.appendTail(sb);
        return sb.toString();
public void shouldTransformPlaceholdersToPropertyValues() {
                        + " \"1111222233334444\", \"{missing}\", true");
    }

    @Step("\"{user.emails.address}\", \"{user.emails}\", \"{user.emails.attachments}\", \"{user.password}\", \"{}\"," +
            " \"{user.card.number}\", \"{missing}\", {staySignedIn}")
    private void loginWith(final DummyUser user, final boolean staySignedIn) {
    }
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	private JPanel infoBackdropPanel;
	private JLabel lblStringValue;
	private JLabel lblvalueHere;
	private Executor reportExecutor = Executors.newSingleThreadExecutor();
	private Executor updateExecutor = Executors.newSingleThreadExecutor();
	private final AtomicBoolean needsUpdating = new AtomicBoolean();

private void refreshNodeDetails(){
	}//end refreshModeDetails()

	public Reporter report(final String path, final String item){
	    reportExecutor.execute(new Runnable(){
		@Override
		public void run() {
		    Scanner dotScanner = new Scanner(path);
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
android {
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import android.os.Bundle;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;

public class OfflineEditFragment extends BaseFragment {

    @BindView(R.id.listOfflineSave) ListView listView;
    @BindView(R.id.buttonSendAll) Button buttonSend;
    private List<SaveItem> saveItems;
protected Context doInBackground(Context... ctx) {
                    imageIcon = R.drawable.ic_no;
                }

                Bitmap imgUrl = Bitmap.createScaledBitmap(Utils.decodeFile(new File(product.getImgupload_front())), 200, 200, true);
                saveItems.add(new SaveItem(product.getName(), imageIcon, imgUrl, product.getBarcode()));
            }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void subscribe(Subscriber<? super T> s) {
				c = u;
			}

			if (c.trySubscribe(inner)) {
				break;
			}
		}
boolean tryConnect() {
			return connected == 0 && CONNECTED.compareAndSet(this, 0, 1);
		}

		boolean trySubscribe(PublishInner<T> inner) {
			if (add(inner)) {
				if (inner.isCancelled()) {
					remove(inner);
				}
				else {
					inner.parent = this;
				}
				drain();
				return true;
			}
			return false;
		}

		final void drain() {
			if (WIP.getAndIncrement(this) != 0) {
				return;
public void connect(Consumer<? super Disposable> cancelSupport) {
		ReplaySubscriber<T> s;
		for (; ; ) {
			s = connection;
			if (s == null || s.isTerminated()) {
				ReplaySubscriber<T> u = newState();
				if (!CONNECTION.compareAndSet(this, s, u)) {
					continue;
				}

public void connect(Consumer<? super Disposable> cancelSupport) {
	@Override
	public void subscribe(Subscriber<? super T> s) {
		ReplayInner<T> inner = new ReplayInner<>(s);
		s.onSubscribe(inner);
		for (; ; ) {
			if (inner.isCancelled()) {
				break;
			}

			ReplaySubscriber<T> c = connection;
			if (c == null || c.isTerminated()) {
				ReplaySubscriber<T> u = newState();
				if (!CONNECTION.compareAndSet(this, c, u)) {
					continue;
				}

				c = u;
			}

			if (c.trySubscribe(inner)) {
				break;
			}
		}
	}

public void onError(Throwable t) {
			else {
				b.onError(t);

				ReplaySubscription<T>[] a = subscribers;

				for (ReplaySubscription<T> rs : a) {
					b.replay(rs);
				}
			}
public void onComplete() {
			if (!b.isDone()) {
				b.onComplete();

				ReplaySubscription<T>[] a = subscribers;

				for (ReplaySubscription<T> rs : a) {
					b.replay(rs);
				}
			}
public void dispose() {
			}
			if (Operators.terminate(S, this)) {
				cancelled = true;
				if (WIP.getAndIncrement(this) != 0) {
					return;
				}
				disconnectAction();
			}
		}

		void disconnectAction() {
			CancellationException ex = new CancellationException("Disconnected");
			buffer.onError(ex);
			for (ReplaySubscription<T> inner : terminate()) {
				inner.actual().onError(ex);
			}
		}

boolean tryConnect() {
			return connected == 0 && CONNECTED.compareAndSet(this, 0, 1);
		}

		boolean trySubscribe(ReplayInner<T> inner) {
			if (add(inner)) {
				if (inner.isCancelled()) {
					remove(inner);
				}
				else {
					inner.parent = this;
					buffer.replay(inner);
				}
				return true;
			}
			return false;
		}

		@Override
		@Nullable
		public Object scanUnsafe(Attr key) {
public Object scanUnsafe(Attr key) {

		@Override
		public boolean isDisposed() {
			return cancelled || buffer.isDone();
		}

	}
import reactor.core.scheduler.Schedulers;
import reactor.test.StepVerifier;
import reactor.test.publisher.TestPublisher;
import reactor.test.subscriber.AssertSubscriber;

import static org.assertj.core.api.Assertions.assertThat;
public void doesDisconnectAfterRefCountZeroAndSlowResubscribe()
	}

	@Test
	public void scanMain() {
		ConnectableFlux<Integer> parent = Flux.just(10).publish();
		FluxRefCountGrace<Integer> test = new FluxRefCountGrace<Integer>(parent, 17, Duration.ofSeconds(1), Schedulers.single());
import org.reactivestreams.Subscription;

import reactor.core.Disposable;
import reactor.core.Fuseable;
import reactor.core.Scannable;
import reactor.core.scheduler.Schedulers;
public void cacheFluxHistoryTTLFused() {
		                                         .delayElements(Duration.ofMillis(1000))
		                                         .replay(2, Duration.ofMillis(2000))
		                                         .autoConnect()
		                                         .elapsed();

		StepVerifier.create(source)
		            .expectFusion(Fuseable.ANY)
public void cacheFluxHistoryTTLFused() {

	@Test
	public void cancel() {
		ConnectableFlux<Integer> replay = Flux.range(1, 5)
		                                             .replay(2);
		Disposable subscribed = replay.subscribe(v -> {},
				e -> fail(e.toString()));

		Disposable connected = replay.connect();

		//the lambda subscriber itself is cancelled so it will bubble the exception
		//propagated by connect().dipose()
		assertThatExceptionOfType(RuntimeException.class)
				.isThrownBy(connected::dispose)
	            .withMessage("java.util.concurrent.CancellationException: Disconnected");

		boolean cancelled = ((FluxReplay.ReplaySubscriber) connected).cancelled;
		assertThat(cancelled).isTrue();
public void scanInner() {
        FluxReplay<Integer> main = new FluxReplay<>(Flux.just(1), 2, 1000, Schedulers.single());
        FluxReplay.ReplayInner<Integer> test = new FluxReplay.ReplayInner<>(actual);
        FluxReplay.ReplaySubscriber<Integer> parent = new FluxReplay.ReplaySubscriber<>(new FluxReplay.UnboundedReplayBuffer<>(10), main);
        parent.trySubscribe(test);

        Assertions.assertThat(test.scan(Scannable.ScannableAttr.PARENT)).isSameAs(parent);
        Assertions.assertThat(test.scan(Scannable.ScannableAttr.ACTUAL)).isSameAs(actual);
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    public MindsDesire(UUID ownerId, CardSetInfo setInfo) {
        super(ownerId,setInfo,new CardType[]{CardType.SORCERY},"{4}{U}{U}");


        // Shuffle your library. Then exile the top card of your library. Until end of turn, you may play that card without paying its mana cost.
        this.getSpellAbility().addEffect(new MindsDesireEffect());
        
public MindsDesireCastFromExileEffect copy() {
    public boolean applies(UUID sourceId, Ability source, UUID affectedControllerId, Game game) {
        UUID targetId = getTargetPointer().getFirst(game, source);
        Player player = game.getPlayer(affectedControllerId);
        if (targetId != null 
                && targetId.equals(sourceId)
                && player != null) {
            if (affectedControllerId.equals(source.getControllerId())) {
                Card card = game.getCard(sourceId);
                if (card != null 
                        && game.getState().getZone(sourceId) == Zone.EXILED) {
                    player.setCastSourceIdWithAlternateMana(sourceId, null, card.getSpellAbility().getCosts());
                    return true;
                }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public String parse() {
    public String parse(String... p) {
        String returnValue = this.toString();
        for (int i = 0; i < p.length; i++) {
            returnValue = returnValue.replaceAll("REPLACE" + i, p[i]);
        }
        return returnValue;
    }
public UserData(Player player, DemographicsData demData) {
            isBanned = player.isBanned();
        } catch (Exception e) {
            Plan plugin = getPlugin(Plan.class);
            plugin.logError("Error getting ban date from Bukkit files. "+uuid.toString());
            plugin.toLog(this.getClass().getName(), e);
        }
        name = player.getName();
public UserData(OfflinePlayer player, DemographicsData demData) {
            isBanned = player.isBanned();
        } catch (Exception e) {
            Plan plugin = getPlugin(Plan.class);
            plugin.logError("Error getting ban date from Bukkit files. "+uuid.toString());
            plugin.toLog(this.getClass().getName(), e);
        }
        name = player.getName();
public UserData(OfflinePlayer player, DemographicsData demData) {

    /**
     * Creates a new UserData object with copied values.
     * @param data UserData to copy into the new object.
     */
    public UserData(UserData data) {
public UserData(UserData data) {
        this.sessions = new ArrayList<>();
        sessions.addAll(data.getSessions());
    }
    
    /**
     *
     * @param ip
public void addLocations(Collection<Location> addLocs) {
     */
    public boolean addNickname(String nick) {
        if (!nicknames.contains(nick)) {
            if (!nick.isEmpty()) {
                nicknames.add(nick);
                return true;
            }
        }
        return false;
public boolean isAccessed() {
    public void access() {
        accessing++;
    }
    
    /**
     *
     */
public void stopAccessing() {
    }

    // Getters -------------------------------------------------------------

    /**
     *
     * @return
     */

    public UUID getUuid() {
        return uuid;
    }
public String getName() {
    }

    // Setters -------------------------------------------------------------

    /**
     *
     * @param uuid
public void setMobKills(int mobKills) {
    public void setPlayerKills(List<KillData> playerKills) {
        this.playerKills = playerKills;
    }
    
    /**
     *
     * @param kill
public boolean equals(Object obj) {
        }
        return true;
    }
    
    
}
import main.java.com.djrapitops.plan.Plan;
import main.java.com.djrapitops.plan.data.UserData;
import main.java.com.djrapitops.plan.data.cache.DBCallableProcessor;
import org.bukkit.configuration.ConfigurationSection;

/**
public ConfigurationSection getConfigSection() {
     * @throws SQLException
     */
    public abstract int getUserId(String uuid) throws SQLException;
}
public void giveUserDataToProcessors(UUID uuid, Collection<DBCallableProcessor>
        return nicknames;
    }

    private List<Location> getLocations(String userId, HashMap<String, World> worlds) throws SQLException {
        PreparedStatement statement;
        ResultSet set;
        statement = connection.prepareStatement("SELECT * FROM " + locationName + " WHERE UPPER(" + locationColumnUserID + ") LIKE UPPER(?)");
public void saveUserData(UUID uuid, UserData data) throws SQLException {
     * @throws SQLException
     */
    public void saveAdditionalLocationsList(int userId, List<Location> locations) throws SQLException {
        List<Location> newLocations = new ArrayList<>();
        newLocations.addAll(locations);
        if (newLocations.isEmpty()) {
            return;
        }
        PreparedStatement saveStatement = connection.prepareStatement("INSERT INTO " + locationName + " ("
                + locationColumnUserID + ", "
                + locationColumnCoordinatesX + ", "
public void saveAdditionalLocationsList(int userId, List<Location> locations) th
        boolean commitRequired = false;
        if (!newLocations.isEmpty()) {
            for (Location location : newLocations) {
                saveStatement.setInt(1, userId);
                saveStatement.setInt(2, (int) location.getBlockX());
                saveStatement.setInt(3, (int) location.getBlockZ());
public void saveAdditionalLocationsList(int userId, List<Location> locations) th
     * @throws SQLException
     */
    public void saveNickList(int userId, HashSet<String> names, String lastNick) throws SQLException {
        if (names.isEmpty()) {
            return;
        }
        PreparedStatement statement = connection.prepareStatement(
public void saveSessionList(int userId, List<SessionData> sessions) throws SQLEx
                + ") VALUES (?, ?, ?)");
        boolean commitRequired = false;
        for (SessionData session : sessions) {
            statement.setInt(1, userId);
            statement.setLong(2, session.getSessionStart());
            statement.setLong(3, session.getSessionEnd());
            statement.addBatch();
            commitRequired = true;
        }
public void saveSessionList(int userId, List<SessionData> sessions) throws SQLEx
     * @throws SQLException
     */
    public void savePlayerKills(int userId, List<KillData> kills) throws SQLException {
        if (kills.isEmpty()) {
            return;
        }
        PreparedStatement statement = connection.prepareStatement(
public void savePlayerKills(int userId, List<KillData> kills) throws SQLExceptio
                + ") VALUES (?, ?, ?, ?)");
        boolean commitRequired = false;
        for (KillData kill : kills) {
            statement.setInt(1, userId);
            statement.setInt(2, kill.getVictimUserID());
            statement.setString(3, kill.getWeapon());
public void savePlayerKills(int userId, List<KillData> kills) throws SQLExceptio
        }
        if (commitRequired) {
            statement.executeBatch();

        }
        statement.close();
    }
public void savePlayerKills(int userId, List<KillData> kills) throws SQLExceptio
     * @throws SQLException
     */
    public void saveIPList(int userId, HashSet<InetAddress> ips) throws SQLException {
        if (ips.isEmpty()) {
            return;
        }
        PreparedStatement statement = connection.prepareStatement(
public void saveIPList(int userId, HashSet<InetAddress> ips) throws SQLException
                + ") VALUES (?, ?)");
        boolean commitRequired = false;
        for (InetAddress ip : ips) {
            statement.setInt(1, userId);
            statement.setString(2, ip.getHostAddress());
            statement.addBatch();
public void saveIPList(int userId, HashSet<InetAddress> ips) throws SQLException
     * @throws SQLException
     */
    public void saveGMTimes(int userId, HashMap<GameMode, Long> gamemodeTimes) throws SQLException {
        if (gamemodeTimes.isEmpty()) {
            return;
        }
        PreparedStatement statement = connection.prepareStatement(
public String parse() {
    public String parse(String... p) {
        String returnValue = this.html;
        for (int i = 0; i < p.length; i++) {
            returnValue = returnValue.replaceAll("REPLACE" + i, p[i]);
        }
        return returnValue;
    }
public static String createSortedCommandUseTable(HashMap<String, Integer> comman
            } catch (IllegalArgumentException e) {
                Plan plugin = getPlugin(Plan.class);
                plugin.toLog("SortableCommandUseTableCreator", e);
                plugin.toLog("Cause: "+values[1]+" "+values[2]);
            }
        }
        return html;
public static String getInspectUrl(String playerName) {
    }

    public static String removeXSS(String string) {
        return string.replaceAll("<!--", "")
                .replaceAll("-->", "")
                .replaceAll("<script>", "")
                .replaceAll("</script>", "");
    }
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public boolean onCommand(CommandSender sender, Command cmd, String label, String
					if (StringUtils.isNumeric(args[2])) {
						// /spawner give <entity> <amount>

						// catch console
						if (!(sender instanceof Player)) {
							Main.instance.getLangHandler().sendMessage(sender, Main.instance.getLangHandler().getText("ConsoleUsageGive"));
public boolean onCommand(CommandSender sender, Command cmd, String label, String
							}

							// get a new spawner
							Spawner newSpawner = SpawnerFunctions.makeSpawner(spawnerName, Integer.parseInt(args[2]));

							// drop spawner at player location or add it to their inv if they have space
							PlayerInventory inventory = player.getInventory();
public boolean onCommand(CommandSender sender, Command cmd, String label, String

					// amount parameter for give to others
					if (StringUtils.isNumeric(args[3])) {
						if (sender.hasPermission("spawner.giveothers.all") || sender.hasPermission("spawner.giveothers." + SpawnerFunctions.convertAlias(args[1]).toLowerCase())) {
							// give a spawner
							// /spawner give <entity> <player> <amount>
public boolean onCommand(CommandSender sender, Command cmd, String label, String
									}

									// get a new spawner
									Spawner newSpawner = SpawnerFunctions.makeSpawner(spawnerName, Integer.parseInt(args[3]));

									// set name
									Player targetPlayer = Main.instance.getServer().getPlayer(args[2]);
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public Commandtpdeny() {

    @Override
    public void run(final Server server, final User user, final String commandLabel, final String[] args) throws Exception {
        final User player = ess.getUser(user.getTeleportRequest());
        if (player == null) {
            throw new Exception(tl("noPendingRequest"));
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import com.datastax.driver.core.QueryOptions;
import com.datastax.driver.core.ResultSet;
import com.datastax.driver.core.Row;
import com.datastax.driver.core.Session;
import com.datastax.driver.core.TimestampGenerator;
import com.datastax.driver.core.exceptions.NoHostAvailableException;
import com.datastax.driver.core.policies.ConstantReconnectionPolicy;
import org.glowroot.central.repo.ConfigRepositoryImpl.AgentConfigListener;
import org.glowroot.central.repo.SchemaUpgrade;
import org.glowroot.central.util.ClusterManager;
import org.glowroot.central.util.Sessions;
import org.glowroot.common.live.LiveAggregateRepository.LiveAggregateRepositoryNop;
import org.glowroot.common.repo.RepoAdmin;
import org.glowroot.common.repo.util.AlertingService;
private static Session connect(CentralConfiguration centralConfig) throws Except
        while (stopwatch.elapsed(MINUTES) < 30) {
            try {
                if (session == null) {
                    session = createCluster(centralConfig, defaultTimestampGenerator).connect();
                }
                String cassandraVersion = verifyCassandraVersion(session);
                String keyspace = centralConfig.cassandraKeyspace();
                Sessions.createKeyspaceIfNotExists(session, keyspace);
                Sessions.execute(session, "use " + keyspace);
                KeyspaceMetadata keyspaceMetadata =
                        checkNotNull(session.getCluster().getMetadata().getKeyspace(keyspace));
                String replicationFactor =
private static Cluster createCluster(CentralConfiguration centralConfig,
        return builder.build();
    }

    private static String verifyCassandraVersion(Session session) {
        ResultSet results = session
                .execute("select release_version from system.local where key = 'local'");
        Row row = checkNotNull(results.one());
        String cassandraVersion = checkNotNull(row.getString(0));
        if (cassandraVersion.startsWith("2.0") || cassandraVersion.startsWith("1.")
import com.datastax.driver.core.PreparedStatement;
import com.datastax.driver.core.ResultSet;
import com.datastax.driver.core.Row;
import com.datastax.driver.core.Session;
import com.datastax.driver.core.utils.UUIDs;
import com.google.common.annotations.VisibleForTesting;
import com.google.common.base.Optional;
import org.glowroot.central.util.Cache;
import org.glowroot.central.util.Cache.CacheLoader;
import org.glowroot.central.util.ClusterManager;
import org.glowroot.central.util.Sessions;
import org.glowroot.common.repo.ConfigRepository.OptimisticLockException;
import org.glowroot.wire.api.model.AgentConfigOuterClass.AgentConfig;
import org.glowroot.wire.api.model.AgentConfigOuterClass.AgentConfig.AdvancedConfig;
    AgentConfigDao(Session session, ClusterManager clusterManager) throws Exception {
        this.session = session;

        Sessions.execute(session, "create table if not exists agent_config (agent_rollup_id"
                + " varchar, config blob, config_update boolean, config_update_token uuid,"
                + " primary key (agent_rollup_id)) " + WITH_LCS);
        // secondary index is needed for Cassandra 2.x (to avoid error on readUpdatePS)
        Sessions.execute(session,
                "create index if not exists config_update_idx on agent_config (config_update)");

        insertPS = session.prepare("insert into agent_config (agent_rollup_id, config,"
public AgentConfig store(String agentId, @Nullable String agentRollupId,
            // agent config
            boundStatement.setBool(i++, false);
            boundStatement.setToNull(i++);
            Sessions.execute(session, boundStatement);
            agentConfigCache.invalidate(agentId);
        }
        if (agentRollupId != null) {
public AgentConfig store(String agentId, @Nullable String agentRollupId,
                        .toByteArray()));
                boundStatement.setBool(i++, false);
                boundStatement.setToNull(i++);
                Sessions.execute(session, boundStatement);
                agentConfigCache.invalidate(loopAgentRollupId);
            }
        }
void update(String agentRollupId, AgentConfigUpdater agentConfigUpdater)
        for (int j = 0; j < 10; j++) {
            BoundStatement boundStatement = readPS.bind();
            boundStatement.setString(0, agentRollupId);
            ResultSet results = Sessions.execute(session, boundStatement);
            Row row = checkNotNull(results.one());
            ByteString currValue = ByteString.copyFrom(checkNotNull(row.getBytes(0)));
            AgentConfig currAgentConfig = AgentConfig.parseFrom(currValue);
void update(String agentRollupId, AgentConfigUpdater agentConfigUpdater)
            boundStatement.setString(i++, agentRollupId);

            boundStatement.setBytes(i++, ByteBuffer.wrap(currValue.toByteArray()));
            results = Sessions.execute(session, boundStatement);
            row = checkNotNull(results.one());
            boolean applied = row.getBool("[applied]");
            if (applied) {
AgentConfig read(String agentRollupId) throws Exception {
    public @Nullable AgentConfigUpdate readForUpdate(String agentId) throws Exception {
        BoundStatement boundStatement = readForUpdatePS.bind();
        boundStatement.setString(0, agentId);
        ResultSet results = Sessions.execute(session, boundStatement);
        Row row = results.one();
        if (row == null) {
            // no pending config update for this agent (or agent has been manually deleted)
public void markUpdated(String agentId, UUID configUpdateToken) throws Exception
        int i = 0;
        boundStatement.setString(i++, agentId);
        boundStatement.setUUID(i++, configUpdateToken);
        Sessions.execute(session, boundStatement);
    }

    static String generateNewId() {
static AgentConfig generateNewIds(AgentConfig agentConfig) {
        public Optional<AgentConfig> load(String agentRollupId) throws Exception {
            BoundStatement boundStatement = readPS.bind();
            boundStatement.setString(0, agentRollupId);
            ResultSet results = Sessions.execute(session, boundStatement);
            Row row = results.one();
            if (row == null) {
                // agent must have been manually deleted
import com.datastax.driver.core.ResultSet;
import com.datastax.driver.core.ResultSetFuture;
import com.datastax.driver.core.Row;
import com.datastax.driver.core.Session;
import com.google.common.base.MoreObjects;
import com.google.common.base.Optional;
import com.google.common.base.Strings;
import org.glowroot.central.util.Cache;
import org.glowroot.central.util.Cache.CacheLoader;
import org.glowroot.central.util.ClusterManager;
import org.glowroot.central.util.Sessions;
import org.glowroot.common.config.AgentRollupConfig;
import org.glowroot.common.config.ImmutableAgentRollupConfig;
import org.glowroot.common.repo.AgentRollupRepository;
    AgentRollupDao(Session session, ClusterManager clusterManager) throws Exception {
        this.session = session;

        Sessions.execute(session, "create table if not exists agent_rollup (one int,"
                + " agent_rollup_id varchar, parent_agent_rollup_id varchar, display varchar,"
                + " agent boolean, last_capture_time timestamp, primary key (one,"
                + " agent_rollup_id)) " + WITH_LCS);
public void store(String agentId, @Nullable String agentRollupId) throws Excepti
        boundStatement.setString(i++, agentId);
        boundStatement.setString(i++, agentRollupId);
        boundStatement.setBool(i++, true);
        Sessions.execute(session, boundStatement);
        if (agentRollupId != null) {
            List<String> agentRollupIds = getAgentRollupIds(agentRollupId);
            for (int j = agentRollupIds.size() - 1; j >= 0; j--) {
public void store(String agentId, @Nullable String agentRollupId) throws Excepti
                boundStatement.setString(i++, loopAgentRollupId);
                boundStatement.setString(i++, loopParentAgentRollupId);
                boundStatement.setBool(i++, false);
                Sessions.execute(session, boundStatement);
            }
        }

public void store(String agentId, @Nullable String agentRollupId) throws Excepti

    @Override
    public List<AgentRollup> readAgentRollups() throws Exception {
        ResultSet results = Sessions.execute(session, readPS.bind());
        Set<AgentRollupRecord> topLevel = Sets.newHashSet();
        Multimap<String, AgentRollupRecord> childMultimap = ArrayListMultimap.create();
        for (Row row : results) {
public String readAgentRollupDisplay(String agentRollupId) throws Exception {
    public boolean isAgent(String agentRollupId) throws Exception {
        BoundStatement boundStatement = isAgentPS.bind();
        boundStatement.setString(0, agentRollupId);
        Row row = Sessions.execute(session, boundStatement).one();
        if (row == null) {
            return false;
        }
public boolean isAgent(String agentRollupId) throws Exception {
        return agentRollupIds;
    }

    ResultSetFuture updateLastCaptureTime(String agentId, long captureTime) {
        BoundStatement boundStatement = insertLastCaptureTimePS.bind();
        int i = 0;
        boundStatement.setString(i++, agentId);
AgentRollupConfig readAgentRollupConfig(String agentRollupId) throws Exception {
    void update(AgentRollupConfig agentRollupConfig, String priorVersion) throws Exception {
        BoundStatement boundStatement = readDisplayPS.bind();
        boundStatement.setString(0, agentRollupConfig.id());
        ResultSet results = Sessions.execute(session, boundStatement);
        Row row = results.one();
        if (row == null) {
            // agent rollup was just deleted
void update(AgentRollupConfig agentRollupConfig, String priorVersion) throws Exc
        boundStatement.setString(i++, agentRollupConfig.id());
        boundStatement.setString(i++, Strings.emptyToNull(agentRollupConfig.display()));
        boundStatement.setString(i++, currDisplay);
        Sessions.execute(session, boundStatement);
        results = Sessions.execute(session, boundStatement);
        row = checkNotNull(results.one());
        boolean applied = row.getBool("[applied]");
        if (applied) {
void update(AgentRollupConfig agentRollupConfig, String priorVersion) throws Exc
    void delete(String agentRollupId) throws Exception {
        BoundStatement boundStatement = deletePS.bind();
        boundStatement.setString(0, agentRollupId);
        Sessions.execute(session, boundStatement);
    }

    private AgentRollup createAgentRollup(AgentRollupRecord agentRollupRecord,
private static ImmutableAgentRollupConfig buildAgentRollupConfig(String id,

    private static void cleanUpAgentRollupTable(Session session) throws Exception {
        ResultSet results =
                Sessions.execute(session, "select agent_rollup_id, agent from agent_rollup");
        PreparedStatement deletePS = session.prepare(
                "delete from agent_rollup where one = 1 and agent_rollup_id = ? if agent = null");
        for (Row row : results) {
private static void cleanUpAgentRollupTable(Session session) throws Exception {
                // AgentConfigNotFoundException)
                BoundStatement boundStatement = deletePS.bind();
                boundStatement.setString(0, checkNotNull(row.getString(0)));
                Sessions.execute(session, boundStatement);
            }
        }
    }
public default int compareTo(AgentRollupRecord right) {
        public Optional<String> load(String agentId) throws Exception {
            BoundStatement boundStatement = readParentIdPS.bind();
            boundStatement.setString(0, agentId);
            ResultSet results = Sessions.execute(session, boundStatement);
            Row row = results.one();
            if (row == null) {
                return Optional.absent();
public default int compareTo(AgentRollupRecord right) {
        public Optional<AgentRollupConfig> load(String agentRollupId) throws Exception {
            BoundStatement boundStatement = readDisplayPS.bind();
            boundStatement.setString(0, agentRollupId);
            ResultSet results = Sessions.execute(session, boundStatement);
            Row row = results.one();
            if (row == null) {
                return Optional.absent();
import com.datastax.driver.core.ResultSet;
import com.datastax.driver.core.ResultSetFuture;
import com.datastax.driver.core.Row;
import com.datastax.driver.core.Session;
import com.datastax.driver.core.utils.UUIDs;
import com.google.common.base.Charsets;
import com.google.common.base.Strings;
import com.google.common.primitives.Ints;
import com.google.protobuf.AbstractMessage;
import com.google.protobuf.ByteString;
import com.google.protobuf.InvalidProtocolBufferException;
import org.immutables.value.Value;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.glowroot.agent.api.Instrumentation;
import org.glowroot.central.util.Messages;
import org.glowroot.central.util.MoreFutures;
import org.glowroot.central.util.Sessions;
import org.glowroot.common.config.ConfigDefaults;
import org.glowroot.common.config.StorageConfig;
import org.glowroot.common.live.ImmutableOverviewAggregate;
            for (int i = 0; i < count; i++) {
                int expirationHours = rollupExpirationHours.get(i);
                if (table.summary()) {
                    Sessions.createTableWithTWCS(session, createSummaryTableQuery(table, false, i),
                            expirationHours);
                    Sessions.createTableWithTWCS(session, createSummaryTableQuery(table, true, i),
                            expirationHours);
                    insertOverallList.add(session.prepare(insertSummaryPS(table, false, i)));
                    insertTransactionList.add(session.prepare(insertSummaryPS(table, true, i)));
                    readTransactionForRollupList
                            .add(session.prepare(readSummaryForRollupPS(table, true, i)));
                } else {
                    Sessions.createTableWithTWCS(session, createTableQuery(table, false, i),
                            expirationHours);
                    Sessions.createTableWithTWCS(session, createTableQuery(table, true, i),
                            expirationHours);
                    insertOverallList.add(session.prepare(insertPS(table, false, i)));
                    insertTransactionList.add(session.prepare(insertPS(table, true, i)));
                    readOverallList.add(session.prepare(readPS(table, false, i)));
        List<PreparedStatement> readNeedsRollup = Lists.newArrayList();
        List<PreparedStatement> deleteNeedsRollup = Lists.newArrayList();
        for (int i = 1; i < count; i++) {
            Sessions.execute(session, "create table if not exists aggregate_needs_rollup_" + i
                    + " (agent_rollup varchar, capture_time timestamp, uniqueness timeuuid,"
                    + " transaction_types set<varchar>, primary key (agent_rollup, capture_time,"
                    + " uniqueness)) with gc_grace_seconds = " + needsRollupGcGraceSeconds + " and "
        this.readNeedsRollup = readNeedsRollup;
        this.deleteNeedsRollup = deleteNeedsRollup;

        Sessions.execute(session, "create table if not exists aggregate_needs_rollup_from_child"
                + " (agent_rollup varchar, capture_time timestamp, uniqueness timeuuid,"
                + " child_agent_rollup varchar, transaction_types set<varchar>,"
                + " primary key (agent_rollup, capture_time, uniqueness))"
public void mergeTransactionSummariesInto(String agentRollupId, OverallQuery que
        BoundStatement boundStatement =
                checkNotNull(readTransactionPS.get(summaryTable)).get(query.rollupLevel()).bind();
        bindQuery(boundStatement, agentRollupId, query);
        ResultSet results = Sessions.execute(session, boundStatement);
        for (Row row : results) {
            int i = 0;
            long captureTime = checkNotNull(row.getTimestamp(i++)).getTime();
public void mergeTransactionErrorSummariesInto(String agentRollupId, OverallQuer
        BoundStatement boundStatement = checkNotNull(readTransactionPS.get(errorSummaryTable))
                .get(query.rollupLevel()).bind();
        bindQuery(boundStatement, agentRollupId, query);
        ResultSet results = Sessions.execute(session, boundStatement);
        for (Row row : results) {
            int i = 0;
            long captureTime = checkNotNull(row.getTimestamp(i++)).getTime();
public boolean hasMainThreadProfile(String agentRollupId, TransactionQuery query
                ? existsMainThreadProfileOverallPS.get(query.rollupLevel()).bind()
                : existsMainThreadProfileTransactionPS.get(query.rollupLevel()).bind();
        bindQuery(boundStatement, agentRollupId, query);
        ResultSet results = Sessions.execute(session, boundStatement);
        return results.one() != null;
    }

public boolean hasAuxThreadProfile(String agentRollupId, TransactionQuery query)
                ? existsAuxThreadProfileOverallPS.get(query.rollupLevel()).bind()
                : existsAuxThreadProfileTransactionPS.get(query.rollupLevel()).bind();
        bindQuery(boundStatement, agentRollupId, query);
        ResultSet results = Sessions.execute(session, boundStatement);
        return results.one() != null;
    }

public boolean shouldHaveAuxThreadProfile(String agentRollupId, TransactionQuery
    void truncateAll() throws Exception {
        for (Table table : allTables) {
            for (int i = 0; i < configRepository.getRollupConfigs().size(); i++) {
                Sessions.execute(session,
                        "truncate " + getTableName(table.partialName(), false, i));
                Sessions.execute(session, "truncate " + getTableName(table.partialName(), true, i));
            }
        }
        for (int i = 1; i < configRepository.getRollupConfigs().size(); i++) {
            Sessions.execute(session, "truncate aggregate_needs_rollup_" + i);
        }
        Sessions.execute(session, "truncate aggregate_needs_rollup_from_child");
    }

    @Instrumentation.Transaction(transactionType = "Background",
private void rollupFromChildren(String agentRollupId, @Nullable String parentAge
                boundStatement.setString(i++, agentRollupId);
                boundStatement.setSet(i++, needsRollupFromChildren.getKeys().keySet());
                boundStatement.setInt(i++, needsRollupAdjustedTTL);
                Sessions.execute(session, boundStatement);
            }
            postRollup(agentRollupId, needsRollupFromChildren.getCaptureTime(),
                    needsRollupFromChildren.getKeys().keySet(),
private void rollup(String agentRollupId, int rollupLevel, int ttl) throws Excep
    }

    private List<ResultSetFuture> rollupOverallSummaryFromRows(RollupParams rollup,
            TransactionQuery query, Iterable<Row> rows) {
        double totalDurationNanos = 0;
        long transactionCount = 0;
        for (Row row : rows) {
private void rollup(String agentRollupId, int rollupLevel, int ttl) throws Excep
    }

    private List<ResultSetFuture> rollupErrorSummaryFromRows(RollupParams rollup,
            TransactionQuery query, Iterable<Row> rows) {
        long errorCount = 0;
        long transactionCount = 0;
        for (Row row : rows) {
private void rollup(String agentRollupId, int rollupLevel, int ttl) throws Excep
        BoundStatement boundStatement = checkNotNull(readTransactionForRollupPS.get(summaryTable))
                .get(query.rollupLevel()).bind();
        bindQuery(boundStatement, rollup.agentRollupId(), query);
        ResultSet results = Sessions.execute(session, boundStatement);
        if (results.isExhausted()) {
            // this is unexpected since TTL for "needs rollup" records is shorter than TTL for data
            logger.warn("no summary table records found for agentRollupId={}, query={}",
private void rollup(String agentRollupId, int rollupLevel, int ttl) throws Excep

    // transactionNames is passed in empty, and populated by method
    private List<ResultSetFuture> rollupTransactionSummaryFromRows(RollupParams rollup,
            TransactionQuery query, Iterable<Row> rows, List<String> transactionNames) {
        BoundStatement boundStatement;
        Map<String, MutableSummary> summaries = Maps.newHashMap();
        for (Row row : rows) {
private void rollup(String agentRollupId, int rollupLevel, int ttl) throws Excep
                checkNotNull(readTransactionForRollupPS.get(errorSummaryTable))
                        .get(query.rollupLevel()).bind();
        bindQuery(boundStatement, rollup.agentRollupId(), query);
        ResultSet results = Sessions.execute(session, boundStatement);
        if (results.isExhausted()) {
            return ImmutableList.of();
        }
private void rollup(String agentRollupId, int rollupLevel, int ttl) throws Excep
    }

    private List<ResultSetFuture> rollupTransactionErrorSummaryFromRows(RollupParams rollup,
            TransactionQuery query, Iterable<Row> rows) {
        BoundStatement boundStatement;
        Map<String, MutableErrorSummary> summaries = Maps.newHashMap();
        for (Row row : rows) {
private void rollup(String agentRollupId, int rollupLevel, int ttl) throws Excep
    }

    private List<ResultSetFuture> rollupOverviewFromRows(RollupParams rollup,
            TransactionQuery query, Iterable<Row> rows) throws IOException {
        double totalDurationNanos = 0;
        long transactionCount = 0;
        boolean asyncTransactions = false;
private void rollup(String agentRollupId, int rollupLevel, int ttl) throws Excep
    }

    private List<ResultSetFuture> rollupThroughputFromRows(RollupParams rollup,
            TransactionQuery query, Iterable<Row> rows) {
        long transactionCount = 0;
        // error_count is null for data inserted prior to glowroot central 0.9.18
        // rolling up any interval with null error_count should result in null error_count
private void rollup(String agentRollupId, int rollupLevel, int ttl) throws Excep
    }

    private List<ResultSetFuture> rollupServiceCallsFromRows(RollupParams rollup,
            TransactionQuery query, Iterable<Row> rows) {
        ServiceCallCollector collector =
                new ServiceCallCollector(rollup.maxAggregateServiceCallsPerType(), 0);
        for (Row row : rows) {
private void rollup(String agentRollupId, int rollupLevel, int ttl) throws Excep

    private List<ResultSetFuture> rollupThreadProfileFromRows(RollupParams rollup,
            TransactionQuery query, Iterable<Row> rows, Table table)
            throws InvalidProtocolBufferException {
        MutableProfile profile = new MutableProfile();
        for (Row row : rows) {
            ByteBuffer bytes = checkNotNull(row.getBytes(0));
private void rollup(String agentRollupId, int rollupLevel, int ttl) throws Excep
            BoundStatement boundStatement =
                    checkNotNull(readTransactionForRollupFromChildPS.get(table)).bind();
            bindQueryForRollupFromChild(boundStatement, childAgentRollup, query);
            for (Row row : Sessions.execute(session, boundStatement)) {
                rows.add(row);
            }
        }
private void rollup(String agentRollupId, int rollupLevel, int ttl) throws Excep

    private List<ResultSetFuture> storeTransactionAggregate(String agentRollupId,
            String transactionType, String transactionName, long captureTime, Aggregate aggregate,
            List<Aggregate.SharedQueryText> sharedQueryTexts, int adjustedTTL) throws IOException {

        final int rollupLevel = 0;

private void rollup(String agentRollupId, int rollupLevel, int ttl) throws Excep

    private List<ResultSetFuture> storeTransactionSummary(String agentRollupId,
            String transactionType, String transactionName, long captureTime, Aggregate aggregate,
            int adjustedTTL) {

        final int rollupLevel = 0;

private void rollup(String agentRollupId, int rollupLevel, int ttl) throws Excep
    private List<ResultSetFuture> insertQueries(List<Aggregate.QueriesByType> queriesByTypeList,
            List<Aggregate.SharedQueryText> sharedQueryTexts, int rollupLevel, String agentRollupId,
            String transactionType, @Nullable String transactionName, long captureTime,
            int adjustedTTL) {
        List<ResultSetFuture> futures = Lists.newArrayList();
        for (Aggregate.QueriesByType queriesByType : queriesByTypeList) {
            for (Aggregate.Query query : queriesByType.getQueryList()) {
private void rollup(String agentRollupId, int rollupLevel, int ttl) throws Excep
    private List<ResultSetFuture> insertServiceCalls(
            List<Aggregate.ServiceCallsByType> serviceCallsByTypeList, int rollupLevel,
            String agentRollupId, String transactionType, @Nullable String transactionName,
            long captureTime, int adjustedTTL) {
        List<ResultSetFuture> futures = Lists.newArrayList();
        for (Aggregate.ServiceCallsByType serviceCallsByType : serviceCallsByTypeList) {
            for (Aggregate.ServiceCall serviceCall : serviceCallsByType.getServiceCallList()) {
private ResultSet createBoundStatement(String agentRollupId, OverallQuery query,
        BoundStatement boundStatement =
                checkNotNull(readOverallPS.get(table)).get(query.rollupLevel()).bind();
        bindQuery(boundStatement, agentRollupId, query);
        return Sessions.execute(session, boundStatement);
    }

    private ResultSet executeQuery(String agentRollupId, TransactionQuery query, Table table)
private ResultSet executeQuery(String agentRollupId, TransactionQuery query, Tab
                    checkNotNull(readTransactionPS.get(table)).get(query.rollupLevel()).bind();
        }
        bindQuery(boundStatement, agentRollupId, query);
        return Sessions.execute(session, boundStatement);
    }

    private ResultSet executeQueryForRollup(String agentRollupId, TransactionQuery query,
private ResultSet executeQueryForRollup(String agentRollupId, TransactionQuery q
                    .get(query.rollupLevel()).bind();
        }
        bindQuery(boundStatement, agentRollupId, query);
        return Sessions.execute(session, boundStatement);
    }

    private List<Row> executeQueryForRollupFromChild(String childAgentRollup,
private ResultSet executeQueryForRollup(String agentRollupId, TransactionQuery q
            boundStatement = checkNotNull(readTransactionForRollupFromChildPS.get(table)).bind();
        }
        bindQueryForRollupFromChild(boundStatement, childAgentRollup, query);
        return Sessions.execute(session, boundStatement).all();
    }

    private void mergeProfilesInto(String agentRollupId, TransactionQuery query, Table profileTable,
static int getNeedsRollupAdjustedTTL(int adjustedTTL, List<RollupConfig> rollupC
            Clock clock) throws Exception {
        BoundStatement boundStatement = readNeedsRollup.get(rollupLevel - 1).bind();
        boundStatement.setString(0, agentRollupId);
        ResultSet results = Sessions.execute(session, boundStatement);
        Map<Long, NeedsRollup> needsRollupMap = Maps.newLinkedHashMap();
        for (Row row : results) {
            int i = 0;
static int getNeedsRollupAdjustedTTL(int adjustedTTL, List<RollupConfig> rollupC
            PreparedStatement readNeedsRollupFromChild, Session session) throws Exception {
        BoundStatement boundStatement = readNeedsRollupFromChild.bind();
        boundStatement.setString(0, agentRollupId);
        ResultSet results = Sessions.execute(session, boundStatement);
        Map<Long, NeedsRollupFromChildren> needsRollupFromChildrenMap = Maps.newLinkedHashMap();
        for (Row row : results) {
            int i = 0;
static void postRollup(String agentRollupId, long captureTime, Set<String> keys,
            boundStatement.setSet(i++, keys);
            boundStatement.setInt(i++, needsRollupAdjustedTTL);
            // intentionally not async, see method-level comment
            Sessions.execute(session, boundStatement);
        }
        List<ResultSetFuture> futures = Lists.newArrayList();
        for (UUID uniqueness : uniquenessKeysForDeletion) {
import com.datastax.driver.core.PreparedStatement;
import com.datastax.driver.core.ResultSet;
import com.datastax.driver.core.Row;
import com.datastax.driver.core.Session;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.common.base.Optional;
import com.google.common.collect.Maps;
import org.glowroot.central.util.Cache;
import org.glowroot.central.util.Cache.CacheLoader;
import org.glowroot.central.util.ClusterManager;
import org.glowroot.central.util.Sessions;
import org.glowroot.common.repo.ConfigRepository.OptimisticLockException;
import org.glowroot.common.util.ObjectMappers;
import org.glowroot.common.util.Versions;
    CentralConfigDao(Session session, ClusterManager clusterManager) throws Exception {
        this.session = session;

        Sessions.execute(session, "create table if not exists central_config (key varchar,"
                + " value varchar, primary key (key)) " + WITH_LCS);

        insertIfNotExistsPS = session
void addKeyType(String key, Class<?> clazz) {
    void write(String key, Object config, String priorVersion) throws Exception {
        BoundStatement boundStatement = readPS.bind();
        boundStatement.bind(key);
        ResultSet results = Sessions.execute(session, boundStatement);
        Row row = results.one();
        if (row == null) {
            writeIfNotExists(key, config);
void write(String key, Object config, String priorVersion) throws Exception {
        boundStatement.setString(i++, newValue);
        boundStatement.setString(i++, key);
        boundStatement.setString(i++, currValue);
        results = Sessions.execute(session, boundStatement);
        row = checkNotNull(results.one());
        boolean applied = row.getBool("[applied]");
        if (applied) {
private void writeIfNotExists(String key, Object config) throws Exception {
        int i = 0;
        boundStatement.setString(i++, key);
        boundStatement.setString(i++, initialValue);
        ResultSet results = Sessions.execute(session, boundStatement);
        Row row = checkNotNull(results.one());
        boolean applied = row.getBool("[applied]");
        if (applied) {
private Object readValue(String key, String value) throws IOException {
        public Optional<Object> load(String key) throws Exception {
            BoundStatement boundStatement = readPS.bind();
            boundStatement.bind(key);
            ResultSet results = Sessions.execute(session, boundStatement);
            Row row = results.one();
            if (row == null) {
                return Optional.absent();
import java.util.List;

import com.datastax.driver.core.KeyspaceMetadata;
import com.datastax.driver.core.Session;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.glowroot.central.util.ClusterManager;
import org.glowroot.common.config.ImmutableUserConfig;
import org.glowroot.common.util.Clock;
import org.glowroot.ui.PasswordHash;
import com.datastax.driver.core.BoundStatement;
import com.datastax.driver.core.PreparedStatement;
import com.datastax.driver.core.Row;
import com.datastax.driver.core.Session;
import com.google.protobuf.ByteString;

import org.glowroot.central.util.Sessions;
import org.glowroot.common.repo.EnvironmentRepository;
import org.glowroot.wire.api.model.CollectorServiceOuterClass.Environment;

    EnvironmentDao(Session session) throws Exception {
        this.session = session;

        Sessions.execute(session, "create table if not exists environment (agent_id varchar,"
                + " environment blob, primary key (agent_id)) " + WITH_LCS);

        insertPS = session.prepare("insert into environment (agent_id, environment) values (?, ?)");
public void insert(String agentId, Environment environment) throws Exception {
        int i = 0;
        boundStatement.setString(i++, agentId);
        boundStatement.setBytes(i++, ByteBuffer.wrap(environment.toByteArray()));
        Sessions.execute(session, boundStatement);
    }

    @Override
    public @Nullable Environment read(String agentId) throws Exception {
        BoundStatement boundStatement = readPS.bind();
        boundStatement.setString(0, agentId);
        Row row = Sessions.execute(session, boundStatement).one();
        if (row == null) {
            return null;
        }
import com.datastax.driver.core.ResultSet;
import com.datastax.driver.core.ResultSetFuture;
import com.datastax.driver.core.Row;
import com.datastax.driver.core.Session;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.Lists;
import com.google.common.primitives.Ints;
import org.slf4j.LoggerFactory;

import org.glowroot.central.util.RateLimiter;
import org.glowroot.central.util.Sessions;
import org.glowroot.common.repo.ConfigRepository;
import org.glowroot.common.repo.ConfigRepository.RollupConfig;
import org.glowroot.common.util.Styles;
        this.configRepository = configRepository;

        // intentionally using default size-tiered compaction strategy
        Sessions.execute(session, "create table if not exists full_query_text_check"
                + " (agent_rollup varchar, full_query_text_sha1 varchar, primary key (agent_rollup,"
                + " full_query_text_sha1))");
        Sessions.execute(session, "create table if not exists full_query_text"
                + " (full_query_text_sha1 varchar, full_query_text varchar, primary key"
                + " (full_query_text_sha1))");

String getFullText(String agentRollupId, String fullTextSha1) throws Exception {
        BoundStatement boundStatement = readCheckPS.bind();
        boundStatement.setString(0, agentRollupId);
        boundStatement.setString(1, fullTextSha1);
        ResultSet results = Sessions.execute(session, boundStatement);
        if (results.isExhausted()) {
            return null;
        }
        boundStatement = readPS.bind();
        boundStatement.setString(0, fullTextSha1);
        results = Sessions.execute(session, boundStatement);
        Row row = results.one();
        if (row == null) {
            return null;
String getFullText(String agentRollupId, String fullTextSha1) throws Exception {
        }
        BoundStatement boundStatement = readPS.bind();
        boundStatement.setString(0, fullTextSha1);
        ResultSet results = Sessions.execute(session, boundStatement);
        Row row = results.one();
        if (row == null) {
            // this shouldn't happen any more now that full query text insert futures are waited on
String getFullText(String agentRollupId, String fullTextSha1) throws Exception {
        boundStatement.setString(i++, rateLimiterKey.fullTextSha1());
        boundStatement.setString(i++, fullText);
        boundStatement.setInt(i++, getTTL());
        futures.add(Sessions.executeAsyncWithOnFailure(session, boundStatement,
                () -> rateLimiter.invalidate(rateLimiterKey)));
        return futures;
    }
private ResultSetFuture storeCheckInternal(FullQueryTextKey rateLimiterKey) thro
        boundStatement.setString(i++, rateLimiterKey.agentRollupId());
        boundStatement.setString(i++, rateLimiterKey.fullTextSha1());
        boundStatement.setInt(i++, getTTL());
        return Sessions.executeAsyncWithOnFailure(session, boundStatement,
                () -> rateLimiter.invalidate(rateLimiterKey));
    }

import com.datastax.driver.core.ResultSet;
import com.datastax.driver.core.ResultSetFuture;
import com.datastax.driver.core.Row;
import com.datastax.driver.core.Session;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.Lists;
import com.google.common.primitives.Ints;
import org.glowroot.central.util.Cache.CacheLoader;
import org.glowroot.central.util.ClusterManager;
import org.glowroot.central.util.RateLimiter;
import org.glowroot.central.util.Sessions;
import org.glowroot.common.repo.ConfigRepository;
import org.glowroot.common.util.Styles;

        this.session = session;
        this.configRepository = configRepository;

        Sessions.execute(session, "create table if not exists gauge_name (agent_rollup varchar,"
                + " gauge_name varchar, primary key (agent_rollup, gauge_name)) " + WITH_LCS);

        insertPS = session.prepare("insert into gauge_name (agent_rollup, gauge_name)"
        boundStatement.setString(i++, agentRollupId);
        boundStatement.setString(i++, gaugeName);
        boundStatement.setInt(i++, getMaxTTL());
        ResultSetFuture future = Sessions.executeAsyncWithOnFailure(session, boundStatement,
                () -> rateLimiter.invalidate(rateLimiterKey));
        future.addListener(() -> gaugeNamesCache.invalidate(agentRollupId),
                MoreExecutors.directExecutor());
private int getMaxTTL() throws Exception {
        public List<String> load(String agentRollupId) throws Exception {
            BoundStatement boundStatement = readPS.bind();
            boundStatement.setString(0, agentRollupId);
            ResultSet results = Sessions.execute(session, boundStatement);
            List<String> gaugeNames = Lists.newArrayList();
            for (Row row : results) {
                gaugeNames.add(checkNotNull(row.getString(0)));
import com.datastax.driver.core.ResultSet;
import com.datastax.driver.core.ResultSetFuture;
import com.datastax.driver.core.Row;
import com.datastax.driver.core.Session;
import com.datastax.driver.core.utils.UUIDs;
import com.google.common.collect.HashMultimap;
import com.google.common.collect.ImmutableList;
import org.glowroot.central.util.ClusterManager;
import org.glowroot.central.util.DummyResultSet;
import org.glowroot.central.util.MoreFutures;
import org.glowroot.central.util.Sessions;
import org.glowroot.common.repo.ConfigRepository;
import org.glowroot.common.repo.ConfigRepository.RollupConfig;
import org.glowroot.common.repo.GaugeValueRepository;
        List<PreparedStatement> readValueForRollupPS = Lists.newArrayList();
        for (int i = 0; i <= count; i++) {
            // name already has "[counter]" suffix when it is a counter
            Sessions.createTableWithTWCS(session, "create table if not exists gauge_value_rollup_"
                    + i + " (agent_rollup varchar, gauge_name varchar, capture_time timestamp,"
                    + " value double, weight bigint, primary key ((agent_rollup, gauge_name),"
                    + " capture_time))", rollupExpirationHours.get(i));
            insertValuePS.add(session.prepare("insert into gauge_value_rollup_" + i
        List<PreparedStatement> readNeedsRollup = Lists.newArrayList();
        List<PreparedStatement> deleteNeedsRollup = Lists.newArrayList();
        for (int i = 1; i <= count; i++) {
            Sessions.execute(session, "create table if not exists gauge_needs_rollup_" + i
                    + " (agent_rollup varchar, capture_time timestamp, uniqueness timeuuid,"
                    + " gauge_names set<varchar>, primary key (agent_rollup, capture_time,"
                    + " uniqueness)) with gc_grace_seconds = " + needsRollupGcGraceSeconds + " and "
        this.readNeedsRollup = readNeedsRollup;
        this.deleteNeedsRollup = deleteNeedsRollup;

        Sessions.execute(session, "create table if not exists gauge_needs_rollup_from_child"
                + " (agent_rollup varchar, capture_time timestamp, uniqueness timeuuid,"
                + " child_agent_rollup varchar, gauge_names set<varchar>,"
                + " primary key (agent_rollup, capture_time, uniqueness))"
public void store(String agentId, List<GaugeValue> gaugeValues) throws Exception
        boundStatement.setString(i++, gaugeName);
        boundStatement.setTimestamp(i++, new Date(from));
        boundStatement.setTimestamp(i++, new Date(to));
        ResultSet results = Sessions.execute(session, boundStatement);
        List<GaugeValue> gaugeValues = Lists.newArrayList();
        for (Row row : results) {
            i = 0;
private void rollupFromChildren(String agentRollupId, @Nullable String parentAge
                boundStatement.setString(i++, agentRollupId);
                boundStatement.setSet(i++, needsRollupFromChildren.getKeys().keySet());
                boundStatement.setInt(i++, needsRollupAdjustedTTL);
                Sessions.execute(session, boundStatement);
            }
            AggregateDao.postRollup(agentRollupId, needsRollupFromChildren.getCaptureTime(),
                    needsRollupFromChildren.getKeys().keySet(),
private void rollup(String agentRollupId, @Nullable String parentAgentRollupId,
                boundStatement.setString(i++, agentRollupId);
                boundStatement.setSet(i++, gaugeNames);
                boundStatement.setInt(i++, needsRollupAdjustedTTL);
                Sessions.execute(session, boundStatement);
            }
            PreparedStatement insertNeedsRollup = nextRollupIntervalMillis == null ? null
                    : this.insertNeedsRollup.get(rollupLevel);
private void rollup(String agentRollupId, @Nullable String parentAgentRollupId,
    }

    private ListenableFuture<ResultSet> rollupOneFromChildren(int rollupLevel, String agentRollupId,
            String gaugeName, List<String> childAgentRollups, long captureTime, int adjustedTTL) {
        List<ListenableFuture<ResultSet>> futures = Lists.newArrayList();
        for (String childAgentRollup : childAgentRollups) {
            BoundStatement boundStatement = readValueForRollupFromChildPS.bind();
private void rollup(String agentRollupId, @Nullable String parentAgentRollupId,

    // from is non-inclusive
    private ListenableFuture<ResultSet> rollupOne(int rollupLevel, String agentRollupId,
            String gaugeName, long from, long to, int adjustedTTL) {
        BoundStatement boundStatement = readValueForRollupPS.get(rollupLevel - 1).bind();
        int i = 0;
        boundStatement.setString(i++, agentRollupId);
private void rollup(String agentRollupId, @Nullable String parentAgentRollupId,
    }

    private ListenableFuture<ResultSet> rollupOneFromRows(int rollupLevel, String agentRollupId,
            String gaugeName, long to, int adjustedTTL, Iterable<Row> rows) {
        double totalWeightedValue = 0;
        long totalWeight = 0;
        for (Row row : rows) {
private void rollup(String agentRollupId, @Nullable String parentAgentRollupId,
    @OnlyUsedByTests
    void truncateAll() throws Exception {
        for (int i = 0; i <= configRepository.getRollupConfigs().size(); i++) {
            Sessions.execute(session, "truncate gauge_value_rollup_" + i);
        }
        for (int i = 1; i <= configRepository.getRollupConfigs().size(); i++) {
            Sessions.execute(session, "truncate gauge_needs_rollup_" + i);
        }
        Sessions.execute(session, "truncate gauge_name");
        Sessions.execute(session, "truncate gauge_needs_rollup_from_child");
    }

    private static List<Integer> getRollupExpirationHours(ConfigRepository configRepository)

import com.datastax.driver.core.BoundStatement;
import com.datastax.driver.core.PreparedStatement;
import com.datastax.driver.core.Session;

import org.glowroot.central.util.Sessions;
import org.glowroot.common.util.Clock;

import static java.util.concurrent.TimeUnit.HOURS;
        this.agentRollupDao = agentRollupDao;
        this.clock = clock;

        Sessions.createTableWithTWCS(session, "create table if not exists heartbeat"
                + " (agent_id varchar, central_capture_time timestamp, primary key (agent_id,"
                + " central_capture_time))", 24);
        insertPS = session.prepare(
                "insert into heartbeat (agent_id, central_capture_time) values (?, ?) using ttl ?");
        existsPS = session.prepare("select central_capture_time from heartbeat where agent_id = ?"
public void store(String agentId) throws Exception {
            boundStatement.setString(i++, agentRollupId);
            boundStatement.setTimestamp(i++, new Date(clock.currentTimeMillis()));
            boundStatement.setInt(i++, TTL);
            Sessions.execute(session, boundStatement);
        }
    }

public boolean exists(String agentRollupId, long centralCaptureFrom, long centra
        boundStatement.setString(i++, agentRollupId);
        boundStatement.setTimestamp(i++, new Date(centralCaptureFrom));
        boundStatement.setTimestamp(i++, new Date(centralCaptureTo));
        return !Sessions.execute(session, boundStatement).isExhausted();
    }
}
import com.datastax.driver.core.PreparedStatement;
import com.datastax.driver.core.ResultSet;
import com.datastax.driver.core.Row;
import com.datastax.driver.core.Session;
import com.google.common.base.Optional;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;

import org.glowroot.central.util.Cache;
import org.glowroot.central.util.Cache.CacheLoader;
import org.glowroot.central.util.ClusterManager;
import org.glowroot.central.util.Sessions;
import org.glowroot.common.config.ImmutableRoleConfig;
import org.glowroot.common.config.RoleConfig;
import org.glowroot.common.repo.ConfigRepository.DuplicateRoleNameException;

        boolean createAnonymousRole = keyspaceMetadata.getTable("role") == null;

        Sessions.execute(session, "create table if not exists role (name varchar,"
                + " permissions set<varchar>, primary key (name)) " + WITH_LCS);

        readPS = session.prepare("select name, permissions from role");
                    ImmutableSet.of("agent:*:transaction", "agent:*:error", "agent:*:jvm",
                            "agent:*:syntheticMonitor", "agent:*:incident", "agent:*:config",
                            "admin"));
            Sessions.execute(session, boundStatement);
        }

        roleConfigCache =
RoleConfig read(String name) throws Exception {
    void delete(String name) throws Exception {
        BoundStatement boundStatement = deletePS.bind();
        boundStatement.setString(0, name);
        Sessions.execute(session, boundStatement);
        roleConfigCache.invalidate(name);
        allRoleConfigsCache.invalidate(ALL_ROLES_SINGLE_CACHE_KEY);
    }

    void insert(RoleConfig userConfig) throws Exception {
        BoundStatement boundStatement = insertPS.bind();
        bindInsert(boundStatement, userConfig);
        Sessions.execute(session, boundStatement);
        roleConfigCache.invalidate(userConfig.name());
        allRoleConfigsCache.invalidate(ALL_ROLES_SINGLE_CACHE_KEY);

void insert(RoleConfig userConfig) throws Exception {
    void insertIfNotExists(RoleConfig userConfig) throws Exception {
        BoundStatement boundStatement = insertIfNotExistsPS.bind();
        bindInsert(boundStatement, userConfig);
        ResultSet results = Sessions.execute(session, boundStatement);
        Row row = checkNotNull(results.one());
        boolean applied = row.getBool("[applied]");
        if (applied) {
private static ImmutableRoleConfig buildRole(Row row) {
        public Optional<RoleConfig> load(String name) throws Exception {
            BoundStatement boundStatement = readOnePS.bind();
            boundStatement.setString(0, name);
            ResultSet results = Sessions.execute(session, boundStatement);
            if (results.isExhausted()) {
                return Optional.absent();
            }
private static ImmutableRoleConfig buildRole(Row row) {
    private class AllRolesCacheLoader implements CacheLoader<String, List<RoleConfig>> {
        @Override
        public List<RoleConfig> load(String dummy) throws Exception {
            ResultSet results = Sessions.execute(session, readPS.bind());
            List<RoleConfig> users = Lists.newArrayList();
            for (Row row : results) {
                users.add(buildRole(row));
import com.datastax.driver.core.PreparedStatement;
import com.datastax.driver.core.ResultSet;
import com.datastax.driver.core.Row;
import com.datastax.driver.core.Session;
import com.datastax.driver.core.TableMetadata;
import com.datastax.driver.core.exceptions.InvalidConfigurationInQueryException;
import com.datastax.driver.core.exceptions.NoHostAvailableException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.glowroot.central.util.Sessions;
import org.glowroot.common.config.CentralStorageConfig;
import org.glowroot.common.config.ConfigDefaults;
import org.glowroot.common.config.ImmutableCentralWebConfig;
public SchemaUpgrade(Session session, KeyspaceMetadata keyspaceMetadata, boolean
        this.keyspaceMetadata = keyspaceMetadata;
        this.servlet = servlet;

        Sessions.execute(session, "create table if not exists schema_version (one int,"
                + " schema_version int, primary key (one)) " + WITH_LCS);
        insertPS =
                session.prepare("insert into schema_version (one, schema_version) values (?, ?)");
public void updateToMoreRecentCassandraOptions(CentralStorageConfig storageConfi

        int snappyUpdatedCount = 0;
        for (String tableName : snappyTableNames) {
            Sessions.execute(session, "alter table " + tableName
                    + " with compression = { 'class' : 'LZ4Compressor' }");
            if (snappyUpdatedCount++ == 0) {
                startupLogger.info("upgrading from Snappy to LZ4 compression ...");
public void updateToMoreRecentCassandraOptions(CentralStorageConfig storageConfi
                // compaction_window_size pair that produces approximately 20-30 windows"
                // (http://cassandra.apache.org/doc/latest/operating/compaction.html)
                int windowSizeHours = expirationHours / 24;
                Sessions.execute(session, "alter table " + tableName + " with compaction"
                        + " = { 'class' : 'TimeWindowCompactionStrategy', 'compaction_window_unit'"
                        + " : 'HOURS', 'compaction_window_size' : '" + windowSizeHours + "' }");
                if (dtcsUpdatedCount++ == 0) {
public void updateToMoreRecentCassandraOptions(CentralStorageConfig storageConfi
            // compaction_window_size pair that produces approximately 20-30 windows"
            // (http://cassandra.apache.org/doc/latest/operating/compaction.html)
            int windowSizeHours = expirationHours / 24;
            Sessions.execute(session, "alter table " + tableName + " with compaction = { 'class' :"
                    + " 'TimeWindowCompactionStrategy', 'compaction_window_unit' : 'HOURS',"
                    + " 'compaction_window_size' : '" + windowSizeHours + "' }");
            if (twcsUpdatedCount++ == 0) {
private void updateSchemaVersion(int schemaVersion) throws Exception {
        BoundStatement boundStatement = insertPS.bind();
        boundStatement.setInt(0, 1);
        boundStatement.setInt(1, schemaVersion);
        Sessions.execute(session, boundStatement);
    }

    private void renameAgentColumnFromSystemInfoToEnvironment() throws Exception {
private void renameAgentColumnFromSystemInfoToEnvironment() throws Exception {
            return;
        }
        addColumnIfNotExists("agent", "environment", "blob");
        ResultSet results = Sessions.execute(session, "select agent_id, system_info from agent");
        PreparedStatement preparedStatement =
                session.prepare("insert into agent (agent_id, environment) values (?, ?)");
        for (Row row : results) {
            BoundStatement boundStatement = preparedStatement.bind();
            boundStatement.setString(0, row.getString(0));
            boundStatement.setBytes(1, row.getBytes(1));
            Sessions.execute(session, boundStatement);
        }
        Sessions.execute(session, "alter table agent drop system_info");
    }

    private void updateRoles() throws Exception {
        PreparedStatement insertPS =
                session.prepare("insert into role (name, permissions) values (?, ?)");
        ResultSet results = Sessions.execute(session, "select name, permissions from role");
        for (Row row : results) {
            String name = row.getString(0);
            Set<String> permissions = row.getSet(1, String.class);
private void updateRoles() throws Exception {
            BoundStatement boundStatement = insertPS.bind();
            boundStatement.setString(0, name);
            boundStatement.setSet(1, upgradedPermissions, String.class);
            Sessions.execute(session, boundStatement);
        }
    }

private void revertCompressionChunkLength() throws Exception {
        try {
            // try with compression options for Cassandra 3.x
            // see https://docs.datastax.com/en/cql/3.3/cql/cql_reference/compressSubprop.html
            Sessions.execute(session, "alter table trace_entry with compression = {'class':"
                    + " 'org.apache.cassandra.io.compress.LZ4Compressor', 'chunk_length_kb' :"
                    + " 64};");
        } catch (InvalidConfigurationInQueryException e) {
            logger.debug(e.getMessage(), e);
            // try with compression options for Cassandra 2.x
            // see https://docs.datastax.com/en/cql/3.1/cql/cql_reference/compressSubprop.html
            Sessions.execute(session, "alter table trace_entry with compression"
                    + " = {'sstable_compression': 'SnappyCompressor', 'chunk_length_kb' : 64};");
        }
    }
private void renameServerConfigTable() throws Exception {
            // previously failed mid-upgrade prior to updating schema version
            return;
        }
        Sessions.execute(session, "create table if not exists central_config (key varchar,"
                + " value varchar, primary key (key)) " + WITH_LCS);
        ResultSet results = Sessions.execute(session, "select key, value from server_config");
        PreparedStatement insertPS =
                session.prepare("insert into central_config (key, value) values (?, ?)");
        for (Row row : results) {
            BoundStatement boundStatement = insertPS.bind();
            boundStatement.setString(0, row.getString(0));
            boundStatement.setString(1, row.getString(1));
            Sessions.execute(session, boundStatement);
        }
        dropTable("server_config");
    }
private void addAgentOneTable() throws Exception {
            // previously failed mid-upgrade prior to updating schema version
            return;
        }
        Sessions.execute(session, "create table if not exists agent_one (one int, agent_id varchar,"
                + " agent_rollup varchar, primary key (one, agent_id)) " + WITH_LCS);
        ResultSet results = Sessions.execute(session, "select agent_rollup from agent_rollup");
        PreparedStatement insertPS =
                session.prepare("insert into agent_one (one, agent_id) values (1, ?)");
        for (Row row : results) {
            BoundStatement boundStatement = insertPS.bind();
            boundStatement.setString(0, row.getString(0));
            Sessions.execute(session, boundStatement);
        }
        dropTable("agent_rollup");
    }
private void updateDtcsTwcsGcSeconds() throws Exception {
                            "org.apache.cassandra.db.compaction.TimeWindowCompactionStrategy")) {
                // see gc_grace_seconds related comments in Sessions.createTableWithTWCS()
                // for reasoning behind the value of 1 day
                Sessions.execute(session,
                        "alter table " + table.getName() + " with gc_grace_seconds = "
                                + DAYS.toSeconds(1));
            }
        }
    }
private void updateGcSeconds() throws Exception {
        long gcGraceSeconds = HOURS.toSeconds(3);

        if (tableExists("aggregate_needs_rollup_from_child")) {
            Sessions.execute(session,
                    "alter table aggregate_needs_rollup_from_child with gc_grace_seconds = "
                            + gcGraceSeconds);
        }
        Sessions.execute(session,
                "alter table aggregate_needs_rollup_1 with gc_grace_seconds = " + gcGraceSeconds);
        Sessions.execute(session,
                "alter table aggregate_needs_rollup_2 with gc_grace_seconds = " + gcGraceSeconds);
        Sessions.execute(session,
                "alter table aggregate_needs_rollup_3 with gc_grace_seconds = " + gcGraceSeconds);
        if (tableExists("gauge_needs_rollup_from_child")) {
            Sessions.execute(session,
                    "alter table gauge_needs_rollup_from_child with gc_grace_seconds = "
                            + gcGraceSeconds);
        }
        Sessions.execute(session,
                "alter table gauge_needs_rollup_1 with gc_grace_seconds = " + gcGraceSeconds);
        Sessions.execute(session,
                "alter table gauge_needs_rollup_2 with gc_grace_seconds = " + gcGraceSeconds);
        Sessions.execute(session,
                "alter table gauge_needs_rollup_3 with gc_grace_seconds = " + gcGraceSeconds);
        Sessions.execute(session,
                "alter table gauge_needs_rollup_4 with gc_grace_seconds = " + gcGraceSeconds);
    }

private void updateAgentRollup() throws Exception {
            // previously failed mid-upgrade prior to updating schema version
            return;
        }
        Sessions.execute(session, "create table if not exists agent_rollup (one int,"
                + " agent_rollup_id varchar, parent_agent_rollup_id varchar, agent boolean,"
                + " display varchar, last_capture_time timestamp, primary key (one,"
                + " agent_rollup_id)) " + WITH_LCS);
        ResultSet results =
                Sessions.execute(session, "select agent_id, agent_rollup from agent_one");
        PreparedStatement insertPS = session.prepare("insert into agent_rollup (one,"
                + " agent_rollup_id, parent_agent_rollup_id, agent) values (1, ?, ?, ?)");
        Set<String> parentAgentRollupIds = Sets.newHashSet();
private void updateAgentRollup() throws Exception {
            boundStatement.setString(i++, agentRollupId);
            boundStatement.setString(i++, parentAgentRollupId);
            boundStatement.setBool(i++, true);
            Sessions.execute(session, boundStatement);
            if (parentAgentRollupId != null) {
                parentAgentRollupIds.addAll(AgentRollupDao.getAgentRollupIds(parentAgentRollupId));
            }
private void updateAgentRollup() throws Exception {
            boundStatement.setString(i++, parentAgentRollupId);
            boundStatement.setString(i++, parentOfParentAgentRollupId);
            boundStatement.setBool(i++, false);
            Sessions.execute(session, boundStatement);
        }
        Sessions.execute(session, "alter table agent drop agent_rollup");
        dropTable("agent_one");
    }

private void addTracePointPartialColumn() throws Exception {
    }

    private void splitUpAgentTable() throws Exception {
        Sessions.execute(session, "create table if not exists config (agent_rollup_id varchar,"
                + " config blob, config_update boolean, config_update_token uuid, primary key"
                + " (agent_rollup_id)) " + WITH_LCS);
        Sessions.execute(session, "create table if not exists environment (agent_id varchar,"
                + " environment blob, primary key (agent_id)) " + WITH_LCS);

        ResultSet results = Sessions.execute(session,
                "select agent_rollup_id, agent from agent_rollup where one = 1");
        List<String> agentIds = Lists.newArrayList();
        for (Row row : results) {
            if (row.getBool(1)) {
private void splitUpAgentTable() throws Exception {
        for (String agentId : agentIds) {
            BoundStatement boundStatement = readPS.bind();
            boundStatement.setString(0, agentId);
            results = Sessions.execute(session, boundStatement);
            Row row = results.one();
            if (row == null) {
                logger.warn("agent record not found for agent id: {}", agentId);
private void splitUpAgentTable() throws Exception {
            boundStatement = insertEnvironmentPS.bind();
            boundStatement.setString(0, agentId);
            boundStatement.setBytes(1, environmentBytes);
            Sessions.execute(session, boundStatement);

            boundStatement = insertConfigPS.bind();
            i = 0;
            boundStatement.setString(i++, agentId);
            boundStatement.setBytes(i++, configBytes);
            boundStatement.setBool(i++, configUpdate);
            boundStatement.setUUID(i++, configUpdateToken);
            Sessions.execute(session, boundStatement);
        }
        dropTable("agent");
    }

    private void initialPopulationOfConfigForRollups() throws Exception {
        ResultSet results = Sessions.execute(session, "select agent_rollup_id,"
                + " parent_agent_rollup_id, agent from agent_rollup where one = 1");
        List<String> agentRollupIds = Lists.newArrayList();
        Multimap<String, String> childAgentIds = ArrayListMultimap.create();
private void initialPopulationOfConfigForRollups() throws Exception {
                BoundStatement boundStatement = insertPS.bind();
                boundStatement.setString(0, agentRollupId);
                boundStatement.setBytes(1, ByteBuffer.wrap(defaultAgentConfig.toByteArray()));
                Sessions.execute(session, boundStatement);
                continue;
            }
            String childAgentId = iterator.next();
            BoundStatement boundStatement = readPS.bind();
            boundStatement.setString(0, childAgentId);
            Row row = Sessions.execute(session, boundStatement).one();

            boundStatement = insertPS.bind();
            boundStatement.setString(0, agentRollupId);
private void initialPopulationOfConfigForRollups() throws Exception {
                    boundStatement.setBytes(1, ByteBuffer.wrap(defaultAgentConfig.toByteArray()));
                }
            }
            Sessions.execute(session, boundStatement);
        }
    }

private void redoOnTriggeredAlertTable() throws Exception {
            return;
        }
        dropTable("triggered_alert");
        Sessions.execute(session, "create table if not exists triggered_alert"
                + " (agent_rollup_id varchar, alert_config_id varchar, primary key"
                + " (agent_rollup_id, alert_config_id)) " + WITH_LCS);
    }

    private void addSyntheticMonitorAndAlertPermissions() throws Exception {
        PreparedStatement insertPS =
                session.prepare("insert into role (name, permissions) values (?, ?)");
        ResultSet results = Sessions.execute(session, "select name, permissions from role");
        for (Row row : results) {
            String name = row.getString(0);
            Set<String> permissions = row.getSet(1, String.class);
private void addSyntheticMonitorAndAlertPermissions() throws Exception {
            BoundStatement boundStatement = insertPS.bind();
            boundStatement.setString(0, name);
            boundStatement.setSet(1, permissions, String.class);
            Sessions.execute(session, boundStatement);
        }
    }

private void anotherRedoOnTriggeredAlertTable() throws Exception {
            return;
        }
        dropTable("triggered_alert");
        Sessions.execute(session, "create table if not exists triggered_alert (agent_rollup_id"
                + " varchar, alert_id varchar, primary key (agent_rollup_id, alert_id)) "
                + WITH_LCS);
    }

    private void yetAnotherRedoOnTriggeredAlertTable() throws Exception {
        dropTable("triggered_alert");
        Sessions.execute(session, "create table if not exists triggered_alert (agent_rollup_id"
                + " varchar, alert_condition blob, primary key (agent_rollup_id, alert_condition)) "
                + WITH_LCS);
    }

    private void updateWebConfig() throws Exception {
        ResultSet results =
                Sessions.execute(session, "select value from central_config where key = 'web'");
        Row row = results.one();
        JsonNode webConfigNode;
        if (row == null) {
private void updateWebConfig() throws Exception {
                session.prepare("insert into central_config (key, value) values ('web', ?)");
        BoundStatement boundStatement = preparedStatement.bind();
        boundStatement.setString(0, updatedWebConfigText);
        Sessions.execute(session, boundStatement);
    }

    private void removeInvalidAgentRollupRows() throws Exception {
        ResultSet results =
                Sessions.execute(session, "select agent_rollup_id, agent from agent_rollup");
        PreparedStatement deletePS =
                session.prepare("delete from agent_rollup where one = 1 and agent_rollup_id = ?");
        for (Row row : results) {
            if (row.isNull(1)) {
                BoundStatement boundStatement = deletePS.bind();
                boundStatement.setString(0, checkNotNull(row.getString(0)));
                Sessions.execute(session, boundStatement);
            }
        }
    }
private void renameConfigTable() throws Exception {
            // previously failed mid-upgrade prior to updating schema version
            return;
        }
        Sessions.execute(session, "create table if not exists agent_config (agent_rollup_id"
                + " varchar, config blob, config_update boolean, config_update_token uuid,"
                + " primary key (agent_rollup_id)) " + WITH_LCS);
        ResultSet results = Sessions.execute(session, "select agent_rollup_id, config,"
                + " config_update, config_update_token from config");
        PreparedStatement insertPS =
                session.prepare("insert into agent_config (agent_rollup_id, config, config_update,"
private void renameConfigTable() throws Exception {
            boundStatement.setBytes(1, row.getBytes(1));
            boundStatement.setBool(2, row.getBool(2));
            boundStatement.setUUID(3, row.getUUID(3));
            Sessions.execute(session, boundStatement);
        }
        dropTable("config");
    }
private void upgradeAlertConfigs() throws Exception {
        PreparedStatement insertPS = session.prepare("insert into agent_config (agent_rollup_id,"
                + " config, config_update, config_update_token) values (?, ?, ?, ?)");
        BoundStatement boundStatement = readPS.bind();
        ResultSet results = Sessions.execute(session, boundStatement);
        for (Row row : results) {
            String agentRollupId = row.getString(0);
            AgentConfig oldAgentConfig;
private void upgradeAlertConfigs() throws Exception {
            boundStatement = insertPS.bind();
            boundStatement.setString(0, agentRollupId);
            boundStatement.setBytes(1, ByteBuffer.wrap(agentConfig.toByteArray()));
            Sessions.execute(session, boundStatement);
        }
    }

private void addAggregateThroughputColumn() throws Exception {
    private void updateRolePermissionName() throws Exception {
        PreparedStatement insertPS =
                session.prepare("insert into role (name, permissions) values (?, ?)");
        ResultSet results = Sessions.execute(session, "select name, permissions from role");
        for (Row row : results) {
            String name = row.getString(0);
            Set<String> permissions = row.getSet(1, String.class);
private void updateRolePermissionName() throws Exception {
                BoundStatement boundStatement = insertPS.bind();
                boundStatement.setString(0, name);
                boundStatement.setSet(1, upgradedPermissions, String.class);
                Sessions.execute(session, boundStatement);
            }
        }
    }

    private void updateSmtpConfig() throws Exception {
        ResultSet results =
                Sessions.execute(session, "select value from central_config where key = 'smtp'");
        Row row = results.one();
        if (row == null) {
            return;
private void updateSmtpConfig() throws Exception {
                session.prepare("insert into central_config (key, value) values ('web', ?)");
        BoundStatement boundStatement = preparedStatement.bind();
        boundStatement.setString(0, updatedWebConfigText);
        Sessions.execute(session, boundStatement);
    }

    private void addColumnIfNotExists(String tableName, String columnName, String cqlType)
            throws Exception {
        if (!columnExists(tableName, columnName)) {
            Sessions.execute(session,
                    "alter table " + tableName + " add " + columnName + " " + cqlType);
        }
    }

private void dropTable(String tableName) throws Exception {
        Stopwatch stopwatch = Stopwatch.createStarted();
        while (stopwatch.elapsed(SECONDS) < 30) {
            try {
                Sessions.execute(session, "drop table if exists " + tableName);
                return;
            } catch (NoHostAvailableException e) {
                logger.debug(e.getMessage(), e);
            }
            Thread.sleep(1000);
        }
        // try one last time and let exception bubble up
        Sessions.execute(session, "drop table if exists " + tableName);
    }

    public static AgentConfig upgradeOldAgentConfig(AgentConfig oldAgentConfig) {
private static boolean updateCentralConfigurationPropertiesFile(JsonNode webConf

    private static @Nullable Integer getSchemaVersion(Session session, KeyspaceMetadata keyspace)
            throws Exception {
        ResultSet results = Sessions.execute(session,
                "select schema_version from schema_version where one = 1");
        Row row = results.one();
        if (row != null) {
            return row.getInt(0);
import com.datastax.driver.core.PreparedStatement;
import com.datastax.driver.core.ResultSet;
import com.datastax.driver.core.Row;
import com.datastax.driver.core.Session;
import com.datastax.driver.core.utils.UUIDs;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSet;
import org.glowroot.central.repo.AggregateDao.NeedsRollup;
import org.glowroot.central.util.DummyResultSet;
import org.glowroot.central.util.MoreFutures;
import org.glowroot.central.util.Sessions;
import org.glowroot.common.repo.ConfigRepository;
import org.glowroot.common.repo.ConfigRepository.RollupConfig;
import org.glowroot.common.repo.ImmutableSyntheticResult;
        List<PreparedStatement> readResultPS = Lists.newArrayList();
        List<PreparedStatement> readResultForRollupPS = Lists.newArrayList();
        for (int i = 0; i < count; i++) {
            Sessions.createTableWithTWCS(session, "create table if not exists"
                    + " synthetic_result_rollup_" + i + " (agent_rollup_id varchar,"
                    + " synthetic_config_id varchar, capture_time timestamp,"
                    + " total_duration_nanos double, execution_count bigint, error_count bigint,"
                    + " primary key ((agent_rollup_id, synthetic_config_id), capture_time))",
                    rollupExpirationHours.get(i));
            insertResultPS.add(session.prepare("insert into synthetic_result_rollup_" + i
                    + " (agent_rollup_id, synthetic_config_id, capture_time, total_duration_nanos,"
                    + " execution_count, error_count) values (?, ?, ?, ?, ?, ?) using ttl ?"));
        List<PreparedStatement> readNeedsRollup = Lists.newArrayList();
        List<PreparedStatement> deleteNeedsRollup = Lists.newArrayList();
        for (int i = 1; i < count; i++) {
            Sessions.execute(session, "create table if not exists synthetic_needs_rollup_" + i
                    + " (agent_rollup_id varchar, capture_time timestamp, uniqueness timeuuid,"
                    + " synthetic_config_ids set<varchar>, primary key (agent_rollup_id,"
                    + " capture_time, uniqueness)) with gc_grace_seconds = "
public void store(String agentId, String syntheticMonitorId, long captureTime,
        boundStatement.setLong(i++, error ? 1 : 0);
        boundStatement.setInt(i++, adjustedTTL);
        // wait for success before inserting "needs rollup" records
        Sessions.execute(session, boundStatement);

        // insert into synthetic_needs_rollup_1
        List<RollupConfig> rollupConfigs = configRepository.getRollupConfigs();
public void store(String agentId, String syntheticMonitorId, long captureTime,
        boundStatement.setUUID(i++, UUIDs.timeBased());
        boundStatement.setSet(i++, ImmutableSet.of(syntheticMonitorId));
        boundStatement.setInt(i++, needsRollupAdjustedTTL);
        Sessions.execute(session, boundStatement);
    }

    // from is INCLUSIVE
public void store(String agentId, String syntheticMonitorId, long captureTime,
        boundStatement.setString(i++, syntheticMonitorId);
        boundStatement.setTimestamp(i++, new Date(from));
        boundStatement.setTimestamp(i++, new Date(to));
        ResultSet results = Sessions.execute(session, boundStatement);
        List<SyntheticResult> syntheticResults = Lists.newArrayList();
        for (Row row : results) {
            i = 0;
private void rollup(String agentRollupId, int rollupLevel, int ttl) throws Excep

    // from is non-inclusive
    private ListenableFuture<ResultSet> rollupOne(int rollupLevel, String agentRollupId,
            String syntheticMonitorId, long from, long to, int adjustedTTL) {
        BoundStatement boundStatement = readResultForRollupPS.get(rollupLevel - 1).bind();
        int i = 0;
        boundStatement.setString(i++, agentRollupId);
private void rollup(String agentRollupId, int rollupLevel, int ttl) throws Excep
    }

    private ListenableFuture<ResultSet> rollupOneFromRows(int rollupLevel, String agentRollupId,
            String syntheticMonitorId, long to, int adjustedTTL, Iterable<Row> rows) {
        double totalDurationNanos = 0;
        long executionCount = 0;
        long errorCount = 0;
private void rollup(String agentRollupId, int rollupLevel, int ttl) throws Excep
    @OnlyUsedByTests
    void truncateAll() throws Exception {
        for (int i = 0; i < configRepository.getRollupConfigs().size(); i++) {
            Sessions.execute(session, "truncate synthetic_result_rollup_" + i);
        }
        for (int i = 1; i < configRepository.getRollupConfigs().size(); i++) {
            Sessions.execute(session, "truncate synthetic_needs_rollup_" + i);
        }
    }
}
import com.datastax.driver.core.ResultSet;
import com.datastax.driver.core.ResultSetFuture;
import com.datastax.driver.core.Row;
import com.datastax.driver.core.Session;
import com.google.common.collect.Maps;
import com.google.common.primitives.Ints;
import com.google.common.util.concurrent.MoreExecutors;
import org.glowroot.central.util.Cache.CacheLoader;
import org.glowroot.central.util.ClusterManager;
import org.glowroot.central.util.RateLimiter;
import org.glowroot.central.util.Sessions;
import org.glowroot.common.repo.ConfigRepository;
import org.glowroot.common.repo.TraceAttributeNameRepository;
import org.glowroot.common.util.Styles;
        this.session = session;
        this.configRepository = configRepository;

        Sessions.execute(session, "create table if not exists trace_attribute_name"
                + " (agent_rollup varchar, transaction_type varchar, trace_attribute_name varchar,"
                + " primary key ((agent_rollup, transaction_type), trace_attribute_name)) "
                + WITH_LCS);
void store(String agentRollupId, String transactionType, String traceAttributeNa
        boundStatement.setString(i++, transactionType);
        boundStatement.setString(i++, traceAttributeName);
        boundStatement.setInt(i++, getMaxTTL());
        ResultSetFuture future = Sessions.executeAsyncWithOnFailure(session, boundStatement,
                () -> rateLimiter.invalidate(rateLimiterKey));
        future.addListener(() -> traceAttributeNamesCache.invalidate(SINGLE_CACHE_KEY),
                MoreExecutors.directExecutor());
private int getMaxTTL() throws Exception {
        @Override
        public Map<String, Map<String, List<String>>> load(String key) throws Exception {
            BoundStatement boundStatement = readPS.bind();
            ResultSet results = Sessions.execute(session, boundStatement);
            Map<String, Map<String, List<String>>> traceAttributeNames = Maps.newHashMap();
            for (Row row : results) {
                int i = 0;
import com.datastax.driver.core.ResultSet;
import com.datastax.driver.core.ResultSetFuture;
import com.datastax.driver.core.Row;
import com.datastax.driver.core.Session;
import com.google.common.base.Charsets;
import com.google.common.base.Strings;
import com.google.common.collect.Lists;

import org.glowroot.central.util.Messages;
import org.glowroot.central.util.MoreFutures;
import org.glowroot.central.util.Sessions;
import org.glowroot.common.config.StorageConfig;
import org.glowroot.common.live.ImmutableEntries;
import org.glowroot.common.live.ImmutableTracePoint;

        int expirationHours = configRepository.getStorageConfig().traceExpirationHours();

        Sessions.createTableWithTWCS(session, "create table if not exists trace_check"
                + " (agent_rollup varchar, agent_id varchar, trace_id varchar, primary key"
                + " ((agent_rollup, agent_id), trace_id))", expirationHours);

        Sessions.createTableWithTWCS(session, "create table if not exists trace_tt_slow_point"
                + " (agent_rollup varchar, transaction_type varchar, capture_time timestamp,"
                + " agent_id varchar, trace_id varchar, duration_nanos bigint, partial boolean,"
                + " error boolean, headline varchar, user varchar, attributes blob, primary key"
                + " ((agent_rollup, transaction_type), capture_time, agent_id, trace_id))",
                expirationHours);

        Sessions.createTableWithTWCS(session, "create table if not exists trace_tn_slow_point"
                + " (agent_rollup varchar, transaction_type varchar, transaction_name varchar,"
                + " capture_time timestamp, agent_id varchar, trace_id varchar,"
                + " duration_nanos bigint, partial boolean, error boolean, headline varchar,"
                + " user varchar, attributes blob, primary key ((agent_rollup, transaction_type,"
                + " transaction_name), capture_time, agent_id, trace_id))", expirationHours);

        Sessions.createTableWithTWCS(session, "create table if not exists trace_tt_error_point"
                + " (agent_rollup varchar, transaction_type varchar, capture_time timestamp,"
                + " agent_id varchar, trace_id varchar, duration_nanos bigint, partial boolean,"
                + " error_message varchar, headline varchar, user varchar, attributes blob,"
                + " primary key ((agent_rollup, transaction_type), capture_time, agent_id,"
                + " trace_id))", expirationHours);

        Sessions.createTableWithTWCS(session, "create table if not exists trace_tn_error_point"
                + " (agent_rollup varchar, transaction_type varchar, transaction_name varchar,"
                + " capture_time timestamp, agent_id varchar, trace_id varchar,"
                + " duration_nanos bigint, partial boolean, error_message varchar,"
                + " headline varchar, user varchar, attributes blob, primary key ((agent_rollup,"
                + " transaction_type, transaction_name), capture_time, agent_id, trace_id))",
                expirationHours);

        Sessions.createTableWithTWCS(session, "create table if not exists trace_tt_error_message"
                + " (agent_rollup varchar, transaction_type varchar, capture_time timestamp,"
                + " agent_id varchar, trace_id varchar, error_message varchar, primary key"
                + " ((agent_rollup, transaction_type), capture_time, agent_id, trace_id))",
                expirationHours);

        Sessions.createTableWithTWCS(session, "create table if not exists trace_tn_error_message"
                + " (agent_rollup varchar, transaction_type varchar, transaction_name varchar,"
                + " capture_time timestamp, agent_id varchar, trace_id varchar,"
                + " error_message varchar, primary key ((agent_rollup, transaction_type,"
                + " transaction_name), capture_time, agent_id, trace_id))", expirationHours);

        Sessions.createTableWithTWCS(session, "create table if not exists trace_header"
                + " (agent_id varchar, trace_id varchar, header blob, primary key (agent_id,"
                + " trace_id))", expirationHours);

        // index_ is just to provide uniqueness
        Sessions.createTableWithTWCS(session, "create table if not exists trace_entry"
                + " (agent_id varchar, trace_id varchar, index_ int, depth int,"
                + " start_offset_nanos bigint, duration_nanos bigint, active boolean,"
                + " message varchar, shared_query_text_index int, query_message_prefix varchar,"
                + " query_message_suffix varchar, detail blob, location_stack_trace blob,"
                + " error blob, primary key (agent_id, trace_id, index_))", expirationHours);

        // index_ is just to provide uniqueness
        Sessions.createTableWithTWCS(session, "create table if not exists trace_shared_query_text"
                + " (agent_id varchar, trace_id varchar, index_ int, truncated_text varchar,"
                + " truncated_end_text varchar, full_text_sha1 varchar, primary key (agent_id,"
                + " trace_id, index_))", expirationHours);

        Sessions.createTableWithTWCS(session, "create table if not exists trace_main_thread_profile"
                + " (agent_id varchar, trace_id varchar, profile blob, primary key (agent_id,"
                + " trace_id))", expirationHours);

        Sessions.createTableWithTWCS(session, "create table if not exists trace_aux_thread_profile"
                + " (agent_id varchar, trace_id varchar, profile blob, primary key (agent_id,"
                + " trace_id))", expirationHours);

        // agent_rollup/capture_time is not necessarily unique
        // using a counter would be nice since only need sum over capture_time range
        // but counter has no TTL, see https://issues.apache.org/jira/browse/CASSANDRA-2103
        // so adding trace_id to provide uniqueness
        Sessions.createTableWithTWCS(session, "create table if not exists trace_tt_slow_count"
                + " (agent_rollup varchar, transaction_type varchar, capture_time timestamp,"
                + " agent_id varchar, trace_id varchar, primary key ((agent_rollup,"
                + " transaction_type), capture_time, agent_id, trace_id))", expirationHours);

        Sessions.createTableWithTWCS(session, "create table if not exists trace_tn_slow_count"
                + " (agent_rollup varchar, transaction_type varchar, transaction_name varchar,"
                + " capture_time timestamp, agent_id varchar, trace_id varchar, primary key"
                + " ((agent_rollup, transaction_type, transaction_name), capture_time, agent_id,"
                + " trace_id))", expirationHours);

        Sessions.createTableWithTWCS(session, "create table if not exists trace_tt_error_count"
                + " (agent_rollup varchar, transaction_type varchar, capture_time timestamp,"
                + " agent_id varchar, trace_id varchar, primary key ((agent_rollup,"
                + " transaction_type), capture_time, agent_id, trace_id))", expirationHours);

        Sessions.createTableWithTWCS(session, "create table if not exists trace_tn_error_count"
                + " (agent_rollup varchar, transaction_type varchar, transaction_name varchar,"
                + " capture_time timestamp, agent_id varchar, trace_id varchar, primary key"
                + " ((agent_rollup, transaction_type, transaction_name), capture_time, agent_id,"
public void store(String agentId, Trace trace) throws Exception {
            boundStatement = readTransactionSlowPoint.bind();
            bindTraceQuery(boundStatement, agentRollupId, query, false);
        }
        ResultSet results = Sessions.execute(session, boundStatement);
        return processPoints(results, filter, limit, false);
    }

public void store(String agentId, Trace trace) throws Exception {
            boundStatement = readTransactionErrorPoint.bind();
            bindTraceQuery(boundStatement, agentRollupId, query, false);
        }
        ResultSet results = Sessions.execute(session, boundStatement);
        return processPoints(results, filter, limit, true);
    }

public long readSlowCount(String agentRollupId, TraceQuery query) throws Excepti
            boundStatement = readTransactionSlowCount.bind();
            bindTraceQuery(boundStatement, agentRollupId, query, false);
        }
        ResultSet results = Sessions.execute(session, boundStatement);
        return results.one().getLong(0);
    }

public long readErrorCount(String agentRollupId, TraceQuery query) throws Except
            boundStatement = readTransactionErrorCount.bind();
            bindTraceQuery(boundStatement, agentRollupId, query, false);
        }
        ResultSet results = Sessions.execute(session, boundStatement);
        return results.one().getLong(0);
    }

public ErrorMessageResult readErrorMessages(String agentRollupId, TraceQuery que
            boundStatement = readTransactionErrorMessage.bind();
            bindTraceQuery(boundStatement, agentRollupId, query, false);
        }
        ResultSet results = Sessions.execute(session, boundStatement);
        // rows are already in order by captureTime, so saving sort step by using linked hash map
        Map<Long, MutableLong> pointCounts = Maps.newLinkedHashMap();
        Map<String, MutableLong> messageCounts = Maps.newHashMap();
public Entries readEntriesForExport(String agentRollupId, String agentId, String
        BoundStatement boundStatement = readMainThreadProfile.bind();
        boundStatement.setString(0, agentId);
        boundStatement.setString(1, traceId);
        ResultSet results = Sessions.execute(session, boundStatement);
        Row row = results.one();
        if (row == null) {
            return null;
public Entries readEntriesForExport(String agentRollupId, String agentId, String
        BoundStatement boundStatement = readAuxThreadProfile.bind();
        boundStatement.setString(0, agentId);
        boundStatement.setString(1, traceId);
        ResultSet results = Sessions.execute(session, boundStatement);
        Row row = results.one();
        if (row == null) {
            return null;
private void checkValidAgentIdForRequest(String agentRollupId, String agentId, S
        boundStatement.setString(i++, agentRollupId);
        boundStatement.setString(i++, agentId);
        boundStatement.setString(i++, traceId);
        if (Sessions.execute(session, boundStatement).isExhausted()) {
            throw new IllegalArgumentException("Agent " + agentId + " was not a child of rollup "
                    + agentRollupId + " at the time of trace " + traceId);
        }
private void checkValidAgentIdForRequest(String agentRollupId, String agentId, S
        BoundStatement boundStatement = readHeader.bind();
        boundStatement.setString(0, agentId);
        boundStatement.setString(1, traceId);
        ResultSet results = Sessions.execute(session, boundStatement);
        Row row = results.one();
        if (row == null) {
            return null;
private void checkValidAgentIdForRequest(String agentRollupId, String agentId, S
        BoundStatement boundStatement = readEntries.bind();
        boundStatement.setString(0, agentId);
        boundStatement.setString(1, traceId);
        ResultSet results = Sessions.execute(session, boundStatement);
        List<Trace.Entry> entries = Lists.newArrayList();
        while (!results.isExhausted()) {
            Row row = results.one();
private void checkValidAgentIdForRequest(String agentRollupId, String agentId, S
        BoundStatement boundStatement = readSharedQueryTexts.bind();
        boundStatement.setString(0, agentId);
        boundStatement.setString(1, traceId);
        ResultSet results = Sessions.execute(session, boundStatement);
        List<Trace.SharedQueryText> sharedQueryTexts = Lists.newArrayList();
        while (!results.isExhausted()) {
            Row row = results.one();
import com.datastax.driver.core.ResultSet;
import com.datastax.driver.core.ResultSetFuture;
import com.datastax.driver.core.Row;
import com.datastax.driver.core.Session;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Lists;
import org.glowroot.central.util.Cache.CacheLoader;
import org.glowroot.central.util.ClusterManager;
import org.glowroot.central.util.RateLimiter;
import org.glowroot.central.util.Sessions;
import org.glowroot.common.repo.ConfigRepository;
import org.glowroot.common.repo.TransactionTypeRepository;
import org.glowroot.common.util.Styles;
        this.session = session;
        this.configRepository = configRepository;

        Sessions.execute(session, "create table if not exists transaction_type (one int,"
                + " agent_rollup varchar, transaction_type varchar, primary key"
                + " (one, agent_rollup, transaction_type)) " + WITH_LCS);

            boundStatement.setString(i++, agentRollupId);
            boundStatement.setString(i++, transactionType);
            boundStatement.setInt(i++, getMaxTTL());
            ResultSetFuture future = Sessions.executeAsyncWithOnFailure(session, boundStatement,
                    () -> rateLimiter.invalidate(rateLimiterKey));
            future.addListener(() -> transactionTypesCache.invalidate(SINGLE_CACHE_KEY),
                    MoreExecutors.directExecutor());
private int getMaxTTL() throws Exception {
            implements CacheLoader<String, Map<String, List<String>>> {
        @Override
        public Map<String, List<String>> load(String key) throws Exception {
            ResultSet results = Sessions.execute(session, readPS.bind());

            ImmutableMap.Builder<String, List<String>> builder = ImmutableMap.builder();
            String currAgentRollup = null;
import com.datastax.driver.core.PreparedStatement;
import com.datastax.driver.core.ResultSet;
import com.datastax.driver.core.Row;
import com.datastax.driver.core.Session;
import com.google.common.collect.Lists;
import com.google.protobuf.ByteString;

import org.glowroot.central.util.Sessions;
import org.glowroot.common.repo.ImmutableTriggeredAlert;
import org.glowroot.common.repo.TriggeredAlertRepository;
import org.glowroot.wire.api.model.AgentConfigOuterClass.AgentConfig.AlertConfig.AlertCondition;
    TriggeredAlertDao(Session session) throws Exception {
        this.session = session;

        Sessions.execute(session, "create table if not exists triggered_alert (agent_rollup_id"
                + " varchar, alert_condition blob, primary key (agent_rollup_id, alert_condition)) "
                + WITH_LCS);

public boolean exists(String agentRollupId, AlertCondition alertCondition) throw
        BoundStatement boundStatement = existsPS.bind();
        boundStatement.setString(0, agentRollupId);
        boundStatement.setBytes(1, ByteBuffer.wrap(alertCondition.toByteArray()));
        ResultSet results = Sessions.execute(session, boundStatement);
        return !results.isExhausted();
    }

public void delete(String agentRollupId, AlertCondition alertCondition) throws E
        BoundStatement boundStatement = deletePS.bind();
        boundStatement.setString(0, agentRollupId);
        boundStatement.setBytes(1, ByteBuffer.wrap(alertCondition.toByteArray()));
        Sessions.execute(session, boundStatement);
    }

    @Override
    public void insert(String agentRollupId, AlertCondition alertCondition) throws Exception {
        BoundStatement boundStatement = insertPS.bind();
        boundStatement.setString(0, agentRollupId);
        boundStatement.setBytes(1, ByteBuffer.wrap(alertCondition.toByteArray()));
        Sessions.execute(session, boundStatement);
    }

    @Override
    public List<AlertCondition> readAlertConditions(String agentRollupId) throws Exception {
        BoundStatement boundStatement = readPS.bind();
        boundStatement.setString(0, agentRollupId);
        ResultSet results = Sessions.execute(session, boundStatement);
        List<AlertCondition> alertConditions = Lists.newArrayList();
        for (Row row : results) {
            ByteBuffer bytes = checkNotNull(row.getBytes(0));
public void insert(String agentRollupId, AlertCondition alertCondition) throws E
    @Override
    public List<TriggeredAlert> readAll() throws Exception {
        BoundStatement boundStatement = readAllPS.bind();
        ResultSet results = Sessions.execute(session, boundStatement);
        List<TriggeredAlert> triggeredAlerts = Lists.newArrayList();
        for (Row row : results) {
            String agentRollupId = checkNotNull(row.getString(0));
import com.datastax.driver.core.PreparedStatement;
import com.datastax.driver.core.ResultSet;
import com.datastax.driver.core.Row;
import com.datastax.driver.core.Session;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;

import org.glowroot.central.util.Cache;
import org.glowroot.central.util.Cache.CacheLoader;
import org.glowroot.central.util.ClusterManager;
import org.glowroot.central.util.Sessions;
import org.glowroot.common.config.ImmutableUserConfig;
import org.glowroot.common.config.UserConfig;
import org.glowroot.common.repo.ConfigRepository.DuplicateUsernameException;

        boolean createAnonymousUser = keyspaceMetadata.getTable("user") == null;

        Sessions.execute(session, "create table if not exists user (username varchar, ldap boolean,"
                + " password_hash varchar, roles set<varchar>, primary key (username)) "
                + WITH_LCS);

            boundStatement.setBool(i++, false);
            boundStatement.setString(i++, "");
            boundStatement.setSet(i++, ImmutableSet.of("Administrator"));
            Sessions.execute(session, boundStatement);
        }

        allUserConfigsCache =
boolean namedUsersExist() throws Exception {
    void insert(UserConfig userConfig) throws Exception {
        BoundStatement boundStatement = insertPS.bind();
        bindInsert(boundStatement, userConfig);
        Sessions.execute(session, boundStatement);
        allUserConfigsCache.invalidate(ALL_USERS_SINGLE_CACHE_KEY);
    }

    void insertIfNotExists(UserConfig userConfig) throws Exception {
        BoundStatement boundStatement = insertIfNotExistsPS.bind();
        bindInsert(boundStatement, userConfig);
        ResultSet results = Sessions.execute(session, boundStatement);
        Row row = checkNotNull(results.one());
        boolean applied = row.getBool("[applied]");
        if (applied) {
void insertIfNotExists(UserConfig userConfig) throws Exception {
    void delete(String username) throws Exception {
        BoundStatement boundStatement = deletePS.bind();
        boundStatement.setString(0, username);
        Sessions.execute(session, boundStatement);
        allUserConfigsCache.invalidate(ALL_USERS_SINGLE_CACHE_KEY);
    }

private static ImmutableUserConfig buildUser(Row row) {
    private class AllUsersCacheLoader implements CacheLoader<String, List<UserConfig>> {
        @Override
        public List<UserConfig> load(String dummy) throws Exception {
            ResultSet results = Sessions.execute(session, readPS.bind());
            List<UserConfig> users = Lists.newArrayList();
            for (Row row : results) {
                users.add(buildUser(row));
/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
package org.glowroot.central.util;

import java.util.concurrent.ExecutionException;

import com.datastax.driver.core.BoundStatement;
import com.datastax.driver.core.ResultSet;
import com.datastax.driver.core.ResultSetFuture;
import com.datastax.driver.core.Session;
import com.datastax.driver.core.Statement;
import com.datastax.driver.core.exceptions.DriverException;
import com.datastax.driver.core.exceptions.InvalidConfigurationInQueryException;
import com.google.common.util.concurrent.MoreExecutors;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import static com.google.common.base.Preconditions.checkNotNull;
import static java.util.concurrent.TimeUnit.DAYS;

public class Sessions {

    private static final Logger logger = LoggerFactory.getLogger(Sessions.class);

    private Sessions() {}

    // do not use session.execute() because that calls getUninterruptibly() which can cause central
    // shutdown to timeout while waiting for executor service to shutdown
    public static ResultSet execute(Session session, Statement statement) throws Exception {
        try {
            return session.executeAsync(statement).get();
        } catch (ExecutionException e) {
            propagateCauseIfPossible(e);
            throw e; // unusual case (cause is null or cause is not Exception or Error)
        }
    }

    // do not use session.execute() because that calls getUninterruptibly() which can cause central
    // shutdown to timeout while waiting for executor service to shutdown
    public static ResultSet execute(Session session, String query) throws Exception {
        try {
            return session.executeAsync(query).get();
        } catch (ExecutionException e) {
            propagateCauseIfPossible(e);
            throw e; // unusual case (cause is null or cause is not Exception or Error)
        }
    }

    public static void createKeyspaceIfNotExists(Session session, String keyspace)
            throws Exception {
        execute(session, "create keyspace if not exists " + keyspace + " with replication"
                + " = { 'class' : 'SimpleStrategy', 'replication_factor' : 1 }");
    }

    public static void createTableWithTWCS(Session session, String createTableQuery,
            int expirationHours) throws Exception {
        // "Ideally, operators should select a compaction_window_unit and compaction_window_size
        // pair that produces approximately 20-30 windows"
        // (http://cassandra.apache.org/doc/latest/operating/compaction.html)
public static void createTableWithTWCS(Session session, String createTableQuery,
        // it seems any value over max_hint_window_in_ms (which defaults to 3 hours) is good
        long gcGraceSeconds = DAYS.toSeconds(1);
        try {
            execute(session, createTableQuery + " with compaction = { 'class' :"
                    + " 'TimeWindowCompactionStrategy', 'compaction_window_unit' : 'HOURS',"
                    + " 'compaction_window_size' : '" + windowSizeHours + "' }"
                    + " and gc_grace_seconds = " + gcGraceSeconds);
        } catch (InvalidConfigurationInQueryException e) {
            logger.debug(e.getMessage(), e);
            execute(session, createTableQuery
                    + " with compaction = { 'class' : 'DateTieredCompactionStrategy' }"
                    + " and gc_grace_seconds = " + gcGraceSeconds);
        }
    }

    public static ResultSetFuture executeAsyncWithOnFailure(Session session,
            BoundStatement boundStatement, Runnable onFailure) {
        ResultSetFuture future = session.executeAsync(boundStatement);
        future.addListener(new Runnable() {
            @Override
public void run() {
        return future;
    }

    private static void propagateCauseIfPossible(ExecutionException e) throws Exception {
        Throwable cause = e.getCause();
        if (cause instanceof DriverException) {
private static void propagateCauseIfPossible(ExecutionException e) throws Except
            throw (Error) cause;
        }
    }
}
import java.util.List;

import com.datastax.driver.core.Cluster;
import com.datastax.driver.core.Session;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import org.glowroot.central.util.ClusterManager;
import org.glowroot.central.util.Sessions;
import org.glowroot.common.repo.AgentRollupRepository.AgentRollup;

import static org.assertj.core.api.Assertions.assertThat;
    public static void setUp() throws Exception {
        SharedSetupRunListener.startCassandra();
        cluster = Clusters.newCluster();
        session = cluster.newSession();
        Sessions.createKeyspaceIfNotExists(session, "glowroot_unit_tests");
        session.execute("use glowroot_unit_tests");
        clusterManager = ClusterManager.create();

public static void tearDown() throws Exception {
    }

    @Before
    public void before() {
        session.execute("truncate agent_rollup");
    }


import com.datastax.driver.core.Cluster;
import com.datastax.driver.core.KeyspaceMetadata;
import com.datastax.driver.core.Session;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.Lists;
import org.junit.AfterClass;
import org.junit.Test;

import org.glowroot.central.util.ClusterManager;
import org.glowroot.central.util.Sessions;
import org.glowroot.common.config.CentralStorageConfig;
import org.glowroot.common.config.ConfigDefaults;
import org.glowroot.common.config.ImmutableCentralStorageConfig;
    public static void setUp() throws Exception {
        SharedSetupRunListener.startCassandra();
        cluster = Clusters.newCluster();
        session = cluster.newSession();
        Sessions.createKeyspaceIfNotExists(session, "glowroot_unit_tests");
        session.execute("use glowroot_unit_tests");
        KeyspaceMetadata keyspaceMetadata =
                cluster.getMetadata().getKeyspace("glowroot_unit_tests");
public static void tearDown() throws Exception {
    }

    @Before
    public void before() {
        session.execute("truncate agent_rollup");
        session.execute("truncate agent_config");
    }
package org.glowroot.central.repo;

import com.datastax.driver.core.Cluster;
import com.datastax.driver.core.Session;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import org.glowroot.central.util.ClusterManager;
import org.glowroot.central.util.Sessions;
import org.glowroot.wire.api.model.AgentConfigOuterClass.AgentConfig;
import org.glowroot.wire.api.model.AgentConfigOuterClass.AgentConfig.AlertConfig;
import org.glowroot.wire.api.model.AgentConfigOuterClass.AgentConfig.AlertConfig.AlertCondition;
    public static void setUp() throws Exception {
        SharedSetupRunListener.startCassandra();
        cluster = Clusters.newCluster();
        session = cluster.newSession();
        Sessions.createKeyspaceIfNotExists(session, "glowroot_unit_tests");
        session.execute("use glowroot_unit_tests");
        clusterManager = ClusterManager.create();

public static void tearDown() throws Exception {
    }

    @Before
    public void before() {
        session.execute("truncate agent_config");
    }


import com.datastax.driver.core.Cluster;
import com.datastax.driver.core.KeyspaceMetadata;
import com.datastax.driver.core.Session;
import com.google.common.collect.ImmutableList;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

import org.glowroot.central.util.ClusterManager;
import org.glowroot.central.util.Sessions;
import org.glowroot.common.config.CentralStorageConfig;
import org.glowroot.common.config.CentralWebConfig;
import org.glowroot.common.config.HttpProxyConfig;
    public static void setUp() throws Exception {
        SharedSetupRunListener.startCassandra();
        cluster = Clusters.newCluster();
        session = cluster.newSession();
        Sessions.createKeyspaceIfNotExists(session, "glowroot_unit_tests");
        session.execute("use glowroot_unit_tests");
        session.execute("drop table if exists agent_rollup");
        session.execute("drop table if exists agent_config");
package org.glowroot.central.repo;

import com.datastax.driver.core.Cluster;
import com.datastax.driver.core.Session;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import org.glowroot.central.util.Sessions;
import org.glowroot.wire.api.model.CollectorServiceOuterClass.Environment;
import org.glowroot.wire.api.model.CollectorServiceOuterClass.HostInfo;

    public static void setUp() throws Exception {
        SharedSetupRunListener.startCassandra();
        cluster = Clusters.newCluster();
        session = cluster.newSession();
        Sessions.createKeyspaceIfNotExists(session, "glowroot_unit_tests");
        session.execute("use glowroot_unit_tests");

        environmentDao = new EnvironmentDao(session);
public static void tearDown() throws Exception {
    }

    @Before
    public void before() {
        session.execute("truncate environment");
    }


import com.datastax.driver.core.Cluster;
import com.datastax.driver.core.KeyspaceMetadata;
import com.datastax.driver.core.Session;
import com.google.common.collect.Lists;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

import org.glowroot.central.util.ClusterManager;
import org.glowroot.central.util.Sessions;
import org.glowroot.common.config.CentralStorageConfig;
import org.glowroot.common.config.ImmutableCentralStorageConfig;
import org.glowroot.common.util.Clock;
    public static void setUp() throws Exception {
        SharedSetupRunListener.startCassandra();
        cluster = Clusters.newCluster();
        session = cluster.newSession();
        Sessions.createKeyspaceIfNotExists(session, "glowroot_unit_tests");
        session.execute("use glowroot_unit_tests");
        KeyspaceMetadata keyspaceMetadata =
                cluster.getMetadata().getKeyspace("glowroot_unit_tests");

import com.datastax.driver.core.Cluster;
import com.datastax.driver.core.KeyspaceMetadata;
import com.datastax.driver.core.Session;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

import org.glowroot.central.util.ClusterManager;
import org.glowroot.central.util.Sessions;
import org.glowroot.common.config.ImmutableRoleConfig;
import org.glowroot.common.config.RoleConfig;

    public static void setUp() throws Exception {
        SharedSetupRunListener.startCassandra();
        cluster = Clusters.newCluster();
        session = cluster.newSession();
        Sessions.createKeyspaceIfNotExists(session, "glowroot_unit_tests");
        session.execute("use glowroot_unit_tests");
        KeyspaceMetadata keyspaceMetadata =
                cluster.getMetadata().getKeyspace("glowroot_unit_tests");

import com.datastax.driver.core.Cluster;
import com.datastax.driver.core.KeyspaceMetadata;
import com.datastax.driver.core.Session;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

import org.glowroot.central.util.Sessions;

public class SchemaUpgradeIT {

    public static void setUp() throws Exception {
        SharedSetupRunListener.startCassandra();
        cluster = Clusters.newCluster();
        session = cluster.newSession();
        Sessions.createKeyspaceIfNotExists(session, "glowroot_unit_tests");
        session.execute("use glowroot_unit_tests");
    }


import com.datastax.driver.core.Cluster;
import com.datastax.driver.core.KeyspaceMetadata;
import com.datastax.driver.core.Session;
import com.google.common.collect.Lists;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

import org.glowroot.central.util.ClusterManager;
import org.glowroot.central.util.Sessions;
import org.glowroot.common.config.CentralStorageConfig;
import org.glowroot.common.config.ImmutableCentralStorageConfig;
import org.glowroot.common.repo.SyntheticResultRepository.SyntheticResult;
    public static void setUp() throws Exception {
        SharedSetupRunListener.startCassandra();
        cluster = Clusters.newCluster();
        session = cluster.newSession();
        Sessions.createKeyspaceIfNotExists(session, "glowroot_unit_tests");
        session.execute("use glowroot_unit_tests");
        KeyspaceMetadata keyspaceMetadata =
                cluster.getMetadata().getKeyspace("glowroot_unit_tests");
package org.glowroot.central.repo;

import com.datastax.driver.core.Cluster;
import com.datastax.driver.core.Session;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

import org.glowroot.central.util.ClusterManager;
import org.glowroot.central.util.Sessions;
import org.glowroot.common.config.ImmutableCentralStorageConfig;
import org.glowroot.common.live.ImmutableTracePointFilter;
import org.glowroot.common.live.LiveTraceRepository.TracePoint;
    public static void setUp() throws Exception {
        SharedSetupRunListener.startCassandra();
        cluster = Clusters.newCluster();
        session = cluster.newSession();
        Sessions.createKeyspaceIfNotExists(session, "glowroot_unit_tests");
        session.execute("use glowroot_unit_tests");

        clusterManager = ClusterManager.create();
import java.util.List;

import com.datastax.driver.core.Cluster;
import com.datastax.driver.core.Session;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import org.glowroot.central.util.Sessions;
import org.glowroot.common.repo.TriggeredAlertRepository.TriggeredAlert;
import org.glowroot.wire.api.model.AgentConfigOuterClass.AgentConfig.AlertConfig.AlertCondition;
import org.glowroot.wire.api.model.AgentConfigOuterClass.AgentConfig.AlertConfig.AlertCondition.HeartbeatCondition;
    public static void setUp() throws Exception {
        SharedSetupRunListener.startCassandra();
        cluster = Clusters.newCluster();
        session = cluster.newSession();
        Sessions.createKeyspaceIfNotExists(session, "glowroot_unit_tests");
        session.execute("use glowroot_unit_tests");

        triggeredAlertDao = new TriggeredAlertDao(session);
public static void tearDown() throws Exception {
    }

    @Before
    public void beforeEach() {
        session.execute("truncate triggered_alert");
    }


import com.datastax.driver.core.Cluster;
import com.datastax.driver.core.KeyspaceMetadata;
import com.datastax.driver.core.Session;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

import org.glowroot.central.util.ClusterManager;
import org.glowroot.central.util.Sessions;
import org.glowroot.common.config.ImmutableUserConfig;
import org.glowroot.common.config.UserConfig;

    public static void setUp() throws Exception {
        SharedSetupRunListener.startCassandra();
        cluster = Clusters.newCluster();
        session = cluster.newSession();
        Sessions.createKeyspaceIfNotExists(session, "glowroot_unit_tests");
        session.execute("use glowroot_unit_tests");
        KeyspaceMetadata keyspaceMetadata =
                cluster.getMetadata().getKeyspace("glowroot_unit_tests");
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import com.alpha.pineapple.docker.model.InfoBuilder;
import com.alpha.pineapple.docker.model.rest.ContainerConfiguration;
import com.alpha.pineapple.docker.model.rest.CreatedContainer;
import com.alpha.pineapple.docker.model.rest.ImageCreation;
import com.alpha.pineapple.docker.session.DockerSession;
import com.alpha.pineapple.execution.ExecutionResult;
import com.alpha.pineapple.execution.ExecutionResultImpl;
public void testCanExecuteWithMinimalModel() throws Exception {
    @Test
    public void testCanExecuteWithModelWithImageCommandWithEmptyTag() throws Exception {
	// complete session initialization
	ImageCreation[] imageCreationInfos = {};
	expect(session.httpPostForObjectWithMultipleRootElements(eq(CREATE_IMAGE_URI), isA(Map.class),
		isA(ImageCreation[].class.getClass()))).andReturn(imageCreationInfos);
	replay(session);

	// create content
public void testCanExecuteWithModelWithImageCommandWithEmptyTag() throws Excepti
    public void testCanExecuteWithModelWithImageCommandWithUndefinedTag() throws Exception {

	// complete session initialization
	ImageCreation[] imageCreationInfos = {};
	expect(session.httpPostForObjectWithMultipleRootElements(eq(CREATE_TAGGED_IMAGE_URI), isA(Map.class),
		isA(ImageCreation[].class.getClass()))).andReturn(imageCreationInfos);
	replay(session);

	// create content
public void testCanExecuteWithModelWithImageCommandWithUndefinedTag() throws Exc
    public void testCanExecuteWithModelWithImageCommand() throws Exception {

	// complete session initialization
	ImageCreation[] imageCreationInfos = {};
	expect(session.httpPostForObjectWithMultipleRootElements(eq(CREATE_TAGGED_IMAGE_URI), isA(Map.class),
		isA(ImageCreation[].class.getClass()))).andReturn(imageCreationInfos);
	replay(session);

	// create content
public void testCanExecuteWithModelWithImageFromDockerfileCommand() throws Excep
	replay(coreRuntimeDirectoryProvider);

	// complete session initialization
	ImageCreation[] imageCreationInfos = {};
	expect(session.httpPostForObjectWithMultipleRootElements(eq(BUILD_IMAGE_URI), isA(Map.class),
		isA(HttpEntity.class), isA(ImageCreation[].class.getClass()), eq(CONTENT_TYPE_TAR)))
			.andReturn(imageCreationInfos);
	replay(session);

	// create content
import com.alpha.pineapple.command.initialization.ValidationPolicy;
import com.alpha.pineapple.docker.DockerClient;
import com.alpha.pineapple.docker.model.ImageInfo;
import com.alpha.pineapple.docker.model.rest.ImageCreation;
import com.alpha.pineapple.docker.session.DockerSession;
import com.alpha.pineapple.docker.utils.RestResponseException;
import com.alpha.pineapple.execution.ExecutionResult;
 * 
 * <li><code>image-creation-infos</code> contains array of image creation info's
 * from Docker. The type is
 * <code>com.alpha.pineapple.docker.model.ImageCreation[]</code>.</li>
 * 
 * <li>The the state of the supplied <code>ExecutionResult</code> is updated
 * with <code>ExecutionState.SUCCESS</code> if the test succeeded. If the test
	/**
	 * Null image creation info's.
	 */
	static final ImageCreation[] NULL_INFOS = {};

	/**
	 * Single digit string representation for boolean true.
void buildImage(Context context) throws SessionException {
		}

		// post to create image
		ImageCreation[] infos = null;

		try {

			infos = session.httpPostForObjectWithMultipleRootElements(BUILD_IMAGE_URI, uriVariables, requestEntity,
					ImageCreation[].class, CONTENT_TYPE_TAR);

		} catch (RestResponseException rre) {
			Object[] args2 = { rre.getStatusCode(), rre.getMessage() };
void buildImage(Context context) throws SessionException {
		String message = messageProvider.getMessage("bic.list_image_info", args);
		executionResult.addMessage(ExecutionResult.MSG_MESSAGE, message);

		for (ImageCreation info : infos) {

			// handle normal status update
			if (containsStatusUpdate(info)) {
import com.alpha.pineapple.command.initialization.ValidationPolicy;
import com.alpha.pineapple.docker.DockerClient;
import com.alpha.pineapple.docker.model.ImageInfo;
import com.alpha.pineapple.docker.model.rest.ImageCreation;
import com.alpha.pineapple.docker.session.DockerSession;
import com.alpha.pineapple.docker.utils.RestResponseException;
import com.alpha.pineapple.execution.ExecutionResult;
 * <li><code>image-creation-infos</code> contains array of image creation info's
 * from Docker. If image already exists then no info's are returned. If the
 * creation fails then no no info's are returned. The type is
 * <code>com.alpha.pineapple.docker.model.ImageCreation[]</code>.</li>
 * 
 * <li>The the state of the supplied <code>ExecutionResult</code> is updated
 * with <code>ExecutionState.SUCCESS</code> if the test succeeded. If the test
	/**
	 * Null image creation info's.
	 */
	static final ImageCreation[] NULL_INFOS = {};

	/**
	 * Key used to identify property in context: Image info.
public boolean execute(Context context) throws Exception {
		uriVariables.put("image", imageInfo.getRepository());

		// post to create image
		ImageCreation[] infos = null;

		try {

			if (isTaggedImage(imageInfo)) {
				uriVariables.put("tag", imageInfo.getTag());
				infos = session.httpPostForObjectWithMultipleRootElements(CREATE_TAGGED_IMAGE_URI, uriVariables,
						ImageCreation[].class);
			} else {
				infos = session.httpPostForObjectWithMultipleRootElements(CREATE_IMAGE_URI, uriVariables,
						ImageCreation[].class);
			}

		} catch (RestResponseException rre) {
public boolean execute(Context context) throws Exception {
		Object[] args = { infos.length };
		String message = messageProvider.getMessage("cic.list_image_info", args);
		executionResult.addMessage(ExecutionResult.MSG_MESSAGE, message);
		for (ImageCreation info : infos) {

			// handle normal status update
			if (containsStatusUpdate(info)) {
import org.apache.commons.lang.Validate;

import com.alpha.pineapple.docker.model.ImageInfo;
import com.alpha.pineapple.docker.model.rest.ImageCreation;
import com.alpha.pineapple.docker.model.rest.ListedContainer;
import com.alpha.pineapple.docker.model.rest.ListedImage;

 */
public class ModelUtils {

    /**
     * String index for removal of prefix.
     */
    static final int INDEX_FOR_PREFIX_REMOVAL = 1;

    /**
     * Start index for truncated Id.
     */
    static final int START_INDEX = 0;

    /**
     * End index for truncated Id.
     */
    static final int END_INDEX = 12;

    /**
     * First list index.
     */
    static final int FIRST_INDEX = 0;

    /**
     * Returns true if image object is defined with a non-null or non-empty tag
     * parameter.
     * 
     * @param info
     *            image info object.
     * 
     * @return true if the tag parameter is defined and not empty.
     */
    public static boolean isTaggedImage(ImageInfo info) {
	Validate.notNull(info, "info is undefined");

	if (info.getTag() == null)
	    return false;
	if (info.getTag().isEmpty())
	    return false;
	return true;
    }

    /**
     * Returns true if image creation object contains a regular status update
     * information in the status field, i.e. it is defined with a non-null or
     * non-empty value.
     * 
     * @param info
     *            image creation object.
     * 
     * @return true if image creation object contains regular status update
     *         information in the status field. Returns false if the status
     *         field is null or empty.
     */
    public static boolean containsStatusUpdate(ImageCreation info) {
	Validate.notNull(info, "info is undefined");

	if (info.getStatus() == null)
	    return false;
	if (info.getStatus().isEmpty())
	    return false;
	return true;
    }

    /**
     * Returns true if image creation object contains a stream update
     * information in the stream field, i.e. it is defined with a non-null or
     * non-empty value.
     * 
     * @param info
     *            image creation object.
     * 
     * @return true if image creation object contains stream update information
     *         in the stream field. Returns false if the status field is null or
     *         empty.
     */
    public static boolean containsStreamUpdate(ImageCreation info) {
	Validate.notNull(info, "info is undefined");

	if (info.getStream() == null)
	    return false;
	if (info.getStream().isEmpty())
	    return false;
	return true;
    }

    /**
     * Create truncated ID which is reduced to 12 characters long.
     * 
     * @param id
     *            id to be truncated. If the id is null or empty then the empty
     *            string is returned.
     */
    public static String createTruncatedId(String id) {
	if (id == null)
	    return "";
	if (id.isEmpty())
	    return "";
	return id.substring(START_INDEX, END_INDEX);
    }

    /**
     * Remove LF from Docker stream update.
     * 
     * @param update
     *            stream update.
     */
    public static String remoteLfFromStreamUpdate(String update) {
	if (update == null)
	    return update;
	return StringUtils.trim(update);
    }

    /**
     * Returns true if no repository tags are defined.
     * 
     * @param image
     *            listed Docker image.
     * 
     * @return true if no repository tags are defined.
     */
    public static boolean isNoImageRepoTagsDefined(ListedImage image) {
	if (image == null)
	    return true;
	if (image.getRepoTags() == null)
	    return true;

	List<String> tagsList = image.getRepoTags();
	if (tagsList.isEmpty())
	    return true;
	for (String tag : tagsList) {
	    if (!UNDEFINED_REPO_TAG.equals(tag))
		return false;
	}
	return true;
    }

    /**
     * Returns true if tag is defined in image name in container.
     * The tag is defined using the ":" separator.
     * 
     * @param image
     *            Docker image name .
     * 
     * @return true if repository tag is defined in image name.
     */
    public static boolean isImageRepoTagDefined(ListedContainer container) {
	Validate.notNull(container, "container is undefined.");
	return containsSeparator(container.getImage());
    }
    
    /**
     * Return true if string message is not null or empty.
     * 
     * @param stringMessage
     *            optional string message.
     * 
     * @return true if string message is not null or empty.
     */
    public static boolean isStringMessageDefined(String stringMessage) {
	if (stringMessage == null)
	    return false;
	return (!stringMessage.isEmpty());
    }

    /**
     * Return true if container name is prefixed with "/".
     * 
     * @param name
     *            container name.
     * 
     * @return true if container name is prefixed with "/"..
     */
    public static boolean isContainerNamePrefixed(String name) {
	if (name == null)
	    return false;
	if (name.isEmpty())
	    return false;
	return name.startsWith("/");
    }

    /**
     * If container name is prefixed with "/" then the prefix is removed.
     * 
     * @param name
     *            container name.
     * 
     * @return container name with prefix removed.
     */
    public static String removeContainerNamePrefix(String name) {
	if (!isContainerNamePrefixed(name))
	    return name;
	return name.substring(INDEX_FOR_PREFIX_REMOVAL);
    }

    /**
     * Get first list entry. If list is empty the null is returned.
     * 
     * @param list
     *            string list.
     * 
     * @return first list entry.
     */
    public static String getFirstListEntry(List<String> list) {
	if (list.isEmpty())
	    return null;
	return list.get(FIRST_INDEX);
    }

    /**
     * Returns true if name contains separator ":".
     * 
     * @param name name to test.
     * 
     * @return true if string contains separator ":".
     */
    public static boolean containsSeparator(String name) {
	Validate.notNull(name, "name is undefined.");
	int index = name.indexOf(":");
	return (index != -1);
    }
    
}
		</jaxb:bindings>		 
	</jaxb:bindings>

	<!-- Image definitions -->

	<jaxb:bindings schemaLocation="docker_1_0.xsd" >
		<jaxb:bindings node="//xs:complexType[@name='progressDetailType']" >
			<jaxb:class name="ProgressDetail" />				
		</jaxb:bindings>		 
	</jaxb:bindings>

	<jaxb:bindings schemaLocation="docker_1_0.xsd" >
		<jaxb:bindings node="//xs:complexType[@name='listedImageType']" >
			<jaxb:class name="ListedImage" />				
	</jaxb:bindings>

	<jaxb:bindings schemaLocation="docker_1_0.xsd" >
		<jaxb:bindings node="//xs:complexType[@name='imageCreationType']" >
			<jaxb:class name="ImageCreation" />				
		</jaxb:bindings>		 
	</jaxb:bindings>

	<xs:element name="listedContainer" type="listedContainerType" />	
	<xs:element name="inspectedContainer" type="containerJsonType" />
	<xs:element name="inspectedImage" type="imageInspectType" />
	<xs:element name="imageCreationInfo" type="imageCreationType" />
	<xs:element name="imageDeletionInfo" type="imageDeletionType" />
	<xs:element name="version" type="versionType" />

		<xs:attribute name="rw" type="xs:boolean" use="optional"/>										
	</xs:complexType>

	<!-- Image definitions -->

	<xs:complexType name="progressDetailType" >
		<xs:annotation>
			<xs:documentation>Detailed info about progress during image creation.</xs:documentation>
		</xs:annotation>
		<xs:attribute name="start" type="xs:string" use="optional"/>		
		<xs:attribute name="current" type="xs:string" use="optional"/>		
		<xs:attribute name="total" type="xs:string" use="optional"/>		
	</xs:complexType>

	<xs:complexType name="listedImageType" >
		<xs:annotation>
			<xs:documentation>Info about a listed Docker image (Output from the "List images" operation).</xs:documentation>
		<xs:attribute name="virtualSize" type="xs:long" use="optional"/>	
	</xs:complexType>

	<xs:complexType name="imageCreationType" >
		<xs:annotation>
			<xs:documentation>Info about Docker image creation progress.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="progressDetail" type="progressDetailType" minOccurs="0" maxOccurs="1" />
		</xs:sequence>
		<xs:attribute name="error" type="xs:string" use="optional"/>		
		<xs:attribute name="id" type="xs:string" use="optional"/>		
		<xs:attribute name="progress" type="xs:string" use="optional"/>		
		<xs:attribute name="status" type="xs:string" use="optional"/>		
		<xs:attribute name="stream" type="xs:string" use="optional"/>		
	</xs:complexType>

	<xs:complexType name="imageDeletionType" >
Development documentation

** Schema types for images

*** progressDetailType

	Detailed info about progress during image creation.
	
	Partial output from image creation.

*** errorDetailType

	Detailed info about errors during image creation.	
	
	Partial output from image creation.

*** listedImageType

Development documentation
	
	Defined Docker type: {{{https://github.com/docker/docker/blob/04295d26df3034a9a92da8400418f843d7c48780/api/types/types.go}ImageInspect}}
	
*** imageCreationType	
	
	Info about Docker image creation progress.
	
*** imageDeletionType

	Info about Docker image deletion progress.
Development documentation
	Input to container creation and output from container and image inspection. 
	Used by these schema types:
	
	* <<<ImageInspectType>>>
	
	[]

import static com.alpha.pineapple.docker.DockerConstants.DEFAULT_CENTOS_REPOSITORY;
import static com.alpha.pineapple.docker.DockerConstants.LATEST_IMAGE_TAG;
import static com.alpha.testutils.DockerTestConstants.TEST_DOCKER_ROOT_BUSYBOX_IMAGE;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import com.alpha.pineapple.docker.DockerClient;
import com.alpha.pineapple.docker.model.ImageInfo;
import com.alpha.pineapple.docker.model.InfoBuilder;
import com.alpha.pineapple.docker.model.rest.ImageCreation;
import com.alpha.pineapple.docker.session.DockerSession;
import com.alpha.pineapple.execution.ExecutionResult;
import com.alpha.pineapple.execution.ExecutionResultImpl;
public void testCreateTaggedCentosImage() throws Exception {
	assertTrue(executionResult.isSuccess());
	assertTrue(context.containsKey(CreateImageCommand.IMAGE_CREATION_INFOS_KEY));
	assertNotNull(context.get(CreateImageCommand.IMAGE_CREATION_INFOS_KEY));
	ImageCreation[] infos = (ImageCreation[]) context.get(CreateImageCommand.IMAGE_CREATION_INFOS_KEY);
	assertTrue(infos.length != 0);
	assertTrue(dockerClient.imageExists(session, imageInfo));
    }
public void testCreateTaggedTinyImage() throws Exception {
	assertTrue(executionResult.isSuccess());
	assertTrue(context.containsKey(CreateImageCommand.IMAGE_CREATION_INFOS_KEY));
	assertNotNull(context.get(CreateImageCommand.IMAGE_CREATION_INFOS_KEY));
	ImageCreation[] infos = (ImageCreation[]) context.get(CreateImageCommand.IMAGE_CREATION_INFOS_KEY);
	assertTrue(infos.length != 0);
	assertTrue(dockerClient.imageExists(session, imageInfo));
    }
public void testCreateTaggedTinyImageWithNewPulledImage() throws Exception {
	assertTrue(executionResult.isSuccess());
	assertTrue(context.containsKey(CreateImageCommand.IMAGE_CREATION_INFOS_KEY));
	assertNotNull(context.get(CreateImageCommand.IMAGE_CREATION_INFOS_KEY));
	ImageCreation[] infos = (ImageCreation[]) context.get(CreateImageCommand.IMAGE_CREATION_INFOS_KEY);
	assertTrue(infos.length != 0);
	assertTrue(dockerClient.imageExists(session, imageInfo));
    }
public void testCreateTaggedTinyImageWithMultipleLinesInDockerfile() throws Exce
	assertTrue(executionResult.isSuccess());
	assertTrue(context.containsKey(CreateImageCommand.IMAGE_CREATION_INFOS_KEY));
	assertNotNull(context.get(CreateImageCommand.IMAGE_CREATION_INFOS_KEY));
	ImageCreation[] infos = (ImageCreation[]) context.get(CreateImageCommand.IMAGE_CREATION_INFOS_KEY);
	assertTrue(infos.length != 0);
	assertTrue(dockerClient.imageExists(session, imageInfo));
    }
import com.alpha.pineapple.docker.DockerClient;
import com.alpha.pineapple.docker.model.ImageInfo;
import com.alpha.pineapple.docker.model.InfoBuilder;
import com.alpha.pineapple.docker.model.rest.ImageCreation;
import com.alpha.pineapple.docker.session.DockerSession;
import com.alpha.pineapple.execution.ExecutionResult;
import com.alpha.pineapple.execution.ExecutionResultImpl;
public void testCreateUntaggedImageFromUbuntuBaseRepository() throws Exception {
	assertTrue(executionResult.isSuccess());
	assertTrue(context.containsKey(CreateImageCommand.IMAGE_CREATION_INFOS_KEY));
	assertNotNull(context.get(CreateImageCommand.IMAGE_CREATION_INFOS_KEY));
	ImageCreation[] infos = (ImageCreation[]) context.get(CreateImageCommand.IMAGE_CREATION_INFOS_KEY);
	assertTrue(infos.length != 0);

	// test that image is actually is created with the "latest" tag
public void testCreateTaggedImageFromUbuntuBaseRepository() throws Exception {
	assertTrue(executionResult.isSuccess());
	assertTrue(context.containsKey(CreateImageCommand.IMAGE_CREATION_INFOS_KEY));
	assertNotNull(context.get(CreateImageCommand.IMAGE_CREATION_INFOS_KEY));
	ImageCreation[] infos = (ImageCreation[]) context.get(CreateImageCommand.IMAGE_CREATION_INFOS_KEY);
	assertTrue(infos.length != 0);
	assertTrue(dockerClient.imageExists(session, imageInfo));
    }
public void testCreateTaggedImageFromCentOsRepository() throws Exception {
	assertTrue(executionResult.isSuccess());
	assertTrue(context.containsKey(CreateImageCommand.IMAGE_CREATION_INFOS_KEY));
	assertNotNull(context.get(CreateImageCommand.IMAGE_CREATION_INFOS_KEY));
	ImageCreation[] infos = (ImageCreation[]) context.get(CreateImageCommand.IMAGE_CREATION_INFOS_KEY);
	assertTrue(infos.length != 0);
	assertTrue(dockerClient.imageExists(session, imageInfo));
    }
public void testCreateUntaggedImageFromUserRepository() throws Exception {
	assertTrue(executionResult.isSuccess());
	assertTrue(context.containsKey(CreateImageCommand.IMAGE_CREATION_INFOS_KEY));
	assertNotNull(context.get(CreateImageCommand.IMAGE_CREATION_INFOS_KEY));
	ImageCreation[] infos = (ImageCreation[]) context.get(CreateImageCommand.IMAGE_CREATION_INFOS_KEY);
	assertTrue(infos.length != 0);

	// test that image is actually is created with the "latest" tag
public void testCreateTaggedImageFromUserRepository() throws Exception {
	assertTrue(executionResult.isSuccess());
	assertTrue(context.containsKey(CreateImageCommand.IMAGE_CREATION_INFOS_KEY));
	assertNotNull(context.get(CreateImageCommand.IMAGE_CREATION_INFOS_KEY));
	ImageCreation[] infos = (ImageCreation[]) context.get(CreateImageCommand.IMAGE_CREATION_INFOS_KEY);
	assertTrue(infos.length != 0);
	assertTrue(dockerClient.imageExists(session, imageInfo));
    }
public void testSucceedsIfImageAlreadyExists() throws Exception {
	assertTrue(executionResult.isSuccess());
	assertTrue(context.containsKey(CreateImageCommand.IMAGE_CREATION_INFOS_KEY));
	assertNotNull(context.get(CreateImageCommand.IMAGE_CREATION_INFOS_KEY));
	ImageCreation[] infos = (ImageCreation[]) context.get(CreateImageCommand.IMAGE_CREATION_INFOS_KEY);
	assertEquals(0, infos.length);
    }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
package org.antlr.intellij.adaptor.lexer;

import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.IntStream;
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.LexerNoViableAltException;
import org.antlr.v4.runtime.Token;

public abstract class MyANTLRLexer extends Lexer {
	public MyANTLRLexer(CharStream input) {
		super(input);
	}

	/** Return a token from this source; i.e., match a token on the char
	 *  stream.
	 */
	@Override
	public Token nextToken() {
		if (_input == null) {
			throw new IllegalStateException("nextToken requires a non-null input stream.");
		}

		// Mark start location in char stream so unbuffered streams are
		// guaranteed at least have text of current token
		int tokenStartMarker = _input.mark();
		try{
			outer:
			while (true) {
				if (_hitEOF) {
					emitEOF();
					return _token;
				}

				_token = null;
				_channel = Token.DEFAULT_CHANNEL;
				_tokenStartCharIndex = _input.index();
				_tokenStartCharPositionInLine = getInterpreter().getCharPositionInLine();
				_tokenStartLine = getInterpreter().getLine();
				_text = null;
				do {
					_type = Token.INVALID_TYPE;
//				System.out.println("nextToken line "+tokenStartLine+" at "+((char)input.LA(1))+
//								   " in mode "+mode+
//								   " at index "+input.index());
					int ttype;
					try {
						ttype = getInterpreter().match(_input, _mode);
					}
					catch (LexerNoViableAltException e) {
						notifyListeners(e);		// report error
						recover(e);
						ttype = SKIP;
					}
					if ( _input.LA(1)==IntStream.EOF ) {
						_hitEOF = true;
					}
					if ( _type == Token.INVALID_TYPE ) _type = ttype;
					if ( _type ==SKIP ) {
						continue outer;
					}
				} while ( _type ==MORE );
				if ( _token == null ) emit();
				return _token;
			}
		}
		finally {
			// make sure we release marker after match or
			// unbuffered char stream will keep buffering
			_input.release(tokenStartMarker);
		}
	}
}
/** A grammar for ANTLR v4 tokens */
lexer grammar ANTLRv4Lexer;

options {superClass='org.antlr.intellij.adaptor.lexer.MyANTLRLexer';}

tokens {
	TOKEN_REF,
	RULE_REF,
tokens {
	private boolean inParserRule() { // not used, but added for clarity
		return _currentRuleType == RULE_REF;
	}
}

DOC_COMMENT
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import java.util.List;
import java.util.concurrent.TimeUnit;

import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSocketFactory;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;
    private OkHttpClient client;
    private ClearableCookieJar cookieJar;
    private SSLSocketFactory sslSocketFactory;

    private boolean followRedirects = true;

    // deprecated
public CouchbaseLiteHttpClientFactory(ClearableCookieJar cookieJar) {
    @InterfaceAudience.Private
    public void setSSLSocketFactory(SSLSocketFactory sslSocketFactory) {
        if (this.sslSocketFactory != null) {
            throw new RuntimeException("SSLSocketFactory already set");
        }
        this.sslSocketFactory = sslSocketFactory;
    }

    ////////////////////////////////////////////////////////////
    // Implementations of HttpClientFactory
    ////////////////////////////////////////////////////////////
synchronized public OkHttpClient getOkHttpClient() {
            if (sslSocketFactory != null)
                builder.sslSocketFactory(sslSocketFactory);

            // synchronize access to the cookieStore in case there is another
            // thread in the middle of updating it.  wait until they are done so we get their changes.
            builder.cookieJar(cookieJar);
public void checkServerTrusted(X509Certificate[] chain, String authType)
        return sslContext.getSocketFactory();
    }

    /**
     * This is a convenience method to allow couchbase lite to connect to servers
     * that use self-signed SSL certs.
public void checkServerTrusted(X509Certificate[] chain, String authType)
     */
    @InterfaceAudience.Public
    public void allowSelfSignedSSLCertificates() {
        try {
            setSSLSocketFactory(selfSignedSSLSocketFactory());
        } catch (GeneralSecurityException e) {
            throw new RuntimeException(e);
        }
    }

    /**
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import java.util.List;

import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.jdt.core.CompletionProposal;
import org.eclipse.jdt.core.ICompilationUnit;
import org.eclipse.jdt.core.JavaModelException;

	Either<List<CompletionItem>, CompletionList> completion(TextDocumentPositionParams position,
			IProgressMonitor monitor) {
		List<CompletionItem> completionItems;
		try {
			ICompilationUnit unit = JDTUtils.resolveCompilationUnit(position.getTextDocument().getUri());
			completionItems = this.computeContentAssist(unit,
					position.getPosition().getLine(),
					position.getPosition().getCharacter(), monitor);
		} catch (Exception e) {
			JavaLanguageServerPlugin.logException("Problem with codeComplete for " +  position.getTextDocument().getUri(), e);
			completionItems = Collections.emptyList();
		}
		CompletionList $ = new CompletionList();
		$.setItems(completionItems);
		JavaLanguageServerPlugin.logInfo("Completion request completed");
		return Either.forRight($);
	}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void subscribe(SingleEmitter<Listing<Submission>> e) throws Exception {
                        .getRedditClient();

                if (redditClient.isAuthenticated()) {
                    SubredditPaginator paginator = new SubredditPaginator(redditClient, subreddit);
                    paginator.setLimit(limit);
                    paginator.setSorting(sorting);

                    e.onSuccess(paginator.next(false));
                } else {
                    e.onError(new NotAuthenticatedException());
                }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        List<Long> playersOnline = new ArrayList<>();
        List<String> labels = new ArrayList<>();

        for (Long start : sessionStarts) {
            if (start < nowMinusScale) {
                sessionStarts.add(nowMinusScale);
            }
        }

        long lastPValue = 0;
        long lastSavedPValue = -1;
        long lastSaveI = 0;
name: Plan
author: Rsl1122
main: main.java.com.djrapitops.plan.Plan
version: 3.0.1

softdepend:
- OnTime
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void setCurrentIndexedCollapseThreshold(int currentIndexedCollapseThresho
    public Date getDateForLastIndexRun() {
        if (lastModified == null) {
            File timestamp = new File(getDataRoot(), "timestamp");
            lastModified = new Date(timestamp.lastModified());
        }
        return lastModified;
    }
public void setSourceRoot(String sourceRoot) {
    public String getPathRelativeToSourceRoot(File file, int stripCount) throws IOException {
        String canonicalPath = file.getCanonicalPath();
        String sourceRoot = getSourceRootPath();
        if (canonicalPath.startsWith(sourceRoot)) {
            return canonicalPath.substring(sourceRoot.length() + stripCount);
        }
public void saveStatistics(OutputStream out) throws IOException {
     * @throws ParseException
     */
    public void loadStatistics() throws IOException, ParseException {
        loadStatistics(new File(getConfiguration().getStatisticsFilePath()));
    }

public String getPathTitle() {

        return Util.htmlize(title);
    }
}
public void testGetValidJson() {
    public void testInvalidReload() {
        Message m = new StatsMessage();
        m.setText("reload");
        env.getConfiguration().setStatisticsFilePath(null);

        try {
            m.apply(env);
Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
Portions Copyright 2011 Jens Elkner.
--%!>(MISSING)<%!@(MISSING)page import="
java.util.EnumSet,

org.opensolaris.opengrok.web.PageConfig,
org.opensolaris.opengrok.web.Prefix"
org.opensolaris.opengrok.web.Prefix"
/* ---------------------- foot.jspf start --------------------- */
{
    PageConfig cfg = PageConfig.get(request);

        %!>(MISSING)
    <div id="footer">
<p><a href="http://opengrok.github.com/OpenGrok/"
 title="Served by OpenGrok"><span id="fti"></span></a></p>
<p>Indexes created <%!=(MISSING) cfg.getEnv().getDateForLastIndexRun() %!>(MISSING)</p>
    <%!=(MISSING) cfg.getEnv().getConfiguration().getFooterIncludeFileContent() %!>(MISSING)
    <%!
(MISSING)    if (needAddDiv.contains(cfg.getPrefix())) {
include file="projects.jspf"
{
    PageConfig cfg = PageConfig.get(request);
    cfg.setTitle("Search");
}
%!>(MISSING)<%!@(MISSING)

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public OAuth2AccessToken getAccessToken(OAuth2Authentication authentication) {
			conn.close();
		}
		OAuth2AccessToken accessToken = deserializeAccessToken(bytes);
		if (accessToken != null
				&& !key.equals(authenticationKeyGenerator.extractKey(readAuthentication(accessToken.getValue())))) {
			// Keep the stores consistent (maybe the same user is
			// represented by this authentication but the details have
			// changed)
			storeAccessToken(accessToken, authentication);
		}
		return accessToken;
	}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public synchronized boolean add(Resource subj, IRI pred, Value obj, Resource...
		if (subj == null || pred == null || obj == null)
			throw new UnsupportedOperationException("Incomplete statement");
		try {
			if (contains(dataset, subj, pred, obj, contexts)) {
				logger.trace("already contains statement {} {} {} {}", subj, pred, obj, contexts);
				return false;
			}
public synchronized void removeTermIteration(Iterator<Statement> iter, Resource
		}
	}

	private SailSink sink()
		throws SailException
	{
		if (sink == null) {
private SailSink sink()
		return sink;
	}

	private SailDataset dataset()
		throws SailException
	{
		if (sink != null) {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
# Refined Storage Changelog

### 0.7.10
**Bugfixes**
- Fixed inventories not saving correctly
import net.minecraft.tileentity.TileEntity;
import net.minecraft.util.*;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.text.TextComponentString;
import net.minecraft.world.World;
import refinedstorage.RefinedStorage;
import refinedstorage.RefinedStorageBlocks;
public EnumActionResult onItemUse(ItemStack stack, EntityPlayer player, World wo
                if (((TileController) tile).getWirelessGridHandler().handleOpen(player, hand)) {
                    return new ActionResult(EnumActionResult.SUCCESS, stack);
                } else {
                    player.addChatComponentMessage(new TextComponentString(I18n.format("misc.refinedstorage:wireless_grid.out_of_range")));
                }
            } else {
                player.addChatComponentMessage(new TextComponentString(I18n.format("misc.refinedstorage:wireless_grid.not_found")));
            }
        }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import magic.model.MagicChangeCardDefinition;
import magic.model.stack.MagicCardOnStack;
import magic.model.target.MagicCopyPermanentPicker;
import magic.model.choice.MagicTargetChoice;
import magic.model.choice.MagicMayChoice;
import magic.model.action.EnterAsCopyAction;
public void change(final MagicCardDefinition cdef) {

    public static MagicETBEvent copyOf(final String desc) {
        final MagicTargetChoice choice = new MagicTargetChoice("a " + desc);
        return new MagicETBEvent() {
            @Override
            public MagicEvent getEvent(final MagicCardOnStack cardOnStack,final MagicPayedCost payedCost) {
                return new MagicEvent(
                    cardOnStack,
                    new MagicMayChoice(choice),
                    MagicCopyPermanentPicker.create(),
                    this,
                    "PN may$ have SN enter the battlefield as a copy of any " + desc + "$."
                );
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 */
package com.liulishuo.filedownloader.exception;

import com.liulishuo.filedownloader.connection.FileDownloadConnection;
import com.liulishuo.filedownloader.util.FileDownloadUtils;

import java.util.List;
import java.util.Map;

    private final Map<String, List<String>> mRequestHeaderMap;
    private final Map<String, List<String>> mResponseHeaderMap;

    public FileDownloadHttpException(final int code, final FileDownloadConnection connection) {
        super(FileDownloadUtils.formatString("response code error: %!d(MISSING), \n request headers: %!s(MISSING) \n " +
                        "response headers: %!s(MISSING)", code,
                connection.getRequestHeaderFields(), connection.getResponseHeaderFields()));

        this.mCode = code;
        this.mRequestHeaderMap = connection.getRequestHeaderFields();
        this.mResponseHeaderMap = connection.getResponseHeaderFields();
    }

    /**
public FileDownloadHttpException(final int code, final FileDownloadConnection co
    public int getCode() {
        return this.mCode;
    }
}
private void loop(FileDownloadModel model) {

                // start download----------------
                // Step 3, init request
                if (FileDownloadLog.NEED_LOG) {
                    FileDownloadLog.d(this, "%!s(MISSING) request header %!s(MISSING)", id, connection.getRequestHeaderFields());
                }

                // Step 4, build connect
private void loop(FileDownloadModel model) {

                } else {
                    final FileDownloadHttpException httpException =
                            new FileDownloadHttpException(code, connection);

                    if (revisedInterval) {
                        throw httpException;
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public ActionObjective(Instruction instruction) throws InstructionParseException
			data = parts.length > 1 ? instruction.getByte(parts[1], (byte) -1) : -1;
		}
		loc = instruction.getLocation(instruction.getOptional("loc"));
		range = instruction.getVarNum(instruction.getOptional("range"));
		cancel = instruction.hasArgument("cancel");
	}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void callback(String putUrl, String getUrl) {
                        try {
                            MediaStorage.cacheThumbnail(this, previewUri, previewPath, true);
                        }
                        catch (IOException e) {
                            Log.w(TAG, "unable to generate preview for media", e);
                        }
                    }
protected Boolean doInBackground(Void... params) {
                    MediaStorage.cacheThumbnail(context, mLocalUri, mPreviewFile, false);
                    return true;
                }
                catch (IOException e) {
                    Log.e(TAG, "unable to generate thumbnail", e);
                }
            }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
package io.micrometer.spring.web;

import io.micrometer.core.annotation.Timed;
import io.micrometer.core.instrument.MeterRegistry;
import io.micrometer.core.instrument.Tag;
import io.micrometer.core.instrument.Timer;
import io.micrometer.core.instrument.stats.quantile.WindowSketchQuantiles;
import io.micrometer.core.instrument.util.AnnotationUtils;
import org.apache.commons.logging.Log;
import javax.servlet.http.HttpServletResponse;
import java.lang.reflect.Method;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

import static java.util.stream.Collectors.toSet;

/**
 * @author Jon Schneider
    private final MeterRegistry registry;
    private final WebmvcTagConfigurer tagConfigurer;
    private final String metricName;
    private final Map<Timed, Long> longTaskTimerIds = new ConcurrentHashMap<>();

    public ControllerMetrics(MeterRegistry registry,
                             WebmvcTagConfigurer tagConfigurer,
void preHandle(HttpServletRequest request, HandlerMethod handler) {
                logger.warn("Unable to perform metrics timing on " + handler.getShortLogMessage() + ": @Timed annotation must have a value used to name the metric");
                return;
            }
            longTaskTimerIds.put(t, registry.longTaskTimer(t.value(), tagConfigurer.httpLongRequestTags(request, handler)).start());
        });
    }

HttpServletResponse record(HttpServletRequest request, HttpServletResponse respo
        // complete any LongTaskTimer tasks running for this method
        longTaskTimed(handler).forEach(t -> {
            if(!t.value().isEmpty()) {
                registry.longTaskTimer(t.value(), tagConfigurer.httpLongRequestTags(request, handler)).stop(longTaskTimerIds.remove(t));
            }
        });

HttpServletResponse record(HttpServletRequest request, HttpServletResponse respo
        return response;
    }

    private Set<Timed> longTaskTimed(Object m) {
        if(!(m instanceof HandlerMethod))
            return Collections.emptySet();
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.scheduling.annotation.EnableScheduling;

//@SpringBootApplication(scanBasePackages = "io.micromter.spring.samples.components")
//@EnableAtlasMetrics
//@EnableScheduling
public class AtlasSample {
    public static void main(String[] args) {
        SpringApplication.run(AtlasSample.class, args);
public void longRunningRequest() throws Exception {
                .andReturn();

        // while the mapping is running, it contributes to the activeTasks count
        assertThat(registry.findMeter(LongTaskTimer.class, "my_long_request"))
                .hasValueSatisfying(t -> assertThat(t.activeTasks()).isEqualTo(1));

        // once the mapping completes, we can gather information about status, etc.
public String successfulWithExtraTags(@PathVariable Long id) {
        }

        @Timed // contains dimensions for status, etc. that can't be known until after the response is sent
        @Timed(value = "my_long_request", longTask = true) // in progress metric
        @GetMapping("/long/{id}")
        public Callable<String> takesLongTimeToSatisfy(@PathVariable Long id) {
            return () -> {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void run() {
			if (found != null) {
				Map<String, Object> datamap = customRewards.get(found.getName());
				String message = found.getRewardName();
				for (String key : datamap.keySet()) {
					message = message.replaceAll("%!"(MISSING) + ((String) key) + "%!"(MISSING), ((String) datamap.get(key)));
				}
				player.sendMessage("- " + ChatColor.GOLD + message);
				found.giveReward(player, customRewards.get(s));
			} else {
				plugin.getLogger().warning("[Quests] Quester \"" + player.getName() + "\" completed the Quest \"" + name + "\", but the Custom Reward \"" + s + "\" could not be found. Does it still exist?");
			}
			none = null;
		}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import org.apache.kafka.clients.consumer.ConsumerRebalanceListener;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.OffsetAndMetadata;
import org.apache.kafka.clients.consumer.OffsetCommitCallback;
import org.apache.kafka.common.TopicPartition;
public String toString() {

		private long last;

		@SuppressWarnings("unchecked")
		ListenerConsumer(GenericMessageListener<?> listener, ListenerType listenerType) {
			Assert.state(!this.isAnyManualAck || !this.autoCommit,
public void onPartitionsAssigned(Collection<TopicPartition> partitions) {
						// see https://github.com/spring-projects/spring-kafka/issues/110
						Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();
						for (TopicPartition partition : partitions) {
							offsets.put(partition, new OffsetAndMetadata(consumer.position(partition)));
						}
						if (ListenerConsumer.this.logger.isDebugEnabled()) {
							ListenerConsumer.this.logger.debug("Committing on assignment: " + offsets);
public void run() {
				catch (WakeupException e) {
					// Ignore, we're stopping
				}
				catch (Exception e) {
					if (this.containerProperties.getGenericErrorHandler() != null) {
						this.containerProperties.getGenericErrorHandler().handle(e, null);
public void run() {
					}
				}
			}
			commitPendingAcks();
			try {
				this.consumer.unsubscribe();
			}
			catch (WakeupException e) {
				// No-op. Continue process
			}
			this.consumer.close();
			if (this.logger.isInfoEnabled()) {

	private static String topic16 = "testTopic16";

	@ClassRule
	public static KafkaEmbedded embeddedKafka = new KafkaEmbedded(1, true, topic3, topic4, topic5,
			topic6, topic7, topic8, topic9, topic10, topic11, topic12, topic13, topic14, topic15, topic16);

	@Rule
	public TestName testName = new TestName();
public void testDelegateType() throws Exception {
	}

	@Test
	public void testListenerTypes() throws Exception {
		Map<String, Object> props = KafkaTestUtils.consumerProps("lt1", "false", embeddedKafka);
		props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, "earliest");
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public static PhpClass getPhpClassByCallChain(MethodReference methodRef) {
                if (index2 == -1)
                    index2 = strType.length() - index1;

                if (index1 >= 0 && index2 >= 0) {
                    String className = strType.substring(index1, index2);
                    return ClassUtils.getClass(PhpIndex.getInstance(methodRef.getProject()), className);
                } else {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public KeyMaker createKeyMaker() {
        return new KeyMaker() {
            @Override
            protected Object makeKey(Object value) {
                return (ExpressionUtils.isNonBlankData(value) && !(value instanceof String)) ?
                        collator.getCollationKey(value.toString()) : value;
            }

            @Override
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    private boolean failFast = true;
    private boolean isolateInternalQueries;
    private boolean autocommit;

    public String getDefaultCatalog() {
        return defaultCatalog;
public String getDataSourceName() {
    public void setDataSourceName(final String dataSourceName) {
        this.dataSourceName = dataSourceName;
    }
}
protected Beans() {

    /**
     * Get new data source, from JNDI lookup or created via direct configuration
     * of Hikari pool. If jpaProperties contains dataSourceName a lookup will be
     * attempted If datasource not found via JNDI it will be
     *
     * @param jpaProperties the jpa properties
     * @return the data source
     */
    public static DataSource newDataSource(final AbstractJpaProperties jpaProperties) {
        final HikariDataSource bean = new HikariDataSource();

        final String dataSourceName = jpaProperties.getDataSourceName();
        if (StringUtils.isNotBlank(dataSourceName)) {
            try {
                final JndiDataSourceLookup dsLookup = new JndiDataSourceLookup();
public static DataSource newDataSource(final AbstractJpaProperties jpaProperties
                  */
                dsLookup.setResourceRef(false);
                final DataSource containerDataSource = dsLookup.getDataSource(dataSourceName);
                bean.setDataSource(containerDataSource);
                return bean;
            } catch (final DataSourceLookupFailureException e) {
                LOGGER.warn("Lookup of datasource [{}] failed due to {} "
                        + "falling back to configuration via JPA properties.", dataSourceName, e.getMessage());
            }
        }

        try {
            if (StringUtils.isNotBlank(jpaProperties.getDriverClass())) {
                bean.setDriverClassName(jpaProperties.getDriverClass());
            }
            bean.setJdbcUrl(jpaProperties.getUrl());
            bean.setUsername(jpaProperties.getUser());
            bean.setPassword(jpaProperties.getPassword());

            bean.setMaximumPoolSize(jpaProperties.getPool().getMaxSize());
            bean.setMinimumIdle(jpaProperties.getPool().getMinSize());
            bean.setIdleTimeout(jpaProperties.getIdleTimeout());
public static DataSource newDataSource(final AbstractJpaProperties jpaProperties
            bean.setConnectionTestQuery(jpaProperties.getHealthQuery());
            bean.setAllowPoolSuspension(jpaProperties.getPool().isSuspension());
            bean.setAutoCommit(jpaProperties.isAutocommit());
            bean.setLoginTimeout(Long.valueOf(jpaProperties.getPool().getMaxWait()).intValue());
            bean.setValidationTimeout(jpaProperties.getPool().getTimeoutMillis());
            return bean;
        } catch (final Exception e) {
connection. When using a container configured data source, many of the pool rela
If `dataSourceName` is specified but the JNDI lookup fails, a data source will be created with the configured 
(or default) CAS pool parameters.

The `dataSourceName` property can be either a JNDI name for the datasource or a resource name prefixed with 
`java:/comp/env/`. If it is a resource name then you need an entry in a `web.xml` that you can add to your
CAS overlay. It should contain an entry like this:
security.basic.realm=CAS
# cas.adminPagesSecurity.jdbc.driverClass=org.hsqldb.jdbcDriver
# cas.adminPagesSecurity.jdbc.idleTimeout=5000
# cas.adminPagesSecurity.jdbc.dataSourceName=
```

#### LDAP Authentication
the following settings are then relevant:
# cas.authn.attributeRepository.jdbc[0].pool.maxSize=18
# cas.authn.attributeRepository.jdbc[0].pool.maxWait=2000
# cas.authn.attributeRepository.jdbc[0].dataSourceName=
```

### Grouper
same IP address.
# cas.authn.throttle.jdbc.pool.maxSize=18
# cas.authn.throttle.jdbc.pool.maxWait=2000
# cas.authn.throttle.jdbc.dataSourceName=
```

## Adaptive Authentication
against the password on record determined by a configurable database query.
# cas.authn.jdbc.query[0].name=
# cas.authn.jdbc.query[0].order=0
# cas.authn.jdbc.query[0].dataSourceName=

# cas.authn.jdbc.query[0].fieldPassword=password
# cas.authn.jdbc.query[0].fieldExpired=
Searches for a user record by querying against a username and password; the user
# cas.authn.jdbc.search[0].name=
# cas.authn.jdbc.search[0].order=0
# cas.authn.jdbc.search[0].dataSourceName=

# cas.authn.jdbc.search[0].passwordEncoder.type=NONE|DEFAULT|STANDARD|BCRYPT|SCRYPT|PBKDF2|com.example.CustomPasswordEncoder
# cas.authn.jdbc.search[0].passwordEncoder.characterEncoding=
Authenticates a user by attempting to create a database connection using the use
# cas.authn.jdbc.bind[0].name=
# cas.authn.jdbc.bind[0].order=0
# cas.authn.jdbc.bind[0].dataSourceName=
# cas.authn.jdbc.bind[0].passwordEncoder.type=NONE|DEFAULT|STANDARD|BCRYPT|SCRYPT|PBKDF2|com.example.CustomPasswordEncoder
# cas.authn.jdbc.bind[0].passwordEncoder.characterEncoding=
# cas.authn.jdbc.bind[0].passwordEncoder.encodingAlgorithm=
is converted to hex before comparing it to the database value.
# cas.authn.jdbc.encode[0].name=
# cas.authn.jdbc.encode[0].order=0
# cas.authn.jdbc.encode[0].dataSourceName=
# cas.authn.jdbc.encode[0].passwordEncoder.type=NONE|DEFAULT|STANDARD|BCRYPT|SCRYPT|PBKDF2|com.example.CustomPasswordEncoder
# cas.authn.jdbc.encode[0].passwordEncoder.characterEncoding=
# cas.authn.jdbc.encode[0].passwordEncoder.encodingAlgorithm=
The encryption algorithm is set to `AES_128_CBC_HMAC_SHA_256`.
# cas.authn.mfa.trusted.jpa.driverClass=org.hsqldb.jdbcDriver
# cas.authn.mfa.trusted.jpa.idleTimeout=5000
# cas.authn.mfa.trusted.jpa.dataSourceName=

# cas.authn.mfa.trusted.jpa.pool.suspension=false
# cas.authn.mfa.trusted.jpa.pool.minSize=6
To learn more about this topic, [please review this guide](GoogleAuthenticator-A
# cas.authn.mfa.gauth.jpa.database.driverClass=org.hsqldb.jdbcDriver
# cas.authn.mfa.gauth.jpa.database.idleTimeout=5000
# cas.authn.mfa.gauth.jpa.database.dataSourceName=

# cas.authn.mfa.gauth.jpa.database.pool.suspension=false
# cas.authn.mfa.gauth.jpa.database.pool.minSize=6
Store audit logs inside a database.
# cas.audit.jdbc.driverClass=org.hsqldb.jdbcDriver
# cas.audit.jdbc.idleTimeout=5000
# cas.audit.jdbc.dataSourceName=

# cas.audit.jdbc.pool.suspension=false
# cas.audit.jdbc.pool.minSize=6
for authentication or attribute retrieval.
# cas.monitor.jdbc.driverClass=org.hsqldb.jdbcDriver
# cas.monitor.jdbc.idleTimeout=5000
# cas.monitor.jdbc.dataSourceName=
```

### LDAP Connection Pool
Decide how CAS should store authentication events inside a database instance.
# cas.events.jpa.driverClass=org.hsqldb.jdbcDriver
# cas.events.jpa.idleTimeout=5000
# cas.events.jpa.dataSourceName=

# cas.events.jpa.pool.suspension=false
# cas.events.jpa.pool.minSize=6
To learn more about this topic, [please review this guide](JPA-Service-Managemen
# cas.serviceRegistry.jpa.driverClass=org.hsqldb.jdbcDriver
# cas.serviceRegistry.jpa.idleTimeout=5000
# cas.serviceRegistry.jpa.dataSourceName=

# cas.serviceRegistry.jpa.pool.suspension=false
# cas.serviceRegistry.jpa.pool.minSize=6
To learn more about this topic, [please review this guide](JPA-Ticket-Registry.h
# cas.ticket.registry.jpa.driverClass=org.hsqldb.jdbcDriver
# cas.ticket.registry.jpa.idleTimeout=5000
# cas.ticket.registry.jpa.dataSourceName=

# cas.ticket.registry.jpa.pool.suspension=false
# cas.ticket.registry.jpa.pool.minSize=6
The following LDAP types are supported:
# cas.authn.pm.jdbc.driverClass=org.hsqldb.jdbcDriver
# cas.authn.pm.jdbc.idleTimeout=5000
# cas.authn.pm.jdbc.dataSourceName=

# cas.authn.pm.jdbc.passwordEncoder.type=NONE|DEFAULT|STANDARD|BCRYPT|SCRYPT|PBKDF2|com.example.CustomPasswordEncoder
# cas.authn.pm.jdbc.passwordEncoder.characterEncoding=
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void onCompletion(Response response, Object result, Throwable e) {
                        retryCount += 1;
                        // delay * 2 << retry
                        long delay = RETRY_DELAY_MS * (long) Math.pow((double) 2, (double) Math.min(retryCount - 1, MAX_RETRIES));
                        retryFuture = workExecutor.schedule(new Runnable() {
                            @Override
                            public void run() {
                                submit();
                            }
                        }, delay, TimeUnit.MILLISECONDS); // delay init_delay * 2^retry ms
                    }
                } else {
                    Log.d(TAG, "%!s(MISSING): RemoteRequestRetry failed, non-transient error.  NOT retrying. url: %!s(MISSING)", this, url);
    private boolean overdueForCheckpointSave;

    // the code assumes this is a _single threaded_ work executor.
    protected ScheduledExecutorService executor;

    protected StateMachine<ReplicationState, ReplicationTrigger> stateMachine;
    private final List<ChangeListener> changeListeners = new CopyOnWriteArrayList<ChangeListener>();

        pendingFutures = new CustomLinkedBlockingQueue<Future>(this);

        initializeReplicationExecutor();

        initializeStateMachine();
    }
    protected void finalize() throws Throwable {
        if (executor != null && !executor.isShutdown()) {
            Utils.shutdownAndAwaitTermination(executor);
            executor = null;
        }
        super.finalize();
    }
protected void close() {

    protected void initAuthorizer() {
        if (authenticator != null && authenticator instanceof Authorizer) {
            Authorizer authorizer = (Authorizer)authenticator;
            authorizer.setRemoteURL(remote);
            authorizer.setLocalUUID(db.publicUUID());
        }
protected boolean isNetworkReachable() {

    public abstract void setCreateTarget(boolean createTarget);

    protected void initializeReplicationExecutor() {
        if (executor == null) {
            executor = Executors.newSingleThreadScheduledExecutor(new ThreadFactory() {
                @Override
                public Thread newThread(Runnable r) {
                    String threadName = "CBLReplicationExecutor";
                    try {
                        String maskedRemote = ReplicationInternal.this.remote.toExternalForm();
                        maskedRemote = maskedRemote.replaceAll("://.*:.*@", "://---:---@");
                        String type = isPull() ? "pull" : "push";
                        String replicationIdentifier = Utils.shortenString(remoteCheckpointDocID(), 5);
                        threadName = String.format(Locale.ENGLISH, "CBLReplicationExecutor-%!s(MISSING)-%!s(MISSING)-%!s(MISSING)",
                                maskedRemote, type, replicationIdentifier);
                    } catch (Exception e) {
                        Log.e(Log.TAG_SYNC, "Error creating thread name", e);
                    }
                    return new Thread(r, threadName);
                }
            });
        }
    }

    protected void initializeRequestWorkers() {
public void onCompletion(Response httpResponse, Object result, Throwable e) {

    protected void setLastSequenceFromWorkExecutor(final String lastSequence, final String checkpointId) {
        // write access to database from executor
        executor.submit(new Runnable() {
            @Override
            public void run() {
                if (db != null && db.isOpen())
                    db.setLastSequence(lastSequence, checkpointId);
            }
        });
        // no wait...
    }

public void doIt(Transition<ReplicationState, ReplicationTrigger> transition) {

                // ask executor to shutdown. this does not force to shutdown.
                // https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ExecutorService.html#shutdown()
                if (executor != null && !executor.isShutdown())
                    executor.shutdown();
            }
        });
    }
protected void retryIfReady() {
     */
    private void scheduleRetryFuture() {
        Log.v(Log.TAG_SYNC, "%!s(MISSING): Failed to xfer; will retry in %!d(MISSING) sec", this, RETRY_DELAY_SECONDS);
        this.retryFuture = executor.schedule(new Runnable() {
            public void run() {
                retryIfReady();
            }
        }, RETRY_DELAY_SECONDS, TimeUnit.SECONDS);
    }

    /**
public void setLastSequence(String lastSequenceIn) {
            lastSequence = lastSequenceIn;
            if (!lastSequenceChanged) {
                lastSequenceChanged = true;
                executor.schedule(new Runnable() {
                    public void run() {
                        saveLastSequence();
                    }
                }, SAVE_LAST_SEQUENCE_DELAY, TimeUnit.SECONDS);
            }
        }
    }
public void queueObjects(List<T> objects) {
            synchronized (processMutex) {
                try {
                    processMutex.wait(5);
                } catch (InterruptedException e) { }
            }
        }
    }
public void flushAll(boolean waitForAllToFinish) {
        }

        while (true) {
            ScheduledFuture future;
            synchronized (mutex) {
                if (inbox.size() == 0)
                    break; // Nothing to do

                final List<T> toProcess = new ArrayList<T>(inbox);
                inbox.clear();
                mutex.notifyAll();

                future = workExecutor.schedule(new Runnable() {
                    @Override
                    public void run() {
                        processor.process(toProcess);
                        synchronized (mutex) {
                            lastProcessedTime = System.currentTimeMillis();
                        }
                    }
                }, 0, TimeUnit.MILLISECONDS);
            }

            if (waitForAllToFinish) {
public void waitForPendingFutures() {
                        Log.v(Log.TAG_BATCHER, "%!s(MISSING): waitForPendingFutures, inbox size: %!d(MISSING)",
                                this, inbox.size());
                        mutex.wait(300);
                    } catch (InterruptedException e) {}
                }
                future = pendingFuture;
            }
private void scheduleWithDelay(long delay) {
                scheduled = true;
                scheduledDelay = delay;
                Log.v(Log.TAG_BATCHER, "%!s(MISSING): scheduleWithDelay %!d(MISSING) ms, scheduled ...", this, delay);
                pendingFuture = workExecutor.schedule(new Runnable() {
                    @Override
                    public void run() {
                        Log.v(Log.TAG_BATCHER, "%!s(MISSING): call processNow ...", this);
                        processNow();
                        Log.v(Log.TAG_BATCHER, "%!s(MISSING): call processNow done", this);
                    }
                }, scheduledDelay, TimeUnit.MILLISECONDS);
            } else
                Log.v(Log.TAG_BATCHER, "%!s(MISSING): scheduleWithDelay %!d(MISSING) ms, ignored", this, delay);
        }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public Response searchDevices(@QueryParam("offset") int offset,
                    new ErrorResponse.ErrorResponseBuilder().setMessage(msg).build()).build();
        }
        deviceList.setList(devices);
        return Response.status(Response.Status.OK).entity(deviceList).build();
    }

public Device getDevice(DeviceIdentifier deviceIdentifier, Date since, int tenan
            stmt.setInt(paramIdx, tenantId);
            rs = stmt.executeQuery();
            if (rs.next()) {
                device = DeviceManagementDAOUtil.loadMatchingDevice(rs, true);
            }
        } catch (SQLException e) {
            throw new DeviceManagementDAOException("Error occurred while listing device for type " +
public String processAND(List<Condition> conditions, ValueType[] valueType, Inte
                        ValueType type = new ValueType();
                        if (Utils.checkColumnType(con.getKey())) {
                            type.setColumnType(ValueType.columnType.STRING);
                            type.setStringValue(Utils.getConvertedValue(con.getKey(), con.getValue()));
                        } else {
                            type.setColumnType(ValueType.columnType.INTEGER);
                            type.setIntValue(Integer.parseInt(Utils.getConvertedValue(con.getKey(), con.getValue())));
                        }
                        valueType[x] = type;
                        x++;
public String processOR(List<Condition> conditions, ValueType[] valueType, Integ
                        ValueType type = new ValueType();
                        if (Utils.checkColumnType(con.getKey())) {
                            type.setColumnType(ValueType.columnType.STRING);
                            type.setStringValue(Utils.getConvertedValue(con.getKey(), con.getValue()));
                        } else {
                            type.setColumnType(ValueType.columnType.INTEGER);
                            type.setIntValue(Integer.parseInt(Utils.getConvertedValue(con.getKey(), con.getValue())));
                        }
                        valueType[x] = type;
                        x++;
public static boolean checkColumnType(String column) {
        return bool;
    }

    public static String getConvertedValue(String column, String value) {

        if (checkColumnType(column)) {
            return "\'" + value + "\'";
        } else return value;

    }

    public static Map<String, String> getDeviceDetailsColumnNames() {
        return genericColumnsMap;
    }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import com.pi4j.io.gpio.exception.UnsupportedPinEventsException;
import com.pi4j.io.gpio.trigger.GpioTrigger;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;

public class GpioControllerImpl implements GpioController {

public synchronized void shutdown()
        // executor services, we must perform the shutdown with the factory
        GpioFactory.getExecutorServiceFactory().shutdown();

        // shutdown explicit configured GPIO pins
        for (GpioPin pin : pins) {

            // perform a shutdown on the GPIO provider for this pin
            if(!pin.getProvider().isShutdown()){
                pin.getProvider().shutdown();
            }

            // perform the shutdown options if configured for the pin
public synchronized void shutdown()
            }
        }

        // set is shutdown tracking variable
        isshutdown = true;
    }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public int getNumOpenConnections()

      final long requestStartTimeNs = System.nanoTime();

      final QueryMetrics<? super Query<T>> queryMetrics = toolChest.makeMetrics(query);
      queryMetrics.server(host);

      long timeoutAt = ((Long) context.get(QUERY_FAIL_TIME)).longValue();
      long maxScatterGatherBytes = QueryContexts.getMaxScatterGatherBytes(query);
      AtomicLong totalBytesGathered = (AtomicLong) context.get(QUERY_TOTAL_BYTES_GATHERED);

      final HttpResponseHandler<InputStream, InputStream> responseHandler = new HttpResponseHandler<InputStream, InputStream>()
      {
        private long responseStartTimeNs;
        private final AtomicLong byteCount = new AtomicLong(0);
        private final BlockingQueue<InputStream> queue = new LinkedBlockingQueue<>();
        private final AtomicBoolean done = new AtomicBoolean(false);
        private final AtomicReference<String> fail = new AtomicReference<>();

        @Override
        public ClientResponse<InputStream> handleResponse(HttpResponse response)
        {
public int getNumOpenConnections()

          log.debug("Initial response from url[%!s(MISSING)] for queryId[%!s(MISSING)]", url, query.getId());
          responseStartTimeNs = System.nanoTime();
          queryMetrics.reportNodeTimeToFirstByte(responseStartTimeNs - requestStartTimeNs).emit(emitter);

          try {
            final String responseContext = response.headers().get("X-Druid-Response-Context");
public InputStream nextElement()
              nodeTimeMs,
              byteCount.get() / (0.001 * nodeTimeMs) // Floating math; division by zero will yield Inf, not exception
          );
          queryMetrics.reportNodeTime(nodeTimeNs);
          queryMetrics.reportNodeBytes(byteCount.get());
          queryMetrics.emit(emitter);
          synchronized (done) {
            try {
              // An empty byte array is put at the end to give the SequenceInputStream.close() as something to close out
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

package com.zaxxer.hikari.pool;

import static com.zaxxer.hikari.pool.PoolEntry.LASTACCESS_REVERSE_COMPARABLE;
import static com.zaxxer.hikari.util.ClockSource.currentTime;
import static com.zaxxer.hikari.util.ClockSource.elapsedDisplayString;
import static com.zaxxer.hikari.util.ClockSource.elapsedMillis;
import java.sql.SQLException;
import java.sql.SQLTransientConnectionException;
import java.util.Collection;
import java.util.Optional;
import java.util.concurrent.Callable;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Future;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
public void setHealthCheckRegistry(Object healthCheckRegistry)

   /** {@inheritDoc} */
   @Override
   public Future<Boolean> addBagItem(final int waiting)
   {
      final boolean shouldAdd = waiting - addConnectionQueue.size() >= 0; // Yes, >= is intentional.
      if (shouldAdd) {
         return addConnectionExecutor.submit(POOL_ENTRY_CREATOR);
      }

      return CompletableFuture.completedFuture(Boolean.TRUE);
   }

   // ***********************************************************************
else if (now > plusMillis(previous, (3 * HOUSEKEEPING_PERIOD_MS) / 2)) {
               logPoolState("Before cleanup ");
               afterPrefix = "After cleanup  ";

               connectionBag
                  .values(STATE_NOT_IN_USE)
                  .stream()
                  .sorted(LASTACCESS_REVERSE_COMPARABLE)
                  .skip(config.getMinimumIdle())
                  .filter(p -> elapsedMillis(p.lastAccessed, now) > idleTimeout)
                  .filter(connectionBag::reserve)
                  .forEachOrdered(p -> closeConnection(p, "(connection has passed idleTimeout)"));
            }

            logPoolState(afterPrefix);
 */
package com.zaxxer.hikari.pool;

import static com.zaxxer.hikari.util.ClockSource.currentTime;
import static com.zaxxer.hikari.util.ClockSource.elapsedDisplayString;
import static com.zaxxer.hikari.util.ClockSource.elapsedMillis;

import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Comparator;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.zaxxer.hikari.util.ConcurrentBag.IConcurrentBagEntry;
import com.zaxxer.hikari.util.FastList;

/**
 * Entry used in the ConcurrentBag to track Connection instances.
   private static final Logger LOGGER = LoggerFactory.getLogger(PoolEntry.class);
   private static final AtomicIntegerFieldUpdater<PoolEntry> stateUpdater;

   static final Comparator<PoolEntry> LASTACCESS_REVERSE_COMPARABLE;

   Connection connection;
   long lastAccessed;
   long lastBorrowed;

   static
   {
      LASTACCESS_REVERSE_COMPARABLE = (entryOne, entryTwo) -> Long.compare(entryTwo.lastAccessed, entryOne.lastAccessed);

      stateUpdater = AtomicIntegerFieldUpdater.newUpdater(PoolEntry.class, "state");
   }


import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.Future;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;

   private final SynchronousQueue<T> handoffQueue;

   public static interface IConcurrentBagEntry
   {
      int STATE_NOT_IN_USE = 0;
      int STATE_IN_USE = 1;
      int getState();
   }

   public static interface IBagStateListener
   {
      Future<Boolean> addBagItem(int waiting);
   }

   /**
public void close()
    */
   public List<T> values(final int state)
   {
      return sharedList.stream().filter(e -> e.getState() == state).collect(Collectors.toList());
   }

   /**
 */
public class ConnectionPoolSizeVsThreadsTest {

   public static final Logger LOGGER = LoggerFactory.getLogger(ConnectionPoolSizeVsThreadsTest.class);

   public static final int ITERATIONS = 50_000;

   @Test
   public void testPoolSizeAboutSameSizeAsThreadCount() throws Exception {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
jdk:
- oraclejdk8
branches:
  only:
    - master
before_deploy:
  - git config --global user.email ${GITHUB_EMAIL}
  - git config --global user.name ${GITHUB_NAME}
  - git tag ${TRAVIS_BUILD_NUMBER}
  - git push -q ${REPO} --tags
deploy:
  provider: releases
  api_key:
    secure: T3u0BqnXQ1MYMNdNdT+SNGYWGyPivrZMKnUIbWPZQGs001kq18BpC5WLabhH4+EfZ1P9j1hRHLUHsEP7QDjPeNPEtWFLNq51z+vPKx18eb6d0yUHHCWHGknP8NXWF7+buaQKZeJ05AzwkegnADumUOm+mqY249KSnlt0gFRaTWIAXUY8KOZP32Rq+pCE1yS7GsO7se27HtQw31qB9TEyEQYMU00pY/THqV4wHvO+9QHyFiv9MtbuTX+e4PEdA/xQpPv8qMX9BegppzX+Vz9Lughe77XWWJuOTqlcwqbj6M2Dao1KIlE4fzBN0zgdIApmATDzVdx7vthZdIFip2eRODlw9YKz0lX+gj8cuDw5uUZ4JTw5P5mkH9X0EDTv3h2nQw2A0qkYy3MGFhsSIwLJBeDkKQrUa/pylsPaYNwQUCegM3Sj/2wdN2IcllDUs7p5OOf4yhGRUUYR1JTocsZ3XcyzVlOsBXO2RJs9E6DqY9KUiEZG4NlQEo0DpYQrHR15r2Qhv8WmmxPaqBOO6wv21IpLsmf1t54PHIoBeVUI2qvjKuOBWX6XrljFL5iIYhIAmgjigggUmetJRNp1qbJQYBk6tSpsosMDnXEFHxtJXnomcpiZj0pbGGjWFREHxIDBqh0uLPk+NyD5RnI2+nVladEXoSdWnQCfQ4dYZy73bdI=
  file:
  - HMCL/build/libs/HMCL-${HMCL_VERSION_ROOT}.${TRAVIS_BUILD_NUMBER}.jar
  - HMCL/build/libs/HMCL-${HMCL_VERSION_ROOT}.${TRAVIS_BUILD_NUMBER}.exe
  - HMCL/build/libs/HMCL-${HMCL_VERSION_ROOT}.${TRAVIS_BUILD_NUMBER}-MacOSApp.zip
  on:
    repo: huanghongxun/HMCL
    tags: false
  skip_cleanup: true
install: echo "skip 'gradle assemble' step"
script: gradle build --continue --info --stacktrace
before_cache:
- rm -f $HOME/.gradle/caches/modules-2/modules-2.lock
cache:
  directories:
  - "$HOME/.gradle/caches/"
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see {http://www.gnu.org/licenses/}.
 */

buildscript {
    repositories {
        mavenCentral();
        
        dependencies {
            classpath 'me.tatarka:gradle-retrolambda:3.1.0'
        }
    }
}

plugins {
    //id "edu.sc.seis.macAppBundle" version "2.1.6"
    //id "me.tatarka.retrolambda" version "3.5.0"
    id 'edu.sc.seis.launch4j' version '2.3.0'
}

apply plugin: 'me.tatarka.retrolambda'

import java.util.jar.JarOutputStream
import java.util.zip.ZipEntry
import java.util.zip.ZipFile
version = mavenVersion

String mavenArtifactId = name

task generateSources(type: Copy) {
    from 'src/main/java'
    into "$buildDir/generated-src"
    filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [
task generateSources(type: Copy) {
compileJava.setSource "$buildDir/generated-src"
compileJava.dependsOn generateSources

/*task macAppCompressed(type: Zip, dependsOn: createApp) {
    archiveName "HMCL-$mavenVersion-MacOSApp.zip"
    include '**'
    destinationDir file("$buildDir/libs/")
    from "$buildDir/macApp"
}

macAppBundle {
    mainClassName = mainClass
    icon = "src/main/icon.icns"
    javaProperties.put("apple.laf.useScreenMenuBar", "true")
}*/

configurations {
    coreCompile.extendsFrom compile
    coreRuntime.extendsFrom runtime
launch4j {
    icon = new File(project.buildDir,  '../icon.ico').absolutePath
    version = mavenVersion
    downloadUrl = 'http://java.com/download'
    copyright = "Copyright(c) 2013-2015 huangyuhui."
    
    jar = new File(project.buildDir, 'libs/' + mavenGroupId + '-' + mavenVersion + '.jar').absolutePath
    outfile = mavenGroupId + '-' + mavenVersion + '.exe'
processResources {
    }
}

build.dependsOn makeExecutable
build.dependsOn makePackGZ
//build.dependsOn macAppCompressed
public static void main(String[] args) throws IOException {
            Thread.setDefaultUncaughtExceptionHandler(new CrashReporter(true));

            try {
                File file = new File("hmcl.log");
                if (!file.exists() && !file.createNewFile())
                    LOGGER.log(Level.WARNING, "Failed to create log file {0}", file);
                Configuration.DEFAULT.appenders.add(new ConsoleAppender("File", new DefaultLayout(), true, new FileOutputStream(file), true));
    public static final String DEFAULT_PROFILE = "Default";
    public static final String HOME_PROFILE = "Home";

    public static final File SETTINGS_FILE = new File("hmcl.json");

    private static final Config SETTINGS;
    public static final UpdateChecker UPDATE_CHECKER = new UpdateChecker(HMCLApi.HMCL_VERSION, "hmcl");
public void actionPerformed(java.awt.event.ActionEvent evt) {
    }// </editor-fold>//GEN-END:initComponents

    private void btnIncludeMinecraftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIncludeMinecraftActionPerformed
        JSystemFileChooser fc = new JSystemFileChooser(new File("."));
        fc.setFileSelectionMode(JSystemFileChooser.DIRECTORIES_ONLY);
        if (fc.showOpenDialog(this) == JSystemFileChooser.APPROVE_OPTION) {
            File newGameDir = fc.getSelectedFile();
public void start(Map settings, ResultProgressHandle progress) {
                                    s.setDownloadType(Settings.getInstance().getDownloadType());
                                    engine.putTextFile(C.GSON.toJson(s), "hmcl.json");
                                    engine.putFile(modpack, "modpack.zip");
                                    File bg = new File("bg");
                                    if (bg.isDirectory())
                                        engine.putDirectory(bg);
                                    bg = new File("background.png");
                                    if (bg.isFile())
                                        engine.putFile(bg, "background.png");
                                    bg = new File("background.jpg");
                                    if (bg.isFile())
                                        engine.putFile(bg, "background.jpg");
                                    for (URL u : Utils.getURL())
public HMCLMinecraftService(Profile p) {
            if (!checkingModpack) {
                checkingModpack = true;
                if (version().getVersionCount() == 0) {
                    File modpack = new File("modpack.zip");
                    if (modpack.exists())
                        SwingUtilities.invokeLater(() -> {
                            if (TaskWindow.factory().execute(ModpackManager.install(MainFrame.INSTANCE, modpack, this, null)))
public void accept(SimpleEvent<VersionNumber> event) {
                        if (map.containsKey("packsha1"))
                            hash = map.get("packsha1");
                        if (TaskWindow.factory().append(new AppDataUpgraderTask(map.get("pack"), version.version, hash)).execute()) {
                            new ProcessBuilder(new String[] { IOUtils.getJavaDir(), "-jar", AppDataUpgraderTask.getSelf(version.version).getAbsolutePath() }).directory(new File(".")).start();
                            System.exit(0);
                        }
                    } catch (IOException ex) {
public void accept(SimpleEvent<VersionNumber> event) {
        File newf = new File(FileUtils.getName(str));
        if (TaskWindow.factory().append(new FileDownloadTask(str, newf)).execute()) {
            try {
                new ProcessBuilder(new String[] { newf.getCanonicalPath(), "--removeOldLauncher", IOUtils.getRealPath() }).directory(new File(".")).start();
            } catch (IOException ex) {
                HMCLog.err("Failed to start new app", ex);
            }
 * along with this program.  If not, see {http://www.gnu.org/licenses/}.
 */

buildscript {
    repositories {
        mavenCentral();
        
        dependencies {
            classpath 'me.tatarka:gradle-retrolambda:3.1.0'
        }
    }
}

apply plugin: 'me.tatarka.retrolambda'

if (System.getenv("BUILD_NUMBER") != null)
    version = System.getenv("BUILD_NUMBER")

 */
public class PluginManager {

    private static final File PLUGINS_FILE = new File("plugins/");
    private static final ArrayList<IPlugin> PLUGINS = new ArrayList<>();

    public static void getPlugin(Class<?> cls) {
 * along with this program.  If not, see {http://www.gnu.org/licenses/}.
 */

buildscript {
    repositories {
        mavenCentral();
        
        dependencies {
            classpath 'me.tatarka:gradle-retrolambda:3.1.0'
        }
    }
}

apply plugin: 'me.tatarka.retrolambda'

if (System.getenv("BUILD_NUMBER") != null)
    version = System.getenv("BUILD_NUMBER")

public Task download(String installId, InstallerVersion v, InstallerType type) {

    @Override
    public Task downloadForge(String installId, InstallerVersion v) {
        File filepath = new File("forge-installer.jar");
        if (v.installer == null)
            return null;
        else
public Task downloadForge(String installId, InstallerVersion v) {

    @Override
    public Task downloadOptiFine(String installId, InstallerVersion v) {
        File filepath = new File("optifine-installer.jar");
        if (v.installer == null)
            return null;
        OptiFineDownloadFormatter task = new OptiFineDownloadFormatter(v.installer);
public Task downloadOptiFine(String installId, InstallerVersion v) {
    public Task downloadLiteLoader(String installId, InstallerVersion v) {
        if (!(v instanceof LiteLoaderInstallerVersion))
            throw new Error("Download lite loader but the version is not ll's.");
        File filepath = new File("liteloader-universal.jar");
        FileDownloadTask task = (FileDownloadTask) new FileDownloadTask(v.universal, filepath).setTag("LiteLoader");
        return task.with(new LiteLoaderInstaller(service, installId, (LiteLoaderInstallerVersion) v).registerPreviousResult(task))
            .with(new DeleteFileTask(filepath));
 * along with this program.  If not, see {http://www.gnu.org/licenses/}.
 */

buildscript {
    repositories {
        mavenCentral();
        
        dependencies {
            classpath 'me.tatarka:gradle-retrolambda:3.1.0'
        }
    }
}

apply plugin: 'me.tatarka.retrolambda'

if (System.getenv("BUILD_NUMBER") != null)
    version = System.getenv("BUILD_NUMBER")

 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see {http://www.gnu.org/licenses/}.
 */
import java.util.jar.JarFile
import java.util.jar.Pack200
import java.util.zip.GZIPOutputStream
import java.security.MessageDigest

repositories {
    mavenCentral();
}

buildscript {
    repositories {
        mavenCentral();
        
        dependencies {
            classpath 'me.tatarka:gradle-retrolambda:3.1.0'
        }
    }
}

apply plugin: 'java'
apply plugin: 'maven'

task createFolders(description: 'Creates the source folders if they do not exist
            srcDir.mkdirs()
        }
    }
}

task makeExecutable(dependsOn: jar) << {
    ext {
        jar.classifier = ''
        makeExecutableinjar = jar.archivePath
        jar.classifier = ''
        makeExecutableoutjar = jar.archivePath
        jar.classifier = ''
    }
    def loc = new File(project.buildDir, "libs/" + makeExecutableoutjar.getName().substring(0, makeExecutableoutjar.getName().length()-4)+".exe")
    def fos = new FileOutputStream(loc)
    def is = new FileInputStream(new File(project.buildDir, '../HMCLauncher.exe'))
    int read
    def bytes = new byte[8192]
    while((read = is.read(bytes)) != -1)
        fos.write(bytes, 0, read);
    is.close()
    is = new FileInputStream(makeExecutableinjar)
    while((read = is.read(bytes)) != -1)
        fos.write(bytes, 0, read);
    is.close()
    fos.close()
}

task makePackGZ(dependsOn: jar) << {
    ext {
        jar.classifier = ''
        makeExecutableinjar = jar.archivePath
        jar.classifier = ''
        makeExecutableoutjar = jar.archivePath
        jar.classifier = ''
    }
    def loc = new File(project.buildDir, "libs/" + makeExecutableoutjar.getName().substring(0, makeExecutableoutjar.getName().length()-4)+".pack.gz")
    def os = new GZIPOutputStream(new FileOutputStream(loc))
    Pack200.newPacker().pack new JarFile(makeExecutableinjar), os
    os.close()
    
    def messageDigest = MessageDigest.getInstance("SHA1")
    loc.eachByte 1024 * 1024, { byte[] buf, int bytesRead ->
        messageDigest.update(buf, 0, bytesRead);
    }
    def sha1Hex = new BigInteger(1, messageDigest.digest()).toString(16).padLeft(40, '0')
    def fileEx = new File(project.buildDir, "libs/" + makeExecutableoutjar.getName().substring(0, makeExecutableoutjar.getName().length()-4)+".pack.gz.sha1")
    if (!fileEx.exists()) fileEx.createNewFile()
    fileEx.append sha1Hex
}
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-2.7-bin.zip
##############################################################################

# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS=""

APP_NAME="Gradle"
APP_BASE_NAME=`basename "$0"`
if "%!O(MISSING)S%!"(MISSING)=="Windows_NT" setlocal

@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
set DEFAULT_JVM_OPTS=-Dhttp.proxyHost=127.0.0.1 -Dhttp.proxyPort=1080 -Dhttps.proxyHost=127.0.0.1 -Dhttps.proxyPort=1080

set DIRNAME=%!~(MISSING)dp0
if "%!D(MISSING)IRNAME%!"(MISSING) == "" set DIRNAME=.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
protected Prompt acceptValidatedInput(ConversationContext context, String input)
					} else {
						missing = one;
					}
					LinkedList<Integer> noEntry = new LinkedList<Integer>();
					for (int i = 0; i < missing; i++) {
						noEntry.add(0);
					}
					context.setSessionData(pref + CK.S_BREAK_DURABILITY, noEntry);
					return new CreateStagePrompt(stageNum, questFactory, citizens);
				} else {
					context.getForWhom().sendRawMessage(ChatColor.RED + Lang.get("stageEditorListNotSameSize"));
protected Prompt acceptValidatedInput(ConversationContext context, String input)
					} else {
						missing = one;
					}
					LinkedList<Integer> noEntry = new LinkedList<Integer>();
					for (int i = 0; i < missing; i++) {
						noEntry.add(0);
					}
					context.setSessionData(pref + CK.S_DAMAGE_DURABILITY, noEntry);
					return new DamageBlockListPrompt();
				}
			}
protected Prompt acceptValidatedInput(ConversationContext context, String input)
					} else {
						missing = one;
					}
					LinkedList<Integer> noEntry = new LinkedList<Integer>();
					for (int i = 0; i < missing; i++) {
						noEntry.add(0);
					}
					context.setSessionData(pref + CK.S_PLACE_DURABILITY, noEntry);
					return new PlaceBlockListPrompt();
				}
			}
protected Prompt acceptValidatedInput(ConversationContext context, String input)
					} else {
						missing = one;
					}
					LinkedList<Integer> noEntry = new LinkedList<Integer>();
					for (int i = 0; i < missing; i++) {
						noEntry.add(0);
					}
					context.setSessionData(pref + CK.S_USE_DURABILITY, noEntry);
				}
			}
			return null;
protected Prompt acceptValidatedInput(ConversationContext context, String input)
					} else {
						missing = one;
					}
					LinkedList<Integer> noEntry = new LinkedList<Integer>();
					for (int i = 0; i < missing; i++) {
						noEntry.add(0);
					}
					context.setSessionData(pref + CK.S_CUT_DURABILITY, noEntry);
					return new CutBlockListPrompt();
				}
			}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public ExpressionScope(final int pos, final Range range) {

  @Override
  public MethodCall addMethodCall(final MethodCall mcs) {
    final Integer endCol = super.range.end.column;
    final Integer endLine = super.range.end.line;
    final Position mcsEnd = mcs.range.end;
public void dump() {

  @Override
  public void addVariable(final Variable variable) {
    if (isField) {
      variable.isField = true;
    }
public MethodCall addMethodCall(final MethodCall methodCall) {
  }

  public void addVariable(final Variable variable) {
    this.variables.add(variable);
    log.trace("add variable={} to range={} {}", variable, this.range, this.getClassName());
  }
private void analyzeVariableDecl(
                          }
                        } else {
                          final String fqcn = resolveTypeFromImport(src, expression);
                          variable.fqcn = TreeAnalyzer.markFQCN(src, fqcn);
                        }
                      } else {
                        if (src.isReportUnknown()) {
private void analyzeVariableDecl(
                      src.getCurrentScope()
                          .ifPresent(
                              scope -> {
                                if (variable.parameter) {
                                  Scope parent = scope;
                                  if (scope instanceof ExpressionScope) {
                                    final ExpressionScope expressionScope1 =
                                        (ExpressionScope) scope;
                                    parent = expressionScope1.parent;
                                  }
                                  if (parent instanceof MethodScope) {
                                    final MethodScope methodScope = (MethodScope) parent;
                                    methodScope.addMethodParameter(variable.fqcn);
                                  }
                                }
                                scope.addVariable(variable);
                              });

                      if (initializer != null) {
                        this.analyzeParsedTree(context, initializer);
                      }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 * @since 	01-23-2016
 */
public class MountFlyingShip extends Mount<Boat> {

    long nextAllowTime = 0;
    Entity currentboom = null;
    // ArmorStand nameTag = null;

    public MountFlyingShip(UltraPlayer owner, UltraCosmetics ultraCosmetics) {
        super(owner, MountType.FLYINGSHIP, ultraCosmetics);
public void onUpdate() {
        }
    }

    /*
        private void spawnNameTag(){
             nameTag = (ArmorStand) ent.getWorld().spawnEntity(ent.getLocation(), EntityType.ARMOR_STAND);
             nameTag.setVisible(false);
             nameTag.setSmall(true);
             nameTag.setCustomName(getGadgetType().getName(getBukkitPlayer()));
             nameTag.setCustomNameVisible(true);
             //hide name of ent
             ent.setCustomNameVisible(false);
             nameTag.setMetadata("C_AD_ArmorStand", new FixedMetadataValue(Core.get(),"C_AD_ArmorStand"));
             //getBukkitPlayer().setPassenger(nameTag);
        }
    */
    @EventHandler
    public void stopBoatDamage(EntityExplodeEvent event) {
        Entity e = event.getEntity();
        if (e == entity)
            event.setCancelled(true);
    }

public void onInteractEvent(PlayerInteractEvent event) {

    @EventHandler
    public void onEntityDamage(EntityDamageByEntityEvent event) {
        Entity e = event.getDamager();
        if (e == entity) {
            event.setCancelled(true);
        }
    }

    @EventHandler
    public void onBoatBreak(VehicleDestroyEvent event) {
        Entity e = event.getVehicle();
        if (e == entity) {
            event.setCancelled(true);
        }
    }
public void onClear() {
        if (currentboom != null) {
            currentboom.remove();
        }
        /*
        if(owner != null){
    		nameTag.getVehicle().eject();
    	}
    	try{
    		nameTag.remove();
    	}catch(Exception e){
    		
    	}
    	*/
    }
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
     public static void func_149671_p()
     {
         func_176215_a(0, field_176230_a, (new BlockAir()).func_149663_c("air"));
@@ -1247,14 +2511,7 @@
             }
             else
             {
-                UnmodifiableIterator unmodifiableiterator = block16.func_176194_O().func_177619_a().iterator();
-
-                while (unmodifiableiterator.hasNext())
-                    int k = field_149771_c.func_148757_b(block16) << 4 | block16.func_176201_c(iblockstate);
-                    field_176229_d.func_148746_a(iblockstate, k);
-                }
+//              Handled in GameData.BlockCallbacks - leaving tripwire as it seems to be special cased
             }
         }
     }
public void onAdd(IForgeRegistryInternal<Block> owner, RegistryManager stage, in
            @SuppressWarnings("unchecked")
            ClearableObjectIntIdentityMap<IBlockState> blockstateMap = owner.getSlaveMap(BLOCKSTATE_TO_ID, ClearableObjectIntIdentityMap.class);

            //So, due to blocks having more in-world states then metadata allows, we have to turn the map into a semi-milti-bimap.
            //We can do this however because the implementation of the map is last set wins. So we can add all states, then fix the meta bimap.
            //Multiple states -> meta. But meta to CORRECT state.
public void onAdd(IForgeRegistryInternal<Block> owner, RegistryManager stage, in
                    blockstateMap.put(block.getStateFromMeta(meta), id << 4 | meta); // Put the CORRECT thing!
            }


            if (oldBlock != null)
            {
                @SuppressWarnings("unchecked")
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import org.springframework.stereotype.Component;

import static java.util.Objects.requireNonNull;
import static org.molgenis.data.jobs.model.JobExecution.Status.FAILED;
import static org.molgenis.data.jobs.model.JobExecution.Status.RUNNING;
import static org.molgenis.data.jobs.model.JobExecutionMetaData.*;
import static org.springframework.util.StringUtils.isEmpty;

private void setFailed(Entity jobExecutionEntity)
			log.append('\n');
		}
		log.append("FAILED - Application terminated unexpectedly");
		jobExecutionEntity.set(LOG, log.toString());
		dataService.update(jobExecutionEntity.getEntityType().getId(), jobExecutionEntity);
	}

protected void append(ILoggingEvent eventObject)
	{
		String formattedMessage = layout.doLayout(eventObject);
		JobExecution jobExecution = JobExecutionContext.get();
		String oldLog = jobExecution.getLog();
		String newLog = oldLog == null ? formattedMessage : oldLog + formattedMessage;
		jobExecution.setLog(newLog);
	}

}
package org.molgenis.data.jobs.model;

import org.molgenis.auth.User;
import org.molgenis.data.Entity;
import org.molgenis.data.meta.model.EntityType;
import org.molgenis.data.support.StaticEntity;
import org.springframework.util.StringUtils;

import java.time.Instant;

import static org.molgenis.data.jobs.model.JobExecutionMetaData.*;

/**
 */
public class JobExecution extends StaticEntity
{
	public JobExecution(Entity entity)
	{
		super(entity);
public String getProgressMessage()

	public void setProgressMessage(String value)
	{
		set(PROGRESS_MESSAGE, value);
	}

	public Integer getProgressMax()
public String getLog()
		return getString(LOG);
	}

	public void setLog(String value)
	{
		set(LOG, value);
	}
public void setResultUrl(String value)
	public String[] getSuccessEmail()
	{
		String email = getString(SUCCESS_EMAIL);
		if (StringUtils.isEmpty(email))
		{
			return new String[] {};
		}
public void setResultUrl(String value)
	public String[] getFailureEmail()
	{
		String email = getString(FAILURE_EMAIL);
		if (StringUtils.isEmpty(email))
		{
			return new String[] {};
		}
public void setFailureEmail(String failureEmail)
		set(FAILURE_EMAIL, failureEmail);
	}

	public enum Status
	{
		PENDING, RUNNING, SUCCESS, FAILED, CANCELED
package org.molgenis.data.jobs;

import org.mockito.Mock;
import org.molgenis.data.AbstractMolgenisSpringTest;
import org.molgenis.data.DataService;
import static org.mockito.Mockito.*;
import static org.molgenis.data.jobs.model.JobExecution.Status.RUNNING;
import static org.molgenis.data.jobs.model.JobExecutionMetaData.*;

@ContextConfiguration(classes = { JobBootstrapperTest.Config.class, JobBootstrapper.class })
public class JobBootstrapperTest extends AbstractMolgenisSpringTest
	private JobExecution job2;

	@Mock
	private EntityType jobExecutionType;

	@Mock
	private Query<Entity> query;

	@Test
	public void testBootstrap()
	{
public void testBootstrap()
		when(query.eq(STATUS, PENDING)).thenReturn(query);
		when(query.or()).thenReturn(query);

		when(query.findAll()).thenReturn(Stream.of(job1, job2));

		when(job1.get(LOG)).thenReturn("Current log");
		when(job1.getEntityType()).thenReturn(jobType1);

		when(job2.get(LOG)).thenReturn(null);
		when(job2.getEntityType()).thenReturn(jobType1);

		jobBootstrapper.bootstrap();

		verify(job1).set(STATUS, FAILED);
public void testBootstrap()
		verify(job2).set(PROGRESS_MESSAGE, "Application terminated unexpectedly");
		verify(job2).set(LOG, "FAILED - Application terminated unexpectedly");

		verify(dataService).update("JobType1", job1);
		verify(dataService).update("JobType1", job2);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import javax.annotation.Nullable;

import com.google.common.base.Optional;
import com.google.common.base.Strings;
import com.google.common.collect.Lists;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

    private static final Logger logger = LoggerFactory.getLogger(DetailMapWriter.class);

    private static final String UNSHADED_GUAVA_OPTIONAL_CLASS_NAME;

    static {
private DetailMapWriter() {}
                logger.warn("detail map has null key");
                continue;
            }
            String name = key.toString();
            if (name == null) {
                // skip invalid data
                continue;
            }
            entries.add(createDetailEntry(name, entry.getValue()));
        }
private static void addValue(Trace.DetailEntry.Builder builder,
            builder.addValueBuilder().setDouble(((Number) value).doubleValue()).build();
        } else {
            logger.warn("detail map has unexpected value type: {}", value.getClass().getName());
            builder.addValueBuilder().setString(Strings.nullToEmpty(value.toString())).build();
        }
    }

private static boolean isGuavaOptionalInAnotherClassLoader(Object value) {
        Class<?> superClass = value.getClass().getSuperclass();
        return superClass != null && superClass.getName().equals(Optional.class.getName());
    }
}
 */
package org.glowroot.agent.plugin.api;

import java.util.Map;

import javax.annotation.Nullable;

import com.google.common.collect.ImmutableMap;
import org.checkerframework.checker.nullness.qual.PolyNull;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
 */
public abstract class Message {

    // default is 512k characters so that memory limit is 1mb since 1 character = 2 bytes
    private static final int MESSAGE_CHAR_LIMIT =
            Integer.getInteger("glowroot.message.char.limit", 512 * 1024);

    private static final String[] EMPTY_ARGS = new String[0];
    private static final ImmutableMap<String, Object> EMPTY_DETAIL = ImmutableMap.of();
public static Message create(@Nullable String message,

        private MessageImpl(@Nullable String template, @Nullable String[] args,
                Map<String, ? extends /*@Nullable*/ Object> detail) {
            this.template = truncateToMessageCharLimit(template);
            for (int i = 0; i < args.length; i++) {
                args[i] = truncateToMessageCharLimit(args[i]);
            }
            this.args = args;
            this.detail = detail;
        }

        @Override
public String getText() {
                }
            }
            text.append(template.substring(curr));
            return truncateToMessageCharLimit(text.toString());
        }

        @Override
        public Map<String, ? extends /*@Nullable*/ Object> getDetail() {
            return detail;
        }

        private static @PolyNull String truncateToMessageCharLimit(@PolyNull String s) {
            if (s == null || s.length() <= MESSAGE_CHAR_LIMIT) {
                return s;
            } else {
                return s.substring(0, MESSAGE_CHAR_LIMIT) + " [truncated to " + MESSAGE_CHAR_LIMIT
                        + " characters]";
            }
        }
    }
}
/*
 * Copyright 2012-2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 */
package org.glowroot.agent.plugin.api.internal;

import com.google.common.base.Strings;
import org.junit.Test;

import org.glowroot.agent.plugin.api.Message;
public void shouldFormatConstantWithEmptyMethodBody() {
    }

    @Test
    public void shouldTruncate() {
        String longString = Strings.repeat("a", 512 * 1024);
        ReadableMessage message = (ReadableMessage) Message.create("{}", longString + "a");
        assertThat(message.getText())
                .isEqualTo(longString + " [truncated to " + 512 * 1024 + " characters]");
    }

    @Test
    public void shouldNotTruncate() {
        String longString = Strings.repeat("a", 512 * 1024);
        ReadableMessage message = (ReadableMessage) Message.create("{}", longString);
        assertThat(message.getText()).isEqualTo(longString);
    }

    @Test
    public void shouldTestNotEnoughArgsForTemplate() {
        ReadableMessage message = (ReadableMessage) Message.create("{}, {} xyz {}", "test");
        assertThat(message.getText()).isEqualTo("test, <not enough args provided for template> xyz"
/*
 * Copyright 2011-2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import org.junit.After;
public void testExtraBadRequestParameterMap() throws Exception {
    }

    @Test
    public void testOutsideServlet() throws Exception {
        // when
        container.executeNoExpectedTrace(GetParameterOutsideServlet.class);
protected void doGet(HttpServletRequest request, HttpServletResponse response) {
        }
    }

    public static class GetParameterOutsideServlet implements AppUnderTest {
        @Override
        public void executeApp() throws Exception {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
forge_version=12.18.1.2014
mc_version_suffix=1.10.0
mc_mappings=snapshot_20160518
mc_version=1.10.2
version=1.1.0
accepted_version=[1.9.4,1.10)

import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.network.PacketBuffer;

import java.io.IOException;
import java.util.HashMap;

public class IngotType {
    public static HashMap<DummyStack, Integer> colorCache = new HashMap<>();
    public static HashMap<DummyStack,TextureAtlasSprite> spriteCache = new HashMap<>();
    public ItemStack stack;
    public int color;

public IngotType(ItemStack stack) {
            stack = stack.copy();
            stack.stackSize=1;
        }

        this.stack = stack;
        if(stack != null) {
            findColor();
            if(Config.useIngotBlockTexture)
                findTexture();
            else
                spriteName = RenderIngot.DEFAULT_TEXTURE.toString();
        }
    }

    public void findColor() {
        DummyStack dummy = getDummy();
        if (colorCache.containsKey(dummy)) {
public void findColor() {
            colorCache.put(dummy, color);
        }
    }

    public void findTexture() {

        DummyStack dummy = getDummy();
public static IngotType readFromNBT(NBTTagCompound tag) {
        ItemStack stack = ItemStack.loadItemStackFromNBT(tag);
        IngotType type = new IngotType(stack);
        type.color = tag.getInteger("color");

        return type;
    }

public static IngotType readUpdatePacket(PacketBuffer buf) {

        return type;
    }
    public int getColor() {
        return color;
    }
public DummyStack getDummy() {
        return new DummyStack(stack);
    }

}
public Vector3f getRelativeLocation() {

    @Override
    public boolean onActivated(EntityPlayer player, EnumHand hand, ItemStack heldItem, PartMOP hit) {
        System.out.println(this.getPos());

        return true;
    }
public int renderHashCode() {
        return 0;
    }

}
public void attachCapability(AttachCapabilitiesEvent.TileEntity e) {
        if (e.getTileEntity() instanceof TileMultipartContainer) {
            TileMultipartContainer container = (TileMultipartContainer) e.getTileEntity();
            if (!container.hasCapability(IngotCapabilities.CAPABILITY_INGOT, null)) {
                System.out.println("doesn't have,adding");
                e.addCapability(new ResourceLocation(SoS.MODID, "ingot_capability"), new IngotCountProvider());
            }
        }
private static void placeAll(World world, BlockPos pos, ItemStack stack, EntityP
            long startTime = System.currentTimeMillis();
            Vec3d hit = new Vec3d(0, 0, 0);
            while (stack.stackSize > 0 && (System.currentTimeMillis() - startTime) < 2000) {
                try {
                    Thread.sleep(10);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                place(world, pos, hit, stack, player);
                hit = nextHit(hit);
            }

import com.primetoxinz.stacksonstacks.Config;
import com.primetoxinz.stacksonstacks.ingot.PartIngot;

import lib.render.ModelFactory;
import lib.render.SimpleBakedModel;
import lib.utils.RenderUtils;
public SimpleBakedModel createRectPrism(float x, float y, float z, float w, floa

    @Override
    public IBakedModel bake(PartIngot ingot, boolean isItem, BlockRenderLayer layer) {
        TextureAtlasSprite tex = ingot.type.getSprite();
        sprite = tex != null ? tex:RenderUtils.textureGetter.apply(DEFAULT_TEXTURE);
        Vector3f loc = ingot.location.getRelativeLocation();
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.RayTraceResult;
import net.minecraft.world.World;

public final class RenderUtils {

public static int getAverageColor(ItemStack stack) {

        return (avgColor[0] | (avgColor[1] << 8) | (avgColor[2] << 16)) | 0xFF000000;
    }

	public static TextureAtlasSprite getSprite(ItemStack stack) {
		if (renderItem == null) {
			renderItem = Minecraft.getMinecraft().getRenderItem();
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
schwartz = lightsaber:*
# The 'goodguy' role is allowed to 'drive' (action) the winnebago (type) with
# license plate 'eagle5' (instance specific id)
goodguy = winnebago:drive:eagle5
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.geometry.Insets;
import javafx.scene.control.ScrollPane;
import javafx.scene.control.TextField;
import javafx.scene.paint.Color;
import javafx.scene.text.TextFlow;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import strike.handler.ProtocolHandlerFactory;
import strike.model.Chatter;
import strike.model.event.*;

public class ChatWindowController {

    @FXML
    // Main input field.
    private TextField idMessageTextField;
public void _userQuit(UserQuitEvent event) {
        });
    }

    @FXML
    public void exitApplication(ActionEvent event) {
        // close all stages and call for shutdown the entire application
        logger.info("ChatWindow initiate exit application...");
        Platform.exit();
    }

    private static final Logger logger = LogManager.getLogger(ChatWindowController.class);
private void loadChatWindow() {

            // Give the chat window controller any details it needs.
            ChatWindowController controller = loader.getController();
            //controller.setStrikeClient(this.strikeClient);

            chatWindowLoaded = true;

import org.json.simple.parser.ParseException;
import strike.handler.ProtocolHandlerFactory;
import strike.model.Message;

import javax.net.ssl.SSLSocket;
import java.io.*;
public void run() {
            }

        } catch (InterruptedException | ParseException | IOException e) {
            logger.trace(e.getMessage());
            pool.shutdownNow();
            e.printStackTrace();
        } finally {
            // cleanup - must be in order - writer > reader > socket > pool
            logger.debug("Closing up connection... " + getId());
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.apache.shiro.SecurityUtils;
import org.apache.shiro.subject.Subject;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
public void run() {
            }

            pool.shutdown();
            clientSocket.close();
            writer.close();
            reader.close();

            if (userInfo != null) {
                logger.info("Client disconnected: " + userInfo.getIdentity());
            }

        } catch (Exception e) {
            logger.trace(e.getMessage());
            pool.shutdownNow();
        } finally {
            performUserLogoutAndUserSessionCleanUp();
        }
    }

public void write(String msg) {

    public void performUserLogoutAndUserSessionCleanUp() {
        if (currentUser != null) {
            logger.info("Client disconnected: " + currentUser.getPrincipal());

            Subject currentUser = getCurrentUser();
            String username = (String) currentUser.getPrincipal();
            String sessionId = (String) currentUser.getSession().getId();

            new PeerClient().relayPeers(JSONMessageBuilder.getInstance().notifyUserSession(username, sessionId, "logout"));

            serverState.getLocalUserSessions().remove(sessionId);

            logger.info(username + " with session [" + sessionId + "] has forced log out.");

            // must be last
            currentUser.logout();
        }
    }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public static int getNewPlayers(List<Long> registered, long scale, long now) {
    }
    
    public static List<Long> transformSessionDataToLengths(Collection<SessionData> data) {
        List<Long> list = new ArrayList<>();
        data.stream().forEach((sData) -> {
            list.add(sData.getSessionEnd()-sData.getSessionStart());
        });
        return list;
name: Plan
author: Rsl1122
main: main.java.com.djrapitops.plan.Plan
version: 2.8.2

softdepend:
- OnTime
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            <h1 class="page-sub-title device-id device-select"
                data-deviceid="{{device.deviceIdentifier}}" data-type="{{device.type}}"
                data-ownership="{{device.ownership}}"
                data-owner="{{device.owner}}">
                Device {{device.name}}
                {{#if device.model}}
                    <span class="lbl-device">
var InitiateViewOption = null;
    var deviceIdentifier = deviceId.data("deviceid");
    var deviceType = deviceId.data("type");
    var ownership = deviceId.data("ownership");
    var payload = [deviceIdentifier];
    var operationTable;
    var serviceUrl;
var InitiateViewOption = null;
        serviceUrl = "/api/device-mgt/android/v1.0/admin/devices/info";
        serviceUrlLocal = "/api/device-mgt/android/v1.0/admin/devices/location";
    }
    if (serviceUrl) {
        invokerUtil.post(
            serviceUrl,
            payload,
            <h1 class="page-sub-title device-id device-select"
                data-deviceid="{{device.deviceIdentifier}}" data-type="{{device.type}}"
                data-ownership="{{device.ownership}}"
                data-owner="{{device.owner}}">
                Device {{device.name}}
                {{#if device.model}}
                    <span class="lbl-device">
var InitiateViewOption = null;
    var deviceIdentifier = deviceId.data("deviceid");
    var deviceType = deviceId.data("type");
    var ownership = deviceId.data("ownership");
    var payload = [deviceIdentifier];
    var operationTable;
    var serviceUrl;
var InitiateViewOption = null;
        serviceUrl = "/api/device-mgt/android/v1.0/admin/devices/info";
    }

    if (serviceUrl) {
        invokerUtil.post(
            serviceUrl,
            payload,
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import org.springframework.cloud.sleuth.autoconfig.TraceAutoConfiguration;
import org.springframework.cloud.sleuth.instrument.async.TraceableScheduledExecutorService;
import org.springframework.context.annotation.Configuration;
import reactor.core.publisher.Hooks;
import reactor.core.publisher.Mono;
import reactor.core.scheduler.Schedulers;

		@PostConstruct
		public void setupHooks() {
			Hooks.onNewSubscriber((pub, sub) ->
					new SpanSubscriber(sub, sub.currentContext(), this.tracer, pub.toString()));
			Schedulers.setFactory(new Schedulers.Factory() {
				@Override public ScheduledExecutorService decorateScheduledExecutorService(
						String schedulerType,
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.test.context.junit4.SpringRunner;
import reactor.core.publisher.Flux;
import reactor.core.scheduler.Schedulers;

import static org.assertj.core.api.BDDAssertions.then;
public void setup() {
		then(ExceptionUtils.getLastException()).isNull();
	}

	@Test
	public void should_pass_tracing_info_when_using_reactor_async() {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
private IBundleCoverage analyzeStructure() throws IOException {
				for (final File file : filesToAnalyze) {
					analyzer.analyzeAll(file);
				}
			} catch (final Exception e) {
				System.out.println("While reading class directory: " + classDirectory);
				e.printStackTrace();
			}
protected static void saveCoverageReports(FilePath destFolder, FilePath sourceFo
		sourceFolder.copyRecursiveTo(destFolder);
	}
	
    protected String resolveFilePaths(Run<?, ?> build, TaskListener listener, String input, Map<String, String> env) {
        try {

            final EnvVars environment = build.getEnvironment(listener);
            environment.overrideAll(env);
            return environment.expand(input);
            
        } catch (Exception e) {
            listener.getLogger().println("Failed to resolve parameters in string \""+
            input+"\" due to following error:\n"+e.getMessage());
        }
        return input;
    }

    protected String resolveFilePaths(AbstractBuild<?, ?> build, TaskListener listener, String input) {
        try {

            final EnvVars environment = build.getEnvironment(listener);
            environment.overrideAll(build.getBuildVariables());
            return environment.expand(input);

        } catch (Exception e) {
            listener.getLogger().println("Failed to resolve parameters in string \""+
                    input+"\" due to following error:\n"+e.getMessage());
        }
        return input;
    }

    protected static FilePath[] resolveDirPaths(FilePath workspace, TaskListener listener, final String input) {
		//final PrintStream logger = listener.getLogger();
		FilePath[] directoryPaths = null;
		try {
            directoryPaths = workspace.act(new ResolveDirPaths(input));
		} catch(InterruptedException | IOException ie) {
			ie.printStackTrace();
		}
        return directoryPaths;
public CoverageReport(JacocoBuildAction action, ExecutionFileLoader executionFil
				}
			}
			action.getLogger().println("[JaCoCo plugin] Done.");
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CREATE TABLE suite_version (
  version_num INTEGER PRIMARY KEY,
  version_name text,
  notes text,
  constraint uk_suite_version unique (version_name)
);
create table app_version (
  app_id text,
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
private void flowCompletedWithoutError(IComponentRuntime componentRuntime) {
        if (!cancelled) {
            try {
                componentRuntime.flowCompleted(cancelled);
            } catch (Exception ex) {
                recordError(1, ex);
                componentContext.getExecutionTracker().flowStepFailedOnComplete(componentContext, ex);
            }
private void flowCompletedWithErrors(IComponentRuntime componentRuntime, Throwab
        if (!cancelled) {
            try {
                componentRuntime.flowCompletedWithErrors(myError);
            } catch (Exception ex) {
                recordError(1, ex);
                componentContext.getExecutionTracker().flowStepFailedOnComplete(componentContext, ex);
            }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void saveGMTimes(int userId, HashMap<GameMode, Long> gamemodeTimes) throw
                + ") VALUES (?, ?, ?, ?, ?)");

        statement.setInt(1, userId);
        statement.setLong(2, gamemodeTimes.get(GameMode.SURVIVAL));
        statement.setLong(3, gamemodeTimes.get(GameMode.CREATIVE));
        statement.setLong(4, gamemodeTimes.get(GameMode.ADVENTURE));
        try {
            Long gm = gamemodeTimes.get(GameMode.SPECTATOR);
            if (gm != null) {
name: Plan
author: Rsl1122
main: main.java.com.djrapitops.plan.Plan
version: 2.9.1

softdepend:
- OnTime
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public static void initializeCommands() {
    }

    public static String getCommandPrefix(IGuild guild) {
        return prefixes.getOrDefault(guild.getLongID(), DEFAULT_PREFIX);
    }

public static void tagConfig(CommandContext cc) {

    @EventSubscriber
    public void onTagRequest(MessageReceivedEvent e) {
        if (e.getMessage().getContent().charAt(0) != getTagPrefix(e.getGuild()))
            return;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        // Pull before tests run inside of the container due to: https://issues.jboss.org/browse/ARQ-688
                        boolean dockerAvailable = System.getenv("DOCKER_HOST") != null || Files.exists(Paths.get("/var/run/docker.sock"))
                        if (dockerAvailable) {
                            def images = []
                            def cubeSpec = new File(project.basedir.path + "/src/test/resources/arquillian.xml").text
                            Matcher matcher = cubeSpec =~ /.*image: (.*)/
                            while (matcher.find()) {
                                images.add(matcher.group(1))
                            }

                            images.each { image ->
                                if ("docker images -q ${image}".execute().text.isEmpty()) {
                                    println "[DOCKER] Pulling Docker image: ${image}"
                                    "docker pull ${image}".execute().waitForProcessOutput(System.out, System.err)
                                }
                            }
                        }
                    </source>
public void testSMPPComponent() throws Exception {
            @Override
            public void configure() throws Exception {
                from("direct:start")
                .to("smpp://smppuser@" + TestUtils.getDockerHost() + ":2775?password=password&enquireLinkTimer=60000"
                    + "&transactionTimer=60000&systemType=producer");

                from("smpp://smppuser@" + TestUtils.getDockerHost() + ":2775?password=password&enquireLinkTimer=60000"
                    + "&transactionTimer=60000&systemType=consumer")
                .setBody(simple("Hello ${body}"))
                .to("mock:result");
            }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void pause() {
        this.paused = true;

        if (singleFetchDataTask != null) singleFetchDataTask.pause();
        for (DownloadRunnable runnable : downloadRunnableList) {
            runnable.pause();
        }

        statusCallback.onPaused();
private void fetchWithMultipleConnection(final List<ConnectionModel> connectionM
                FileDownloadLog.d(this, "enable multiple connection: %!s(MISSING)", connectionModel);
            }

            downloadRunnableList.add(runnable);
        }

public boolean isRetry(Exception exception) {
    public void onError(Exception exception) {

        // discard all
        for (DownloadRunnable runnable : downloadRunnableList) {
            runnable.discard();
        }

        statusCallback.onError(exception);
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void acceptSearchMatch(SearchMatch match) throws CoreException {
			return Collections.emptyList();
		}
		final ICompilationUnit unit = JDTUtils.resolveCompilationUnit(uri);
		if(unit == null || !unit.getResource().exists()) {
			return Collections.emptyList();
		}
		try {
public void didChangeWatchedFiles(DidChangeWatchedFilesParams params) {
			IProgressMonitor monitor = toMonitor(cc);
			try {
				Job.getJobManager().join(DocumentLifeCycleHandler.DOCUMENT_LIFE_CYCLE_JOBS, monitor);
			} catch (OperationCanceledException | InterruptedException e) {
				JavaLanguageServerPlugin.logException(e.getMessage(), e);
			}
			return handler.getCodeLensSymbols(params.getTextDocument().getUri(), monitor);
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


    public String resolveIpByName(String name) throws UnknownHostException {

        String inetAddress = InetAddress.getByName(name).getHostAddress();
        logger.debug("Name: " + name + " resolved to " + inetAddress);
        return inetAddress;

    }
    public  String resolveDNSCanonicalName(String ipAddress) throws UnknownHostException {
protected String snmpGet(SnmpManager snmpManager, String oidString) {
    protected SnmpManager getSnmpManager(Map<String,String> resourceSelectionParams,String ipAddressStr) throws IOException {


        String sysDescr;
        SnmpManager snmpManager;

        ResourceType snmpResource = resourceProvider(resourceSelectionParams);
        logger.info("Discovering "+ipAddressStr+" with "+snmpResource.getName());
        Map<String,String> initialSnmpConnParams = this.discoveryResource.getParamMap(snmpResource, "snmp");
        if (initialSnmpConnParams==null) {
            initialSnmpConnParams = new HashMap<>();
        }
        initialSnmpConnParams.put("ipAddress", ipAddressStr);
        List<ResourceType> snmpResources = this.discoveryResource.returnResourcesByConnectionType("snmp");


        SnmpManagerCreator snmpManagerCreator = new SnmpManagerCreator(mibLoaderHolder);
        snmpManager = snmpManagerCreator.create(initialSnmpConnParams);


            snmpManager.init();
            sysDescr = snmpManager.snmpGet("1.3.6.1.2.1.1.1.0");

            if (sysDescr == null ) {

                if (useOnlyTheFirstSnmpBeingMatched) {


                    snmpManager.closeSnmp();
                    logger.info("Can't connect to: " + initialSnmpConnParams.get("ipAddress") + " with " + initialSnmpConnParams);
                    return null;
                } else {

                    for (ResourceType resourceType : snmpResources) {
                        Map<String, String> secondartySnmpConnParams = this.discoveryResource.getParamMap(resourceType, "snmp");
                        logger.info("Discovering " + ipAddressStr + " with " + resourceType.getName());

                        secondartySnmpConnParams.put("ipAddress", ipAddressStr);
                        if (!resourceType.getName().equals(snmpResource.getName())) {
                            snmpManager = snmpManagerCreator.create(initialSnmpConnParams);

                            snmpManager.init();
                            sysDescr = snmpManager.snmpGet("1.3.6.1.2.1.1.1.0");
                            if (sysDescr == null) {
                                logger.info("Can't connect to: " + ipAddressStr + " with " + initialSnmpConnParams);
                                snmpManager.closeSnmp();
                            } else {
                                return snmpManager;

                            }
                        }
                    }

                }
            }else {
                return snmpManager;
            }






        return null;
    }
    protected RawDeviceData getRawData (SnmpManager snmpManager,DiscoveryHelper discoveryHelper){
        <constructor-arg value="PHYSICAL,NEXT_HOP,OSPF,ISIS,IPSEC,BGP,RIP,ADDITIONAL,IPV6"/>
        <constructor-arg ref="discoveryResourceManager"/>
        <constructor-arg ref="MibLoaderHolder"/>
        <constructor-arg name="useOnlyTheFirstSnmpBeingMatched" value="true"/>

    </bean>
    <bean id="subnetNodeDiscoverer" class="net.itransformers.idiscover.v2.core.node_discoverers.subnetDiscoverer.SubnetDiscoverer">
<resources>
    <resource name="huawei">
        <param name="deviceType">HUAWEI</param>
        <connection-params connection-type="ssh">
            <param name="system-password">lab123</param>
            <param name="timeout">3000</param>
    </resource>
    <resource name="cisco">
        <param name="deviceType">CISCO</param>
        <connection-params connection-type="ssh">
            <param name="username">ci</param>
            <param name="password">ci321!</param>
        </connection-params>
    </resource>
    <resource name="OpenWrt">
        <connection-params connection-type="snmp">
            <param name="version">2c</param>
            <param name="snmpCommunity">netTransformer-r</param>
    <resource name="default">
        <connection-params connection-type="snmp">
            <param name="version">2</param>
            <param name="snmpCommunity">netTransformer-r</param>
            <param name="protocol">udp</param>
            <param name="timeout">1000</param>
            <param name="retries">1</param>
    </properties>
    <groupId>net.itransformers</groupId>
    <artifactId>netTransformer</artifactId>
    <version>0.8</version><!--Change for new version-->
    <description>netTwork Transformation Manager</description>
    <packaging>pom</packaging>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public boolean touchDown(int screenX, int screenY, int pointer, int button) {
    }

    @Override
    public void resize(int width, int height) {
        worldRenderer.resize(width, height);
        cam.viewportWidth = VIEWPORT_HEIGHT * width / height;
private void cleanUp() {
    private void processNewPlayers(Map<Integer, Point> newPlayers) {
        for (Map.Entry<Integer, Point> player : newPlayers.entrySet()) {
            Integer playerId = player.getKey();
            Point position = player.getValue();
            Body body = createCircleBody(PLAYER_CIRCLE_RADIUS, new Vector2(position.x, position.y));
            body.setUserData(PlayerId.create(playerId));
private void processNewPlayers(Map<Integer, Point> newPlayers) {

    private void removePlayer(int playerId) {
        if (!isPlayerPresent(playerId)) {
            return;
        }
        Body body = playerBodies.get(playerId);
        world.destroyBody(body);
        playerBodies.remove(playerId);
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

package com.spotify.heroic.shell;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.spotify.heroic.lifecycle.LifeCycle;
import com.spotify.heroic.lifecycle.LifeCycleManager;
import dagger.Module;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

import javax.inject.Named;
import java.net.InetSocketAddress;
import java.net.ServerSocket;
import java.util.Optional;
import java.util.concurrent.Callable;

import static java.util.Optional.empty;
import static java.util.Optional.of;
    public static final String DEFAULT_HOST = "localhost";
    public static final int DEFAULT_PORT = 9190;

    final String host;
    final int port;

    @JsonCreator
    public ShellServerModule(
        @JsonProperty("host") Optional<String> host, @JsonProperty("port") Optional<Integer> port
    ) {
        this.host = host.orElse(DEFAULT_HOST);
        this.port = port.orElse(DEFAULT_PORT);
    }

    @Provides
    @ShellServerScope
SerializerFramework serializer() {
    @Provides
    @ShellServerScope
    Managed<ShellServerState> state(final AsyncFramework async) {
        return async.managed(new ManagedSetup<ShellServerState>() {
            @Override
            public AsyncFuture<ShellServerState> construct() throws Exception {
public Builder port(int port) {
        }

        public ShellServerModule build() {
            return new ShellServerModule(host.orElse(DEFAULT_HOST), port.orElse(DEFAULT_PORT));
        }
    }
}
public void testAll() throws Exception {
        assertEquals(internalStoppers, referenceInternalStoppers);
    }

    private HeroicCoreInstance testConfiguration(final String name) throws Exception {
        final HeroicCore.Builder builder = HeroicCore.builder();
        builder.modules(HeroicModules.ALL_MODULES);
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public HttpManager(String username, String password, HttpUrl url) {
        client = new OkHttpClient.Builder()
                .connectTimeout(10, TimeUnit.SECONDS)
                .readTimeout(60, TimeUnit.SECONDS)
                .addInterceptor(new AuthorizationInterceptor())
                .build();

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public long getSessionStart() {
    public long getSessionEnd() {
        return sessionEnd;
    }
}
public boolean equals(Object obj) {
            return false;
        }
        final UserData other = (UserData) obj;
        if (this.accessing != other.accessing) {
            return false;
        }
        if (this.registered != other.registered) {
            return false;
        }
        if (this.lastPlayed != other.lastPlayed) {
            return false;
        }
        if (this.playTime != other.playTime) {
            return false;
        }
public KillHandler getKillHandler() {
    }

    /**
     * Returns the same value as Plan#getDB().
     *
     * @return Current instance of the Database,
     */
    public Database getDB() {
        return db;
    }

    /**
     *
     * @return
     */
public ActivityHandler(Plan plugin, DataCacheHandler h) {
     * @return true if data is not found.
     */
    public boolean isFirstTimeJoin(UUID uuid) {
        return !handler.getDB().wasSeenBefore(uuid);
    }

    /**
public static String getHtmlStringFromResource(String fileName) throws FileNotFo
     */
    public static String replacePlaceholders(String html, HashMap<String, String> replaceMap) {
        for (String key : replaceMap.keySet()) {
            html = html.replaceAll(key, replaceMap.get(key));
        }
        return html;
    }
public static String getInspectUrl(String playerName) {
        return url;
    }

    static String removeXSS(String string) {
        return string.replaceAll("<!--", "")
                .replaceAll("-->", "")
                .replaceAll("<script>", "")
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void run() {

            List<GtfsRealtime.FeedEntity> allEntitiesArrayList = new ArrayList<>();

            for (Map.Entry<Integer, GtfsRealtime.FeedMessage> allFeeds : feedEntityInstance.entrySet()) {
                int key = allFeeds.getKey();
                GtfsRealtime.FeedMessage message = feedEntityInstance.get(key);
                allEntitiesArrayList.addAll(message.getEntityList());
            }

            GtfsRealtime.FeedMessage.Builder feedMessageBuilder = GtfsRealtime.FeedMessage.newBuilder();
            feedMessageBuilder.addAllEntity(allEntitiesArrayList);

            GtfsRealtime.FeedMessage combinedFeed = feedMessageBuilder.build();
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
********************************************
1.3.1
* #189 It shall not report server error if no file uploaded

1.3.0
* #128 Create a mechanism to cache the GET request result
      <version>${rythmengine.version}</version>
    </dependency>

  </dependencies>

  <profiles>
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
package net.techcable.sonarpet;

import java.util.Arrays;
import java.util.EnumMap;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Maps;

import org.bukkit.Sound;

    DONKEY_AMBIENT("ENTITY_DONKEY_AMBIENT", "DONKEY_IDLE"),
    DONKEY_ANGRY("ENTITY_DONKEY_ANGRY", "DONKEY_ANGRY"),
    DONKEY_DEATH("ENTITY_DONKEY_DEATH", "DONKEY_DEATH"),
    ENDERMITE_STEP("ENTITY_ENDERMITE_STEP", "SILVERFISH_WALK"), // SILVERFISH_WALK is the cloest we have on 1.8.8 :(
    GHAST_AMBIENT("ENTITY_GHAST_AMBIENT", "GHAST_MOAN"),
    GHAST_DEATH("ENTITY_GHAST_DEATH", "GHAST_DEATH"),
    HORSE_AMBIENT("ENTITY_HORSE_AMBIENT", "HORSE_IDLE"),
                } else {
                    sound = Sound.valueOf(name);
                }
            } catch (IllegalArgumentException ignroed) {}
        }
        if (sound == null) throw new IllegalArgumentException("No sounds named " + Arrays.toString(names) + " are found!");
        this.sound = sound;
    public Sound getBukkitSound() {
        return sound;
    }
}

import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.entity.Entity;
import org.bukkit.entity.EntityType;
import org.bukkit.entity.LivingEntity;
static INMS getInstance() {
    boolean isLiquid(Material block);

    EntityRegistry getEntityRegistry();
}

/**
package net.techcable.sonarpet.nms;

import org.bukkit.Sound;
import org.bukkit.entity.Entity;
import org.bukkit.entity.LivingEntity;

    void clearGoals();

    Sound getDeathSound();

    Navigation getNavigation();

    double distanceTo(Entity other);

    default void playSound(SafeSound sound, float volume, float pitch) {
        playSound(sound.getBukkitSound(), volume, pitch);
    }

    void playSound(Sound bukkitSound, float volume, float pitch);

    boolean isInvisible();

import net.techcable.sonarpet.nms.NMSEntity;
import net.techcable.sonarpet.nms.NMSInsentientEntity;
import net.techcable.sonarpet.nms.NMSPlayer;
import net.techcable.sonarpet.nms.entity.goals.PetGoalFloat;
import net.techcable.sonarpet.nms.entity.goals.PetGoalFollowOwner;
import net.techcable.sonarpet.nms.entity.goals.PetGoalLookAtPlayer;
public void remove(boolean makeSound) {
        if (this.getEntity() != null) {
            getBukkitEntity().remove();
        }
        if (makeSound) {
            getEntity().playSound(getEntity().getDeathSound(), 1.0F, 1.0F);
        }
    }

import net.techcable.pineapple.reflection.PineappleField;
import net.techcable.pineapple.reflection.Reflection;
import net.techcable.sonarpet.nms.NMSInsentientEntity;

import org.bukkit.Sound;
import org.bukkit.craftbukkit.v1_10_R1.entity.CraftEntity;
public EntityInsentient getHandle() {

    @Override
    @SneakyThrows
    public Sound getDeathSound() {
        SoundEffect soundEffect = (SoundEffect) GET_DEATH_SOUND_METHOD_HANDLE.invoke(getHandle());
        return NMSImpl.toBukkitSound(soundEffect);
    }

    public NMSEntityInsentientImpl(EntityInsentient handle) {
import net.techcable.sonarpet.nms.BlockSoundData;
import net.techcable.sonarpet.nms.NMSEntity;
import net.techcable.sonarpet.nms.NMSInsentientEntity;
import net.techcable.sonarpet.nms.versions.v1_10_R1.data.NMSSpawnEggItemData;

import org.bukkit.Location;
public EntityRegistry getEntityRegistry() {
        return new NMSEntityRegistry();
    }

    //
    // Utility methods
    //
    private static final ImmutableMap<SoundEffect, Sound> BUKKIT_SOUNDS;
    static {
        ImmutableMap.Builder<SoundEffect, Sound> soundsBuilder = ImmutableMap.builder();
        for (Sound bukkitSound : Sound.values()) {
            SoundEffect mojangSound = CraftSound.getSoundEffect(CraftSound.getSound(bukkitSound));
            soundsBuilder.put(mojangSound, bukkitSound);
        }
        BUKKIT_SOUNDS = soundsBuilder.build();
    }
    public static Sound toBukkitSound(SoundEffect mojangEffect) {
        Sound bukkitEffect = BUKKIT_SOUNDS.get(mojangEffect);
        if (bukkitEffect == null) throw new AssertionError("No bukkit sound effect for mojang effect: " + mojangEffect);
        return bukkitEffect;
    }
}
import net.techcable.pineapple.reflection.PineappleField;
import net.techcable.sonarpet.nms.DataWatcher;
import net.techcable.sonarpet.nms.NMSLivingEntity;

import org.bukkit.Sound;
import org.bukkit.craftbukkit.v1_10_R1.CraftSound;
public void setStepHeight(float stepHeight) {
    //

    @Override
    public void playSound(Sound bukkitSound, float volume, float pitch) {
        SoundEffect sound = CraftSound.getSoundEffect(CraftSound.getSound(bukkitSound));
        getHandle().a(sound, volume, pitch);
    }

    @Override
import net.techcable.pineapple.reflection.PineappleField;
import net.techcable.pineapple.reflection.Reflection;
import net.techcable.sonarpet.nms.NMSInsentientEntity;

import org.bukkit.Sound;
import org.bukkit.craftbukkit.v1_11_R1.entity.CraftEntity;
public EntityInsentient getHandle() {

    @Override
    @SneakyThrows
    public Sound getDeathSound() {
        SoundEffect soundEffect = (SoundEffect) GET_DEATH_SOUND_METHOD_HANDLE.invoke(getHandle());
        return NMSImpl.toBukkitSound(soundEffect);
    }

    public NMSEntityInsentientImpl(EntityInsentient handle) {
import net.techcable.sonarpet.nms.INMS;
import net.techcable.sonarpet.nms.NMSEntity;
import net.techcable.sonarpet.nms.NMSInsentientEntity;
import net.techcable.sonarpet.nms.versions.v1_11_R1.data.NMSSpawnEggItemData;

import org.bukkit.Location;
public EntityRegistry getEntityRegistry() {
        return new NMSEntityRegistry();
    }

    //
    // Utility methods
    //
    private static final ImmutableMap<SoundEffect, Sound> BUKKIT_SOUNDS;
    static {
        ImmutableMap.Builder<SoundEffect, Sound> soundsBuilder = ImmutableMap.builder();
        for (Sound bukkitSound : Sound.values()) {
            SoundEffect mojangSound = CraftSound.getSoundEffect(CraftSound.getSound(bukkitSound));
            soundsBuilder.put(mojangSound, bukkitSound);
        }
        BUKKIT_SOUNDS = soundsBuilder.build();
    }
    public static Sound toBukkitSound(SoundEffect mojangEffect) {
        Sound bukkitEffect = BUKKIT_SOUNDS.get(mojangEffect);
        if (bukkitEffect == null) throw new AssertionError("No bukkit sound effect for mojang effect: " + mojangEffect);
        return bukkitEffect;
    }
}
import net.techcable.pineapple.reflection.PineappleField;
import net.techcable.sonarpet.nms.DataWatcher;
import net.techcable.sonarpet.nms.NMSLivingEntity;

import org.bukkit.Sound;
import org.bukkit.craftbukkit.v1_11_R1.CraftSound;
public void setStepHeight(float stepHeight) {
    //

    @Override
    public void playSound(Sound bukkitSound, float volume, float pitch) {
        SoundEffect sound = CraftSound.getSoundEffect(CraftSound.getSound(bukkitSound));
        getHandle().a(sound, volume, pitch);
    }

    @Override
import net.techcable.pineapple.reflection.PineappleField;
import net.techcable.pineapple.reflection.Reflection;
import net.techcable.sonarpet.nms.NMSInsentientEntity;

import org.bukkit.Sound;
import org.bukkit.craftbukkit.v1_8_R3.entity.CraftEntity;
import org.bukkit.craftbukkit.v1_8_R3.entity.CraftLivingEntity;
import org.bukkit.entity.Entity;
public EntityInsentient getHandle() {

    @Override
    @SneakyThrows
    public Sound getDeathSound() {
        String soundEffect = (String) GET_DEATH_SOUND_METHOD_HANDLE.invoke(getHandle());
        return NMSImpl.toBukkitSound(soundEffect);
    }

    public NMSEntityInsentientImpl(EntityInsentient handle) {
package net.techcable.sonarpet.nms.versions.v1_8_R3;

import net.minecraft.server.v1_8_R3.EntityHorse;
import net.minecraft.server.v1_8_R3.EntityInsentient;
import net.minecraft.server.v1_8_R3.EntityPlayer;
import net.techcable.sonarpet.nms.BlockSoundData;
import net.techcable.sonarpet.nms.NMSEntity;
import net.techcable.sonarpet.nms.NMSInsentientEntity;

import org.bukkit.Location;
import org.bukkit.Material;
public EntityRegistry getEntityRegistry() {
        return new NMSEntityRegistry();
    }

    //
    // Utility methods
    //
    private static final ImmutableMap<String, Sound> BUKKIT_SOUNDS;
    static {
        ImmutableMap.Builder<String, Sound> soundsBuilder = ImmutableMap.builder();
        for (Sound bukkitSound : Sound.values()) {
            soundsBuilder.put(CraftSound.getSound(bukkitSound), bukkitSound);
        }
        BUKKIT_SOUNDS = soundsBuilder.build();
    }
    public static Sound toBukkitSound(String mojangSoundName) {
        Sound bukkitEffect = BUKKIT_SOUNDS.get(mojangSoundName);
        if (bukkitEffect == null) throw new AssertionError("No bukkit sound effect for mojang sound: " + mojangSoundName);
        return bukkitEffect;
    }
}
import net.techcable.pineapple.reflection.PineappleField;
import net.techcable.sonarpet.nms.DataWatcher;
import net.techcable.sonarpet.nms.NMSLivingEntity;

import org.bukkit.Sound;
import org.bukkit.craftbukkit.v1_8_R3.CraftSound;
public double distanceTo(Entity other) {
    //

    @Override
    public void playSound(Sound bukkitSound, float volume, float pitch) {
        String sound = CraftSound.getSound(bukkitSound);
        getHandle().makeSound(sound, volume, pitch);
    }

    @Override
import net.techcable.pineapple.reflection.PineappleField;
import net.techcable.pineapple.reflection.Reflection;
import net.techcable.sonarpet.nms.NMSInsentientEntity;

import org.bukkit.Sound;
import org.bukkit.craftbukkit.v1_9_R1.entity.CraftEntity;
import org.bukkit.craftbukkit.v1_9_R1.entity.CraftLivingEntity;
import org.bukkit.entity.Entity;
public EntityInsentient getHandle() {

    @Override
    @SneakyThrows
    public Sound getDeathSound() {
        SoundEffect soundEffect = (SoundEffect) GET_DEATH_SOUND_METHOD_HANDLE.invoke(getHandle());
        return NMSImpl.toBukkitSound(soundEffect);
    }

    public NMSEntityInsentientImpl(EntityInsentient handle) {
import net.techcable.sonarpet.nms.BlockSoundData;
import net.techcable.sonarpet.nms.NMSEntity;
import net.techcable.sonarpet.nms.NMSInsentientEntity;
import net.techcable.sonarpet.nms.versions.v1_9_R1.data.NMSSpawnEggItemData;

import org.bukkit.Location;
public EntityRegistry getEntityRegistry() {
        return new NMSEntityRegistry();
    }

    //
    // Utility methods
    //
    private static final ImmutableMap<SoundEffect, Sound> BUKKIT_SOUNDS;
    static {
        ImmutableMap.Builder<SoundEffect, Sound> soundsBuilder = ImmutableMap.builder();
        for (Sound bukkitSound : Sound.values()) {
            SoundEffect mojangSound = CraftSound.getSoundEffect(CraftSound.getSound(bukkitSound));
            soundsBuilder.put(mojangSound, bukkitSound);
        }
        BUKKIT_SOUNDS = soundsBuilder.build();
    }
    public static Sound toBukkitSound(SoundEffect mojangEffect) {
        Sound bukkitEffect = BUKKIT_SOUNDS.get(mojangEffect);
        if (bukkitEffect == null) throw new AssertionError("No bukkit sound effect for mojang effect: " + mojangEffect);
        return bukkitEffect;
    }
}
import net.techcable.pineapple.reflection.PineappleField;
import net.techcable.sonarpet.nms.DataWatcher;
import net.techcable.sonarpet.nms.NMSLivingEntity;

import org.bukkit.Sound;
import org.bukkit.craftbukkit.v1_9_R1.CraftSound;
public void setStepHeight(float stepHeight) {
    //

    @Override
    public void playSound(Sound bukkitSound, float volume, float pitch) {
        SoundEffect sound = CraftSound.getSoundEffect(CraftSound.getSound(bukkitSound));
        getHandle().a(sound, volume, pitch);
    }

    @Override
import net.techcable.pineapple.reflection.PineappleField;
import net.techcable.pineapple.reflection.Reflection;
import net.techcable.sonarpet.nms.NMSInsentientEntity;

import org.bukkit.Sound;
import org.bukkit.craftbukkit.v1_9_R2.entity.CraftEntity;
import org.bukkit.craftbukkit.v1_9_R2.entity.CraftLivingEntity;
import org.bukkit.entity.Entity;
public EntityInsentient getHandle() {

    @Override
    @SneakyThrows
    public Sound getDeathSound() {
        SoundEffect soundEffect = (SoundEffect) GET_DEATH_SOUND_METHOD_HANDLE.invoke(getHandle());
        return NMSImpl.toBukkitSound(soundEffect);
    }

    public NMSEntityInsentientImpl(EntityInsentient handle) {
import net.techcable.sonarpet.nms.BlockSoundData;
import net.techcable.sonarpet.nms.NMSEntity;
import net.techcable.sonarpet.nms.NMSInsentientEntity;
import net.techcable.sonarpet.nms.versions.v1_9_R2.data.NMSSpawnEggItemData;

import org.bukkit.Location;
public EntityRegistry getEntityRegistry() {
        return new NMSEntityRegistry();
    }

    //
    // Utility methods
    //
    private static final ImmutableMap<SoundEffect, Sound> BUKKIT_SOUNDS;
    static {
        ImmutableMap.Builder<SoundEffect, Sound> soundsBuilder = ImmutableMap.builder();
        for (Sound bukkitSound : Sound.values()) {
            SoundEffect mojangSound = CraftSound.getSoundEffect(CraftSound.getSound(bukkitSound));
            soundsBuilder.put(mojangSound, bukkitSound);
        }
        BUKKIT_SOUNDS = soundsBuilder.build();
    }
    public static Sound toBukkitSound(SoundEffect mojangEffect) {
        Sound bukkitEffect = BUKKIT_SOUNDS.get(mojangEffect);
        if (bukkitEffect == null) throw new AssertionError("No bukkit sound effect for mojang effect: " + mojangEffect);
        return bukkitEffect;
    }
}
import net.techcable.pineapple.reflection.PineappleField;
import net.techcable.sonarpet.nms.DataWatcher;
import net.techcable.sonarpet.nms.NMSLivingEntity;

import org.bukkit.Sound;
import org.bukkit.craftbukkit.v1_9_R2.CraftSound;
public void setStepHeight(float stepHeight) {
    //

    @Override
    public void playSound(Sound bukkitSound, float volume, float pitch) {
        SoundEffect sound = CraftSound.getSoundEffect(CraftSound.getSound(bukkitSound));
        getHandle().a(sound, volume, pitch);
    }

    @Override
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import com.intellij.codeInsight.completion.CompletionProvider;
import com.intellij.codeInsight.completion.CompletionResultSet;
import com.intellij.codeInsight.lookup.LookupElementBuilder;
import com.intellij.openapi.editor.Document;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.vfs.VirtualFile;
import com.intellij.psi.PsiFile;
import com.intellij.psi.search.GlobalSearchScope;
private void addCustomCommands(CompletionParameters parameters, CompletionResult
            String tailText = getTailText(cmd);
            String typeText = getTypeText(cmd);

            Document document = parameters.getEditor().getDocument();
            int line = document.getLineNumber(cmd.getTextOffset()) + 1;
            typeText = typeText + " " + cmd.getContainingFile().getName() + ":" + line;

            result.addElement(LookupElementBuilder.create(cmd, cmdName.substring(1))
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public Rectangle getExtent() {
        for (TileProvider tileProvider: tileProviders) {
            Rectangle providerExtent = tileProvider.getExtent();
            if (providerExtent != null) {
                providerExtent = getTileBounds(tileProvider, providerExtent.x, providerExtent.y, providerExtent.width, providerExtent.height, zoom);
                if (extent == null) {
                    extent = providerExtent;
                } else {
public final Point viewToWorld(int x, int y) {
     * Transform coordinates from component (pixels relative to the top left
     * corner) coordinates to image (world) coordinates, taking the current zoom
     * level into account and for the specified tile provider.
     */
    public final Point viewToWorld(TileProvider tileProvider, int x, int y) {
        return viewToWorld(tileProvider, x, y, zoom);
    }

public final Point viewToWorld(Point coords, int effectiveZoom) {
     * Transform coordinates from component (pixels relative to the top left
     * corner) coordinates to image (world) coordinates, using a specific zoom
     * level and for a specific tile provider.
     */
    public final Point viewToWorld(TileProvider tileProvider, Point coords, int effectiveZoom) {
        return viewToWorld(tileProvider, coords.x, coords.y, effectiveZoom);
    }

public final Point viewToWorld(int x, int y, int effectiveZoom) {
     * Transform coordinates from component (pixels relative to the top left
     * corner) coordinates to image (world) coordinates, using a specific zoom
     * level and for a specific tile provider.
     */
    public final Point viewToWorld(TileProvider tileProvider, int x, int y, int effectiveZoom) {
        Point myOffset = offsets.get(tileProvider);
        return (effectiveZoom == 0)
            ? new Point(x + viewX - xOffset - myOffset.x, y + viewY - yOffset - myOffset.y)
            : ((effectiveZoom < 0)
                ? new Point(((x + viewX - xOffset) << -effectiveZoom) - myOffset.x, ((y + viewY - yOffset) << -effectiveZoom) - myOffset.y)
                : new Point(((x + viewX - xOffset) >> effectiveZoom) - myOffset.x, ((y + viewY - yOffset) >> effectiveZoom) - myOffset.y));
    }

    /**
public final Rectangle worldToView(int x, int y, int width, int height, int effe
     * Transform coordinates from image (world) coordinates to component (pixels
     * relative to the top left corner) coordinates, using a specific zoom
     * level and for a specific tile provider.
     */
    public final Rectangle worldToView(TileProvider tileProvider, int x, int y, int width, int height, int effectiveZoom) {
        Point myOffset = offsets.get(tileProvider);
        return (effectiveZoom == 0)
            ? new Rectangle(x - viewX + xOffset + myOffset.x, y - viewY + yOffset + myOffset.y, width, height)
            : ((effectiveZoom < 0)
                ? new Rectangle(((x + myOffset.x) >> -effectiveZoom) - viewX + xOffset, ((y + myOffset.y) >> -effectiveZoom) - viewY + yOffset, width >> -effectiveZoom, height >> -effectiveZoom)
                : new Rectangle(((x + myOffset.x) << effectiveZoom) - viewX + xOffset, ((y + myOffset.y) << effectiveZoom) - viewY + yOffset, width << effectiveZoom, height << effectiveZoom));
    }

    /**
protected final Rectangle getTileBounds(int x, int y, int effectiveZoom) {
     * @param y The X coordinate of the tile for which to determine the bounds.
     * @param effectiveZoom The zoom level to take into account.
     * @return The area in component coordinates taken up by the specified tile.
     */
    protected final Rectangle getTileBounds(TileProvider tileProvider, int x, int y, int effectiveZoom) {
        return worldToView(tileProvider, x << TILE_SIZE_BITS, y << TILE_SIZE_BITS, TILE_SIZE, TILE_SIZE, effectiveZoom);
    }

protected final Rectangle getTileBounds(int x, int y, int width, int height, int
     * @param effectiveZoom The zoom level to take into account.
     * @return The area in component coordinates taken up by the specified
     * rectangle of tiles.
     */
    protected final Rectangle getTileBounds(TileProvider tileProvider, int x, int y, int width, int height, int effectiveZoom) {
        return worldToView(tileProvider, x << TILE_SIZE_BITS, y << TILE_SIZE_BITS, TILE_SIZE * width, TILE_SIZE * height, effectiveZoom);
    }

protected void paintComponent(Graphics g) {

        g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_NEAREST_NEIGHBOR);
        GraphicsConfiguration gc = getGraphicsConfiguration();
        for (TileProvider tileProvider: tileProviders) {
            final int effectiveZoom = (tileProvider.isZoomSupported() && (zoom < 0)) ? 0 : zoom;
            final Point topLeftTileCoords = viewToWorld(tileProvider, clipBounds.getLocation(), effectiveZoom);
            final int leftTile = topLeftTileCoords.x >> TILE_SIZE_BITS;
            final int topTile = topLeftTileCoords.y >> TILE_SIZE_BITS;
            final Point bottomRightTileCoords = viewToWorld(tileProvider, new Point(clipBounds.x + clipBounds.width - 1, clipBounds.y + clipBounds.height - 1), effectiveZoom);
            final int rightTile = bottomRightTileCoords.x >> TILE_SIZE_BITS;
            final int bottomTile = bottomRightTileCoords.y >> TILE_SIZE_BITS;

            final int middleTileX = (leftTile + rightTile) / 2;
            final int middleTileY = (topTile + bottomTile) / 2;
            final int radius = Math.max(
                Math.max(middleTileX - leftTile, rightTile - middleTileX),
                Math.max(middleTileY - topTile, bottomTile - middleTileY));

            // Paint the tiles in a spiralish fashion, so that missing tiles are generated in that order
            paintTile(g2, gc, tileProvider, middleTileX, middleTileY, effectiveZoom);
            for (int r = 1; r <= radius; r++) {
                for (int i = 0; i < (r * 2); i++) {
                    int tileX = middleTileX + i - r, tileY = middleTileY - r;
                    if ((tileX >= leftTile) && (tileX <= rightTile) && (tileY >= topTile) && (tileY <= bottomTile)) {
                        paintTile(g2, gc, tileProvider, tileX, tileY, effectiveZoom);
                    }
                    tileX = middleTileX + r;
                    tileY = middleTileY + i - r;
                    if ((tileX >= leftTile) && (tileX <= rightTile) && (tileY >= topTile) && (tileY <= bottomTile)) {
                        paintTile(g2, gc, tileProvider, tileX, tileY, effectiveZoom);
                    }
                    tileX = middleTileX + r - i;
                    tileY = middleTileY + r;
                    if ((tileX >= leftTile) && (tileX <= rightTile) && (tileY >= topTile) && (tileY <= bottomTile)) {
                        paintTile(g2, gc, tileProvider, tileX, tileY, effectiveZoom);
                    }
                    tileX = middleTileX - r;
                    tileY = middleTileY - i + r;
                    if ((tileX >= leftTile) && (tileX <= rightTile) && (tileY >= topTile) && (tileY <= bottomTile)) {
                        paintTile(g2, gc, tileProvider, tileX, tileY, effectiveZoom);
                    }
                }
            }
        }

        paintGridIfApplicable(g2);

        paintMarkerIfApplicable(g2);
        
        if (paintCentre) {
            final int middleX = myWidth / 2;
            final int middleY = myHeight / 2;
            g2.setColor(Color.BLACK);
            g2.drawLine(middleX - 4, middleY + 1, middleX + 6, middleY + 1);
            g2.drawLine(middleX + 1, middleY - 4, middleX + 1, middleY + 6);
            g2.setColor(Color.WHITE);
            g2.drawLine(middleX - 5, middleY, middleX + 5, middleY);
            g2.drawLine(middleX, middleY - 5, middleX, middleY + 5);
        }

        paintOverlays(g2);

        // Unschedule tiles which were scheduled to be rendered but are no
        // longer visible
        final Rectangle viewBounds = new Rectangle(0, 0, myWidth, myHeight);
        synchronized (TILE_CACHE_LOCK) {
            for (Iterator<Runnable> i = queue.iterator(); i.hasNext(); ) {
                TileRenderJob job = (TileRenderJob) i.next();
                if (! getTileBounds(job.tileProvider, job.coords.x, job.coords.y, job.effectiveZoom).intersects(viewBounds)) {
                    i.remove();
                    // Remove the RENDERING flag for this tile from the cache,
                    // otherwise it won't be rendered the next time it becomes
                    // visible:
                    tileCaches.get(job.tileProvider).remove(job.coords);
                }
            }
        }
    }

private void paintOverlays(Graphics2D g2) {
     * @param y The Y coordinate of the tile to paint, in tiles relative to the
     *          image origin.
     * @param effectiveZoom The zoom level to apply.
     */
    private void paintTile(Graphics2D g2, GraphicsConfiguration gc, TileProvider tileProvider, int x, int y, int effectiveZoom) {
        Rectangle tileBounds = getTileBounds(tileProvider, x, y, effectiveZoom);
        Image tile = getTile(tileProvider, x, y, effectiveZoom, gc);
        if (tile != null) {
private void scheduleTile(final Map<Point, Reference<? extends Image>> tileCache
                if (dirtyTileCache.containsKey(coords)) {
                    dirtyTileCache.remove(coords);
                }
                repaint(getTileBounds(tileProvider, coords.x, coords.y, effectiveZoom));
            }
        }
    }
public void run() {
                // Repaint still needed, as a dirty tile may have been painted
                // in its location
            }
            repaint(getTileBounds(tileProvider, coords.x, coords.y, effectiveZoom));
        }

        @Override
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      return Math.round((Integer) object * scale);
    } else if (object instanceof JSONArray && ((JSONArray) object).get(0) instanceof Integer) {
      return Math.round(((JSONArray) object).getInt(0) * scale);
    }
    return null;
  }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import io.druid.query.ColumnSelectorPlus;
import io.druid.query.aggregation.AggregatorFactory;
import io.druid.query.dimension.ColumnSelectorStrategyFactory;
import io.druid.query.groupby.GroupByQuery;
import io.druid.query.groupby.GroupByQueryConfig;
import io.druid.query.groupby.epinephelinae.column.DictionaryBuildingStringGroupByColumnSelectorStrategy;
public Row apply(final Grouper.Entry<ByteBuffer> entry)
                );
              }

              // Add aggregations.
              for (int i = 0; i < entry.getValues().length; i++) {
                theMap.put(query.getAggregatorSpecs().get(i).getName(), entry.getValues()[i]);
public void close()
    }
  }

  private static class GroupByEngineKeySerde implements Grouper.KeySerde<ByteBuffer>
  {
    private final int keySize;
import com.google.common.collect.Maps;
import com.google.common.collect.Ordering;
import com.google.common.collect.Sets;
import com.google.common.util.concurrent.MoreExecutors;
import io.druid.collections.BlockingPool;
import io.druid.collections.DefaultBlockingPool;
import io.druid.js.JavaScriptConfig;
import io.druid.query.BySegmentResultValue;
import io.druid.query.BySegmentResultValueClass;
import io.druid.query.DruidProcessingConfig;
import io.druid.query.Druids;
import io.druid.query.FinalizeResultsQueryRunner;
import io.druid.query.QueryRunner;
import io.druid.query.QueryRunnerTestHelper;
import io.druid.query.QueryToolChest;
import io.druid.query.ResourceLimitExceededException;
import io.druid.query.Result;
import io.druid.query.aggregation.AggregatorFactory;
public void testSubqueryWithMultipleIntervalsInOuterQueryWithLimitPushDown()
    Iterable<Row> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);
    TestHelper.assertExpectedObjects(expectedResults, results, "");
  }
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    <string name="auth_captcha_dialog_summary">
        Компания МаксимаТелеком требует вводить этот код время от времени для входа в систему.
        Здесь вы можете ввести его, не нарвавшись при этом на рекламу.
        \nНажмите на изображение, чтобы обновить его.
    </string>
    <string name="auth_captcha_requested">Требуется ввод капчи</string>
    <string name="auth_captcha_bypass_success">Капча отключена. Поздравляю! :)</string>
    <string name="auth_captcha_dialog_summary">
        MaximaTelecom asks to enter this code from time to time to login.
        Here you can enter it without watching ads.
        \nClick on the image to update it.
    </string>
    <string name="auth_captcha_requested">CAPTCHA requested</string>
    <string name="auth_captcha_bypass_success">CAPTCHA disabled. Congratulations! :)</string>
import android.app.Activity;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.AsyncTask;
import android.os.Bundle;
import android.view.KeyEvent;
import android.view.View;
import android.widget.TextView;

import pw.thedrhax.mosmetro.R;
import pw.thedrhax.mosmetro.httpclient.Client;
import pw.thedrhax.mosmetro.httpclient.clients.OkHttp;
import pw.thedrhax.util.Logger;
import pw.thedrhax.util.Util;

public class CaptchaDialog extends Activity {
    private Bitmap image = null;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.captcha_dialog);

        final String url = getIntent().getStringExtra("url");
        final Client client = new OkHttp(this)
                .setCookie(url, "aid", getIntent().getStringExtra("aid"));
        final int pref_retry_count = Util.getIntPreference(this, "pref_retry_count", 3);

        final Button submit_button = (Button) findViewById(R.id.submit_button);
        final EditText text_captcha = (EditText) findViewById(R.id.text_captcha);
        text_captcha.setOnEditorActionListener(new TextView.OnEditorActionListener() {
public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
        });

        final ImageView image_captcha = (ImageView) findViewById(R.id.image_captcha);
        image_captcha.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                new AsyncTask<Void,Void,Bitmap>() {
                    @Override
                    protected Bitmap doInBackground(Void... voids) {
                        try {
                            return BitmapFactory.decodeStream(
                                    client.getInputStream(url, pref_retry_count)
                            );
                        } catch (Exception ex) {
                            Logger.log(getString(
                                    R.string.error, getString(R.string.error_image)
                            ));
                            Logger.log(Logger.LEVEL.DEBUG, ex);
                        }
                        return null;
                    }

                    @Override
                    protected void onPostExecute(Bitmap bitmap) {
                        image = bitmap;
                        if (image != null) image_captcha.setImageBitmap(image);
                    }
                }.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
            }
        });
        image_captcha.performClick();

        submit_button.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                sendBroadcast(new Intent("pw.thedrhax.mosmetro.event.CAPTCHA_RESULT")
                        .putExtra("value", text_captcha.getText().toString())
                        .putExtra("image", Util.bitmapToBase64(image))
                );
                finish();
            }
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.SystemClock;
import android.preference.PreferenceManager;

import pw.thedrhax.mosmetro.services.ConnectionService;
import pw.thedrhax.util.Listener;
import pw.thedrhax.util.Notify;

public class CaptchaRequest {
    private final Listener<Boolean> running = new Listener<>(true);
public CaptchaRequest setRunningListener(Listener<Boolean> master) {
        running.subscribe(master); return this;
    }

    public Map<String,String> getResult(Context context, String url, String aid) {
        final Map<String,String> result = new HashMap<>();

        Intent captcha_activity = new Intent(context, CaptchaDialog.class)
                .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
                .putExtra("url", url)
                .putExtra("aid", aid);

        Notify captcha_notify = new Notify(context).id(2)
                .title(context.getString(R.string.notification_captcha))

import android.annotation.SuppressLint;
import android.content.Context;
import android.net.Uri;
import android.util.Base64;

public boolean run(final HashMap<String, Object> vars) {
                    return false;
                }

                // Asking user to enter the CAPTCHA
                vars.putAll(
                        new CaptchaRequest().setRunningListener(running).getResult(
                                context, captcha_url, client.getCookies(redirect).get("aid")
                        )
                );

                // Check the answer

import android.content.Context;
import android.graphics.Bitmap;
import android.preference.PreferenceManager;
import android.util.Base64;

import java.io.ByteArrayOutputStream;

public final class Util {
    private Util() {}
public static int getIntPreference (Context context, String name, int def_value)
    }

    public static String bitmapToBase64(Bitmap bitmap) {
        if (bitmap == null) return null;

        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        bitmap.compress(Bitmap.CompressFormat.PNG, 100, baos);

        byte[] bytes = baos.toByteArray();
        return Base64.encodeToString(bytes, Base64.DEFAULT);
    }
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void onNext(T t) {
			}
			else {
				this.task = task;
				Subscription actualS = s;
				s = Operators.cancelledSubscription();
				actualS.cancel();
			}
		}

package reactor.core.publisher;

import java.time.Duration;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicReference;

public void reconnectsAfterRefCountZero() {
	}

	@Test
	public void scanMain() {
		ConnectableFlux<Integer> parent = Flux.just(10).publish();
		FluxRefCount<Integer> test = new FluxRefCount<Integer>(parent, 17);
import java.util.concurrent.RejectedExecutionException;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicReference;

public void upstreamIsDelayedSource() {
	}

	@Test
	public void scanSubscriber() {
		CoreSubscriber<String> actual = new LambdaMonoSubscriber<>(null, e -> {}, null, null);
		MonoDelayElement.DelayElementSubscriber<String> test = new MonoDelayElement.DelayElementSubscriber<>(
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    · Fix: Avoid possible crashes during file operation on Android devices below 4.1\n
    · Fix: Avoid possible crashes on Android devices below 4.4\n
    · Fix: Prevent crash when moving a cache freshly loaded through send2cgeo to another list\n
    \n
    \n
    <b>2017.03.19:</b>\n
protected StatusCode doInBackgroundInternal(final String[] params) {
                    }
                }
                // Display errors to the user
                if (StringUtils.isNoneEmpty(logResult.getLogId())) {
                    showToast(logResult.getLogId());
                }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->
<!-- history

1.1.0
* #8 Allow store sobject with suffix attached to the key
* #9 Allow plugin key name provider and key generator
protected void doRemove(String fullPath) {

    @Override
    protected Map<String, String> doGetMeta(String fullPath) {
        InputStream is = doOperate(fullPath, null, GET_INPUT_STREAM);
        Properties p = new Properties();
        try {
            p.load(is);
protected StorageServiceBase newService(Map<String, String> conf) {
        return new FileSystemService(conf);
    }

    private static final $.Transformer<File, InputStream> GET_INPUT_STREAM = new $.Transformer<File, InputStream>() {
        @Override
        public InputStream transform(File file) {
public void testSubFolderGet() {

    @Test(expected = UnexpectedIOException.class)
    public void testSubFolderRemove() {
        fss.put(subFolderPath + "/" + key1, sobj);
        subFolder.remove(key1);
        fss.get(subFolderPath + "/" + key1);
    }

}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

public class DockerMachineRequirement implements Requirement<RequiresDockerMachine> {

    private final CommandLineExecutor commandLineExecutor = new CommandLineExecutor();

    @Override
    public void check(RequiresDockerMachine context) throws UnsatisfiedRequirementException {
package org.arquillian.cube.docker.impl.requirement;

import com.github.dockerjava.api.DockerClient;
import com.github.dockerjava.api.model.Version;
import com.github.dockerjava.core.DockerClientBuilder;
import com.google.common.base.Strings;
import java.util.HashMap;
import java.util.Map;
import org.arquillian.cube.docker.impl.client.CubeDockerConfiguration;
import org.arquillian.cube.docker.impl.client.CubeDockerConfigurationResolver;
import org.arquillian.cube.docker.impl.util.Boot2Docker;
import org.arquillian.cube.docker.impl.util.Top;
import org.arquillian.cube.spi.requirement.Requirement;
import org.arquillian.cube.spi.requirement.UnsatisfiedRequirementException;

public class DockerRequirement implements Requirement<RequiresDocker> {

    private final CommandLineExecutor commandLineExecutor = new CommandLineExecutor();
    private final CubeDockerConfigurationResolver resolver = new CubeDockerConfigurationResolver(new Top(),
        new DockerMachine(commandLineExecutor),
        new Boot2Docker(commandLineExecutor),
        new OperatingSystemResolver().currentOperatingSystem().getFamily()
    );

    /**
     * @param serverUrl
private static Version getDockerVersion(String serverUrl) {

    @Override
    public void check(RequiresDocker context) throws UnsatisfiedRequirementException {
        Map<String, String> config = resolver.resolve(new HashMap<String, String>());
        String serverUrl = config.get(CubeDockerConfiguration.DOCKER_URI);
        if (Strings.isNullOrEmpty(serverUrl)) {
            throw new UnsatisfiedRequirementException("Could not resolve the docker server url.");
        } else if (!isDockerRunning(serverUrl)) {
            throw new UnsatisfiedRequirementException("No server is running on url:[" + serverUrl + "].");
        }
    }
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
     */
    private final Map<UUID, DockerImage> images = new HashMap<>();

    private final SBuildServer buildServer;
    private final BuildAgentManager agentMgr;

protected void callInternal() throws Exception {
            // Step 1, query the whole list of containers associated with this cloud client.
            Node containers = dockerClient.listContainersWithLabel(DockerCloudUtils.CLIENT_ID_LABEL, uuid.toString());

            List<String> orphanedContainers = new ArrayList<>();

            lock.lock();
            try {
protected void callInternal() throws Exception {
                }

                // Step 2: pro-actively discard unregistered agent that are no longer referenced, they are lost to us.
                for (SBuildAgent agent : agentMgr.getUnregisteredAgents()) {
                    if (uuid.equals(DockerCloudUtils.getClientId(agent))) {
                        UUID instanceId = DockerCloudUtils.getInstanceId(agent);
                        boolean discardAgent = false;
protected void callInternal() throws Exception {
                            discardAgent = true;
                        }
                        if (discardAgent) {
                            try {
                                agentMgr.removeAgent(agent, null);
                            } catch (AgentCannotBeRemovedException e) {
                                LOG.warn("Failed to remove unregistered agent.", e);
                            }
                        }
                    }
                }
protected void callInternal() throws Exception {
                lock.unlock();
            }

            if (!orphanedContainers.isEmpty()) {
                LOG.info("The following orphaned containers will be removed: " + orphanedContainers);
            }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
package org.glowroot.agent.util;

import java.lang.management.ManagementFactory;
import java.util.List;
import java.util.Set;

import javax.management.InstanceAlreadyExistsException;
import javax.management.MBeanInfo;
import javax.management.MBeanServer;
import javax.management.MBeanServerFactory;
import javax.management.MalformedObjectNameException;
import javax.management.NotCompliantMBeanException;
import javax.management.ObjectName;

    private static final Logger logger = LoggerFactory.getLogger(LazyPlatformMBeanServer.class);

    // log startup messages using logger name "org.glowroot"
    private static final Logger startupLogger = LoggerFactory.getLogger("org.glowroot");

    @GuardedBy("initListeners")
    private final List<InitListener> initListeners = Lists.newArrayList();

    private final boolean waitForContainerToCreatePlatformMBeanServer;
    private final boolean needsManualPatternMatching;
    private final boolean websphere;

    private final List<ObjectNamePair> toBeRegistered = Lists.newCopyOnWriteArrayList();
    private final List<ObjectName> toBeUnregistered = Lists.newCopyOnWriteArrayList();
public static LazyPlatformMBeanServer create() throws Exception {
    private LazyPlatformMBeanServer() {
        String command = AppServerDetection.getCommand();
        boolean oldJBoss = AppServerDetection.isOldJBoss(command);
        boolean websphere = AppServerDetection.isWebSphere(command);
        waitForContainerToCreatePlatformMBeanServer = AppServerDetection.isJBossModules(command)
                || oldJBoss || AppServerDetection.isGlassfish(command)
                || AppServerDetection.isWebLogic(command) || websphere;
        needsManualPatternMatching = oldJBoss;
        this.websphere = websphere;
    }

    public void lazyRegisterMBean(Object object, String name) {
private void ensureInit() throws Exception {
            if (waitForContainerToCreatePlatformMBeanServer) {
                waitForContainerToCreatePlatformMBeanServer(Stopwatch.createUnstarted());
            }
            try {
                platformMBeanServer = ManagementFactory.getPlatformMBeanServer();
            } catch (Exception e) {
                // e.g. on old jboss: JMRuntimeException: Failed to load MBeanServerBuilder class
                // org.jboss.mx.server.MBeanServerBuilderImpl
                logger.debug(e.getMessage(), e);
                List<MBeanServer> mbeanServers = MBeanServerFactory.findMBeanServer(null);
                if (mbeanServers.isEmpty()) {
                    throw e;
                }
                platformMBeanServer = mbeanServers.get(0);
                startupLogger.info("could not load platform mbean server, using {}",
                        platformMBeanServer.getClass().getName());
            }
            for (InitListener initListener : initListeners) {
                try {
                    initListener.postInit(platformMBeanServer);
private void ensureInit() throws Exception {
        }
    }

    private void waitForContainerToCreatePlatformMBeanServer(Stopwatch stopwatch)
            throws InterruptedException {
        stopwatch.start();
        while (stopwatch.elapsed(SECONDS) < 60 && !isPlatformMBeanServerCreated(false)) {
            Thread.sleep(100);
        }
        if (!isPlatformMBeanServerCreated(true)) {
            logger.error("platform mbean server was never created by container");
        }
    }

    private boolean isPlatformMBeanServerCreated(boolean logError) {
        List<MBeanServer> mbeanServers = MBeanServerFactory.findMBeanServer(null);
        if (!websphere) {
            return !mbeanServers.isEmpty();
        }
        for (MBeanServer mbeanServer : mbeanServers) {
            if (isWebSpherePlatformMbeanServerAndReady(mbeanServer, logError)) {
                return true;
            }
        }
        return false;
    }

    private static boolean isWebSpherePlatformMbeanServerAndReady(MBeanServer mbeanServer,
            boolean logError) {
        Class<?> mbeanServerClass = mbeanServer.getClass();
        if (!mbeanServerClass.getName().equals("com.ibm.ws.management.PlatformMBeanServer")) {
            return false;
        }
        try {
            // ready when getAdminService() returns non-null
            return mbeanServerClass.getMethod("getAdminService").invoke(mbeanServer) != null;
        } catch (Exception e) {
            logger.debug(e.getMessage(), e);
            if (logError) {
                logger.error(e.getMessage(), e);
            }
            return false;
        }
    }

    public interface InitListener {
import javax.annotation.Nullable;

import org.glowroot.agent.plugin.api.Agent;
import org.glowroot.agent.plugin.api.MessageSupplier;
import org.glowroot.agent.plugin.api.OptionalThreadContext;
import org.glowroot.agent.plugin.api.ThreadContext.Priority;
import org.glowroot.agent.plugin.api.TimerName;
import org.glowroot.agent.plugin.api.TraceEntry;
import org.glowroot.agent.plugin.api.weaving.BindReceiver;
import org.glowroot.agent.plugin.api.weaving.Pointcut;
import org.glowroot.agent.plugin.api.weaving.Shim;

import static java.util.concurrent.TimeUnit.MILLISECONDS;

// this covers Tomcat, TomEE, Glassfish, JBoss EAP
public class CatalinaAppStartupAspect {

        public static TraceEntry onBefore(OptionalThreadContext context,
                @BindReceiver StandardContext standardContext) {
            String path = standardContext.getPath();
            return onBeforeCommon(context, path, timerName);
        }
        @OnReturn
        public static void onReturn(@BindTraveler TraceEntry traceEntry) {
public static void onThrow(@BindThrowable Throwable t,
            traceEntry.endWithError(t);
        }
    }

    static TraceEntry onBeforeCommon(OptionalThreadContext context, @Nullable String path,
            TimerName timerName) {
        String transactionName;
        if (path == null || path.isEmpty()) {
            // root context path is empty "", but makes more sense to display "/"
            transactionName = "Servlet context: /";
        } else {
            transactionName = "Servlet context: " + path;
        }
        TraceEntry traceEntry = context.startTransaction("Startup", transactionName,
                MessageSupplier.create(transactionName), timerName);
        context.setTransactionSlowThreshold(0, MILLISECONDS, Priority.CORE_PLUGIN);
        return traceEntry;
    }
}
        public static TraceEntry onBefore(OptionalThreadContext context,
                @BindReceiver WebAppServletContext webAppServletContext) {
            String path = webAppServletContext.getContextPath();
            return CatalinaAppStartupAspect.onBeforeCommon(context, path, timerName);
        }
        @OnReturn
        public static void onReturn(@BindTraveler TraceEntry traceEntry) {
        public static TraceEntry onBefore(OptionalThreadContext context,
                @BindReceiver WebApp webApp) {
            String path = webApp.getContextPath();
            return CatalinaAppStartupAspect.onBeforeCommon(context, path, timerName);
        }
        @OnReturn
        public static void onReturn(@BindTraveler TraceEntry traceEntry) {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public PostEventRunnable(BadgeUpSponge plugin, BadgeUpEvent event) {

    @Override
    public void run() {

        Config config = BadgeUpSponge.getConfig();

        // build the base API URL
        String baseURL = "";

        if (!config.getBadgeUpConfig().getBaseAPIURL().isEmpty()) {
            // override other config settings with this base URL
            baseURL = config.getBadgeUpConfig().getBaseAPIURL();
        } else {
            // region provided
            baseURL = "https://api." + config.getBadgeUpConfig().getRegion() + ".badgeup.io/v1/apps/";
        }

        String appId = Util.parseAppIdFromAPIKey(config.getBadgeUpConfig().getAPIKey()).get();

        this.event.setDiscardable(true);

        try {
            HttpResponse<JsonNode> response = Unirest.post(baseURL + appId + "/events").body(this.event.build())
                    .asJson();

            // If status code is 413, log that the event was too big (to be
public void run() {

            for (JSONObject record : completedAchievements) {
                final String achievementId = record.getString("achievementId");
                final JSONObject achievement = Unirest.get(baseURL + appId + "/achievements/" + achievementId)
                        .asJson().getBody().getObject();

                final Optional<Player> subjectOpt = Sponge.getServer().getPlayer(this.event.getSubject());
public void run() {
                        .forEach(awardId -> awardIds.add((String) awardId));

                for (String awardId : awardIds) {
                    final JSONObject award = Unirest.get(baseURL + appId + "/awards/" + awardId).asJson()
                            .getBody().getObject();
                    awardPS.addPendingAward(this.event.getSubject(), award);

import java.util.Optional;

public class Util {

    public static Optional<String> parseAppIdFromAPIKey(String apiKey) {
        try {
public void run() {
        }

        private void meatLoverAchievement() throws JSONException, UnirestException, IllegalStateException {
            final String baseURL = BadgeUpSponge.getConfig().getBadgeUpConfig().getBaseAPIURL();
            final String appId = Util.parseAppIdFromAPIKey(BadgeUpSponge.getConfig().getBadgeUpConfig().getAPIKey()).get();

            HttpResponse<JsonNode> rawPorkCritResponse = Unirest.post(baseURL + appId + "/criteria")
private void meatLoverAchievement() throws JSONException, UnirestException, Ille
        }

        private void vegematicAchievement() throws JSONException, UnirestException, IllegalStateException {
            final String baseURL = BadgeUpSponge.getConfig().getBadgeUpConfig().getBaseAPIURL();
            final String appId = Util.parseAppIdFromAPIKey(BadgeUpSponge.getConfig().getBadgeUpConfig().getAPIKey()).get();

            HttpResponse<JsonNode> appleCritResponse = Unirest.post(baseURL + appId + "/criteria")
private void vegematicAchievement() throws JSONException, UnirestException, Ille
        }

        private void greenThumbAchievement() throws JSONException, UnirestException, IllegalStateException {
            final String baseURL = BadgeUpSponge.getConfig().getBadgeUpConfig().getBaseAPIURL();
            final String appId = Util.parseAppIdFromAPIKey(BadgeUpSponge.getConfig().getBadgeUpConfig().getAPIKey()).get();

            HttpResponse<JsonNode> placeSaplingCritResponse = Unirest.post(baseURL + appId + "/criteria")
private void greenThumbAchievement() throws JSONException, UnirestException, Ill
        }

        private void pyroAchievement() throws JSONException, UnirestException, IllegalStateException {
            final String baseURL = BadgeUpSponge.getConfig().getBadgeUpConfig().getBaseAPIURL();
            final String appId = Util.parseAppIdFromAPIKey(BadgeUpSponge.getConfig().getBadgeUpConfig().getAPIKey()).get();

            HttpResponse<JsonNode> lightFireCritResponse = Unirest.post(baseURL + appId + "/criteria")
private void pyroAchievement() throws JSONException, UnirestException, IllegalSt
        }

        private void lumberjackAchievement() throws JSONException, UnirestException, IllegalStateException {
            final String baseURL = BadgeUpSponge.getConfig().getBadgeUpConfig().getBaseAPIURL();
            final String appId = Util.parseAppIdFromAPIKey(BadgeUpSponge.getConfig().getBadgeUpConfig().getAPIKey()).get();

            HttpResponse<JsonNode> chopLogsCritResponse = Unirest.post(baseURL + appId + "/criteria")
private void lumberjackAchievement() throws JSONException, UnirestException, Ill
        }

        private void moneybagsAchievement() throws JSONException, UnirestException, IllegalStateException {
            final String baseURL = BadgeUpSponge.getConfig().getBadgeUpConfig().getBaseAPIURL();
            final String appId = Util.parseAppIdFromAPIKey(BadgeUpSponge.getConfig().getBadgeUpConfig().getAPIKey()).get();

            HttpResponse<JsonNode> dropGoldCritResponse = Unirest.post(baseURL + appId + "/criteria")
private void moneybagsAchievement() throws JSONException, UnirestException, Ille
        }

        private void oneMansTrashAchievement() throws JSONException, UnirestException, IllegalStateException {
            final String baseURL = BadgeUpSponge.getConfig().getBadgeUpConfig().getBaseAPIURL();
            final String appId = Util.parseAppIdFromAPIKey(BadgeUpSponge.getConfig().getBadgeUpConfig().getAPIKey()).get();

            HttpResponse<JsonNode> pickupRottenFleshCritResponse = Unirest.post(baseURL + appId + "/criteria")
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.URISyntaxException;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.Vector;

public void installNewServer(String serverName, int heapInM, int debugPort) thro

    //Copy a cutom logback configuration
    Path serverPath = FileSystems.getDefault().getPath(installPath, "server", "lib", "logback-test.xml");
    Files.copy(this.getClass().getResourceAsStream("/logback-test.xml"), serverPath);

    // Create the object representing this single installation and add it to the list for this stripe.
    ServerInstallation installation = new ServerInstallation(this.interlock, this.stateManager, this.stripeVerboseManager, serverName, new File(installPath), heapInM, debugPort);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public ExpressionScope(final int pos, final Range range) {
  }

  @Override
  public MethodCall addMethodCall(final MethodCall mcs) {
    assert mcs.arguments != null;
    final Integer endCol = super.range.end.column;
    final Integer endLine = super.range.end.line;
    final Position mcsEnd = mcs.range.end;
    if (mcsEnd.column + 1 == endCol && mcsEnd.line == endLine) {
      this.expressionReturn = mcs;
    }
    return super.addMethodCall(mcs);
  }

  @Override
public static Scope getInnerScope(final int line, final List<? extends Scope> sc
    return null;
  }

  public FieldAccess addFieldAccess(final FieldAccess fieldAccess) {
    this.fieldAccesses.add(fieldAccess);
    log.trace("add fieldAccess={} to range={} {}", fieldAccess, this.range, this.getClassName());
    return fieldAccess;
  }

  public MethodCall addMethodCall(final MethodCall methodCall) {
    // guard
    assert methodCall.arguments != null;
    this.methodCalls.add(methodCall);
    log.trace("add methodCall={} to range={} {}", methodCall, this.range, this.getClassName());
    return methodCall;
  }

  public void addVariable(final Variable variable) {
private void analyzeMethodInvocation(
                      if (arguments != null) {
                        mc.arguments = arguments;
                      }
                      final MethodCall methodCall1 = scope.addMethodCall(mc);
                    });
          }
        } else {
private void analyzeMethodInvocation(
                    if (arguments != null) {
                      mc.arguments = arguments;
                    }
                    final MethodCall methodCall1 = scope.addMethodCall(mc);
                  });
        }
      }
private void analyzeMethodInvocation(
                if (arguments != null) {
                  methodCall.arguments = arguments;
                }
                final MethodCall methodCall1 = scope.addMethodCall(methodCall);
              });

    } else {
private void analyzeNewClass(
              if (arguments != null) {
                methodCall.arguments = arguments;
              }
              final MethodCall methodCall1 = scope.addMethodCall(methodCall);
            });
  }

private void analyzeIdent(
    if (endPos == -1) {
      return;
    }
    final Symbol sym = ident.sym;
    final Source src = context.getSource();
    final Range range = Range.create(src, preferredPos, endPos);
    if (sym != null) {
      final Type type = sym.asType();
      final String name = ident.getName().toString();

      final Variable variable = new Variable(name, preferredPos, range);

      this.getTypeString(src, type)
          .ifPresent(
              fqcn -> {
                variable.fqcn = TreeAnalyzer.markFQCN(src, fqcn);
                variable.argumentIndex = context.getArgumentIndex();
                context.setArgumentFQCN(variable.fqcn);
                src.getCurrentScope().ifPresent(scope -> scope.addVariable(variable));
              });
    } else {
      String nm = ident.toString();
      final Variable variable = new Variable(nm, preferredPos, range);
package meghanada.analyze;

import static meghanada.config.Config.timeIt;
import static meghanada.config.Config.traceIt;
import static org.junit.Assert.assertEquals;

import java.io.File;
public void testMissingImports4() throws Exception {
    final String tmp = System.getProperty("java.io.tmpdir");

    final Source source =
        traceIt(
            () -> {
              final CompileResult compileResult = analyzer.analyzeAndCompile(files, cp, tmp);
              compileResult.getSources().values().forEach(Source::dump);
public void testJumpField01() throws Exception {
  }

  @Test
  public void testJumpField3() throws Exception {
    File f = new File("./src/test/java/meghanada/Jump1.java").getCanonicalFile();
    assert f.exists();
    LocationSearcher searcher = getSearcher();
public void testJumpField3() throws Exception {
  }

  @Test
  public void testJumpMethod01() throws Exception {
    File f = new File("./src/main/java/meghanada/session/Session.java").getCanonicalFile();
    assert f.exists();
package meghanada.project.gradle;

import static meghanada.config.Config.timeIt;
import static meghanada.config.Config.traceIt;
import static org.junit.Assert.assertTrue;

import java.io.File;
public void testRunTask1() throws Exception {
  @Test
  public void testParse1() throws Exception {
    final Project project =
        traceIt(
            () -> {
              return this.project.parseProject();
            });
package meghanada.reflect.asm;

import static meghanada.config.Config.timeIt;
import static meghanada.config.Config.traceIt;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

public void testLocalReflect9() throws Exception {
    {
      String fqcn = "meghanada.SelfRef1";
      List<MemberDescriptor> memberDescriptors =
          traceIt(
              () -> {
                return cachedASMReflector.reflect(fqcn);
              });
package meghanada.reflect.asm;

import static meghanada.config.Config.traceIt;

import java.io.File;
import java.io.FileInputStream;
public void tearDown() throws Exception {}
  public void testMethod1() throws Exception {
    final File f = new File(getTestOutputDir(), "meghanada/Gen3.class");
    final String fqcn = "meghanada.Gen3";
    TestVisitor visitor = traceIt(() -> doAnalyze(f, fqcn));
  }

  private TestVisitor doAnalyze(File file, String fqcn) throws IOException {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
subprojects { project ->
            options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'
        }
    }

    // We generate a combined javadoc, no need to create javadocs for each library independently.
    if (!project.name.equals('glide')) {
        tasks.withType(Javadoc).all { enabled = false }
    }
}

task wrapper(type: Wrapper) {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
********************************************
*            version history
********************************************
1.0.1
- Fix #79 static action handler method cause NPE
- Fix #81 Duplicate route mapping breaks the hot reloading and application state #81
public Object resolve(String strVal, Class<?> targetType) {
                r = new StringValueResolver<T>(targetType) {
                    @Override
                    public T resolve(String value) {
                        return (T)Enum.valueOf(clazz, value);
                    }
                };
            } else {
                r = new StringValueResolver<T>(targetType) {
                    @Override
                    public T resolve(String value) {
                        T e = (T) $.asEnum(clazz, value);
                        if (null == e) {
                            throw new IllegalArgumentException(
                                    "No enum constant " + clazz.getCanonicalName() + "." + value);
                        }
                        return e;
                    }
                };
            }

import act.Destroyable;
import act.app.App;
import act.app.AppServiceBase;
import act.app.event.AppEventId;
import act.util.SubClassFinder;
import org.osgl.inject.BeanSpec;
import org.osgl.util.C;

public synchronized void registerDiListener(DependencyInjectionListener listener
        for (Class c : targets) {
            List<DependencyInjectionListener> list = listeners.get(c);
            if (null == list) {
                list = C.newList();
                listeners.put(c, list);
            }
            list.add(listener);
public void fireInjectedEvent(Object bean, BeanSpec spec) {
    }


    @SubClassFinder(value = DependencyInjectionListener.class, callOn = AppEventId.DEPENDENCY_INJECTOR_LOADED)
    public static void discoverDiListener(final Class<? extends DependencyInjectionListener> target) {
        App app = App.instance();
        DependencyInjector di = app.injector();
# Put package/class names that needs Act to scan. It can be regular expressions
act\..*Admin
act.i18n.TimeZoneResolver
act.i18n.LocaleResolver
act.app.SingletonFinder
act.app.util.SimpleRestfulServiceBase
act.inject.genie.GenieInjector
act.db.DbBind
act.controller.builtin.CliOverHttp
act.app.conf.AppConfigPlugin
act.Info
act.handler.builtin.controller.RequestHandlerProxy
act.validation.ValidationPlugin
act.Zen
act.util.AdaptiveRecordCodec
org.osgl.util.FastJsonKvCodec
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import io.spring.gradle.dependencymanagement.internal.pom.Pom;
import io.spring.gradle.dependencymanagement.internal.pom.PomReference;
import io.spring.gradle.dependencymanagement.internal.pom.PomResolver;

/**
 * Encapsulates dependency management information for a particular configuration in a Gradle project.
        this.targetConfiguration = targetConfiguration;
    }

    void importBom(Coordinates coordinates, Map<String, String> properties) {
        this.importedBoms.add(new PomReference(coordinates, properties));
    }

private void resolve() {

        logger.debug("Preserving existing versions: {}", existingVersions);

        this.resolvedBoms = this.pomResolver.resolvePoms(this.importedBoms, this.project.getProperties());

        for (Pom resolvedBom: this.resolvedBoms) {
            for (Dependency dependency : resolvedBom.getManagedDependencies()) {
/*
 * Copyright 2014-2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.

import io.spring.gradle.dependencymanagement.internal.pom.Coordinates;
import io.spring.gradle.dependencymanagement.internal.pom.PomResolver;

/**
 * Container object for a Gradle build project's dependency management, handling the project's
public void addManagedVersion(Configuration configuration, String group, String
     * @param properties the properties to use when resolving the bom's contents
     */
    public void importBom(Configuration configuration, Coordinates coordinates,
            Map<String, String> properties) {
        dependencyManagementForConfiguration(configuration).importBom(coordinates, properties);
    }

import java.util.Map;

import io.spring.gradle.dependencymanagement.dsl.MavenBomHandler;

/**
 * Standard implementation of {@link MavenBomHandler}.
private void putAll(Map<? extends CharSequence, ? extends CharSequence> source,
        }
    }

    Map<String, String> getBomProperties() {
        return this.bomProperties;
    }

}
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.gradle.api.Project;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import io.spring.gradle.dependencymanagement.internal.DependencyManagementConfigurationContainer;
import io.spring.gradle.dependencymanagement.org.apache.maven.model.Model;
import io.spring.gradle.dependencymanagement.org.apache.maven.model.building.DefaultModelBuilder;
import io.spring.gradle.dependencymanagement.org.apache.maven.model.building.DefaultModelBuilderFactory;
        this.modelResolver = new ConfigurationModelResolver(project, configurationContainer);
    }

    Model buildModel(File pom, Map<String, ?> properties) {
        DefaultModelBuildingRequest request = new DefaultModelBuildingRequest();
        request.setSystemProperties(System.getProperties());
        request.setModelSource(new FileModelSource(pom));
private void reportErrors(List<ModelProblem> errors, File file) {
        logger.error(message.toString());
    }

    private DefaultModelBuilder createModelBuilder(Map<String, ?> properties) {
        DefaultModelBuilder modelBuilder = new DefaultModelBuilderFactory().newInstance();
        modelBuilder
                .setModelInterpolator(new PropertiesModelInterpolator(properties));
import io.spring.gradle.dependencymanagement.internal.pom.Pom;
import io.spring.gradle.dependencymanagement.internal.pom.PomReference;
import io.spring.gradle.dependencymanagement.internal.pom.PomResolver;
import io.spring.gradle.dependencymanagement.org.apache.maven.model.Exclusion;
import io.spring.gradle.dependencymanagement.org.apache.maven.model.Model;

public MavenPomResolver(Project project, DependencyManagementConfigurationContai
    @Override
    public List<Pom> resolvePomsLeniently(List<PomReference> pomReferences) {
        return createPoms(createConfiguration(pomReferences).getResolvedConfiguration().getLenientConfiguration()
                .getArtifacts(Specs.SATISFIES_ALL), pomReferences, Collections.<String, String>emptyMap());
    }

    @Override
    public List<Pom> resolvePoms(List<PomReference> pomReferences, Map<String, ?> properties) {
        return createPoms(createConfiguration(pomReferences).getResolvedConfiguration().getResolvedArtifacts(),
                pomReferences, properties);
    }
private Configuration createConfiguration(List<PomReference> pomReferences) {
    }

    private List<Pom> createPoms(Set<ResolvedArtifact> resolvedArtifacts, List<PomReference> pomReferences,
            Map<String, ?> properties) {
        Map<String, PomReference> referencesById = new HashMap<String, PomReference>();
        for (PomReference pomReference: pomReferences) {
            referencesById.put(createKey(pomReference.getCoordinates().getGroupId(),
private Configuration createConfiguration(List<PomReference> pomReferences) {
        for (ResolvedArtifact resolvedArtifact: resolvedArtifacts) {
            ModuleVersionIdentifier id = resolvedArtifact.getModuleVersion().getId();
            PomReference reference = referencesById.get(createKey(id.getGroup(), id.getName()));
            Map<String, Object> allProperties = new HashMap<String, Object>(properties);
            allProperties.putAll(reference.getProperties());
            resolvedPoms.add(createPom(resolvedArtifact.getFile(), allProperties));
        }
        return resolvedPoms;
    }

    private Pom createPom(File file, Map<String, ?> properties) {
        Model effectiveModel = this.effectiveModelBuilder.buildModel(file, properties);
        Coordinates coordinates = new Coordinates(effectiveModel.getGroupId(), effectiveModel.getArtifactId(),
                effectiveModel.getVersion());
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

import io.spring.gradle.dependencymanagement.org.apache.maven.model.Model;
import io.spring.gradle.dependencymanagement.org.apache.maven.model.building.ModelBuildingRequest;
import io.spring.gradle.dependencymanagement.org.apache.maven.model.building.ModelProblemCollector;
import io.spring.gradle.dependencymanagement.org.apache.maven.model.interpolation.ModelInterpolator;
import io.spring.gradle.dependencymanagement.org.apache.maven.model.interpolation.StringSearchModelInterpolator;
import io.spring.gradle.dependencymanagement.org.apache.maven.model.path.DefaultPathTranslator;
import io.spring.gradle.dependencymanagement.org.apache.maven.model.path.DefaultUrlNormalizer;
import io.spring.gradle.dependencymanagement.org.codehaus.plexus.interpolation.MapBasedValueSource;
import io.spring.gradle.dependencymanagement.org.codehaus.plexus.interpolation.PropertiesBasedValueSource;
import io.spring.gradle.dependencymanagement.org.codehaus.plexus.interpolation.ValueSource;

/**
 * A {@link ModelInterpolator} that uses a various properties as {@link ValueSource ValueSources}.
 *
 * @author Andy Wilkinson
 */
class PropertiesModelInterpolator extends StringSearchModelInterpolator {

    private final Map<String, ?> properties;

    PropertiesModelInterpolator(Map<String, ?> properties) {
        this.properties = properties;
        setUrlNormalizer(new DefaultUrlNormalizer());
        setPathTranslator(new DefaultPathTranslator());
    public List<ValueSource> createValueSources(Model model, File projectDir,
            ModelBuildingRequest request, ModelProblemCollector collector) {
        List<ValueSource> valueSources = new ArrayList<ValueSource>(
                Arrays.asList(new MapBasedValueSource(this.properties),
                        new PropertiesBasedValueSource(System.getProperties())));
        valueSources.addAll(super.createValueSources(model, projectDir, request, collector));
        return valueSources;
/*
 * Copyright 2014-2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
package io.spring.gradle.dependencymanagement.internal.pom;

import java.util.Collections;
import java.util.Map;

/**
 * A reference to a Maven pom.

    private final Coordinates coordinates;

    private final Map<String, String> properties;

    /**
     * Creates a new {@code PomReference}.
     *
     * @param coordinates the coordinate of the referenced pom
     */
    public PomReference(Coordinates coordinates) {
        this(coordinates, Collections.<String, String>emptyMap());
    }

    /**
public PomReference(Coordinates coordinates) {
     * @param coordinates the coordinates of the referenced pom
     * @param properties the properties that should be used when resolving the pom's contents
     */
    public PomReference(Coordinates coordinates, Map<String, String> properties) {
        this.coordinates = coordinates;
        this.properties = properties;
    }
public Coordinates getCoordinates() {
     *
     * @return the properties
     */
    public Map<String, String> getProperties() {
        return this.properties;
    }

package io.spring.gradle.dependencymanagement.internal.pom;

import java.util.List;
import java.util.Map;

/**
 * A {@code PomResolver} creates {@link Pom Poms} from {@link PomReference PomReferences}.
     * @param properties properties to apply to the resolution of each pom reference
     * @return the poms resolved from the references
     */
    List<Pom> resolvePoms(List<PomReference> pomReferences, Map<String, ?> properties);

    /**
     * Resolves the given {@code pomReferences}, ignoring any references that cannot be resolved.
class DependencyManagementPluginIntegrationSpec extends Specification {

        new File(projectFolder.root, "build/poms/pom-default.xml").text.contains("commons-logging")
    }
}
package io.spring.gradle.dependencymanagement.internal
import io.spring.gradle.dependencymanagement.internal.DependencyManagementSettings.PomCustomizationSettings
import io.spring.gradle.dependencymanagement.internal.maven.MavenPomResolver
import io.spring.gradle.dependencymanagement.internal.pom.Coordinates
import org.gradle.api.Project
import org.gradle.testfixtures.ProjectBuilder
import spock.lang.Specification
class StandardPomDependencyManagementConfigurerSpec extends Specification {
    def "An imported bom is imported in the pom"() {
        given: 'Dependency management that imports a bom'
            this.dependencyManagement.importBom(null, new Coordinates('io.spring.platform', 'platform-bom',
                    '1.0.3.RELEASE'), [:]);
        when: 'The pom is configured'
            Node pom = new XmlParser().parseText("<project></project>")
            new StandardPomDependencyManagementConfigurer(dependencyManagement.globalDependencyManagement,
class StandardPomDependencyManagementConfigurerSpec extends Specification {
            this.project.repositories {
                maven { url new File("src/test/resources/maven-repo").toURI().toURL().toString() }
            }
            this.dependencyManagement.importBom(null, new Coordinates('test', 'bravo-pom-customization-bom', '1.0'), [:])
            this.dependencyManagement.importBom(null, new Coordinates('test', 'alpha-pom-customization-bom', '1.0'), [:])

        when: 'The pom is configured'
            Node pom = new XmlParser().parseText("<project></project>")
class StandardPomDependencyManagementConfigurerSpec extends Specification {
    def "Customization of published poms can be disabled"() {
        given: 'Dependency management that imports a bom'
            this.dependencyManagement.importBom(null, new Coordinates('io.spring.platform', 'platform-bom',
                    '1.0.3.RELEASE'), [:]);
        when: 'The pom is configured'
            Node pom = new XmlParser().parseText("<project></project>")
            PomCustomizationSettings settings = new PomCustomizationSettings()
class StandardPomDependencyManagementConfigurerSpec extends Specification {
    def "Dependency management can be added to a pom with existing dependency management"() {
        given: 'Dependency management that imports a bom'
            this.dependencyManagement.importBom(null, new Coordinates('io.spring.platform', 'platform-bom',
                    '1.0.3.RELEASE'), [:]);
        when: 'The pom with existing dependency management is configured'
            Node pom = new XmlParser().parseText("<project><dependencyManagement><dependencies></dependencies></dependencyManagement></project>")
            new StandardPomDependencyManagementConfigurer(this.dependencyManagement.globalDependencyManagement,
class StandardMavenBomHandlerSpec extends Specification {

        then:
        with(this.handler.bomProperties) {
            it.size() == 1
            it['foo.version'] instanceof String
            it['foo.version'] == '1.0'
        }
    }
}
package io.spring.gradle.dependencymanagement.internal.maven
import io.spring.gradle.dependencymanagement.internal.DependencyManagementConfigurationContainer
import io.spring.gradle.dependencymanagement.internal.pom.Coordinates
import io.spring.gradle.dependencymanagement.internal.pom.PomReference
import org.gradle.api.Project
import org.gradle.testfixtures.ProjectBuilder
import spock.lang.Specification
class MavenPomResolverSpec extends Specification {
        given: 'A reference to a pom that is not Maven 3.0 compatible'
        PomReference reference = new PomReference(new Coordinates("log4j", "log4j", "1.2.16"))
        when: 'The reference is resolved'
        def result = this.resolver.resolvePoms([reference], Collections.emptyMap())
        then: 'It was successful'
        result.size() == 1
    }
class MavenPomResolverSpec extends Specification {
        given: 'A reference to a pom that contains a dependency with an illegal system path'
        PomReference reference = new PomReference(new Coordinates("test", "illegal-system-path", "1.0"))
        when: 'The reference is resolved'
        def result = this.resolver.resolvePoms([reference], Collections.emptyMap())
        then: 'It was successful'
        result.size() == 1
    }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        <version>${maven-war-plugin.version}</version>
        <configuration>
          <classifier>${classifier}</classifier>
          <webXml>${webXml}</webXml>
          <webappDirectory>${project.build.directory}/${project.build.finalName}-${classifier}</webappDirectory>
        </configuration>
      </plugin>
        </property>
      </activation>
      <properties>
        <webXml>${project.basedir}/src/main/webxml/web.xml</webXml>
        <classifier>unsecure</classifier>
      </properties>
    </profile>
        </property>
      </activation>
      <properties>
        <webXml>${project.basedir}/src/main/webxml/web-secure.xml</webXml>
        <classifier>secure</classifier>
      </properties>
    </profile>

            <module name="org.dcm4che.imageio" export="TRUE" services="export"/>
            <module name="org.dcm4che.image" export="TRUE"/>
            <module name="org.dcm4che.soundex" export="TRUE"/>
            <!-- querydsl modules -->
            <module name="com.querydsl" export="TRUE"/>
            <!-- jclouds modules -->
            <module name="org.apache.jclouds.core" export="TRUE"/>
            <module name="org.apache.jclouds.blobstore" export="TRUE" services="export"/>
            <!-- keycloak modules -->
            <module name="org.keycloak.keycloak-core" export="TRUE" services="export"/>
            <module name="org.keycloak.keycloak-adapter-core" export="TRUE" services="export"/>
            <!-- emc-ecs modules -->
            <module name="com.emc.ecs" export="TRUE"/>
        </dependencies>
    </deployment>
</jboss-deployment-structure>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
private HttpProxyCacheServer(Config config) {
            InetAddress inetAddress = InetAddress.getByName(PROXY_HOST);
            this.serverSocket = new ServerSocket(0, 8, inetAddress);
            this.port = serverSocket.getLocalPort();
            CountDownLatch startSignal = new CountDownLatch(1);
            this.waitConnectionThread = new Thread(new WaitRequestsRunnable(startSignal));
            this.waitConnectionThread.start();
boolean ping(int maxAttempts, int startTimeout) {
    }

    private List<Proxy> getDefaultProxies() {
        ProxySelector proxySelector = ProxySelector.getDefault();
        try {
            return proxySelector.select(new URI("https://github.com"));
        } catch (URISyntaxException e) {
            throw new IllegalStateException(e);
        }
import com.danikula.videocache.support.ProxyCacheTestUtils;
import com.danikula.videocache.support.Response;

import org.junit.Before;
import org.junit.Test;
import org.robolectric.RuntimeEnvironment;
import static com.danikula.videocache.support.ProxyCacheTestUtils.HTTP_DATA_URL_ONE_REDIRECT;
import static com.danikula.videocache.support.ProxyCacheTestUtils.getFileContent;
import static com.danikula.videocache.support.ProxyCacheTestUtils.getPort;
import static com.danikula.videocache.support.ProxyCacheTestUtils.loadAssetFile;
import static com.danikula.videocache.support.ProxyCacheTestUtils.readProxyResponse;
import static org.fest.assertions.api.Assertions.assertThat;

/**
public void setup() throws Exception {
        cacheFolder = ProxyCacheTestUtils.newCacheFile();
        createDirectory(cacheFolder);
        cleanDirectory(cacheFolder);
    }

    @Test
public void testTrimFileCacheForTotalSizeLru() throws Exception {
        assertThat(new File(cacheFolder, fileNameGenerator.generate(HTTP_DATA_URL))).doesNotExist();
    }

    private Pair<File, Response> readProxyData(String url, int offset) throws IOException {
        File file = file(cacheFolder, url);
        HttpProxyCacheServer proxy = newProxy(cacheFolder);
package com.danikula.videocache;

import org.junit.Test;
import org.robolectric.RuntimeEnvironment;

import java.io.ByteArrayOutputStream;
import java.net.Socket;

import static com.danikula.videocache.support.ProxyCacheTestUtils.getPort;
import static org.fest.assertions.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
 */
public class PingerTest extends BaseTest {

    @Test
    public void testPingSuccess() throws Exception {
        HttpProxyCacheServer server = new HttpProxyCacheServer(RuntimeEnvironment.application);
public void testResponseToPing() throws Exception {
        assertThat(out.toString()).isEqualTo("HTTP/1.1 200 OK\n\nping ok");
    }


}
import com.danikula.videocache.ProxyCacheException;
import com.danikula.videocache.Source;
import com.danikula.videocache.sourcestorage.SourceInfoStorage;
import com.google.common.io.Files;

import org.mockito.invocation.InvocationOnMock;
import org.mockito.stubbing.Answer;
import org.robolectric.RuntimeEnvironment;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Random;
import java.util.UUID;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.spy;

/**
 * @author Alexey Danilov (danikula@gmail.com).
public static int getPort(HttpProxyCacheServer server) {
        String portAsString = matcher.group(1);
        return Integer.parseInt(portAsString);
    }
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public synchronized void close() {
			resetExposure();
			camera.release();

		} else if (isOpen() && closing.get()) {
			return;
		} else if (!isOpen()) {
			closing.set(false);
		}

		CameraFactory.openCamerasRemove(this);

		if (cameraEventListener.isPresent()) cameraEventListener.get().cameraClosed();

		return;
	}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

import io.ebean.EbeanServer;
import io.ebean.config.ContainerConfig;
import io.ebean.config.ServerConfig;
import com.google.common.collect.Sets;
import com.google.inject.Binder;
import com.google.inject.Key;
import com.zaxxer.hikari.HikariConfig;
import com.zaxxer.hikari.HikariDataSource;

import javaslang.control.Try.CheckedRunnable;

@RunWith(PowerMockRunner.class)
private Block props(final String dataSourceClassName, final String url, final St
          .setProperty("dataSource.url", url))
              .andReturn(null);

      expect(properties.containsKey("dataSourceClassName")).andReturn(hasDataSourceClassName);
      if (!hasDataSourceClassName) {
        expect(properties.getProperty("dataSource.dataSourceClassName"))
            .andReturn(dataSourceClassName);
        expect(properties.setProperty("dataSourceClassName", dataSourceClassName)).andReturn(null);
private Block props(final String dataSourceClassName, final String url, final St
          .setProperty("dataSource.url", url))
              .andReturn(null);

      expect(properties.containsKey("dataSourceClassName")).andReturn(hasDataSourceClassName);
      if (!hasDataSourceClassName) {
        expect(properties.getProperty("dataSource.dataSourceClassName"))
            .andReturn(dataSourceClassName);
        expect(properties.setProperty("dataSourceClassName", dataSourceClassName)).andReturn(null);
private Block props(final String dataSourceClassName, final String url, final St
          .setProperty("dataSource.url", url))
              .andReturn(null);

      expect(properties.containsKey("dataSourceClassName")).andReturn(hasDataSourceClassName);
      if (!hasDataSourceClassName) {
        expect(properties.getProperty("dataSource.dataSourceClassName"))
            .andReturn(dataSourceClassName);
        expect(properties.setProperty("dataSourceClassName", dataSourceClassName)).andReturn(null);

import com.google.common.base.CharMatcher;
import com.google.common.base.Splitter;
import com.google.common.base.Throwables;
import com.google.inject.Binder;
import com.typesafe.config.Config;
private HikariConfig hikariConfig(final String url, final String key, final Stri

    $hikari.entrySet().forEach(entry -> dumper.accept("", entry));

    if (!props.containsKey("dataSourceClassName")) {
      // adjust dataSourceClassName when missing
      props.setProperty("dataSourceClassName", props.getProperty("dataSource.dataSourceClassName"));
    }
    // remove dataSourceClassName under dataSource
    props.remove("dataSource.dataSourceClassName");
databases {
  #          url => jdbc:pgsql://<server>[:<port>]/<database>
  ###############################################################################################
  pgsql {
    dataSourceClassName = com.impossibl.postgres.jdbc.PGDataSource
  }

  ###############################################################################################
  # postgresql
  #            url => jdbc:postgresql://host:port/database
  ###############################################################################################
  postgresql {
    dataSourceClassName = org.postgresql.ds.PGSimpleDataSource
  }

  ###############################################################################################
public void oracle() throws Exception {
  @Test
  public void pgsql() throws Exception {
    Config config = ConfigFactory.parseResources(getClass(), "jdbc.conf");
    Config dbconf = config.withValue("db",
        ConfigValueFactory.fromAnyRef("jdbc:pgsql://server/database"));

    new MockUnit(Env.class, Config.class, Binder.class)
        .expect(props("com.impossibl.postgres.jdbc.PGDataSource", "jdbc:pgsql://server/database",
            "pgsql.database", null, "", false))
        .expect(hikariConfig())
        .expect(hikariDataSource())
        .expect(serviceKey("database"))
        .expect(onStop)
        .run(unit -> {
          new Jdbc().configure(unit.get(Env.class), dbconf, unit.get(Binder.class));
public void pgsql() throws Exception {
  @Test
  public void postgresql() throws Exception {
    Config config = ConfigFactory.parseResources(getClass(), "jdbc.conf");
    Config dbconf = config.withValue("db",
        ConfigValueFactory.fromAnyRef("jdbc:postgresql://server/database"));

    new MockUnit(Env.class, Config.class, Binder.class)
        .expect(props("org.postgresql.ds.PGSimpleDataSource", "jdbc:postgresql://server/database",
            "postgresql.database", null, "", false))
        .expect(hikariConfig())
        .expect(hikariDataSource())
        .expect(serviceKey("database"))
        .expect(onStop)
        .run(unit -> {
          new Jdbc().configure(unit.get(Env.class), dbconf, unit.get(Binder.class));
private Block props(final String dataSourceClassName, final String url, final St
                .andReturn(null);
      }

      expect(properties.containsKey("dataSourceClassName")).andReturn(hasDataSourceClassName);
      if (!hasDataSourceClassName) {
        expect(properties.getProperty("dataSource.dataSourceClassName"))
            .andReturn(dataSourceClassName);
        expect(properties.setProperty("dataSourceClassName", dataSourceClassName)).andReturn(null);
private Block props(final String dataSourceClassName, final String url, final St
          .setProperty("dataSource.url", url))
              .andReturn(null);

      expect(properties.containsKey("dataSourceClassName")).andReturn(hasDataSourceClassName);
      if (!hasDataSourceClassName) {
        expect(properties.getProperty("dataSource.dataSourceClassName"))
            .andReturn(dataSourceClassName);
        expect(properties.setProperty("dataSourceClassName", dataSourceClassName)).andReturn(null);
private Block props(final String dataSourceClassName, final String url, final St
          .setProperty("dataSource.url", url))
              .andReturn(null);

      expect(properties.containsKey("dataSourceClassName")).andReturn(hasDataSourceClassName);
      if (!hasDataSourceClassName) {
        expect(properties.getProperty("dataSource.dataSourceClassName"))
            .andReturn(dataSourceClassName);
        expect(properties.setProperty("dataSourceClassName", dataSourceClassName)).andReturn(null);
public void configure(final Env env, final Config conf, final Binder binder) {
    env.onStart(registry -> {
      DataSource ds = Optional.ofNullable(this.dataSource)
          .map(Provider::get)
          .orElseGet(() -> registry.require("db", DataSource.class));
      schema(conf, schema, schema -> new SchemaModifier(ds, model).createTables(schema));

      ConfigurationBuilder builder = new ConfigurationBuilder(ds, model);
private Block dataSource(final Key<DataSource> dbkey) {
      DataSource ds = unit.get(DataSource.class);

      Registry registry = unit.get(Registry.class);
      expect(registry.require("db", DataSource.class)).andReturn(ds);
    };
  }
}
private Block props(final String dataSourceClassName, final String url, final St
          .setProperty("dataSource.url", url))
              .andReturn(null);

      expect(properties.containsKey("dataSourceClassName")).andReturn(hasDataSourceClassName);
      if (!hasDataSourceClassName) {
        expect(properties.getProperty("dataSource.dataSourceClassName"))
            .andReturn(dataSourceClassName);
        expect(properties.setProperty("dataSourceClassName", dataSourceClassName)).andReturn(null);
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
allprojects {    apply plugin: 'java'    apply plugin: 'eclipse'    apply plugin: 'idea'    group = 'be.isach'    version = '2.4.5-RELEASE'    compileJava.options.encoding = 'UTF-8'    sourceCompatibility = 1.8    targetCompatibility = 1.8    configurations {        shaded        compile.extendsFrom shaded    }    afterEvaluate {        jar {            dependsOn configurations.shaded            from configurations.shaded.collect {                it.isDirectory() ?                        it :                        zipTree(it)            }        }    }}boolean local = falseif (local) libsDirName = '/Users/sacha/Documents/Development/Java/UC_1_11/testserver/plugins'dependencies {    subprojects.each { p ->        shaded(p) {            transitive false        }    }}subprojects {    repositories {        mavenCentral()        // Vault        maven {            url 'http://nexus.hc.to/content/repositories/pub_releases'        }        // Lib's Disguises        maven {            url 'http://repo.md-5.net/content/groups/public/'        }        // Spigot        maven {            url 'https://repo.isach.be'        }        // BungeeCord        maven {            url 'https://oss.sonatype.org/content/repositories/snapshots'        }    }}
public BlockFace getBlockFace(Block a, Block b) {

    @Override
    public void onUpdate() {
        if (locBlue != null) {
            Location portalCenter = locBlue.clone();
            if (locRed != null && !teleported) {
                if(!locRed.getWorld().getName().equals(locBlue.getWorld().getName())) {
                    locRed = null;
                    locBlue = null;
                    getPlayer().sendMessage(MessageManager.getMessage("Gadgets.PortalGun.Different-Worlds"));
                    return;
                }
                Location toDistance;
                if (blueBlockFace == BlockFace.DOWN) {
                    toDistance = getPlayer().getEyeLocation().clone();
                } else if (blueBlockFace == BlockFace.UP) {
                    toDistance = getPlayer().getLocation().clone();
                } else {
                    toDistance = getPlayer().getLocation().add(0, 1.03, 0);
                }
                if (blueBlockFace == BlockFace.UP || blueBlockFace == BlockFace.DOWN) {
                    portalCenter.add(0, 0, 1);
                } else if (blueBlockFace == BlockFace.NORTH || blueBlockFace == BlockFace.SOUTH) {
                    portalCenter.add(0, -1, 0);
                } else if (blueBlockFace == BlockFace.EAST || blueBlockFace == BlockFace.WEST) {
                    portalCenter.add(0, 0, 1);
                }
                if (toDistance.distance(locBlue) < 1.01) {
                    teleported = true;
                    teleport(getPlayer(), locRed);
                    getPlayer().setVelocity(getVectorFromBlockFace(redBlockFace));
                    if (redBlockFace == BlockFace.UP || redBlockFace == BlockFace.DOWN) {
                        Location loc = locRed.clone();
                        loc.setPitch(getPitch(redBlockFace));
                        teleport(getPlayer(), loc);
                    } else {
                        Location loc = locRed.clone();
                        loc.setYaw(getYaw(redBlockFace));
                        teleport(getPlayer(), loc);
                    }
                    Bukkit.getScheduler().runTaskLaterAsynchronously(getUltraCosmetics(), new Runnable() {
                        @Override
                        public void run() {
                            teleported = false;
                        }
                    }, 20);
                }
            }
            Location loc = locBlue.clone();
            for (int i = 0; i < 25; i++) {
                double inc = (2 * Math.PI) / 20;
                double angle = i * inc;
                Vector v = new Vector();
                v.setX(Math.cos(angle) * 0.3);
                v.setZ(Math.sin(angle) * 0.3);
                double x = 0;
                double z = 0;
                if (blueBlockFace != BlockFace.UP && blueBlockFace != BlockFace.DOWN) {
                    if (blueBlockFace == BlockFace.EAST || blueBlockFace == BlockFace.WEST) {
                        x = 0;
                        z = 1.5;
                    } else if (blueBlockFace == BlockFace.NORTH || blueBlockFace == BlockFace.SOUTH) {
                        z = 0;
                        x = 1.5;
                    }
                }
                MathUtils.rotateVector(v, x, 0, z);
                UtilParticles.display(31, 0, 127, loc.add(v));
            }
        }
        if (locRed != null) {
            if (locBlue != null && !teleported) {
                if(!locRed.getWorld().getName().equals(locBlue.getWorld().getName())) {
                    locRed = null;
                    locBlue = null;
                    getPlayer().sendMessage(MessageManager.getMessage("Gadgets.PortalGun.Different-Worlds"));
                    return;
                }
                Location toDistance;
                if (redBlockFace == BlockFace.DOWN) {
                    toDistance = getPlayer().getEyeLocation().clone();
                } else if (redBlockFace == BlockFace.UP) {
                    toDistance = getPlayer().getLocation().clone();
                } else {
                    toDistance = getPlayer().getLocation().add(0, 1.1, 0);
                }
                if (toDistance.distance(locRed) < 1.1) {
                    teleported = true;
                    teleport(getPlayer(), locBlue);
                    getPlayer().setVelocity(getVectorFromBlockFace(blueBlockFace));
                    if (blueBlockFace == BlockFace.UP || blueBlockFace == BlockFace.DOWN) {
                        Location loc = locBlue.clone();
                        loc.setPitch(getPitch(blueBlockFace));
                        teleport(getPlayer(), loc);
                    } else {
                        Location loc = locBlue.clone();
                        loc.setYaw(getYaw(blueBlockFace));
                        teleport(getPlayer(), loc);
                    }
                    Bukkit.getScheduler().runTaskLaterAsynchronously(getUltraCosmetics(), new Runnable() {
                        @Override
                        public void run() {
                            teleported = false;
                        }
                    }, 20);
                }
            }
            Location loc = locRed.clone();
            for (int i = 0; i < 25; i++) {
                double inc = (2 * Math.PI) / 20;
                double angle = i * inc;
                Vector v = new Vector();
                v.setX(Math.cos(angle) * 0.3);
                v.setZ(Math.sin(angle) * 0.3);
                double x = 0;
                double z = 0;
                if (redBlockFace != BlockFace.UP
                        && redBlockFace != BlockFace.DOWN) {
                    if (redBlockFace == BlockFace.EAST
                            || redBlockFace == BlockFace.WEST) {
                        x = 0;
                        z = 1.5;
                    } else if (redBlockFace == BlockFace.NORTH
                            || redBlockFace == BlockFace.SOUTH) {
                        z = 0;
                        x = 1.5;
                    }
                }
                MathUtils.rotateVector(v, x, 0, z);
                UtilParticles.display(255, 0, 0, loc.add(v));
            }
        }
    }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void setName(String name) {
     *                     step name that is unique.
     */
    public Builder addStep(StepImpl.Builder step, String... predecessors) {
      if ((predecessors == null || predecessors.length == 0) && !(step instanceof ScannerImpl.Builder)) {
        throw new IllegalArgumentException("Only scanners can have no predecessor");
      }
public Builder() {
    }

    @Override
    protected abstract ScannerImpl getObject();

    /**
     * The scanning frequency. 25ms is the minimum. Smaller intervals will be treated as 25ms
public Builder() {
     * @return This builder object for further configuration.
     */
    public ScannerImpl.Builder scanFreqMS(long interval) {
      getObject().interval = interval;
      return this;
    }

public Builder() {
     * @return This builder object for further configuration
     */
    public ScannerImpl.Builder rememberScannedIds(boolean remember) {
      getObject().remembering = remember;
      return this;
    }

public Builder() {
     * @return This builder object for further configuration
     */
    public ScannerImpl.Builder detectChangesViaHashing(boolean hash) {
      getObject().hashing = hash;
      return this;
    }

private Class whoAmI() {
      }.getClass().getEnclosingMethod().getDeclaringClass();
    }

    protected StepImpl getObject() {
      return obj;
    }

    public Builder batchSize(int size) {
      getObject().batchSize = size;
      getObject().queue = new LinkedBlockingQueue<>(size);
      return this;
    }


    public Builder outputSpace(JavaSpace outputSpace) {
      getObject().outputSpace = outputSpace;
      return this;
    }

    public Builder inputSpace(JavaSpace inputSpace) {
      getObject().inputSpace = inputSpace;
      return this;
    }

    public Builder named(String stepName) {
      getObject().stepName = stepName;
      return this;
    }

    public Builder routingBy(ConfiguredBuildable<? extends Router> router) {
      getObject().addDeferred(() -> getObject().router = router.build());
      return this;
    }

    public Builder withProcessor(ConfiguredBuildable<? extends DocumentProcessor> processor) {
      getObject().addDeferred(() -> getObject().processor = processor.build());
      return this;
    }

public Builder withProcessor(ConfiguredBuildable<? extends DocumentProcessor> pr
     * @return the name of the step
     */
    public String getStepName() {
      return getObject().stepName;
    }

    private void setObj(StepImpl obj) {
private void setObj(StepImpl obj) {
     * @return the immutable step instance.
     */
    public StepImpl build() {
      StepImpl object = getObject();
      object.executeDeferred();
      int batchSize = object.batchSize;
      object.queue = new LinkedBlockingQueue<>(batchSize > 0 ? batchSize : 50);
public StepImpl build() {
     * @param step a fully built step
     */
    void addNextStep(Step step) {
      getObject().nextSteps.put(step.getName(), step);
    }
  }

public Builder() {
    // TODO DG - validate method

    public Builder withJdbcDriver(String jdbcDriver) {
      getObject().jdbcDriver = jdbcDriver;
      return this;
    }

    public Builder withJdbcUrl(String jdbcUrl) {
      getObject().jdbcUrl = jdbcUrl;
      return this;
    }

    public Builder withJdbcUser(String jdbcUser) {
      getObject().jdbcUser = jdbcUser;
      return this;
    }

    public Builder withJdbcPassword(String jdbcPassword) {
      getObject().jdbcPassword = jdbcPassword;
      return this;
    }

    public Builder withSqlStatement(String sqlStatement) {
      getObject().sqlStatement = sqlStatement;
      return this;
    }

    public Builder representingTable(String table) {
      getObject().table = table;
      return this;
    }

    public Builder withContentColumn(String contentColumn) {
      getObject().contentColumn = contentColumn;
      return this;
    }

    public Builder withFetchSize(int fetchSize) {
      getObject().fetchSize = fetchSize;
      return this;
    }

    public Builder withAutoCommit(boolean autoCommit) {
      getObject().autoCommit = autoCommit;
      return this;
    }

    public Builder withQueryTimeout(int queryTimeout) {
      getObject().queryTimeout = queryTimeout;
      return this;
    }

public ScannerImpl build() {
    }

    @Override
    protected JdbcScanner getObject() {
      return obj;
    }
  }
private Class whoAmI() {
    }

    public Builder withRoot(File root) {
      getObject().rootDir = root;
      return this;
    }

    @Override
    public SimpleFileWatchScanner.Builder batchSize(int size) {
      super.batchSize(size);
      return this;
public ScannerImpl build() {
      return tmp;
    }

    @Override
    protected SimpleFileWatchScanner getObject() {
      return obj;
    }
  }



public class PlanImplTest {

  private static final String LOG_AND_DROP = "log and drop";
  private static final String SCAN_FOO_BAR = "scan foo/bar";

  @ObjectUnderTest PlanImpl plan;
  @Mock private Session sessionMock;
public void testFailInvalidName() {

  }


  @Test(expected = IllegalArgumentException.class)
  public void testScannerPredecisorNotAllowed() {
    replay();
    PlanImpl.Builder planBuilder = new PlanImpl.Builder();
    SimpleFileWatchScanner.Builder scannerBuilder = new SimpleFileWatchScanner.Builder();
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

### 1.4.10
- Improved performance of network scanning (raoulvdberge)

### 1.4.9
- Fixed bug where inventory data was lost sometimes upon opening the world (raoulvdberge)

import javax.annotation.Nonnull;

public interface INetworkNodeFactory {
    @Nonnull
    INetworkNode create(NBTTagCompound tag, World world, BlockPos pos);
}
public void onWorldTick(TickEvent.WorldTickEvent e) {

            if (e.phase == TickEvent.Phase.END) {
                for (INetworkNode node : API.instance().getNetworkNodeManager(e.world).all()) {
                    if (e.world.isBlockLoaded(node.getPos())) {
                        node.update();
                    }
                }
            }

    protected int ticks;
    protected RedstoneMode redstoneMode = RedstoneMode.IGNORE;

    private boolean couldUpdate;
    private boolean active;

public TileEntity getFacingTile() {
        return world.getTileEntity(pos.offset(getDirection()));
    }

    // @TODO: Caching
    public EnumFacing getDirection() {
        return ((TileBase) world.getTileEntity(pos)).getDirection();
    }

    @Nullable
public NBTTagCompound writeConfiguration(NBTTagCompound tag) {
    }

    @Override
    public void readConfiguration(NBTTagCompound tag) {
        getNode().readConfiguration(tag);
        getNode().markDirty();
private void doLegacyCheck(NetworkNode node) {
        this.legacyTag = null;
    }

    // @TODO: This needs to be redone. Perhaps we need to reuse the node registry for this.
    public abstract N createNode(World world, BlockPos pos);

    @Override
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public WorldObject getTarget() {
		    overworld.add(chk);
		    indexedNAVObjectiveList.add(objective);
		} else if(navSubObject instanceof XIT){///////////////////////////////////////////
		    XIT xit = (XIT)navSubObject;
		    Location3D loc3d = xit.getLocationOnMap();
		    navMap.put(mostRecentExitObjective, xit);
		    currentTunnel.//XXX Site of race-condition NPE when loading from state.
		     getExitObject().//TODO NPE on this line
		     setExitLocation(
			    new Vector3D(TRFactory.legacy2Modern(loc3d.getZ()),TRFactory.legacy2Modern(loc3d.getY()),TRFactory.legacy2Modern(loc3d.getX())));
		} else if(navSubObject instanceof DUN){///////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public static File getDefaultGpxDirectory() {

    @NonNull
    public static File getGpxExportDirectory() {
        return new File(Settings.getGpxExportDir());
    }

    @NonNull
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
JvmMemoryMetrics jvmMemoryMetrics() {
    }

    @Bean
    @ConditionalOnClass(ch.qos.logback.classic.Logger.class)
    LogbackMetrics logbackMetrics() {
        return new LogbackMetrics();
    }
import java.util.List;

@Configuration
@ConditionalOnClass(RestTemplate.class)
class RestTemplateMetricsConfiguration {
    @Autowired(required = false)
    RestTemplateTagConfigurer tagConfigurer;
package io.micrometer.spring.export.prometheus;

import io.micrometer.core.instrument.prometheus.PrometheusMeterRegistry;
import org.springframework.boot.actuate.endpoint.Endpoint;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@ConditionalOnClass(Endpoint.class)
@Configuration
public class PrometheusEndpointConfiguration {
    @Bean
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
dependencies {
    compile 'com.trello:rxlifecycle-components:0.1.0'

    // networking / communication / data storage
    compile 'com.squareup.okhttp:okhttp-urlconnection:2.3.0'
    compile 'com.squareup.okhttp:okhttp:2.3.0'
    compile 'com.squareup.retrofit:retrofit:1.9.0'
    compile 'com.google.code.gson:gson:2.6.2'
    compile 'com.squareup.picasso:picasso:2.5.2'
dependencies {
    debugCompile 'com.jakewharton.scalpel:scalpel:1.1.2'
    debugCompile 'io.palaima.debugdrawer:debugdrawer:0.7.0'
    debugCompile 'io.palaima.debugdrawer:debugdrawer-commons:0.7.0'
    debugCompile 'io.palaima.debugdrawer:debugdrawer-okhttp:0.7.0'
    debugCompile 'io.palaima.debugdrawer:debugdrawer-picasso:0.7.0'
    debugCompile 'io.palaima.debugdrawer:debugdrawer-scalpel:0.7.0'

import com.squareup.leakcanary.LeakCanary;

import java.security.cert.CertificateException;

import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSocketFactory;
import io.palaima.debugdrawer.commons.BuildModule;
import io.palaima.debugdrawer.commons.DeviceModule;
import io.palaima.debugdrawer.commons.SettingsModule;
import io.palaima.debugdrawer.okhttp.OkHttpModule;
import io.palaima.debugdrawer.picasso.PicassoModule;
import io.palaima.debugdrawer.scalpel.ScalpelModule;

protected void initOkHttpClient() {
        }
        super.initOkHttpClient();

        // trust all SSL certs, for TESTING ONLY!
        mOkHttpClient.setHostnameVerifier((hostname, session) -> true);
        mOkHttpClient.setSslSocketFactory(getUnsafeSslSocketFactory());
    }

    @Override
    public void addDebugDrawer(@NonNull Activity activity) {
        new DebugDrawer.Builder(activity).modules(
                new ScalpelModule(activity),
                new OkHttpModule(mOkHttpClient),
                new PicassoModule(mPicasso),
                new DeviceModule(activity),
                new BuildModule(activity),
public void addDebugDrawer(@NonNull Activity activity) {
    private SSLSocketFactory getUnsafeSslSocketFactory() {
        try {
            // Create a trust manager that does not validate certificate chains
            final TrustManager[] trustAllCerts = new TrustManager[] { new TrustEveryoneManager() };
            // Install the all-trusting trust manager
            final SSLContext sslContext = SSLContext.getInstance("SSL");
            sslContext.init(null, trustAllCerts, new java.security.SecureRandom());
private SSLSocketFactory getUnsafeSslSocketFactory() {

    // private stuff
    private static class TrustEveryoneManager implements X509TrustManager {
        @SuppressLint("TrustAllX509TrustManager")
        @Override
        public void checkClientTrusted(java.security.cert.X509Certificate[] chain, String authType)
public void checkServerTrusted(java.security.cert.X509Certificate[] chain, Strin

        @Override
        public java.security.cert.X509Certificate[] getAcceptedIssuers() {
            return null;
        }
    }


import com.crashlytics.android.Crashlytics;
import com.crashlytics.android.answers.Answers;
import com.squareup.okhttp.Cache;
import com.squareup.okhttp.OkHttpClient;
import com.squareup.otto.DeadEvent;
import com.squareup.otto.Subscribe;
import com.squareup.picasso.OkHttpDownloader;
import com.squareup.picasso.Picasso;
import com.tsengvn.typekit.Typekit;

import me.vickychijwani.spectre.model.DatabaseMigration;
import me.vickychijwani.spectre.network.NetworkService;
import me.vickychijwani.spectre.util.NetworkUtils;
import retrofit.RetrofitError;

public class SpectreApplication extends Application {
protected void initOkHttpClient() {
        File cacheDir = createCacheDir(this, IMAGE_CACHE_PATH);
        long size = calculateDiskCacheSize(cacheDir);
        Cache cache = new Cache(cacheDir, size);
        mOkHttpClient = new OkHttpClient().setCache(cache);
        mOkHttpClient.setConnectTimeout(CONNECTION_TIMEOUT, TimeUnit.MILLISECONDS);
        mOkHttpClient.setReadTimeout(CONNECTION_TIMEOUT, TimeUnit.MILLISECONDS);
        mOkHttpClient.setWriteTimeout(CONNECTION_TIMEOUT, TimeUnit.MILLISECONDS);
    }

    @SuppressWarnings("WeakerAccess")
protected void initPicasso() {
            return;
        }
        mPicasso = new Picasso.Builder(this)
                .downloader(new OkHttpDownloader(mOkHttpClient))
                .listener((picasso, uri, exception) -> {
                    Log.e("Picasso", "Failed to load image: " + uri + "\n"
                            + Log.getStackTraceString(exception));
                })
                .build();
    }

    public Picasso getPicasso() {
        return mPicasso;
    }
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.squareup.okhttp.OkHttpClient;
import com.squareup.otto.Bus;
import com.squareup.otto.Subscribe;

import me.vickychijwani.spectre.util.DateTimeUtils;
import me.vickychijwani.spectre.util.NetworkUtils;
import me.vickychijwani.spectre.util.PostUtils;
import retrofit.Callback;
import retrofit.ResponseCallback;
import retrofit.RestAdapter;
import retrofit.RetrofitError;
import retrofit.client.Header;
import retrofit.client.OkClient;
import retrofit.client.Response;
import retrofit.converter.GsonConverter;
import retrofit.mime.TypedFile;
private GhostApiService buildApiService(@NonNull String blogUrl, boolean useApiB
                : RestAdapter.LogLevel.NONE;
        RestAdapter restAdapter = new RestAdapter.Builder()
                .setEndpoint(baseUrl)
                .setClient(new OkClient(mOkHttpClient))
                .setConverter(mGsonConverter)
                .setLogLevel(logLevel)
                .build();
import android.support.annotation.NonNull;
import android.support.annotation.StringDef;

import com.squareup.okhttp.Call;
import com.squareup.okhttp.OkHttpClient;
import com.squareup.okhttp.Request;

import java.io.IOException;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.concurrent.TimeUnit;

import retrofit.RetrofitError;
import retrofit.client.Response;
import rx.Observable;
public static String makeAbsoluteUrl(@NonNull String baseUrl, @NonNull String re
                    // the request may have been redirected, most commonly from HTTP => HTTPS
                    // so pick up the eventual URL of the blog and use that
                    // (even if the user manually entered HTTP - it's certainly a mistake)
                    URL urlObj = response.request().url();
                    String eventualBlogUrl = urlObj.getProtocol() + "://" + urlObj.getHost();
                    if (urlObj.getPort() >= 0) {
                        eventualBlogUrl = eventualBlogUrl + ":" + urlObj.getPort();
public static String makeAbsoluteUrl(@NonNull String baseUrl, @NonNull String re
                });
    }

    public static Observable<com.squareup.okhttp.Response> checkUrl(@NonNull String url) {
        OkHttpClient client = new OkHttpClient();
        client.setConnectTimeout(10, TimeUnit.SECONDS);
        client.setReadTimeout(3, TimeUnit.SECONDS);
        Request request = new Request.Builder()
                .url(url)
                .head()     // make a HEAD request because we only want the response code
                .build();
        return networkCall(client.newCall(request))
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                // FIXME remove this when we move to Retrofit2 / OkHttp3, see https://github.com/square/okhttp/issues/1592
                // prevents a NetworkOnMainThreadException due to an OkHttp2 bug
                .unsubscribeOn(Schedulers.io());
    }

    public static Observable<com.squareup.okhttp.Response> networkCall(@NonNull Call call) {
        return Observable.create(subscriber -> {
            // cancel the request when there are no subscribers
            subscriber.add(Subscriptions.create(call::cancel));
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.Executor;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
public Thread newThread(@NonNull Runnable r) {
        CORE_POOL_SIZE, MAXIMUM_POOL_SIZE, KEEP_ALIVE_SECONDS, TimeUnit.SECONDS,
        POOL_WORK_QUEUE, THREAD_FACTORY);

    static void run(Runnable task) {
        EXECUTOR.execute(task);
    }
}
import java.util.Map;
import java.util.Observable;
import java.util.Observer;

enum DeliveryStyle {
    SAME_THREAD,
private void notify(Error error, DeliveryStyle style, Callback callback) {
            case ASYNC:
                final Report finalReport = report;
                final Error finalError = error;
                // Attempt to send the report in the background
                Async.run(new Runnable() {
                    @Override
                    public void run() {
                        deliver(finalReport, finalError);
                    }
                });
                break;
            case ASYNC_WITH_CACHE:
                errorStore.write(error);
import java.util.Arrays;
import java.util.List;
import java.util.Locale;

import android.content.Context;

    void flush() {
        if(path == null) return;

        Async.run(new Runnable() {
            @Override
            public void run() {
                // Look up all saved error files
                File exceptionDir = new File(path);
                if(!exceptionDir.exists() || !exceptionDir.isDirectory()) return;

                File[] errorFiles = exceptionDir.listFiles();
                if(errorFiles != null && errorFiles.length > 0) {
                    Logger.info(String.format(Locale.US, "Sending %!d(MISSING) saved error(s) to Bugsnag", errorFiles.length));

                    for(File errorFile : errorFiles) {
                        try {
                            Report report = new Report(config.getApiKey(), errorFile);
                            HttpClient.post(config.getEndpoint(), report);

                            Logger.info("Deleting sent error file " + errorFile.getName());
                            if (!errorFile.delete())
                                errorFile.deleteOnExit();
                        } catch (HttpClient.NetworkException e) {
                            Logger.warn("Could not send previously saved error(s) to Bugsnag, will try again later", e);
                        } catch (Exception e) {
                            Logger.warn("Problem sending unsent error from disk", e);
                            if (!errorFile.delete())
                                errorFile.deleteOnExit();
                        }
                    }
                }
            }
        });
    }

    // Write an error to disk, for later sending
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import io.reactivex.Observable;
import io.reactivex.functions.Consumer;
import io.reactivex.schedulers.Schedulers;
import org.apache.commons.lang3.CharEncoding;
import org.apache.commons.lang3.StringUtils;

public static void changeExternalPrivateCgeoDir(final SettingsActivity fromActiv
                final File currentDataDir = new File(getExternalPrivateCgeoDirectory(), GEOCACHE_DATA_DIR_NAME);
                Log.i("Moving geocache data to " + newDataDir.getAbsolutePath());
                final File[] files = currentDataDir.listFiles();
                progress.setMaxProgressAndReset(files.length);
                progress.setProgress(0);
                boolean success = true;
                for (final File geocacheDataDir : files) {
                    success &= FileUtils.moveTo(geocacheDataDir, newDataDir);
                    progress.incrementProgressBy(1);
                }

                Settings.setExternalPrivateCgeoDirectory(newExtDir);
public static long getSize(final File file) {
        if (file.isDirectory()) {
            long result = 0;
            final File[] fileList = file.listFiles();
            for (final File aFileList : fileList) {
                result += getSize(aFileList);
            }
            return result; // return the file size
        }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
package com.bumptech.glide.load.model;

import android.support.v4.util.Pools.Pool;
import com.bumptech.glide.Priority;
import com.bumptech.glide.load.DataSource;
public String toString() {
    private int currentIndex;
    private Priority priority;
    private DataCallback<? super Data> callback;
    private List<Exception> exceptions;

    MultiFetcher(List<DataFetcher<Data>> fetchers, Pool<List<Exception>> exceptionListPool) {
public void loadData(Priority priority, DataCallback<? super Data> callback) {

    @Override
    public void cleanup() {
      exceptionListPool.release(exceptions);
      exceptions = null;
      for (DataFetcher<Data> fetcher : fetchers) {
        fetcher.cleanup();
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.control.Label;
import javafx.scene.layout.ColumnConstraints;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.Priority;
private Region setupPanel(JabRefFrame frame, BasePanel bPanel, boolean compresse
        }

        GridPane gridPane = new GridPane();
        gridPane.setPrefSize(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
        gridPane.setMaxSize(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
        gridPane.getStyleClass().add("editorPane");

        ColumnConstraints columnExpand = new ColumnConstraints();
private Region setupPanel(JabRefFrame frame, BasePanel bPanel, boolean compresse
        }
        gridPane.getStylesheets().add("org/jabref/gui/entryeditor/EntryEditor.css");

        return gridPane;
    }

    private String getPrompt(String field) {
public SimpleEditor(String fieldName) {
        this.viewModel = new SimpleEditorViewModel();

        EditorTextArea textArea = new EditorTextArea();
        textArea.prefHeight(0);
        HBox.setHgrow(textArea, Priority.ALWAYS);
        textArea.textProperty().bindBidirectional(viewModel.textProperty());
        textArea.addToContextMenu(EditorMenus.getDefaultMenu(textArea));
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
     * 
     * <ol>
     * <li>如果对象实现了 {@link Comparable} 接口, 那么直接比较</li>
     * <li>如果对象没有实现 {@link Comparable} 接口, 那么依照扎金花比牌原则(相同大小的牌,比牌方输),谁(t1)比谁(t2),谁(t1)输,谁(t1)排后面</li>
     * </ol>
     * 
     * </li>
     * 
     *     //----------------------------------------------------------
     * 
     *     assertEquals(7, set.size());
     *     assertThat(set, allOf(contains(
     *                     nullPropertyValue, <span style="color:green">//如果对应的属性值是null,排在后面</span>
     *                     userSameHashCode_1_name1, <span style="color:green">//指定属性的属性值越小对应的对象排在前面,反之排在后面</span>
     * 
     *                     <span style="color:green">//如果两个值相等,那么比较对象本身</span>
     *                     <span style="color:green">//如果对象没有实现 Comparable 接口, 那么谁(t1)比谁(t2),谁(t1)输,谁(t1)排后面(扎金花原则)</span>
     *                     userSameHashCode_5_name5,
     *                     userSameHashCode_5_name6,
     *                     userSameHashCode_5_name1,
     *                     userSameHashCode_5_name2,
     * 
     *                     nullObject)<span style="color:green">//空元素排在后面</span>
     *     ));
public int compare(T t1,T t2){
            return -1;
        }

        //--------------------------------------------------------------------------------

        Comparable propertyValue1 = PropertyUtil.getProperty(t1, propertyName);
        Comparable propertyValue2 = PropertyUtil.getProperty(t2, propertyName);
public int compare(T t1,T t2){
            propertyValue1 = ConvertUtil.convert(propertyValue1, propertyValueConvertToClass);
            propertyValue2 = ConvertUtil.convert(propertyValue2, propertyValueConvertToClass);
        }
        return null != comparator ? comparator.compare(propertyValue1, propertyValue2) : compare(t1, t2, propertyValue1, propertyValue2);
    }

    /**
     * 先比较 propertyValue1以及propertyValue2,再比较 t1/t2 .
     * 
private int compare(T t1,T t2,Comparable propertyValue1,Comparable propertyValue
     * <blockquote>
     * <ol>
     * <li>如果对象实现了 {@link Comparable} 接口, 那么直接比较</li>
     * <li>如果对象没有实现 {@link Comparable} 接口, 那么依照<b>扎金花比牌原则</b>(相同大小的牌,比牌方输),谁(t1)比谁(t2),谁(t1)输,谁(t1)排后面</li>
     * </ol>
     * </blockquote>
     *
private int compare(T t1,T t2,Comparable propertyValue1,Comparable propertyValue
     * @param t2
     *            the t 2
     * @return 如果对象实现了 {@link Comparable} 接口, 那么直接强转比较<br>
     *         如果对象没有实现 {@link Comparable} 接口, 那么依照<b>扎金花比牌原则</b>(相同大小的牌,比牌方输),谁(t1)比谁(t2),谁(t1)输,谁(t1)排后面
     * @see <a href="https://github.com/venusdrogon/feilong-core/issues/631">PropertyComparator hash判断两个对象是否相等是否太草率？</a>
     * @since 1.10.3
     */
    @SuppressWarnings({ "rawtypes", "unchecked" })
    private int compareWithSameValue(T t1,T t2){
        //如果对象实现了 Comparable 接口, 那么直接强转比较
        return isInstance(t1, Comparable.class) ? ((Comparable) t1).compareTo(t2) : 1;
    }
}
private SortHelper(){
        throw new AssertionError("No " + getClass().getName() + " instances for you!");
    }

    //---------

    /**
     * 将 <code>propertyNameAndOrder</code>字符串转换成数组.
public void testPropertyComparatorWithTreeSet(){

        //----------------------------------------------------------

        assertEquals(7, set.size());
        assertThat(set, allOf(contains(
                        nullPropertyValue, //如果对应的属性值是null,排在最前面
                        userSameHashCode_1_name1, //指定属性的属性值越小对应的对象排在前面,反之排在后面

                        //如果两个值相等,那么比较对象本身
                        //如果对象没有实现 Comparable 接口, 那么谁(t1)比谁(t2),谁(t1)输,谁(t1)排后面(扎金花原则)
                        userSameHashCode_5_name5,
                        userSameHashCode_5_name6,
                        userSameHashCode_5_name1,
                        userSameHashCode_5_name2,

                        nullObject)//空元素排在后面
        ));
 */
package com.feilong.core.util.sortutiltest;

import static com.feilong.core.util.SortUtil.sortMapByValueDesc;
import static java.util.Collections.emptyMap;
import static org.hamcrest.Matchers.contains;

import java.util.LinkedHashMap;
import java.util.Map;

import org.junit.Test;

 */
public class SortMapByValueDescTest{

    /**
     * Test sort by value desc.
     */
public void testSortByValueDesc(){
    }

    @Test
    public void testSortByValueDescSameValue(){
        Map<String, Integer> map = new LinkedHashMap<>();
        map.put("a", 123);
public void testSortByValueDescSameValue(){
        map.put("g", 123);
        map.put("d", 123);

        assertThat(sortMapByValueDesc(map).keySet(), contains("c", "a", "g", "d", "b", "f"));
    }

    //---------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void bridgeStatusChanged(ThingStatusInfo bridgeStatusInfo) {
            ZWaveSwitchAllCommandClass switchallCommandClass = (ZWaveSwitchAllCommandClass) node
                    .getCommandClass(CommandClass.SWITCH_ALL);
            if (switchallCommandClass != null) {
                config.put(ZWaveBindingConstants.CONFIGURATION_SWITCHALLMODE, switchallCommandClass.getMode());
            }

            // Process NODE_NAMING
            ZWaveNodeNamingCommandClass nodenamingCommandClass = (ZWaveNodeNamingCommandClass) node
                    .getCommandClass(CommandClass.NODE_NAMING);
            if (nodenamingCommandClass != null) {
                config.put(ZWaveBindingConstants.CONFIGURATION_NODELOCATION, nodenamingCommandClass.getLocation());
                config.put(ZWaveBindingConstants.CONFIGURATION_NODENAME, nodenamingCommandClass.getName());
            }

            // Only update if configuration has changed
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import io.janusproject.kernel.Kernel;
import io.janusproject.services.executor.EarlyExitException;
import io.janusproject.services.network.NetworkConfig;
import io.janusproject.util.LoggerCreator;

private Boot() {
			// Do nothing at exit
			if (embedded) {
				setExiter(() -> {
					throw new EarlyExitException();
				});
			}
			// Show the Janus logo?

import com.google.inject.Inject;

import io.janusproject.services.executor.EarlyExitException;
import io.janusproject.services.spawn.SpawnService;

import io.sarl.core.DefaultContextInteractions;
public void killMe() {
		busCapacity.selfEvent(new AsynchronousAgentKillingEvent());
		// Never return from the killMe
		Thread.yield();
		throw new EarlyExitException();
	}

	/**
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;

import io.janusproject.services.executor.EarlyExitException;
import io.janusproject.services.executor.ExecutorService;

import io.sarl.eventdispatching.BehaviorGuardEvaluator;
private void executeBehaviorMethodsInParalellWithSynchroAtTheEnd(Collection<Runn
			this.executor.execute(() -> {
				try {
					runnable.run();
				} catch (EarlyExitException e) {
					// Be silent because this is the "early exit exception".
				} catch (RuntimeException e) {
					// Catch exception for notifying the caller
					runException.set(e);
private void executeBehaviorMethodsInParalellWithSynchroAtTheEnd(Collection<Runn
		}

		// Wait for all Behaviors runnable to complete before continuing
		doneSignal.await();

		// Re-throw the run-time exception
		if (runException.get() != null) {

import io.janusproject.JanusConfig;
import io.janusproject.services.AbstractDependentService;
import io.janusproject.services.executor.EarlyExitException;

/**
 * Platform service that supports the execution resources.
protected void doStop() {
	 */
	@SuppressWarnings("static-method")
	protected Runnable createTask(Runnable runnable) {
		return new JanusRunnable(runnable);
	}

	/** Create a task with the given callable.
protected Runnable createTask(Runnable runnable) {
	 */
	@SuppressWarnings("static-method")
	protected <T> Callable<T> createTask(Callable<T> callable) {
		return new JanusCallable<>(callable);
	}

	@Override
public void execute(Runnable task) {
	@Override
	public int executeMultipleTimesInParallelAndWaitForTermination(Runnable task, int nbExecutions, int runGroupSize) throws InterruptedException {
		assert runGroupSize >= 1;
		if (nbExecutions > 1) {
			final AtomicInteger errors = new AtomicInteger();
			final CountDownLatch doneSignal = new CountDownLatch(nbExecutions);
public int executeMultipleTimesInParallelAndWaitForTermination(Runnable task, in
					this.exec.execute(() -> {
						for (int j = 0; j < runGroupSize; ++j) {
							try {
								task.run();
							} catch (EarlyExitException e) {
								//
							} catch (Throwable e) {
								errors.incrementAndGet();
							} finally {
public int executeMultipleTimesInParallelAndWaitForTermination(Runnable task, in
					this.exec.execute(() -> {
						for (int j = 0; j < rest; ++j) {
							try {
								task.run();
							} catch (EarlyExitException e) {
								//
							} catch (Throwable e) {
								errors.incrementAndGet();
							} finally {
public int executeMultipleTimesInParallelAndWaitForTermination(Runnable task, in
				for (int i = 0; i < nbExecutions; ++i) {
					this.exec.execute(() -> {
						try {
							task.run();
						} catch (EarlyExitException e) {
							//
						} catch (Throwable e) {
							errors.incrementAndGet();
						} finally {
public int executeMultipleTimesInParallelAndWaitForTermination(Runnable task, in
			return nbExecutions - errors.get();
		}
		if (nbExecutions == 1) {
			task.run();
			return 1;
		}
		return 0;
public String toString() {

	}

	/**
	 * A specific Janus runnable that is catching the {@link EarlyExitException}.
	 *
	 * @author $Author: sgalland$
	 * @version $FullVersion$
	 * @mavengroupid $GroupId$
	 * @mavenartifactid $ArtifactId$
	 */
	public static class JanusRunnable implements Runnable {

		private final Runnable runnable;

		/**
		 * @param runnable the wrapped task.
		 */
		public JanusRunnable(Runnable runnable) {
			this.runnable = runnable;
		}

		/** Replies the wrapped task.
		 *
		 * @return the runnable.
		 */
		public Runnable getWrappedRunnable() {
			return this.runnable;
		}

		@Override
		public void run() {
			try {
				this.runnable.run();
			} catch (EarlyExitException ex) {
				//
			}
		}

		@Override
		public String toString() {
			return this.runnable.toString();
		}

		@Override
		public boolean equals(Object obj) {
			return this.runnable.equals(obj);
		}

		@Override
		public int hashCode() {
			return this.runnable.hashCode();
		}

	}

	/**
	 * A specific Janus callable that is catching the {@link EarlyExitException}.
	 *
	 * @param <T> the type of the result.
	 * @author $Author: sgalland$
	 * @version $FullVersion$
	 * @mavengroupid $GroupId$
	 * @mavenartifactid $ArtifactId$
	 */
	public static class JanusCallable<T> implements Callable<T> {

		private final Callable<T> callable;

		/**
		 * @param callable the wrapped task.
		 */
		JanusCallable(Callable<T> callable) {
			this.callable = callable;
		}

		/** Replies the wrapped task.
		 *
		 * @return the callable.
		 */
		public Callable<T> getWrappedCallable() {
			return this.callable;
		}

		@Override
		public T call() throws Exception {
			try {
				return this.callable.call();
			} catch (EarlyExitException e) {
				return null;
			}
		}

		@Override
		public String toString() {
			return this.callable.toString();
		}

		@Override
		public boolean equals(Object obj) {
			return this.callable.equals(obj);
		}

		@Override
		public int hashCode() {
			return this.callable.hashCode();
		}

	}

}
	/**
	 * Construct.
	 */
	public EarlyExitException() {
		//
	}

 */
public interface ExecutorService extends DependentService {

	/**
	 * Replies the JVM executor service used by service.
	 *
Require-Bundle: io.sarl.core;bundle-version="0.6.0",
 org.eclipse.equinox.common;bundle-version="3.8.0"
Export-Package: io.janusproject.tests,
 io.janusproject.tests.bugs,
 io.janusproject.tests.eclipse.buildpath,
 io.janusproject.tests.kernel,
 io.janusproject.tests.kernel.bic,
import org.mockito.internal.verification.Times;

import io.janusproject.kernel.services.jdk.executors.JdkExecutorService;
import io.janusproject.kernel.services.jdk.executors.JdkExecutorService.JanusCallable;
import io.janusproject.kernel.services.jdk.executors.JdkExecutorService.JanusRunnable;
import io.janusproject.tests.testutils.AbstractDependentServiceTest;
import io.janusproject.tests.testutils.AvoidServiceStartForTest;
import io.janusproject.tests.testutils.StartServiceForTest;
package io.janusproject.tests.kernel.services.jdk.executors;

import static org.junit.Assert.assertSame;

import java.util.concurrent.CancellationException;
import java.util.logging.Level;
import java.util.logging.LogRecord;

import io.janusproject.kernel.services.jdk.executors.JdkUncaughtExceptionHandler;
import io.janusproject.services.executor.EarlyExitException;
import io.janusproject.services.logging.LogService;
import io.janusproject.tests.testutils.AbstractJanusTest;
import org.junit.Before;
import org.junit.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.ArgumentMatchers;
import org.mockito.Mockito;

import io.sarl.tests.api.Nullable;

/**
public void uncaughtException_Exception() {
	}

	@Test
	public void uncaughtException_ChuckNorris() {
		Exception e = new EarlyExitException();
		this.handler.uncaughtException(Thread.currentThread(), e);
		Mockito.verifyZeroInteractions(this.logger);
	}

	@Test
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
package org.plantuml.idea.plantuml;

import com.intellij.openapi.diagnostic.Logger;
import com.intellij.openapi.editor.Document;
import com.intellij.openapi.fileEditor.FileDocumentManager;
import com.intellij.openapi.vfs.VirtualFile;
import com.intellij.openapi.vfs.VirtualFileManager;
import com.intellij.util.ui.UIUtil;
import net.sourceforge.plantuml.BlockUmlBuilder;
import net.sourceforge.plantuml.preproc.Defines;
import net.sourceforge.plantuml.preproc.FileWithSuffix;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.plantuml.idea.lang.settings.PlantUmlSettings;

import java.io.File;
import java.io.IOException;
import java.io.StringReader;
import java.util.*;

import static com.intellij.openapi.vfs.CharsetToolkit.UTF8;

public class PlantUmlIncludes {

                }
                return fileLongHashMap;
            }
        } catch (IOException e) {
            logger.error(source + "; baseDir=" + baseDir.getAbsolutePath(), e);
        } finally {
            PlantUmlSettings.getInstance().applyPlantumlOptions();
        }
        return Collections.emptyMap();
    }

    private static void saveModifiedFiles(final Set<File> files) {
        UIUtil.invokeAndWaitIfNeeded(new Runnable() {
            @Override
            public void run() {
                FileDocumentManager fileDocumentManager = FileDocumentManager.getInstance();
                Set<Document> unsavedDocuments = getUnsavedDocuments(files, fileDocumentManager);
                for (Document unsavedDocument : unsavedDocuments) {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void addNicknames(Collection<String> addNicks) {
     * @param time
     */
    public void setGMTime(GameMode gm, long time) {
        gmTimes.put(gm, time);
    }

public GamemodeTimesHandler(Plan plugin, DataCacheHandler h) {
     * @param data UserData matching the Player
     */
    public void handleLogin(GameMode gm, UserData data) {
        data.setLastGamemode(gm);
    }

    /**
public void handleLogin(GameMode gm, UserData data) {
     * @param data UserData matching the Player
     */
    public void handleChangeEvent(GameMode newGM, UserData data) {
        HashMap<GameMode, Long> times = data.getGmTimes();
        handler.getActivityHandler().saveToCache(data);

        long lastSwap = data.getLastGmSwapTime();
        long playTime = data.getPlayTime();
        GameMode oldGM = data.getLastGamemode();
        if (oldGM != null) {
            data.setGMTime(oldGM, times.get(oldGM) + (playTime - lastSwap));
        }
        data.setLastGamemode(newGM);
        data.setLastGmSwapTime(playTime);
    }
public void handleChangeEvent(GameMode newGM, UserData data) {
     * @param data UserData matching the Player
     */
    public void saveToCache(GameMode currentGM, UserData data) {
        HashMap<GameMode, Long> times = data.getGmTimes();
        handler.getActivityHandler().saveToCache(data);

        long lastSwap = data.getLastGmSwapTime();
        long playtime = data.getPlayTime();
        data.setGMTime(currentGM, times.get(currentGM) + (playtime - lastSwap));

        data.setLastGmSwapTime(playtime);
    }

public boolean analyze(AnalysisCacheHandler analysisCache, Database db) {
                sorted.addTotalKills(uData.getPlayerKills().size());
                sorted.addTotalMobKills(uData.getMobKills());
                sorted.addTotalDeaths(uData.getDeaths());
                sorted.getSessiondata().addAll(uData.getSessions());
                sorted.getRegistered().add(uData.getRegistered());
                sorted.addGeoloc(uData.getDemData().getGeoLocation());
                uData.stopAccessing();
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import main.java.com.djrapitops.plan.Settings;
import main.java.com.djrapitops.plan.data.SessionData;
import main.java.com.djrapitops.plan.data.UserData;
public static boolean isActive(long lastPlayed, long playTime, int loginTimes) {
    static String createTableOutOfHashMap(HashMap<String, Integer> commandUse) {
        return SortableCommandUseTableCreator.createSortedCommandUseTable(commandUse);
    }
    
    static String createSortablePlayersTable(Collection<UserData> data) {
        return SortablePlayersTableCreator.createSortablePlayersTable(data);
    }

    public static int getNewPlayers(List<Long> registered, long scale, long now) {        
        int newPlayers = 0;
        if (!registered.isEmpty()) {
           newPlayers = registered.stream()
                .filter((reg) -> (reg != null))
                .filter((reg) -> (reg > now - scale))
                .map((_item) -> 1).reduce(newPlayers, Integer::sum);
        }
        // Filters out register dates before scale
        
        return newPlayers;
    }
    
    public static List<Long> transformSessionDataToLengths(Collection<SessionData> data) {
        List<SessionData> d = new ArrayList<>(data);
        List<Long> list = new ArrayList<>();
        d.stream().forEach((sData) -> {
            list.add(sData.getSessionEnd()-sData.getSessionStart());
        });
        return list;
    }
    
    public static long average(Collection<Long> list) {
        if (list.isEmpty()) {
            return 0;
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import com.google.common.base.Preconditions;

import me.lucko.luckperms.common.utils.ArgumentChecker;

@UtilityClass
public class ApiUtils {

    public static String checkUsername(String s) {
        Preconditions.checkArgument(
                !ArgumentChecker.checkUsername(s),
                "Invalid username entry '" + s + "'. Usernames must be less than 16 chars and only contain 'a-z A-Z 1-9 _'."
        );
        return s;
    }

    public static String checkName(String s) {
        Preconditions.checkArgument(
                !ArgumentChecker.checkName(s),
                "Invalid name entry '" + s + "'. Names must be less than 37 chars and only contain 'a-z A-Z 1-9'."
        );
        return s.toLowerCase();
    }

    public static long checkTime(long l) {
        Preconditions.checkArgument(!ArgumentChecker.checkTime(l), "Unix time '" + l + "' is invalid, as it has already passed.");
        return l;
    }

public static CommandResult handleException(CommandException e, Sender sender, S
                return CommandResult.INVALID_ARGS;
            }

            if (e instanceof ArgumentUtils.InvalidServerException) {
                Message.SERVER_INVALID_ENTRY.send(sender);
                return CommandResult.INVALID_ARGS;
            }

private static CommandResult handleException(CommandException e, Sender sender,
                return CommandResult.INVALID_ARGS;
            }

            if (e instanceof ArgumentUtils.InvalidServerException) {
                Message.SERVER_INVALID_ENTRY.send(sender);
                return CommandResult.INVALID_ARGS;
            }

import me.lucko.luckperms.common.commands.CommandResult;
import me.lucko.luckperms.common.commands.abstraction.SingleCommand;
import me.lucko.luckperms.common.commands.sender.Sender;
import me.lucko.luckperms.common.constants.Message;
import me.lucko.luckperms.common.constants.Permission;
import me.lucko.luckperms.common.data.LogEntry;
import me.lucko.luckperms.common.plugin.LuckPermsPlugin;
import me.lucko.luckperms.common.utils.ArgumentChecker;
import me.lucko.luckperms.common.utils.Predicates;

import java.util.List;
public CommandResult execute(LuckPermsPlugin plugin, Sender sender, List<String>
        }

        String groupName = args.get(0).toLowerCase();
        if (ArgumentChecker.checkName(groupName)) {
            Message.GROUP_INVALID_ENTRY.send(sender);
            return CommandResult.INVALID_ARGS;
        }
import me.lucko.luckperms.common.commands.CommandResult;
import me.lucko.luckperms.common.commands.abstraction.SubCommand;
import me.lucko.luckperms.common.commands.sender.Sender;
import me.lucko.luckperms.common.constants.Message;
import me.lucko.luckperms.common.constants.Permission;
import me.lucko.luckperms.common.core.model.Group;
import me.lucko.luckperms.common.data.LogEntry;
import me.lucko.luckperms.common.plugin.LuckPermsPlugin;
import me.lucko.luckperms.common.utils.ArgumentChecker;
import me.lucko.luckperms.common.utils.Predicates;

import java.util.List;
public GroupClone() {
    @Override
    public CommandResult execute(LuckPermsPlugin plugin, Sender sender, Group group, List<String> args, String label) throws CommandException {
        String newGroupName = args.get(0).toLowerCase();
        if (ArgumentChecker.checkName(newGroupName)) {
            Message.GROUP_INVALID_ENTRY.send(sender);
            return CommandResult.INVALID_ARGS;
        }
import me.lucko.luckperms.common.commands.CommandResult;
import me.lucko.luckperms.common.commands.abstraction.SubCommand;
import me.lucko.luckperms.common.commands.sender.Sender;
import me.lucko.luckperms.common.constants.Message;
import me.lucko.luckperms.common.constants.Permission;
import me.lucko.luckperms.common.core.model.Group;
import me.lucko.luckperms.common.data.LogEntry;
import me.lucko.luckperms.common.plugin.LuckPermsPlugin;
import me.lucko.luckperms.common.utils.ArgumentChecker;
import me.lucko.luckperms.common.utils.Predicates;

import java.util.List;
public GroupRename() {
    @Override
    public CommandResult execute(LuckPermsPlugin plugin, Sender sender, Group group, List<String> args, String label) throws CommandException {
        String newGroupName = args.get(0).toLowerCase();
        if (ArgumentChecker.checkName(newGroupName)) {
            Message.GROUP_INVALID_ENTRY.send(sender);
            return CommandResult.INVALID_ARGS;
        }
import me.lucko.luckperms.common.commands.CommandResult;
import me.lucko.luckperms.common.commands.abstraction.SubCommand;
import me.lucko.luckperms.common.commands.sender.Sender;
import me.lucko.luckperms.common.constants.Message;
import me.lucko.luckperms.common.constants.Permission;
import me.lucko.luckperms.common.data.Log;
import me.lucko.luckperms.common.plugin.LuckPermsPlugin;
import me.lucko.luckperms.common.utils.ArgumentChecker;
import me.lucko.luckperms.common.utils.DateUtil;
import me.lucko.luckperms.common.utils.Predicates;

public CommandResult execute(LuckPermsPlugin plugin, Sender sender, Log log, Lis
            }
        }

        if (ArgumentChecker.checkName(group)) {
            Message.GROUP_INVALID_ENTRY.send(sender);
            return CommandResult.INVALID_ARGS;
        }
import me.lucko.luckperms.common.commands.CommandResult;
import me.lucko.luckperms.common.commands.abstraction.SubCommand;
import me.lucko.luckperms.common.commands.sender.Sender;
import me.lucko.luckperms.common.constants.Message;
import me.lucko.luckperms.common.constants.Permission;
import me.lucko.luckperms.common.data.Log;
import me.lucko.luckperms.common.plugin.LuckPermsPlugin;
import me.lucko.luckperms.common.utils.ArgumentChecker;
import me.lucko.luckperms.common.utils.DateUtil;
import me.lucko.luckperms.common.utils.Predicates;

public CommandResult execute(LuckPermsPlugin plugin, Sender sender, Log log, Lis
            }
        }

        if (ArgumentChecker.checkName(track)) {
            Message.TRACK_INVALID_ENTRY.send(sender);
            return CommandResult.INVALID_ARGS;
        }
import me.lucko.luckperms.common.commands.CommandResult;
import me.lucko.luckperms.common.commands.abstraction.SingleCommand;
import me.lucko.luckperms.common.commands.sender.Sender;
import me.lucko.luckperms.common.constants.Message;
import me.lucko.luckperms.common.constants.Permission;
import me.lucko.luckperms.common.data.LogEntry;
import me.lucko.luckperms.common.plugin.LuckPermsPlugin;
import me.lucko.luckperms.common.utils.ArgumentChecker;
import me.lucko.luckperms.common.utils.Predicates;

import java.util.List;
public CommandResult execute(LuckPermsPlugin plugin, Sender sender, List<String>
        }

        String trackName = args.get(0).toLowerCase();
        if (ArgumentChecker.checkName(trackName)) {
            Message.TRACK_INVALID_ENTRY.send(sender);
            return CommandResult.INVALID_ARGS;
        }
import me.lucko.luckperms.common.commands.abstraction.SubCommand;
import me.lucko.luckperms.common.commands.sender.Sender;
import me.lucko.luckperms.common.commands.utils.Util;
import me.lucko.luckperms.common.constants.Message;
import me.lucko.luckperms.common.constants.Permission;
import me.lucko.luckperms.common.core.model.Group;
import me.lucko.luckperms.common.core.model.Track;
import me.lucko.luckperms.common.data.LogEntry;
import me.lucko.luckperms.common.plugin.LuckPermsPlugin;
import me.lucko.luckperms.common.utils.ArgumentChecker;
import me.lucko.luckperms.common.utils.Predicates;
import me.lucko.luckperms.exceptions.ObjectAlreadyHasException;

public TrackAppend() {
    @Override
    public CommandResult execute(LuckPermsPlugin plugin, Sender sender, Track track, List<String> args, String label) throws CommandException {
        String groupName = args.get(0).toLowerCase();

        if (ArgumentChecker.checkName(groupName)) {
            sendDetailedUsage(sender, label);
            return CommandResult.INVALID_ARGS;
        }
import me.lucko.luckperms.common.commands.CommandResult;
import me.lucko.luckperms.common.commands.abstraction.SubCommand;
import me.lucko.luckperms.common.commands.sender.Sender;
import me.lucko.luckperms.common.constants.Message;
import me.lucko.luckperms.common.constants.Permission;
import me.lucko.luckperms.common.core.model.Track;
import me.lucko.luckperms.common.data.LogEntry;
import me.lucko.luckperms.common.plugin.LuckPermsPlugin;
import me.lucko.luckperms.common.utils.ArgumentChecker;
import me.lucko.luckperms.common.utils.Predicates;

import java.util.List;
public TrackClone() {
    @Override
    public CommandResult execute(LuckPermsPlugin plugin, Sender sender, Track track, List<String> args, String label) throws CommandException {
        String newTrackName = args.get(0).toLowerCase();
        if (ArgumentChecker.checkName(newTrackName)) {
            Message.TRACK_INVALID_ENTRY.send(sender);
            return CommandResult.INVALID_ARGS;
        }
import me.lucko.luckperms.common.commands.abstraction.SubCommand;
import me.lucko.luckperms.common.commands.sender.Sender;
import me.lucko.luckperms.common.commands.utils.Util;
import me.lucko.luckperms.common.constants.Message;
import me.lucko.luckperms.common.constants.Permission;
import me.lucko.luckperms.common.core.model.Group;
import me.lucko.luckperms.common.core.model.Track;
import me.lucko.luckperms.common.data.LogEntry;
import me.lucko.luckperms.common.plugin.LuckPermsPlugin;
import me.lucko.luckperms.common.utils.ArgumentChecker;
import me.lucko.luckperms.common.utils.Predicates;
import me.lucko.luckperms.exceptions.ObjectAlreadyHasException;

public TrackInsert() {
    @Override
    public CommandResult execute(LuckPermsPlugin plugin, Sender sender, Track track, List<String> args, String label) throws CommandException {
        String groupName = args.get(0).toLowerCase();

        if (ArgumentChecker.checkName(groupName)) {
            sendDetailedUsage(sender, label);
            return CommandResult.INVALID_ARGS;
        }
import me.lucko.luckperms.common.commands.abstraction.SubCommand;
import me.lucko.luckperms.common.commands.sender.Sender;
import me.lucko.luckperms.common.commands.utils.Util;
import me.lucko.luckperms.common.constants.Message;
import me.lucko.luckperms.common.constants.Permission;
import me.lucko.luckperms.common.core.model.Track;
import me.lucko.luckperms.common.data.LogEntry;
import me.lucko.luckperms.common.plugin.LuckPermsPlugin;
import me.lucko.luckperms.common.utils.ArgumentChecker;
import me.lucko.luckperms.common.utils.Predicates;
import me.lucko.luckperms.exceptions.ObjectLacksException;

public TrackRemove() {
    @Override
    public CommandResult execute(LuckPermsPlugin plugin, Sender sender, Track track, List<String> args, String label) throws CommandException {
        String groupName = args.get(0).toLowerCase();

        if (ArgumentChecker.checkName(groupName)) {
            sendDetailedUsage(sender, label);
            return CommandResult.INVALID_ARGS;
        }
import me.lucko.luckperms.common.commands.CommandResult;
import me.lucko.luckperms.common.commands.abstraction.SubCommand;
import me.lucko.luckperms.common.commands.sender.Sender;
import me.lucko.luckperms.common.constants.Message;
import me.lucko.luckperms.common.constants.Permission;
import me.lucko.luckperms.common.core.model.Track;
import me.lucko.luckperms.common.data.LogEntry;
import me.lucko.luckperms.common.plugin.LuckPermsPlugin;
import me.lucko.luckperms.common.utils.ArgumentChecker;
import me.lucko.luckperms.common.utils.Predicates;

import java.util.List;
public TrackRename() {
    @Override
    public CommandResult execute(LuckPermsPlugin plugin, Sender sender, Track track, List<String> args, String label) throws CommandException {
        String newTrackName = args.get(0).toLowerCase();
        if (ArgumentChecker.checkName(newTrackName)) {
            Message.TRACK_INVALID_ENTRY.send(sender);
            return CommandResult.INVALID_ARGS;
        }
import me.lucko.luckperms.common.commands.sender.Sender;
import me.lucko.luckperms.common.commands.utils.ArgumentUtils;
import me.lucko.luckperms.common.commands.utils.Util;
import me.lucko.luckperms.common.constants.Message;
import me.lucko.luckperms.common.constants.Permission;
import me.lucko.luckperms.common.core.NodeFactory;
import me.lucko.luckperms.common.core.model.User;
import me.lucko.luckperms.common.data.LogEntry;
import me.lucko.luckperms.common.plugin.LuckPermsPlugin;
import me.lucko.luckperms.common.utils.ArgumentChecker;
import me.lucko.luckperms.common.utils.Predicates;
import me.lucko.luckperms.exceptions.ObjectLacksException;

public UserDemote() {
    @Override
    public CommandResult execute(LuckPermsPlugin plugin, Sender sender, User user, List<String> args, String label) throws CommandException {
        final String trackName = args.get(0).toLowerCase();
        if (ArgumentChecker.checkName(trackName)) {
            Message.TRACK_INVALID_ENTRY.send(sender);
            return CommandResult.INVALID_ARGS;
        }
import me.lucko.luckperms.common.commands.sender.Sender;
import me.lucko.luckperms.common.commands.utils.ArgumentUtils;
import me.lucko.luckperms.common.commands.utils.Util;
import me.lucko.luckperms.common.constants.Message;
import me.lucko.luckperms.common.constants.Permission;
import me.lucko.luckperms.common.core.NodeFactory;
import me.lucko.luckperms.common.core.model.User;
import me.lucko.luckperms.common.data.LogEntry;
import me.lucko.luckperms.common.plugin.LuckPermsPlugin;
import me.lucko.luckperms.common.utils.ArgumentChecker;
import me.lucko.luckperms.common.utils.Predicates;
import me.lucko.luckperms.exceptions.ObjectLacksException;

public UserPromote() {
    @Override
    public CommandResult execute(LuckPermsPlugin plugin, Sender sender, User user, List<String> args, String label) throws CommandException {
        final String trackName = args.get(0).toLowerCase();
        if (ArgumentChecker.checkName(trackName)) {
            Message.TRACK_INVALID_ENTRY.send(sender);
            return CommandResult.INVALID_ARGS;
        }
import lombok.AllArgsConstructor;
import lombok.Getter;

import com.google.common.base.Splitter;

import me.lucko.luckperms.api.context.ImmutableContextSet;
import me.lucko.luckperms.api.context.MutableContextSet;
import me.lucko.luckperms.common.commands.CommandException;
import me.lucko.luckperms.common.utils.ArgumentChecker;
import me.lucko.luckperms.common.utils.DateUtil;

import java.util.ArrayList;
 * Utility class to help process arguments, and throw checked exceptions if the arguments are invalid.
 */
public class ArgumentUtils {
    private static final Splitter CONTEXT_SPLITTER = Splitter.on('=').limit(2).omitEmptyStrings();
    public static final Function<String, String> WRAPPER = s -> s.contains(" ") ? "\"" + s + "\"" : s;


public static String handleNode(int index, List<String> args) throws ArgumentExc

    public static String handleName(int index, List<String> args) throws ArgumentException {
        String groupName = args.get(index).toLowerCase();
        if (ArgumentChecker.checkName(groupName)) {
            throw new DetailedUsageException();
        }
        return groupName;
    }

    public static String handleNameWithSpace(int index, List<String> args) throws ArgumentException {
        String groupName = args.get(index).toLowerCase();
        if (ArgumentChecker.checkNameWithSpace(groupName)) {
            throw new DetailedUsageException();
        }
        return groupName;
public static String handleWorld(int index, List<String> args) {
        return args.size() > index ? args.get(index).toLowerCase() : null;
    }

    public static MutableContextSet handleContext(int fromIndex, List<String> args) {
        if (args.size() > fromIndex) {
            MutableContextSet set = MutableContextSet.create();

public static MutableContextSet handleContext(int fromIndex, List<String> args)
                // one of the first two values, and doesn't have a key
                if (i <= 1 && !pair.contains("=")) {
                    String key = i == 0 ? "server" : "world";
                    set.add(key, pair);
                    continue;
                }
public static MutableContextSet handleContext(int fromIndex, List<String> args)
                    continue;
                }

                set.add(key, value);
            }

public static ImmutableContextSet handleContexts(int fromIndex, List<String> arg
    public static class UseInheritException extends ArgumentException {
    }

    public static class InvalidServerException extends ArgumentException {
    }

    public static class PastDateException extends ArgumentException {
    USER_INVALID_ENTRY("&d{0}&c is not a valid username/uuid.", true),
    GROUP_INVALID_ENTRY("Group names can only contain alphanumeric characters.", true),
    TRACK_INVALID_ENTRY("Track names can only contain alphanumeric characters.", true),
    SERVER_INVALID_ENTRY("Server names can only contain alphanumeric characters.", true),
    USE_INHERIT_COMMAND("Use the 'parent add' and 'parent remove' commands instead of specifying the node.", true),


/*
 * This file is part of LuckPerms, licensed under the MIT License.
 *
 *  Copyright (c) lucko (Luck) <luck@lucko.me>
 *  Copyright (c) contributors
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

package me.lucko.luckperms.common.utils;

import lombok.experimental.UtilityClass;

import me.lucko.luckperms.common.constants.Patterns;

/**
 * Utility for checking arguments for consistency
 */
@UtilityClass
public class ArgumentChecker {

    public static boolean checkUsername(String s) {
        return (s.length() > 16 || Patterns.NON_USERNAME.matcher(s).find());
    }

    public static boolean checkName(String s) {
        return (s.length() > 36 || Patterns.NON_ALPHA_NUMERIC.matcher(s).find());
    }

    public static boolean checkNameWithSpace(String s) {
        return (s.length() > 36 || Patterns.NON_ALPHA_NUMERIC_SPACE.matcher(s).find());
    }

    public static boolean checkTime(long l) {
        return DateUtil.shouldExpire(l);
    }

}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.djrapitops</groupId>
  <artifactId>Plan</artifactId>
  <version>3.5.2</version>
  <build>
    <sourceDirectory>${basedir}/src</sourceDirectory>
    <defaultGoal>clean package install</defaultGoal>
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.djrapitops</groupId>
    <artifactId>Plan</artifactId>
    <version>3.5.2</version>
    <packaging>jar</packaging>
    <repositories>
        <repository>
package main.java.com.djrapitops.plan.ui.html.graphs;

import com.djrapitops.plugin.api.TimeAmount;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
public static String scatterGraph(List<Point> points, boolean reduceGapTriangles
        StringBuilder arrayBuilder = new StringBuilder();
        arrayBuilder.append("[");

        if (reduceGapTriangles) {
            long lastDate = MiscUtils.getTime();
            double lastY = -1;
            Set<Point> toAdd = new HashSet<>();
            Iterator<Point> iterator = points.iterator();
            while (iterator.hasNext()) {
                Point point = iterator.next();
                double y = point.getY();
                long date = (long) point.getX();
                if (lastY > 0 || y > 0) {
                    if (lastDate < date - TimeAmount.MINUTE.ms() * 10L) {
                        toAdd.add(new Point(lastDate + 1, 0));
                        toAdd.add(new Point(date - 1, 0));
                    }
                }
                lastDate = date;
                lastY = y;
            }
            points.addAll(toAdd);
            Collections.sort(points, new PointComparator());
        }

//        points = DouglasPeckerAlgorithm.reducePoints(points, -1);
        int size = points.size();
        for (int i = 0; i < size; i++) {
            Point point = points.get(i);
import main.java.com.djrapitops.plan.data.TPS;
import main.java.com.djrapitops.plan.utilities.Benchmark;
import main.java.com.djrapitops.plan.utilities.MiscUtils;
import main.java.com.djrapitops.plan.utilities.analysis.DouglasPeckerAlgorithm;
import main.java.com.djrapitops.plan.utilities.analysis.Point;
import main.java.com.djrapitops.plan.utilities.comparators.TPSComparator;

    public static String buildScatterDataStringTPS(List<TPS> tpsData, long scale) {
        long now = MiscUtils.getTime();
        List<Point> points = tpsData.stream().filter(tps -> tps.getDate() >= now - scale).map(tps -> new Point(tps.getDate(), tps.getTps())).collect(Collectors.toList());
        return ScatterGraphCreator.scatterGraph(points, false);
    }
    
    public static List<TPS> filterTPS(List<TPS> tpsData, long nowMinusScale) {
import java.sql.SQLException;
import java.util.Base64;
import java.util.UUID;
import main.java.com.djrapitops.plan.Log;
import main.java.com.djrapitops.plan.Phrase;
import main.java.com.djrapitops.plan.Plan;

    private final int PORT;
    private boolean enabled = false;
    private ServerSocket server;

    private final Plan plugin;
public void initServer() {
        Log.info(Phrase.WEBSERVER_INIT + "");
        try {
            InetAddress ip = InetAddress.getByName(Settings.WEBSERVER_IP.toString());
            server = new ServerSocket(PORT, 1, ip);
            
            plugin.getRunnableFactory().createNew(new AbsRunnable("WebServerTask") {
                @Override
                public void run() {
                    while (!shutdown) {
                        Socket socket = null;
                        InputStream input = null;
                        OutputStream output = null;
                        Request request = null;
                        try {
                            socket = server.accept();
                            Log.debug("New Socket Connection: " + socket.getInetAddress());
                            input = socket.getInputStream();
                            output = socket.getOutputStream();
private Response getResponse(Request request, OutputStream output) {
                return new RedirectResponse(output, "https://puu.sh/tK0KL/6aa2ba141b.ico");
            }

            if (!request.hasAuthorization()) {
                return new PromptAuthorizationResponse(output);
            }
            try {
                if (!isAuthorized(request)) {
                    ForbiddenResponse response403 = new ForbiddenResponse(output);
                    String content = "<h1>403 Forbidden - Access Denied</h1>"
                            + "<p>Unauthorized User.<br>"
                            + "Make sure your user has the correct access level.<br>"
                            + "You can use /plan web check <username> to check the permission level.</p>";
                    response403.setContent(content);
                    return response403;
                }
            } catch (IllegalArgumentException e) {
                return new PromptAuthorizationResponse(output);
            }
            String req = request.getRequest();
            String target = request.getTarget();
            if (!req.equals("GET") || target.equals("/")) {
name: Plan
author: Rsl1122
main: main.java.com.djrapitops.plan.Plan
version: 3.5.2

softdepend:
- OnTime
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public OccurrenceModel() {
     *
     * @see ValidationRule
     */
    @Column(name = "prefix")
    private String prefix;

    public int getOccurrenceId() {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.feilong.core.net.ParamUtil;
import com.feilong.core.util.MapUtil;
import com.feilong.servlet.http.entity.RequestIdentity;
public RequestLogBuilder(HttpServletRequest request, RequestLogSwitch requestLog

        // _errorInfos
        if (opRequestLogSwitch.getShowErrors()){
            MapUtil.putIfValueNotNullOrEmpty(map, "errorInfos", getErrorMap());
        }
        // _forwardInfos
        if (opRequestLogSwitch.getShowForwardInfos()){
            MapUtil.putIfValueNotNullOrEmpty(map, "forwardInfos", getForwardMap());
        }
        // _includeInfos
        if (opRequestLogSwitch.getShowIncludeInfos()){
            MapUtil.putIfValueNotNullOrEmpty(map, "includeInfos", getIncludeMap());
        }
        return map;
    }
private String getSessionId(){
        }
    }

    //*******************************************************************************

    /**
     * 获得 forward map.
     *
     * @return the forward map
     */
    private Map<String, String> getForwardMap(){
        String[] array = { FORWARD_CONTEXT_PATH, FORWARD_REQUEST_URI, FORWARD_SERVLET_PATH, FORWARD_PATH_INFO, FORWARD_QUERY_STRING };
        return getAttributeMapIfValueNotNull(array);
    }

    /**
     * 获得 include map.
     *
     * @return the include map
     */
    private Map<String, String> getIncludeMap(){
        String[] array = { INCLUDE_CONTEXT_PATH, INCLUDE_PATH_INFO, INCLUDE_QUERY_STRING, INCLUDE_REQUEST_URI, INCLUDE_SERVLET_PATH };
        return getAttributeMapIfValueNotNull(array);
    }

    /**
private String getSessionId(){
     * @return 如果request 有 {@link RequestAttributes#ERROR_STATUS_CODE}属性,则返回error 相关属性 封装到map,<br>
     *         如果 request没有 {@link RequestAttributes#ERROR_STATUS_CODE}属性,返回null
     */
    private Map<String, String> getErrorMap(){
        String[] array = { ERROR_STATUS_CODE, ERROR_REQUEST_URI, ERROR_EXCEPTION, ERROR_EXCEPTION_TYPE, ERROR_MESSAGE, ERROR_SERVLET_NAME };
        return getAttributeMapIfValueNotNull(array);
    }

    /**
     * 将指定的attributeName当作key,request找到属性值,设置到map中(当且仅当 <code>null != map && null != value </code>才将key/value put到map中).
     *
private String getSessionId(){
     * @return the attribute map if value not null
     * @since 1.7.3
     */
    private Map<String, String> getAttributeMapIfValueNotNull(String...attributeNames){
        Map<String, String> map = newLinkedHashMap(attributeNames.length);
        for (String attributeName : attributeNames){
            MapUtil.putIfValueNotNull(map, attributeName, RequestUtil.<String> getAttribute(request, attributeName));
        }
        return map;
    }

    /**
     * 获得 about url map.
     * 
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
protected void addAdditionalParam(boolean required, String key,

    Entry<String, Map<String, Object>> queryAndParam = parameterFactory
        .createQueryAndParam();

    String uriKey = join(connectionConfig.getHostName(), getSubsonicPath(),
        queryAndParam.getKey());

    WeakReference<Map<String, Object>> value = new WeakReference<Map<String, Object>>(
        new HashMap<>(queryAndParam.getValue()));
    return new Entry<String, Map<String, Object>>() {

      @Override
public String getKey() {

      @Override
      public Map<String, Object> getValue() {
        return value.get();
      }

      @Override
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void addDynamicRTPPayloadType(
        synchronized (dynamicRTPPayloadTypes)
        {
            dynamicRTPPayloadTypes.put(Byte.valueOf(rtpPayloadType), format);

            String encoding = format.getEncoding();

            if (Constants.RED.equals(encoding))
            {
                REDTransformEngine redTransformEngine = getRedTransformEngine();
                if (redTransformEngine != null)
                {
                    redTransformEngine.setIncomingPT(rtpPayloadType);
                    // setting outgoingPT enables RED encapsulation for outgoing
                    // packets.
                    redTransformEngine.setOutgoingPT(rtpPayloadType);
                }
            }
            else if (Constants.ULPFEC.equals(encoding))
            {
                FECTransformEngine fecTransformEngine = getFecTransformEngine();
                if (fecTransformEngine != null)
                {
                    fecTransformEngine.setIncomingPT(rtpPayloadType);
                    // TODO ULPFEC without RED doesn't make sense.
                    fecTransformEngine.setOutgoingPT(rtpPayloadType);
                }
            }

            if (rtpManager != null)
            {
                // We do not add RED and FEC payload types to the RTP Manager
                // because RED and FEC packets will be handled before they get
                // to the RTP Manager.
                rtpManager.addFormat(
                        mediaFormatImpl.getFormat(),
                        rtpPayloadType);
            }
        }

        this.onDynamicPayloadTypesChanged();
public void clearDynamicRTPPayloadTypes()
        synchronized (dynamicRTPPayloadTypes)
        {
            dynamicRTPPayloadTypes.clear();

            REDTransformEngine redTransformEngine = getRedTransformEngine();
            if (redTransformEngine != null)
            {
                redTransformEngine.setIncomingPT((byte) -1);
                redTransformEngine.setOutgoingPT((byte) -1);
            }

            FECTransformEngine fecTransformEngine = getFecTransformEngine();
            if (fecTransformEngine != null)
            {
                fecTransformEngine.setIncomingPT((byte) -1);
                fecTransformEngine.setOutgoingPT((byte) -1);
            }
        }

        this.onDynamicPayloadTypesChanged();
public MediaDirection getDirection()
     */
    public byte getDynamicRTPPayloadType(String encoding)
    {
        synchronized (dynamicRTPPayloadTypes)
        {
            for (Map.Entry<Byte, MediaFormat> dynamicRTPPayloadType
                    : dynamicRTPPayloadTypes.entrySet())
            {
                if (dynamicRTPPayloadType.getValue().getEncoding().equals(
                        encoding))
                {
                    return dynamicRTPPayloadType.getKey().byteValue();
                }
            }
            return -1;
        }
    }

    /**
private void maybeUpdateDynamicRTPPayloadTypes(StreamRTPManager rtpManager)
        if (!(format instanceof ParameterizedVideoFormat))
            return;

        synchronized (dynamicRTPPayloadTypes)
        {
            for (Map.Entry<Byte,MediaFormat> dynamicRTPPayloadType
                    : dynamicRTPPayloadTypes.entrySet())
            {
                MediaFormat dynamicMediaFormat
                    = dynamicRTPPayloadType.getValue();

                if (!(dynamicMediaFormat instanceof MediaFormatImpl))
                    continue;

                @SuppressWarnings("unchecked")
                MediaFormatImpl<? extends Format> dynamicMediaFormatImpl
                    = (MediaFormatImpl<? extends Format>) dynamicMediaFormat;
                Format dynamicFormat = dynamicMediaFormatImpl.getFormat();

                if (format.matches(dynamicFormat)
                        && dynamicFormat.matches(format))
                {
                    rtpManager.addFormat(
                            format,
                            dynamicRTPPayloadType.getKey());
                }
            }
        }
    }

    /**
     * Prints all statistics available for {@link #rtpManager}.
protected void recreateSendStreams()
     */
    protected void registerCustomCodecFormats(StreamRTPManager rtpManager)
    {
        synchronized (dynamicRTPPayloadTypes)
        {
            for (Map.Entry<Byte, MediaFormat> dynamicRTPPayloadType
                    : dynamicRTPPayloadTypes.entrySet())
            {
                @SuppressWarnings("unchecked")
                MediaFormatImpl<? extends Format> mediaFormatImpl
                    = (MediaFormatImpl<? extends Format>)
                        dynamicRTPPayloadType.getValue();
                Format format = mediaFormatImpl.getFormat();

                rtpManager.addFormat(format, dynamicRTPPayloadType.getKey());
            }
        }

        maybeUpdateDynamicRTPPayloadTypes(rtpManager);
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void visitPhpClass(PhpClass clazz) {
                    }

                    /* store property and it's types */
                    final Set<String> getterTypes = getterMethod.getType().filterUnknown().getTypes();
                    final Parameter[] setterParams = setterMethod.getParameters();
                    if (setterParams.length > 0) {
                        getterTypes.addAll(setterParams[0].getType().filterUnknown().getTypes());

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import java.util.HashMap;
import java.util.Map;

public class ActErrorPageRender extends ErrorPageRenderer {

    public static final String ARG_ERROR = "_error";
protected String renderTemplate(ErrorResult error, H.Format format) {
        }
        Integer errorCode = error.errorCode();
        int statusCode = error.statusCode();
        Template t = getTemplate(statusCode, context);
        if (null == t) {
            String errorMsg = error.getMessage();
protected String renderTemplate(ErrorResult error, H.Format format) {
            H.Format accept = context.accept();
            if (H.Format.JSON == accept) {
                return jsonContent(error, errorCode, errorMsg);
            } else if (H.Format.HTML == accept) {
                String header = S.concat("HTTP/1.1 ", Integer.toString(statusCode), " ", errorMsg);
                return S.concat("<!DOCTYPE html><html><head><meta charset='utf-8'><title>"
                        , header
protected String renderTemplate(ErrorResult error, H.Format format) {
                }
                sb.append("<message>").append(errorMsg).append("</message></error>");
                return sb.toString();
            } else if (H.Format.CSV == accept) {
                if (null == errorCode) {
                    return S.concat("message\n", errorMsg);
                } else {
protected String renderTemplate(ErrorResult error, H.Format format) {
                return "";
            }
        }
        if (H.Format.HTML == context.accept()) {
            String header = S.concat("HTTP/1.1 ", Integer.toString(statusCode), " ", MvcConfig.errorMessage(error.status()));

            context.renderArg("header", header);
protected String renderTemplate(ErrorResult error, H.Format format) {
        return t.render(context);
    }

    private String jsonContent(ErrorResult error, Integer errorCode, String errorMsg) {
        Object payload = error.attachment();
        if (null != payload) {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public void store(StoreContext ctx, Attributes attrs) throws IOException {
                        openOutputStream(ctx, Location.ObjectType.DICOM_FILE), UID.ExplicitVRLittleEndian)) {
                    dos.writeDataset(attrs.createFileMetaInformation(ctx.getStoreTranferSyntax()), attrs);
                }
                checkCharacterSet(ctx);
                storeMetadata(ctx);
                coerceAttributes(ctx);
public void store(StoreContext ctx, Attributes attrs) throws IOException {
        }
    }

    @Override
    public Attributes copyInstances(RejectionNote rj, StoreSession session, Collection<InstanceLocations> instances, Map<String, String> uidMap)
            throws Exception {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
